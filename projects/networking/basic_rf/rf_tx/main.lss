
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800200  00004e50  00004ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d4  00800374  00800374  00005058  2**0
                  ALLOC
  3 .stab         00012054  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008e1e  00000000  00000000  000170ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0001feca  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 02 	jmp	0x412	; 0x412 <__ctors_end>
       4:	0c 94 4a 20 	jmp	0x4094	; 0x4094 <__vector_1>
       8:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__vector_2>
       c:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__vector_3>
      10:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      14:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      18:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      1c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      20:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      24:	0c 94 18 20 	jmp	0x4030	; 0x4030 <__vector_9>
      28:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      2c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      30:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      34:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__vector_13>
      38:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      3c:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__vector_13>
      40:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      44:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      48:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      4c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      50:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      54:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      58:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      5c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      60:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      64:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      68:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      6c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      70:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      74:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      78:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      7c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      80:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__vector_32>
      84:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      88:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      8c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      90:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      94:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      98:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      9c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      ac:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      bc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      cc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      dc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      e0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      e4:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_57>
      e8:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_58>
      ec:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_59>
      f0:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_60>
      f4:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_61>
      f8:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_62>
      fc:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_63>
     100:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__vector_64>
     104:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     108:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     10c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     110:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     114:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     118:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     11c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     120:	15 08       	sbc	r1, r5
     122:	20 08       	sbc	r2, r0
     124:	2b 08       	sbc	r2, r11
     126:	36 08       	sbc	r3, r6
     128:	41 08       	sbc	r4, r1
     12a:	4c 08       	sbc	r4, r12
     12c:	57 08       	sbc	r5, r7
     12e:	76 08       	sbc	r7, r6
     130:	82 08       	sbc	r8, r2
     132:	8e 08       	sbc	r8, r14
     134:	9a 08       	sbc	r9, r10
     136:	a6 08       	sbc	r10, r6
     138:	b2 08       	sbc	r11, r2
     13a:	b2 08       	sbc	r11, r2
     13c:	d0 08       	sbc	r13, r0
     13e:	d2 08       	sbc	r13, r2
     140:	d4 08       	sbc	r13, r4
     142:	d6 08       	sbc	r13, r6
     144:	d8 08       	sbc	r13, r8
     146:	da 08       	sbc	r13, r10
     148:	dc 08       	sbc	r13, r12
     14a:	fa 08       	sbc	r15, r10
     14c:	1a 09       	sbc	r17, r10
     14e:	3a 09       	sbc	r19, r10
     150:	5a 09       	sbc	r21, r10
     152:	7a 09       	sbc	r23, r10
     154:	9a 09       	sbc	r25, r10
     156:	ba 09       	sbc	r27, r10
     158:	f0 09       	sbc	r31, r0
     15a:	fc 09       	sbc	r31, r12
     15c:	08 0a       	sbc	r0, r24
     15e:	14 0a       	sbc	r1, r20
     160:	20 0a       	sbc	r2, r16
     162:	2c 0a       	sbc	r2, r28
     164:	38 0a       	sbc	r3, r24
     166:	50 0a       	sbc	r5, r16
     168:	5b 0a       	sbc	r5, r27
     16a:	66 0a       	sbc	r6, r22
     16c:	71 0a       	sbc	r7, r17
     16e:	7c 0a       	sbc	r7, r28
     170:	87 0a       	sbc	r8, r23
     172:	92 0a       	sbc	r9, r18
     174:	44 0e       	add	r4, r20
     176:	47 0e       	add	r4, r23
     178:	52 0e       	add	r5, r18
     17a:	57 0e       	add	r5, r23
     17c:	5e 0e       	add	r5, r30
     17e:	67 0e       	add	r6, r23
     180:	6a 0e       	add	r6, r26
     182:	6f 0e       	add	r6, r31
     184:	76 0e       	add	r7, r22
     186:	7f 0e       	add	r7, r31
     188:	d4 0e       	add	r13, r20
     18a:	da 0e       	add	r13, r26
     18c:	dd 0e       	add	r13, r29
     18e:	e0 0e       	add	r14, r16
     190:	e3 0e       	add	r14, r19
     192:	e6 0e       	add	r14, r22
     194:	ec 0e       	add	r14, r28
     196:	e9 0e       	add	r14, r25
     198:	ef 0e       	add	r14, r31
     19a:	f2 0e       	add	r15, r18
     19c:	f5 0e       	add	r15, r21
     19e:	fe 0e       	add	r15, r30
     1a0:	01 0f       	add	r16, r17
     1a2:	04 0f       	add	r16, r20
     1a4:	07 0f       	add	r16, r23
     1a6:	fb 0e       	add	r15, r27
     1a8:	d1 0e       	add	r13, r17
     1aa:	d7 0e       	add	r13, r23
     1ac:	0a 0f       	add	r16, r26
     1ae:	0d 0f       	add	r16, r29
     1b0:	f8 0e       	add	r15, r24
     1b2:	ce 0e       	add	r12, r30

000001b4 <__c.3319>:
     1b4:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001bb <__c.3316>:
     1bb:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001ca <__c.3313>:
     1ca:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001db <__c.3310>:
     1db:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1eb:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001f6 <__c.3307>:
     1f6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     206:	20 53 69 67 6e 61 6c 00                              Signal.

0000020e <__c.3304>:
     20e:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     21e:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000022e <__c.3301>:
     22e:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     23e:	72 6f 72 00                                         ror.

00000242 <__c.3298>:
     242:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000253 <__c.3295>:
     253:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     263:	61 72 74 00                                         art.

00000267 <__c.3292>:
     267:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000276 <__c.3289>:
     276:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     286:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000291 <__c.3286>:
     291:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000029d <__c.3283>:
     29d:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2ad:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2bd:	20 6f 6b 3f 00                                       ok?.

000002c2 <__c.3280>:
     2c2:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2d2:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002e0 <__c.3277>:
     2e0:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2f0:	72 74 00                                            rt.

000002f3 <__c.3274>:
     2f3:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     303:	49 44 00                                            ID.

00000306 <__c.3271>:
     306:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     316:	20 57 61 6b 65 75 70 00                              Wakeup.

0000031e <__c.3268>:
     31e:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     32e:	6c 61 74 65 64 00                                   lated.

00000334 <__c.3265>:
     334:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     344:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000034f <__c.3262>:
     34f:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     35f:	69 6e 74 65 72 00                                   inter.

00000365 <__c.3259>:
     365:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     375:	6c 6f 77 00                                         low.

00000379 <__c.3256>:
     379:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     389:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     399:	6e 6f 75 67 68 21 00                                nough!.

000003a0 <__c.3252>:
     3a0:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3b0:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3c0:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3d0:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003dc <__c.3249>:
     3dc:	29 3a 20 00                                         ): .

000003e0 <__c.3247>:
     3e0:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ec <__c.3172>:
     3ec:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003fb <__c.2103>:
     3fb:	45 46 47 65 66 67 00                                EFGefg.

00000402 <__c.2097>:
     402:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000412 <__ctors_end>:
     412:	11 24       	eor	r1, r1
     414:	1f be       	out	0x3f, r1	; 63
     416:	cf ef       	ldi	r28, 0xFF	; 255
     418:	d1 e4       	ldi	r29, 0x41	; 65
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	cd bf       	out	0x3d, r28	; 61

0000041e <__do_copy_data>:
     41e:	13 e0       	ldi	r17, 0x03	; 3
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e0 e5       	ldi	r30, 0x50	; 80
     426:	fe e4       	ldi	r31, 0x4E	; 78
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a4 37       	cpi	r26, 0x74	; 116
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	16 e0       	ldi	r17, 0x06	; 6
     43a:	a4 e7       	ldi	r26, 0x74	; 116
     43c:	b3 e0       	ldi	r27, 0x03	; 3
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a8 34       	cpi	r26, 0x48	; 72
     444:	b1 07       	cpc	r27, r17
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	0e 94 d5 21 	call	0x43aa	; 0x43aa <main>
     44c:	0c 94 26 27 	jmp	0x4e4c	; 0x4e4c <_exit>

00000450 <__bad_interrupt>:
     450:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__vector_default>

00000454 <my_callback>:

void my_callback(uint16_t global_slot )
{
		static uint16_t cnt;

		printf( "callback %d %d\n",global_slot,cnt );
     454:	20 91 75 03 	lds	r18, 0x0375
     458:	2f 93       	push	r18
     45a:	20 91 74 03 	lds	r18, 0x0374
     45e:	2f 93       	push	r18
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	8f e9       	ldi	r24, 0x9F	; 159
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
		cnt++;
     470:	80 91 74 03 	lds	r24, 0x0374
     474:	90 91 75 03 	lds	r25, 0x0375
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 75 03 	sts	0x0375, r25
     47e:	80 93 74 03 	sts	0x0374, r24
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	08 95       	ret

00000490 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
}
     490:	08 95       	ret

00000492 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     492:	90 91 41 01 	lds	r25, 0x0141
     496:	9f 71       	andi	r25, 0x1F	; 31
     498:	9f 31       	cpi	r25, 0x1F	; 31
     49a:	d9 f3       	breq	.-10     	; 0x492 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     49c:	80 93 42 01 	sts	0x0142, r24
     4a0:	08 95       	ret

000004a2 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 81 04 	sts	0x0481, r24
     4a8:	08 95       	ret

000004aa <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     4aa:	10 92 81 04 	sts	0x0481, r1
     4ae:	08 95       	ret

000004b0 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4b0:	80 91 41 01 	lds	r24, 0x0141
     4b4:	8f 71       	andi	r24, 0x1F	; 31
     4b6:	8f 31       	cpi	r24, 0x1F	; 31
     4b8:	d9 f3       	breq	.-10     	; 0x4b0 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4ba:	80 91 41 01 	lds	r24, 0x0141
     4be:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     4c0:	e1 f0       	breq	.+56     	; 0x4fa <rf_power_down+0x4a>
     4c2:	8f 30       	cpi	r24, 0x0F	; 15
     4c4:	d1 f0       	breq	.+52     	; 0x4fa <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     4c6:	80 91 41 01 	lds	r24, 0x0141
     4ca:	8f 71       	andi	r24, 0x1F	; 31
     4cc:	88 30       	cpi	r24, 0x08	; 8
     4ce:	31 f4       	brne	.+12     	; 0x4dc <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4d0:	80 91 39 01 	lds	r24, 0x0139
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 93 39 01 	sts	0x0139, r24
     4da:	0b c0       	rjmp	.+22     	; 0x4f2 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     4dc:	88 e0       	ldi	r24, 0x08	; 8
     4de:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     4e2:	80 91 41 01 	lds	r24, 0x0141
     4e6:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     4e8:	88 30       	cpi	r24, 0x08	; 8
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <rf_power_down+0x32>
     4ec:	f1 cf       	rjmp	.-30     	; 0x4d0 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     4ee:	8f 30       	cpi	r24, 0x0F	; 15
     4f0:	21 f0       	breq	.+8      	; 0x4fa <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     4f2:	80 91 41 01 	lds	r24, 0x0141
     4f6:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     4f8:	d1 f7       	brne	.-12     	; 0x4ee <rf_power_down+0x3e>
     4fa:	08 95       	ret

000004fc <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4fc:	80 91 41 01 	lds	r24, 0x0141
     500:	8f 71       	andi	r24, 0x1F	; 31
     502:	8f 31       	cpi	r24, 0x1F	; 31
     504:	d9 f3       	breq	.-10     	; 0x4fc <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     506:	80 91 41 01 	lds	r24, 0x0141
     50a:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     50c:	11 f0       	breq	.+4      	; 0x512 <rf_power_up+0x16>
     50e:	8f 30       	cpi	r24, 0x0F	; 15
     510:	51 f4       	brne	.+20     	; 0x526 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     512:	80 91 39 01 	lds	r24, 0x0139
     516:	8d 7f       	andi	r24, 0xFD	; 253
     518:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     51c:	80 91 41 01 	lds	r24, 0x0141
     520:	8f 71       	andi	r24, 0x1F	; 31
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	d9 f7       	brne	.-10     	; 0x51c <rf_power_up+0x20>
     526:	08 95       	ret

00000528 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     528:	e5 e4       	ldi	r30, 0x45	; 69
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	90 81       	ld	r25, Z
     52e:	90 7f       	andi	r25, 0xF0	; 240
     530:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     532:	90 81       	ld	r25, Z
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	89 2b       	or	r24, r25
     538:	80 83       	st	Z, r24
     53a:	08 95       	ret

0000053c <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     53c:	e7 e5       	ldi	r30, 0x57	; 87
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	80 81       	ld	r24, Z
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	80 83       	st	Z, r24
     546:	08 95       	ret

00000548 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     548:	e7 e5       	ldi	r30, 0x57	; 87
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	80 81       	ld	r24, Z
     54e:	82 60       	ori	r24, 0x02	; 2
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     554:	ee e6       	ldi	r30, 0x6E	; 110
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	80 81       	ld	r24, Z
     55a:	8f 7e       	andi	r24, 0xEF	; 239
     55c:	80 83       	st	Z, r24
     55e:	08 95       	ret

00000560 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     560:	ee e6       	ldi	r30, 0x6E	; 110
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	80 81       	ld	r24, Z
     566:	80 61       	ori	r24, 0x10	; 16
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     56c:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     570:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     574:	90 93 8c 04 	sts	0x048C, r25
     578:	80 93 8b 04 	sts	0x048B, r24
     57c:	08 95       	ret

0000057e <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     57e:	90 93 86 04 	sts	0x0486, r25
     582:	80 93 85 04 	sts	0x0485, r24
	PHY_CC_CCA &= ~(0x1F);
     586:	e8 e4       	ldi	r30, 0x48	; 72
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	80 81       	ld	r24, Z
     58c:	80 7e       	andi	r24, 0xE0	; 224
     58e:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     590:	80 81       	ld	r24, Z
     592:	68 2b       	or	r22, r24
     594:	60 83       	st	Z, r22
     596:	08 95       	ret

00000598 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     598:	90 93 79 03 	sts	0x0379, r25
     59c:	80 93 78 03 	sts	0x0378, r24
     5a0:	08 95       	ret

000005a2 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     5a2:	90 93 77 03 	sts	0x0377, r25
     5a6:	80 93 76 03 	sts	0x0376, r24
     5aa:	08 95       	ret

000005ac <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     5b2:	70 e2       	ldi	r23, 0x20	; 32
     5b4:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     5b8:	70 ec       	ldi	r23, 0xC0	; 192
     5ba:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     5be:	60 62       	ori	r22, 0x20	; 32
     5c0:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     5c4:	65 ec       	ldi	r22, 0xC5	; 197
     5c6:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     5ca:	67 ea       	ldi	r22, 0xA7	; 167
     5cc:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     5d0:	60 e8       	ldi	r22, 0x80	; 128
     5d2:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     5d6:	20 93 60 01 	sts	0x0160, r18
     5da:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     5de:	40 93 62 01 	sts	0x0162, r20
     5e2:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5e6:	e6 e4       	ldi	r30, 0x46	; 70
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	c0 81       	ld	r28, Z
     5ec:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     5ee:	60 81       	ld	r22, Z
     5f0:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5f2:	c2 95       	swap	r28
     5f4:	c6 95       	lsr	r28
     5f6:	c7 70       	andi	r28, 0x07	; 7
     5f8:	70 e4       	ldi	r23, 0x40	; 64
     5fa:	c7 9f       	mul	r28, r23
     5fc:	e0 01       	movw	r28, r0
     5fe:	11 24       	eor	r1, r1
     600:	12 95       	swap	r17
     602:	16 95       	lsr	r17
     604:	13 70       	andi	r17, 0x03	; 3
     606:	1c 2b       	or	r17, r28
     608:	a2 95       	swap	r26
     60a:	a6 95       	lsr	r26
     60c:	a3 70       	andi	r26, 0x03	; 3
     60e:	70 e1       	ldi	r23, 0x10	; 16
     610:	a7 9f       	mul	r26, r23
     612:	d0 01       	movw	r26, r0
     614:	11 24       	eor	r1, r1
     616:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     618:	62 95       	swap	r22
     61a:	66 95       	lsr	r22
     61c:	63 70       	andi	r22, 0x03	; 3
     61e:	a4 e0       	ldi	r26, 0x04	; 4
     620:	6a 9f       	mul	r22, r26
     622:	b0 01       	movw	r22, r0
     624:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     626:	16 2b       	or	r17, r22
     628:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     62c:	60 81       	ld	r22, Z
     62e:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     630:	72 95       	swap	r23
     632:	76 95       	lsr	r23
     634:	73 70       	andi	r23, 0x03	; 3
     636:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     638:	62 95       	swap	r22
     63a:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     63c:	67 2b       	or	r22, r23
     63e:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     642:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     646:	6f ef       	ldi	r22, 0xFF	; 255
     648:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     64c:	90 93 86 04 	sts	0x0486, r25
     650:	80 93 85 04 	sts	0x0485, r24
	rfSettings.txSeqNumber = 0;
     654:	10 92 87 04 	sts	0x0487, r1
	rfSettings.ackReceived = 0;
     658:	10 92 88 04 	sts	0x0488, r1
	rfSettings.panId = panId;
     65c:	50 93 8a 04 	sts	0x048A, r21
     660:	40 93 89 04 	sts	0x0489, r20
	rfSettings.myAddr = myAddr;
     664:	30 93 8c 04 	sts	0x048C, r19
     668:	20 93 8b 04 	sts	0x048B, r18
	rfSettings.receiveOn = 0;
     66c:	10 92 8d 04 	sts	0x048D, r1

	rf_ready = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 a8 04 	sts	0x04A8, r24
	rx_ready = 0;
     676:	10 92 cc 04 	sts	0x04CC, r1
	tx_done = 0;
     67a:	10 92 97 04 	sts	0x0497, r1

	use_glossy = 0;
     67e:	10 92 81 04 	sts	0x0481, r1

} // rf_init() 
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	08 95       	ret

0000068a <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     68a:	86 e1       	ldi	r24, 0x16	; 22
     68c:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

00000690 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     690:	86 e1       	ldi	r24, 0x16	; 22
     692:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

00000696 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	rx_ready = 0;
     69c:	10 92 cc 04 	sts	0x04CC, r1
     6a0:	08 95       	ret

000006a2 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     6a2:	3f 92       	push	r3
     6a4:	4f 92       	push	r4
     6a6:	5f 92       	push	r5
     6a8:	6f 92       	push	r6
     6aa:	7f 92       	push	r7
     6ac:	8f 92       	push	r8
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     6c8:	80 91 a8 04 	lds	r24, 0x04A8
     6cc:	81 11       	cpse	r24, r1
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	0f c1       	rjmp	.+542    	; 0x8f2 <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     6d4:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     6d6:	80 91 87 04 	lds	r24, 0x0487
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	80 93 87 04 	sts	0x0487, r24
	machead->fcf = fcf;
     6e0:	80 91 81 01 	lds	r24, 0x0181
     6e4:	80 7e       	andi	r24, 0xE0	; 224
     6e6:	81 60       	ori	r24, 0x01	; 1
     6e8:	90 fb       	bst	r25, 0
     6ea:	85 f9       	bld	r24, 5
     6ec:	8f 73       	andi	r24, 0x3F	; 63
     6ee:	80 64       	ori	r24, 0x40	; 64
     6f0:	80 93 81 01 	sts	0x0181, r24
     6f4:	88 e8       	ldi	r24, 0x88	; 136
     6f6:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     6fa:	80 91 81 04 	lds	r24, 0x0481
     6fe:	88 23       	and	r24, r24
     700:	61 f0       	breq	.+24     	; 0x71a <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     708:	8a ea       	ldi	r24, 0xAA	; 170
     70a:	9a ea       	ldi	r25, 0xAA	; 170
     70c:	90 93 89 01 	sts	0x0189, r25
     710:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	9f ef       	ldi	r25, 0xFF	; 255
     718:	10 c0       	rjmp	.+32     	; 0x73a <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     71a:	80 91 87 04 	lds	r24, 0x0487
     71e:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     722:	20 91 61 01 	lds	r18, 0x0161
     726:	80 91 60 01 	lds	r24, 0x0160
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	92 2b       	or	r25, r18
     72e:	90 93 89 01 	sts	0x0189, r25
     732:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     736:	88 81       	ld	r24, Y
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	90 93 87 01 	sts	0x0187, r25
     73e:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     742:	20 91 63 01 	lds	r18, 0x0163
     746:	80 91 62 01 	lds	r24, 0x0162
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 2b       	or	r25, r18
     74e:	90 93 85 01 	sts	0x0185, r25
     752:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     756:	4a 81       	ldd	r20, Y+2	; 0x02
     758:	55 27       	eor	r21, r21
     75a:	47 fd       	sbrc	r20, 7
     75c:	50 95       	com	r21
     75e:	6b 81       	ldd	r22, Y+3	; 0x03
     760:	7c 81       	ldd	r23, Y+4	; 0x04
     762:	8a e8       	ldi	r24, 0x8A	; 138
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 6e 24 	call	0x48dc	; 0x48dc <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	85 5f       	subi	r24, 0xF5	; 245
     76e:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     772:	80 91 41 01 	lds	r24, 0x0141
     776:	98 2f       	mov	r25, r24
     778:	9f 71       	andi	r25, 0x1F	; 31
     77a:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     77c:	8f 70       	andi	r24, 0x0F	; 15
     77e:	9f ef       	ldi	r25, 0xFF	; 255
     780:	98 0f       	add	r25, r24
     782:	92 30       	cpi	r25, 0x02	; 2
     784:	b0 f3       	brcs	.-20     	; 0x772 <rf_tx_packet_repeat+0xd0>
     786:	9f e1       	ldi	r25, 0x1F	; 31
     788:	39 16       	cp	r3, r25
     78a:	99 f3       	breq	.-26     	; 0x772 <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     78c:	98 ef       	ldi	r25, 0xF8	; 248
     78e:	93 0d       	add	r25, r3
     790:	92 30       	cpi	r25, 0x02	; 2
     792:	18 f0       	brcs	.+6      	; 0x79a <rf_tx_packet_repeat+0xf8>
     794:	86 30       	cpi	r24, 0x06	; 6
     796:	09 f0       	breq	.+2      	; 0x79a <rf_tx_packet_repeat+0xf8>
     798:	9b cf       	rjmp	.-202    	; 0x6d0 <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     79a:	86 e1       	ldi	r24, 0x16	; 22
     79c:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	81 11       	cpse	r24, r1
     7a4:	0a c0       	rjmp	.+20     	; 0x7ba <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	if(pRTI->ackRequest)
     7ac:	8e 81       	ldd	r24, Y+6	; 0x06
     7ae:	88 23       	and	r24, r24
     7b0:	91 f0       	breq	.+36     	; 0x7d6 <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
     7b2:	89 e1       	ldi	r24, 0x19	; 25
     7b4:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
     7b8:	0e c0       	rjmp	.+28     	; 0x7d6 <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     7ba:	80 91 48 01 	lds	r24, 0x0148
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     7c4:	80 91 41 01 	lds	r24, 0x0141
     7c8:	87 ff       	sbrs	r24, 7
     7ca:	fc cf       	rjmp	.-8      	; 0x7c4 <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     7cc:	80 91 41 01 	lds	r24, 0x0141
     7d0:	86 ff       	sbrs	r24, 6
     7d2:	7e cf       	rjmp	.-260    	; 0x6d0 <rf_tx_packet_repeat+0x2e>
     7d4:	e8 cf       	rjmp	.-48     	; 0x7a6 <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
     7d6:	61 14       	cp	r6, r1
     7d8:	71 04       	cpc	r7, r1
     7da:	99 f1       	breq	.+102    	; 0x842 <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
     7dc:	8f e8       	ldi	r24, 0x8F	; 143
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <nrk_time_get>
		target_t.secs = curr_t.secs;
     7e4:	80 91 8f 04 	lds	r24, 0x048F
     7e8:	90 91 90 04 	lds	r25, 0x0490
     7ec:	a0 91 91 04 	lds	r26, 0x0491
     7f0:	b0 91 92 04 	lds	r27, 0x0492
     7f4:	80 93 a9 04 	sts	0x04A9, r24
     7f8:	90 93 aa 04 	sts	0x04AA, r25
     7fc:	a0 93 ab 04 	sts	0x04AB, r26
     800:	b0 93 ac 04 	sts	0x04AC, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     804:	d3 01       	movw	r26, r6
     806:	20 e4       	ldi	r18, 0x40	; 64
     808:	32 e4       	ldi	r19, 0x42	; 66
     80a:	4f e0       	ldi	r20, 0x0F	; 15
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	0e 94 a9 23 	call	0x4752	; 0x4752 <__muluhisi3>
     812:	00 91 93 04 	lds	r16, 0x0493
     816:	10 91 94 04 	lds	r17, 0x0494
     81a:	20 91 95 04 	lds	r18, 0x0495
     81e:	30 91 96 04 	lds	r19, 0x0496
     822:	60 0f       	add	r22, r16
     824:	71 1f       	adc	r23, r17
     826:	82 1f       	adc	r24, r18
     828:	93 1f       	adc	r25, r19
     82a:	60 93 ad 04 	sts	0x04AD, r22
     82e:	70 93 ae 04 	sts	0x04AE, r23
     832:	80 93 af 04 	sts	0x04AF, r24
     836:	90 93 b0 04 	sts	0x04B0, r25
		nrk_time_compact_nanos(&target_t);
     83a:	89 ea       	ldi	r24, 0xA9	; 169
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     842:	10 92 97 04 	sts	0x0497, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     84c:	41 2c       	mov	r4, r1
     84e:	51 2c       	mov	r5, r1
     850:	80 91 97 04 	lds	r24, 0x0497
     854:	81 11       	cpse	r24, r1
     856:	08 c0       	rjmp	.+16     	; 0x868 <rf_tx_packet_repeat+0x1c6>
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	48 1a       	sub	r4, r24
     85c:	58 0a       	sbc	r5, r24
     85e:	98 ee       	ldi	r25, 0xE8	; 232
     860:	49 16       	cp	r4, r25
     862:	9d ef       	ldi	r25, 0xFD	; 253
     864:	59 06       	cpc	r5, r25
     866:	a1 f7       	brne	.-24     	; 0x850 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     868:	61 14       	cp	r6, r1
     86a:	71 04       	cpc	r7, r1
     86c:	21 f4       	brne	.+8      	; 0x876 <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     86e:	8e 81       	ldd	r24, Y+6	; 0x06
     870:	81 11       	cpse	r24, r1
     872:	2d c0       	rjmp	.+90     	; 0x8ce <rf_tx_packet_repeat+0x22c>
     874:	34 c0       	rjmp	.+104    	; 0x8de <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
     876:	8f e8       	ldi	r24, 0x8F	; 143
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     87e:	80 90 8f 04 	lds	r8, 0x048F
     882:	90 90 90 04 	lds	r9, 0x0490
     886:	a0 90 91 04 	lds	r10, 0x0491
     88a:	b0 90 92 04 	lds	r11, 0x0492
     88e:	c0 90 93 04 	lds	r12, 0x0493
     892:	d0 90 94 04 	lds	r13, 0x0494
     896:	e0 90 95 04 	lds	r14, 0x0495
     89a:	f0 90 96 04 	lds	r15, 0x0496
     89e:	00 91 a9 04 	lds	r16, 0x04A9
     8a2:	10 91 aa 04 	lds	r17, 0x04AA
     8a6:	20 91 ab 04 	lds	r18, 0x04AB
     8aa:	30 91 ac 04 	lds	r19, 0x04AC
     8ae:	40 91 ad 04 	lds	r20, 0x04AD
     8b2:	50 91 ae 04 	lds	r21, 0x04AE
     8b6:	60 91 af 04 	lds	r22, 0x04AF
     8ba:	70 91 b0 04 	lds	r23, 0x04B0
     8be:	8d e4       	ldi	r24, 0x4D	; 77
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <nrk_time_sub>
     8c6:	8f 3f       	cpi	r24, 0xFF	; 255
     8c8:	09 f0       	breq	.+2      	; 0x8cc <rf_tx_packet_repeat+0x22a>
     8ca:	bb cf       	rjmp	.-138    	; 0x842 <rf_tx_packet_repeat+0x1a0>
     8cc:	d0 cf       	rjmp	.-96     	; 0x86e <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     8ce:	80 91 42 01 	lds	r24, 0x0142
     8d2:	82 95       	swap	r24
     8d4:	86 95       	lsr	r24
     8d6:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     8d8:	11 f0       	breq	.+4      	; 0x8de <rf_tx_packet_repeat+0x23c>
     8da:	cf ef       	ldi	r28, 0xFF	; 255
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     8de:	88 ee       	ldi	r24, 0xE8	; 232
     8e0:	48 16       	cp	r4, r24
     8e2:	8d ef       	ldi	r24, 0xFD	; 253
     8e4:	58 06       	cpc	r5, r24
     8e6:	c9 f3       	breq	.-14     	; 0x8da <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     8e8:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     8ea:	83 2d       	mov	r24, r3
     8ec:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     8f0:	8c 2f       	mov	r24, r28
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	08 95       	ret

00000916 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <rf_tx_packet_repeat>

0000091e <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     922:	80 91 a8 04 	lds	r24, 0x04A8
     926:	88 23       	and	r24, r24
     928:	21 f1       	breq	.+72     	; 0x972 <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     92a:	80 91 41 01 	lds	r24, 0x0141
     92e:	c8 2f       	mov	r28, r24
     930:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	9f ef       	ldi	r25, 0xFF	; 255
     936:	98 0f       	add	r25, r24
     938:	92 30       	cpi	r25, 0x02	; 2
     93a:	b8 f3       	brcs	.-18     	; 0x92a <rf_cca_check+0xc>
     93c:	cf 31       	cpi	r28, 0x1F	; 31
     93e:	a9 f3       	breq	.-22     	; 0x92a <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     940:	c8 30       	cpi	r28, 0x08	; 8
     942:	11 f0       	breq	.+4      	; 0x948 <rf_cca_check+0x2a>
     944:	86 30       	cpi	r24, 0x06	; 6
     946:	a9 f4       	brne	.+42     	; 0x972 <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     948:	86 e1       	ldi	r24, 0x16	; 22
     94a:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     94e:	80 91 48 01 	lds	r24, 0x0148
     952:	80 68       	ori	r24, 0x80	; 128
     954:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     958:	80 91 41 01 	lds	r24, 0x0141
     95c:	87 ff       	sbrs	r24, 7
     95e:	fc cf       	rjmp	.-8      	; 0x958 <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     960:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     964:	8c 2f       	mov	r24, r28
     966:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     96a:	d6 fb       	bst	r29, 6
     96c:	88 27       	eor	r24, r24
     96e:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     970:	01 c0       	rjmp	.+2      	; 0x974 <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     972:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     97a:	80 91 a8 04 	lds	r24, 0x04A8
     97e:	88 23       	and	r24, r24
     980:	09 f4       	brne	.+2      	; 0x984 <rf_rx_packet_nonblock+0xa>
     982:	9f c0       	rjmp	.+318    	; 0xac2 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
     984:	80 91 cc 04 	lds	r24, 0x04CC
     988:	88 23       	and	r24, r24
     98a:	09 f4       	brne	.+2      	; 0x98e <rf_rx_packet_nonblock+0x14>
     98c:	98 c0       	rjmp	.+304    	; 0xabe <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     98e:	80 91 7b 01 	lds	r24, 0x017B
     992:	e0 91 85 04 	lds	r30, 0x0485
     996:	f0 91 86 04 	lds	r31, 0x0486
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 97       	sbiw	r24, 0x02	; 2
     99e:	24 81       	ldd	r18, Z+4	; 0x04
     9a0:	33 27       	eor	r19, r19
     9a2:	27 fd       	sbrc	r18, 7
     9a4:	30 95       	com	r19
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	0c f4       	brge	.+2      	; 0x9ae <rf_rx_packet_nonblock+0x34>
     9ac:	8a c0       	rjmp	.+276    	; 0xac2 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     9ae:	e0 91 85 04 	lds	r30, 0x0485
     9b2:	f0 91 86 04 	lds	r31, 0x0486
     9b6:	80 91 82 01 	lds	r24, 0x0182
     9ba:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     9bc:	e0 91 85 04 	lds	r30, 0x0485
     9c0:	f0 91 86 04 	lds	r31, 0x0486
     9c4:	80 91 87 01 	lds	r24, 0x0187
     9c8:	90 91 88 01 	lds	r25, 0x0188
     9cc:	92 83       	std	Z+2, r25	; 0x02
     9ce:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     9d0:	e0 91 85 04 	lds	r30, 0x0485
     9d4:	f0 91 86 04 	lds	r31, 0x0486
     9d8:	80 91 7b 01 	lds	r24, 0x017B
     9dc:	8b 50       	subi	r24, 0x0B	; 11
     9de:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     9e0:	a0 91 85 04 	lds	r26, 0x0485
     9e4:	b0 91 86 04 	lds	r27, 0x0486
     9e8:	e0 91 85 04 	lds	r30, 0x0485
     9ec:	f0 91 86 04 	lds	r31, 0x0486
     9f0:	13 96       	adiw	r26, 0x03	; 3
     9f2:	9c 91       	ld	r25, X
     9f4:	84 81       	ldd	r24, Z+4	; 0x04
     9f6:	89 17       	cp	r24, r25
     9f8:	3c f0       	brlt	.+14     	; 0xa08 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     9fa:	e0 91 85 04 	lds	r30, 0x0485
     9fe:	f0 91 86 04 	lds	r31, 0x0486
     a02:	83 81       	ldd	r24, Z+3	; 0x03
     a04:	87 ff       	sbrs	r24, 7
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     a08:	10 92 cc 04 	sts	0x04CC, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     a0c:	80 91 4c 01 	lds	r24, 0x014C
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     a16:	80 91 4c 01 	lds	r24, 0x014C
     a1a:	80 68       	ori	r24, 0x80	; 128
     a1c:	80 93 4c 01 	sts	0x014C, r24
     a20:	50 c0       	rjmp	.+160    	; 0xac2 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     a22:	a0 91 85 04 	lds	r26, 0x0485
     a26:	b0 91 86 04 	lds	r27, 0x0486
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     a2a:	e0 91 85 04 	lds	r30, 0x0485
     a2e:	f0 91 86 04 	lds	r31, 0x0486
     a32:	13 96       	adiw	r26, 0x03	; 3
     a34:	4c 91       	ld	r20, X
     a36:	55 27       	eor	r21, r21
     a38:	47 fd       	sbrc	r20, 7
     a3a:	50 95       	com	r21
     a3c:	69 e8       	ldi	r22, 0x89	; 137
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	85 81       	ldd	r24, Z+5	; 0x05
     a42:	96 81       	ldd	r25, Z+6	; 0x06
     a44:	0e 94 6e 24 	call	0x48dc	; 0x48dc <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     a48:	e0 91 85 04 	lds	r30, 0x0485
     a4c:	f0 91 86 04 	lds	r31, 0x0486
     a50:	80 91 80 01 	lds	r24, 0x0180
     a54:	85 fb       	bst	r24, 5
     a56:	88 27       	eor	r24, r24
     a58:	80 f9       	bld	r24, 0
     a5a:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     a5c:	e0 91 85 04 	lds	r30, 0x0485
     a60:	f0 91 86 04 	lds	r31, 0x0486
     a64:	80 91 47 01 	lds	r24, 0x0147
     a68:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     a6a:	e0 91 85 04 	lds	r30, 0x0485
     a6e:	f0 91 86 04 	lds	r31, 0x0486
     a72:	80 91 46 01 	lds	r24, 0x0146
     a76:	86 95       	lsr	r24
     a78:	86 95       	lsr	r24
     a7a:	86 95       	lsr	r24
     a7c:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     a7e:	e0 91 85 04 	lds	r30, 0x0485
     a82:	f0 91 86 04 	lds	r31, 0x0486
     a86:	80 91 47 01 	lds	r24, 0x0147
     a8a:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     a8c:	e0 91 85 04 	lds	r30, 0x0485
     a90:	f0 91 86 04 	lds	r31, 0x0486
     a94:	a0 91 7b 01 	lds	r26, 0x017B
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	a0 58       	subi	r26, 0x80	; 128
     a9c:	be 4f       	sbci	r27, 0xFE	; 254
     a9e:	8c 91       	ld	r24, X
     aa0:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
     aa2:	10 92 cc 04 	sts	0x04CC, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     aa6:	80 91 4c 01 	lds	r24, 0x014C
     aaa:	8f 77       	andi	r24, 0x7F	; 127
     aac:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     ab0:	80 91 4c 01 	lds	r24, 0x014C
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     ac4:	08 95       	ret

00000ac6 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     ad2:	80 e8       	ldi	r24, 0x80	; 128
     ad4:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ad8:	8f 91       	pop	r24
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	80 93 97 04 	sts	0x0497, r24
	IRQ_STATUS = (1 << TX_END);
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     afc:	8f 91       	pop	r24
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     b14:	80 e2       	ldi	r24, 0x20	; 32
     b16:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b1a:	8f 91       	pop	r24
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b38:	8f 91       	pop	r24
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	0b b6       	in	r0, 0x3b	; 59
     b50:	0f 92       	push	r0
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     b70:	e0 91 78 03 	lds	r30, 0x0378
     b74:	f0 91 79 03 	lds	r31, 0x0379
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__vector_59+0x3a>
		rx_start_func();
     b7c:	09 95       	icall

	return;
}
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0b be       	out	0x3b, r0	; 59
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bb6:	8f 91       	pop	r24
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
     bcc:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bd4:	8f 91       	pop	r24
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     be0:	e9 e4       	ldi	r30, 0x49	; 73
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	90 81       	ld	r25, Z
     be6:	90 7f       	andi	r25, 0xF0	; 240
     be8:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     bea:	90 81       	ld	r25, Z
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	89 2b       	or	r24, r25
     bf0:	80 83       	st	Z, r24
     bf2:	08 95       	ret

00000bf4 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	08 95       	ret

00000bf8 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     bf8:	08 95       	ret

00000bfa <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     bfa:	08 95       	ret

00000bfc <rf_security_disable>:
}



void rf_security_disable()
{
     bfc:	08 95       	ret

00000bfe <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	08 95       	ret

00000c02 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     c02:	80 91 7f 04 	lds	r24, 0x047F
     c06:	90 91 80 04 	lds	r25, 0x0480
     c0a:	08 95       	ret

00000c0c <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret

00000c10 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
     c10:	08 95       	ret

00000c12 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret

00000c16 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	08 95       	ret

00000c1a <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	08 95       	ret

00000c1e <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     c1e:	08 95       	ret

00000c20 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     c20:	08 95       	ret

00000c22 <rf_test_mode>:
}



void rf_test_mode()
{
     c22:	08 95       	ret

00000c24 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     c24:	08 95       	ret

00000c26 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     c26:	08 95       	ret

00000c28 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     c28:	08 95       	ret

00000c2a <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     c2a:	08 95       	ret

00000c2c <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     c2c:	08 95       	ret

00000c2e <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
     c2e:	e7 e3       	ldi	r30, 0x37	; 55
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	80 81       	ld	r24, Z
     c34:	83 60       	ori	r24, 0x03	; 3
     c36:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     c38:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
     c3a:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     c3c:	8d b1       	in	r24, 0x0d	; 13
     c3e:	80 6e       	ori	r24, 0xE0	; 224
     c40:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     c42:	8e b1       	in	r24, 0x0e	; 14
     c44:	80 6e       	ori	r24, 0xE0	; 224
     c46:	8e b9       	out	0x0e, r24	; 14
     c48:	08 95       	ret

00000c4a <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	80 81       	ld	r24, Z
     c50:	83 60       	ori	r24, 0x03	; 3
     c52:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     c54:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
     c56:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     c58:	8d b1       	in	r24, 0x0d	; 13
     c5a:	80 6e       	ori	r24, 0xE0	; 224
     c5c:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     c5e:	8e b1       	in	r24, 0x0e	; 14
     c60:	80 6e       	ori	r24, 0xE0	; 224
     c62:	8e b9       	out	0x0e, r24	; 14
     c64:	08 95       	ret

00000c66 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	27 97       	sbiw	r28, 0x07	; 7
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     c86:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     c8a:	e0 91 85 04 	lds	r30, 0x0485
     c8e:	f0 91 86 04 	lds	r31, 0x0486
     c92:	c0 80       	ld	r12, Z
     c94:	d3 80       	ldd	r13, Z+3	; 0x03
     c96:	05 81       	ldd	r16, Z+5	; 0x05
     c98:	16 81       	ldd	r17, Z+6	; 0x06
     c9a:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     c9c:	0e 94 bd 04 	call	0x97a	; 0x97a <rf_rx_packet_nonblock>
	if (err < 1) {
     ca0:	18 16       	cp	r1, r24
     ca2:	1c f0       	brlt	.+6      	; 0xcaa <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     ca4:	8f ea       	ldi	r24, 0xAF	; 175
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     caa:	f8 01       	movw	r30, r16
     cac:	f0 80       	ld	r15, Z
	if (ttl == 0) {
     cae:	f1 10       	cpse	r15, r1
     cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     cb2:	8e ec       	ldi	r24, 0xCE	; 206
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <puts>
#endif
		nrk_int_enable();
     cba:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
		return;
     cbe:	32 c0       	rjmp	.+100    	; 0xd24 <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
     cc0:	f5 e0       	ldi	r31, 0x05	; 5
     cc2:	ff 12       	cpse	r15, r31
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     cce:	c8 01       	movw	r24, r16
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	8e 2d       	mov	r24, r14
     cd8:	99 27       	eor	r25, r25
     cda:	87 fd       	sbrc	r24, 7
     cdc:	90 95       	com	r25
     cde:	9f 93       	push	r25
     ce0:	ef 92       	push	r14
     ce2:	1f 92       	push	r1
     ce4:	ff 92       	push	r15
     ce6:	1f 92       	push	r1
     ce8:	cf 92       	push	r12
     cea:	80 ef       	ldi	r24, 0xF0	; 240
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     cf6:	1d 83       	std	Y+5, r17	; 0x05
     cf8:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     cfa:	fa 94       	dec	r15
     cfc:	f8 01       	movw	r30, r16
     cfe:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
     d00:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     d02:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     d04:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	9f ef       	ldi	r25, 0xFF	; 255
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     d0e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	0e 94 8b 04 	call	0x916	; 0x916 <rf_tx_packet>
#endif
	return;
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	08 95       	ret

00000d42 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	0b b6       	in	r0, 0x3b	; 59
     d4e:	0f 92       	push	r0
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	5f 93       	push	r21
     d58:	6f 93       	push	r22
     d5a:	7f 93       	push	r23
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 91 7b 01 	lds	r25, 0x017B
     d6e:	89 17       	cp	r24, r25
     d70:	10 f4       	brcc	.+4      	; 0xd76 <__vector_60+0x34>
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	fa cf       	rjmp	.-12     	; 0xd6a <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d76:	80 91 46 01 	lds	r24, 0x0146
     d7a:	87 ff       	sbrs	r24, 7
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <__vector_60+0x44>
		rx_ready = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 cc 04 	sts	0x04CC, r24
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
     d86:	89 e1       	ldi	r24, 0x19	; 25
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
     d8e:	88 e0       	ldi	r24, 0x08	; 8
     d90:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d94:	80 91 46 01 	lds	r24, 0x0146
     d98:	87 ff       	sbrs	r24, 7
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     d9c:	80 91 81 04 	lds	r24, 0x0481
     da0:	81 11       	cpse	r24, r1
     da2:	0e 94 33 06 	call	0xc66	; 0xc66 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     da6:	e0 91 76 03 	lds	r30, 0x0376
     daa:	f0 91 77 03 	lds	r31, 0x0377
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__vector_60+0x72>
		rx_end_func();
     db2:	09 95       	icall

	return;
}
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0b be       	out	0x3b, r0	; 59
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     dda:	e8 e9       	ldi	r30, 0x98	; 152
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
     dde:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     de0:	8c 91       	ld	r24, X
     de2:	81 93       	st	Z+, r24
      AES_KEY = key[i];
     de4:	8d 91       	ld	r24, X+
     de6:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	e8 3a       	cpi	r30, 0xA8	; 168
     dee:	f8 07       	cpc	r31, r24
     df0:	b9 f7       	brne	.-18     	; 0xde0 <aes_setkey+0x6>
     df2:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     df4:	10 92 3e 01 	sts	0x013E, r1
     df8:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     e02:	80 91 3d 01 	lds	r24, 0x013D
     e06:	80 ff       	sbrs	r24, 0
     e08:	fc cf       	rjmp	.-8      	; 0xe02 <aes_setkey+0x28>
     e0a:	e3 eb       	ldi	r30, 0xB3	; 179
     e0c:	f4 e0       	ldi	r31, 0x04	; 4
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     e0e:	80 91 3f 01 	lds	r24, 0x013F
     e12:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	e3 3c       	cpi	r30, 0xC3	; 195
     e18:	f8 07       	cpc	r31, r24
     e1a:	c9 f7       	brne	.-14     	; 0xe0e <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
     e1c:	08 95       	ret

00000e1e <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     e1e:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e20:	66 23       	and	r22, r22
     e22:	09 f4       	brne	.+2      	; 0xe26 <aes_encrypt+0x8>
     e24:	47 c0       	rjmp	.+142    	; 0xeb4 <aes_encrypt+0x96>
     e26:	26 2f       	mov	r18, r22
     e28:	2f 70       	andi	r18, 0x0F	; 15
     e2a:	09 f0       	breq	.+2      	; 0xe2e <aes_encrypt+0x10>
     e2c:	43 c0       	rjmp	.+134    	; 0xeb4 <aes_encrypt+0x96>
     e2e:	e8 e9       	ldi	r30, 0x98	; 152
     e30:	f4 e0       	ldi	r31, 0x04	; 4
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     e32:	21 91       	ld	r18, Z+
     e34:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e38:	24 e0       	ldi	r18, 0x04	; 4
     e3a:	e8 3a       	cpi	r30, 0xA8	; 168
     e3c:	f2 07       	cpc	r31, r18
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <aes_encrypt+0x14>
     e40:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e42:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e44:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e46:	20 e1       	ldi	r18, 0x10	; 16
     e48:	a2 9f       	mul	r26, r18
     e4a:	a0 01       	movw	r20, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	46 17       	cp	r20, r22
     e50:	57 07       	cpc	r21, r23
     e52:	74 f5       	brge	.+92     	; 0xeb0 <aes_encrypt+0x92>
      if(i==0)
     e54:	a1 11       	cpse	r26, r1
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     e58:	10 92 3c 01 	sts	0x013C, r1
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e5e:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	48 0f       	add	r20, r24
     e68:	59 1f       	adc	r21, r25
     e6a:	fa 01       	movw	r30, r20
     e6c:	e2 0f       	add	r30, r18
     e6e:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e70:	e0 81       	ld	r30, Z
     e72:	e0 93 3e 01 	sts	0x013E, r30
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     e7a:	20 31       	cpi	r18, 0x10	; 16
     e7c:	31 05       	cpc	r19, r1
     e7e:	a9 f7       	brne	.-22     	; 0xe6a <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e80:	20 91 3c 01 	lds	r18, 0x013C
     e84:	20 68       	ori	r18, 0x80	; 128
     e86:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
     e8a:	20 91 3d 01 	lds	r18, 0x013D
     e8e:	20 ff       	sbrs	r18, 0
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <aes_encrypt+0x6c>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     e96:	c0 91 3e 01 	lds	r28, 0x013E
     e9a:	fa 01       	movw	r30, r20
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	c0 83       	st	Z, r28
     ea2:	2f 5f       	subi	r18, 0xFF	; 255
     ea4:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     ea6:	20 31       	cpi	r18, 0x10	; 16
     ea8:	31 05       	cpc	r19, r1
     eaa:	a9 f7       	brne	.-22     	; 0xe96 <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     eac:	af 5f       	subi	r26, 0xFF	; 255
     eae:	cb cf       	rjmp	.-106    	; 0xe46 <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     ec2:	61 30       	cpi	r22, 0x01	; 1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <aes_decrypt+0xe>
     ec6:	4f c0       	rjmp	.+158    	; 0xf66 <aes_decrypt+0xac>
     ec8:	26 2f       	mov	r18, r22
     eca:	2f 70       	andi	r18, 0x0F	; 15
     ecc:	09 f0       	breq	.+2      	; 0xed0 <aes_decrypt+0x16>
     ece:	4b c0       	rjmp	.+150    	; 0xf66 <aes_decrypt+0xac>
     ed0:	e3 eb       	ldi	r30, 0xB3	; 179
     ed2:	f4 e0       	ldi	r31, 0x04	; 4
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     ed4:	21 91       	ld	r18, Z+
     ed6:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     eda:	24 e0       	ldi	r18, 0x04	; 4
     edc:	e3 3c       	cpi	r30, 0xC3	; 195
     ede:	f2 07       	cpc	r31, r18
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     ee2:	62 95       	swap	r22
     ee4:	6f 70       	andi	r22, 0x0F	; 15
     ee6:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     ee8:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     eea:	6f 3f       	cpi	r22, 0xFF	; 255
     eec:	d1 f1       	breq	.+116    	; 0xf62 <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     eee:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     ef2:	20 e1       	ldi	r18, 0x10	; 16
     ef4:	62 02       	muls	r22, r18
     ef6:	a0 01       	movw	r20, r0
     ef8:	11 24       	eor	r1, r1
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	e4 0f       	add	r30, r20
     f02:	f5 1f       	adc	r31, r21
     f04:	df 01       	movw	r26, r30
     f06:	a2 0f       	add	r26, r18
     f08:	b3 1f       	adc	r27, r19
     f0a:	7c 91       	ld	r23, X
     f0c:	70 93 3e 01 	sts	0x013E, r23
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     f14:	20 31       	cpi	r18, 0x10	; 16
     f16:	31 05       	cpc	r19, r1
     f18:	a9 f7       	brne	.-22     	; 0xf04 <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     f1a:	20 91 3c 01 	lds	r18, 0x013C
     f1e:	20 68       	ori	r18, 0x80	; 128
     f20:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
     f24:	20 91 3d 01 	lds	r18, 0x013D
     f28:	20 ff       	sbrs	r18, 0
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     f2c:	40 51       	subi	r20, 0x10	; 16
     f2e:	51 09       	sbc	r21, r1
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	48 0f       	add	r20, r24
     f36:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     f38:	10 91 3e 01 	lds	r17, 0x013E
     f3c:	df 01       	movw	r26, r30
     f3e:	a2 0f       	add	r26, r18
     f40:	b3 1f       	adc	r27, r19
     f42:	1c 93       	st	X, r17
         if(i!=0)
     f44:	66 23       	and	r22, r22
     f46:	31 f0       	breq	.+12     	; 0xf54 <aes_decrypt+0x9a>
     f48:	ea 01       	movw	r28, r20
     f4a:	c2 0f       	add	r28, r18
     f4c:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
     f4e:	78 81       	ld	r23, Y
     f50:	71 27       	eor	r23, r17
     f52:	7c 93       	st	X, r23
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     f58:	20 31       	cpi	r18, 0x10	; 16
     f5a:	31 05       	cpc	r19, r1
     f5c:	69 f7       	brne	.-38     	; 0xf38 <aes_decrypt+0x7e>
     f5e:	61 50       	subi	r22, 0x01	; 1
     f60:	c4 cf       	rjmp	.-120    	; 0xeea <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
     f72:	80 91 c0 00 	lds	r24, 0x00C0
     f76:	87 ff       	sbrs	r24, 7
     f78:	fc cf       	rjmp	.-8      	; 0xf72 <getc0>
     f7a:	80 91 c0 00 	lds	r24, 0x00C0
     f7e:	8f 77       	andi	r24, 0x7F	; 127
     f80:	80 93 c0 00 	sts	0x00C0, r24
     f84:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
     f88:	08 95       	ret

00000f8a <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     f8a:	90 91 c0 00 	lds	r25, 0x00C0
     f8e:	95 ff       	sbrs	r25, 5
     f90:	fc cf       	rjmp	.-8      	; 0xf8a <putc0>
     f92:	90 91 c0 00 	lds	r25, 0x00C0
     f96:	9f 7d       	andi	r25, 0xDF	; 223
     f98:	90 93 c0 00 	sts	0x00C0, r25
     f9c:	80 93 c6 00 	sts	0x00C6, r24
     fa0:	08 95       	ret

00000fa2 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	31 f4       	brne	.+12     	; 0xfb6 <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
     faa:	80 91 c8 00 	lds	r24, 0x00C8
     fae:	87 fd       	sbrc	r24, 7
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <nrk_uart_data_ready+0x1a>
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
        }
if(uart_num==0)
     fb6:	81 11       	cpse	r24, r1
     fb8:	fc cf       	rjmp	.-8      	; 0xfb2 <nrk_uart_data_ready+0xc>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
     fba:	80 91 c0 00 	lds	r24, 0x00C0
     fbe:	f7 cf       	rjmp	.-18     	; 0xfae <nrk_uart_data_ready+0x8>

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
     fc2:	08 95       	ret

00000fc4 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
     fc8:	fc 01       	movw	r30, r24
     fca:	24 91       	lpm	r18, Z
     fcc:	ec 01       	movw	r28, r24
     fce:	21 96       	adiw	r28, 0x01	; 1
     fd0:	22 23       	and	r18, r18
     fd2:	51 f0       	breq	.+20     	; 0xfe8 <nrk_kprintf+0x24>
        putchar(c);
     fd4:	60 91 40 06 	lds	r22, 0x0640
     fd8:	70 91 41 06 	lds	r23, 0x0641
     fdc:	82 2f       	mov	r24, r18
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
     fe4:	ce 01       	movw	r24, r28
     fe6:	f0 cf       	rjmp	.-32     	; 0xfc8 <nrk_kprintf+0x4>
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
     ff2:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
     ff4:	88 ef       	ldi	r24, 0xF8	; 248
     ff6:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
     ff8:	80 ef       	ldi	r24, 0xF0	; 240
     ffa:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	8d b9       	out	0x0d, r24	; 13
    1000:	08 95       	ret

00001002 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1002:	0c 94 f7 07 	jmp	0xfee	; 0xfee <PORT_INIT>

00001006 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1006:	8f 3f       	cpi	r24, 0xFF	; 255
    1008:	09 f4       	brne	.+2      	; 0x100c <nrk_gpio_set+0x6>
    100a:	5c c0       	rjmp	.+184    	; 0x10c4 <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    100c:	48 2f       	mov	r20, r24
    100e:	47 70       	andi	r20, 0x07	; 7
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	47 30       	cpi	r20, 0x07	; 7
    1014:	51 05       	cpc	r21, r1
    1016:	08 f0       	brcs	.+2      	; 0x101a <nrk_gpio_set+0x14>
    1018:	55 c0       	rjmp	.+170    	; 0x10c4 <nrk_gpio_set+0xbe>
    101a:	fa 01       	movw	r30, r20
    101c:	e0 57       	subi	r30, 0x70	; 112
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	86 95       	lsr	r24
    1022:	86 95       	lsr	r24
    1024:	86 95       	lsr	r24
    1026:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    102a:	92 b1       	in	r25, 0x02	; 2
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	08 2e       	mov	r0, r24
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <nrk_gpio_set+0x30>
    1034:	22 0f       	add	r18, r18
    1036:	0a 94       	dec	r0
    1038:	ea f7       	brpl	.-6      	; 0x1034 <nrk_gpio_set+0x2e>
    103a:	92 2b       	or	r25, r18
    103c:	92 b9       	out	0x02, r25	; 2
    103e:	40 c0       	rjmp	.+128    	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1040:	95 b1       	in	r25, 0x05	; 5
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	08 2e       	mov	r0, r24
    1048:	01 c0       	rjmp	.+2      	; 0x104c <nrk_gpio_set+0x46>
    104a:	22 0f       	add	r18, r18
    104c:	0a 94       	dec	r0
    104e:	ea f7       	brpl	.-6      	; 0x104a <nrk_gpio_set+0x44>
    1050:	92 2b       	or	r25, r18
    1052:	95 b9       	out	0x05, r25	; 5
    1054:	35 c0       	rjmp	.+106    	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1056:	98 b1       	in	r25, 0x08	; 8
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	08 2e       	mov	r0, r24
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <nrk_gpio_set+0x5c>
    1060:	22 0f       	add	r18, r18
    1062:	0a 94       	dec	r0
    1064:	ea f7       	brpl	.-6      	; 0x1060 <nrk_gpio_set+0x5a>
    1066:	92 2b       	or	r25, r18
    1068:	98 b9       	out	0x08, r25	; 8
    106a:	2a c0       	rjmp	.+84     	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    106c:	9b b1       	in	r25, 0x0b	; 11
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	08 2e       	mov	r0, r24
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <nrk_gpio_set+0x72>
    1076:	22 0f       	add	r18, r18
    1078:	0a 94       	dec	r0
    107a:	ea f7       	brpl	.-6      	; 0x1076 <nrk_gpio_set+0x70>
    107c:	92 2b       	or	r25, r18
    107e:	9b b9       	out	0x0b, r25	; 11
    1080:	1f c0       	rjmp	.+62     	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1082:	9e b1       	in	r25, 0x0e	; 14
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	08 2e       	mov	r0, r24
    108a:	01 c0       	rjmp	.+2      	; 0x108e <nrk_gpio_set+0x88>
    108c:	22 0f       	add	r18, r18
    108e:	0a 94       	dec	r0
    1090:	ea f7       	brpl	.-6      	; 0x108c <nrk_gpio_set+0x86>
    1092:	92 2b       	or	r25, r18
    1094:	9e b9       	out	0x0e, r25	; 14
    1096:	14 c0       	rjmp	.+40     	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1098:	91 b3       	in	r25, 0x11	; 17
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	08 2e       	mov	r0, r24
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <nrk_gpio_set+0x9e>
    10a2:	22 0f       	add	r18, r18
    10a4:	0a 94       	dec	r0
    10a6:	ea f7       	brpl	.-6      	; 0x10a2 <nrk_gpio_set+0x9c>
    10a8:	92 2b       	or	r25, r18
    10aa:	91 bb       	out	0x11, r25	; 17
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    10ae:	94 b3       	in	r25, 0x14	; 20
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <nrk_gpio_set+0xb2>
    10b6:	22 0f       	add	r18, r18
    10b8:	8a 95       	dec	r24
    10ba:	ea f7       	brpl	.-6      	; 0x10b6 <nrk_gpio_set+0xb0>
    10bc:	92 2b       	or	r25, r18
    10be:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    10c2:	08 95       	ret
                default: return -1;
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    10c6:	08 95       	ret

000010c8 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	09 f4       	brne	.+2      	; 0x10ce <nrk_gpio_clr+0x6>
    10cc:	57 c0       	rjmp	.+174    	; 0x117c <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    10ce:	48 2f       	mov	r20, r24
    10d0:	47 70       	andi	r20, 0x07	; 7
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	47 30       	cpi	r20, 0x07	; 7
    10d6:	51 05       	cpc	r21, r1
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <nrk_gpio_clr+0x14>
    10da:	50 c0       	rjmp	.+160    	; 0x117c <nrk_gpio_clr+0xb4>
    10dc:	fa 01       	movw	r30, r20
    10de:	e9 56       	subi	r30, 0x69	; 105
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	86 95       	lsr	r24
    10e4:	86 95       	lsr	r24
    10e6:	86 95       	lsr	r24
    10e8:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    10ec:	92 b1       	in	r25, 0x02	; 2
    10ee:	21 e0       	ldi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	08 2e       	mov	r0, r24
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <nrk_gpio_clr+0x30>
    10f6:	22 0f       	add	r18, r18
    10f8:	0a 94       	dec	r0
    10fa:	ea f7       	brpl	.-6      	; 0x10f6 <nrk_gpio_clr+0x2e>
    10fc:	20 95       	com	r18
    10fe:	29 23       	and	r18, r25
    1100:	22 b9       	out	0x02, r18	; 2
    1102:	3a c0       	rjmp	.+116    	; 0x1178 <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1104:	95 b1       	in	r25, 0x05	; 5
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	08 2e       	mov	r0, r24
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <nrk_gpio_clr+0x48>
    110e:	22 0f       	add	r18, r18
    1110:	0a 94       	dec	r0
    1112:	ea f7       	brpl	.-6      	; 0x110e <nrk_gpio_clr+0x46>
    1114:	20 95       	com	r18
    1116:	29 23       	and	r18, r25
    1118:	25 b9       	out	0x05, r18	; 5
    111a:	2e c0       	rjmp	.+92     	; 0x1178 <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    111c:	98 b1       	in	r25, 0x08	; 8
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	08 2e       	mov	r0, r24
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <nrk_gpio_clr+0x60>
    1126:	22 0f       	add	r18, r18
    1128:	0a 94       	dec	r0
    112a:	ea f7       	brpl	.-6      	; 0x1126 <nrk_gpio_clr+0x5e>
    112c:	20 95       	com	r18
    112e:	29 23       	and	r18, r25
    1130:	28 b9       	out	0x08, r18	; 8
    1132:	22 c0       	rjmp	.+68     	; 0x1178 <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1134:	9b b1       	in	r25, 0x0b	; 11
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	08 2e       	mov	r0, r24
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <nrk_gpio_clr+0x78>
    113e:	22 0f       	add	r18, r18
    1140:	0a 94       	dec	r0
    1142:	ea f7       	brpl	.-6      	; 0x113e <nrk_gpio_clr+0x76>
    1144:	20 95       	com	r18
    1146:	29 23       	and	r18, r25
    1148:	2b b9       	out	0x0b, r18	; 11
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    114c:	9e b1       	in	r25, 0x0e	; 14
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	08 2e       	mov	r0, r24
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <nrk_gpio_clr+0x90>
    1156:	22 0f       	add	r18, r18
    1158:	0a 94       	dec	r0
    115a:	ea f7       	brpl	.-6      	; 0x1156 <nrk_gpio_clr+0x8e>
    115c:	20 95       	com	r18
    115e:	29 23       	and	r18, r25
    1160:	2e b9       	out	0x0e, r18	; 14
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1164:	91 b3       	in	r25, 0x11	; 17
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	01 c0       	rjmp	.+2      	; 0x116e <nrk_gpio_clr+0xa6>
    116c:	22 0f       	add	r18, r18
    116e:	8a 95       	dec	r24
    1170:	ea f7       	brpl	.-6      	; 0x116c <nrk_gpio_clr+0xa4>
    1172:	20 95       	com	r18
    1174:	29 23       	and	r18, r25
    1176:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    117a:	08 95       	ret
                default: return -1;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    117e:	08 95       	ret

00001180 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	21 f1       	breq	.+72     	; 0x11cc <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    1184:	48 2f       	mov	r20, r24
    1186:	47 70       	andi	r20, 0x07	; 7
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	47 30       	cpi	r20, 0x07	; 7
    118c:	51 05       	cpc	r21, r1
    118e:	f0 f4       	brcc	.+60     	; 0x11cc <nrk_gpio_get+0x4c>
    1190:	fa 01       	movw	r30, r20
    1192:	e2 56       	subi	r30, 0x62	; 98
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	86 95       	lsr	r24
    1198:	86 95       	lsr	r24
    119a:	86 95       	lsr	r24
    119c:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    11a0:	20 b1       	in	r18, 0x00	; 0
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    11a4:	23 b1       	in	r18, 0x03	; 3
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    11a8:	26 b1       	in	r18, 0x06	; 6
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    11ac:	29 b1       	in	r18, 0x09	; 9
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    11b0:	2c b1       	in	r18, 0x0c	; 12
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    11b4:	2f b1       	in	r18, 0x0f	; 15
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    11b8:	22 b3       	in	r18, 0x12	; 18
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <nrk_gpio_get+0x42>
    11be:	35 95       	asr	r19
    11c0:	27 95       	ror	r18
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <nrk_gpio_get+0x3e>
    11c6:	82 2f       	mov	r24, r18
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	08 95       	ret
                default: return -1;
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11ce:	08 95       	ret

000011d0 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    11d0:	8f 3f       	cpi	r24, 0xFF	; 255
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <nrk_gpio_toggle+0x6>
    11d4:	ef c0       	rjmp	.+478    	; 0x13b4 <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    11d6:	48 2f       	mov	r20, r24
    11d8:	47 70       	andi	r20, 0x07	; 7
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	47 30       	cpi	r20, 0x07	; 7
    11de:	51 05       	cpc	r21, r1
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <nrk_gpio_toggle+0x14>
    11e2:	e8 c0       	rjmp	.+464    	; 0x13b4 <nrk_gpio_toggle+0x1e4>
    11e4:	fa 01       	movw	r30, r20
    11e6:	eb 55       	subi	r30, 0x5B	; 91
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	86 95       	lsr	r24
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    11f4:	20 b1       	in	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	08 2e       	mov	r0, r24
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <nrk_gpio_toggle+0x30>
    11fc:	35 95       	asr	r19
    11fe:	27 95       	ror	r18
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1204:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1206:	20 fd       	sbrc	r18, 0
    1208:	0a c0       	rjmp	.+20     	; 0x121e <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	08 2e       	mov	r0, r24
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <nrk_gpio_toggle+0x44>
    1212:	22 0f       	add	r18, r18
    1214:	0a 94       	dec	r0
    1216:	ea f7       	brpl	.-6      	; 0x1212 <nrk_gpio_toggle+0x42>
    1218:	92 2b       	or	r25, r18
    121a:	92 b9       	out	0x02, r25	; 2
    121c:	1e c0       	rjmp	.+60     	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	08 2e       	mov	r0, r24
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <nrk_gpio_toggle+0x58>
    1226:	22 0f       	add	r18, r18
    1228:	0a 94       	dec	r0
    122a:	ea f7       	brpl	.-6      	; 0x1226 <nrk_gpio_toggle+0x56>
    122c:	20 95       	com	r18
    122e:	29 23       	and	r18, r25
    1230:	22 b9       	out	0x02, r18	; 2
    1232:	13 c0       	rjmp	.+38     	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1234:	23 b1       	in	r18, 0x03	; 3
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	08 2e       	mov	r0, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <nrk_gpio_toggle+0x70>
    123c:	35 95       	asr	r19
    123e:	27 95       	ror	r18
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1244:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1246:	20 fd       	sbrc	r18, 0
    1248:	0a c0       	rjmp	.+20     	; 0x125e <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <nrk_gpio_toggle+0x82>
    1250:	22 0f       	add	r18, r18
    1252:	8a 95       	dec	r24
    1254:	ea f7       	brpl	.-6      	; 0x1250 <nrk_gpio_toggle+0x80>
    1256:	92 2b       	or	r25, r18
    1258:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	08 2e       	mov	r0, r24
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <nrk_gpio_toggle+0x98>
    1266:	22 0f       	add	r18, r18
    1268:	0a 94       	dec	r0
    126a:	ea f7       	brpl	.-6      	; 0x1266 <nrk_gpio_toggle+0x96>
    126c:	20 95       	com	r18
    126e:	29 23       	and	r18, r25
    1270:	25 b9       	out	0x05, r18	; 5
    1272:	f3 cf       	rjmp	.-26     	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1274:	26 b1       	in	r18, 0x06	; 6
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	08 2e       	mov	r0, r24
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <nrk_gpio_toggle+0xb0>
    127c:	35 95       	asr	r19
    127e:	27 95       	ror	r18
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1284:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1286:	20 fd       	sbrc	r18, 0
    1288:	0a c0       	rjmp	.+20     	; 0x129e <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	08 2e       	mov	r0, r24
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <nrk_gpio_toggle+0xc4>
    1292:	22 0f       	add	r18, r18
    1294:	0a 94       	dec	r0
    1296:	ea f7       	brpl	.-6      	; 0x1292 <nrk_gpio_toggle+0xc2>
    1298:	92 2b       	or	r25, r18
    129a:	98 b9       	out	0x08, r25	; 8
    129c:	de cf       	rjmp	.-68     	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	08 2e       	mov	r0, r24
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <nrk_gpio_toggle+0xd8>
    12a6:	22 0f       	add	r18, r18
    12a8:	0a 94       	dec	r0
    12aa:	ea f7       	brpl	.-6      	; 0x12a6 <nrk_gpio_toggle+0xd6>
    12ac:	20 95       	com	r18
    12ae:	29 23       	and	r18, r25
    12b0:	28 b9       	out	0x08, r18	; 8
    12b2:	d3 cf       	rjmp	.-90     	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    12b4:	29 b1       	in	r18, 0x09	; 9
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	08 2e       	mov	r0, r24
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <nrk_gpio_toggle+0xf0>
    12bc:	35 95       	asr	r19
    12be:	27 95       	ror	r18
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    12c4:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    12c6:	20 fd       	sbrc	r18, 0
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	08 2e       	mov	r0, r24
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <nrk_gpio_toggle+0x104>
    12d2:	22 0f       	add	r18, r18
    12d4:	0a 94       	dec	r0
    12d6:	ea f7       	brpl	.-6      	; 0x12d2 <nrk_gpio_toggle+0x102>
    12d8:	92 2b       	or	r25, r18
    12da:	9b b9       	out	0x0b, r25	; 11
    12dc:	be cf       	rjmp	.-132    	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	08 2e       	mov	r0, r24
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <nrk_gpio_toggle+0x118>
    12e6:	22 0f       	add	r18, r18
    12e8:	0a 94       	dec	r0
    12ea:	ea f7       	brpl	.-6      	; 0x12e6 <nrk_gpio_toggle+0x116>
    12ec:	20 95       	com	r18
    12ee:	29 23       	and	r18, r25
    12f0:	2b b9       	out	0x0b, r18	; 11
    12f2:	b3 cf       	rjmp	.-154    	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    12f4:	2c b1       	in	r18, 0x0c	; 12
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	08 2e       	mov	r0, r24
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <nrk_gpio_toggle+0x130>
    12fc:	35 95       	asr	r19
    12fe:	27 95       	ror	r18
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1304:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1306:	20 fd       	sbrc	r18, 0
    1308:	0a c0       	rjmp	.+20     	; 0x131e <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	08 2e       	mov	r0, r24
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <nrk_gpio_toggle+0x144>
    1312:	22 0f       	add	r18, r18
    1314:	0a 94       	dec	r0
    1316:	ea f7       	brpl	.-6      	; 0x1312 <nrk_gpio_toggle+0x142>
    1318:	92 2b       	or	r25, r18
    131a:	9e b9       	out	0x0e, r25	; 14
    131c:	9e cf       	rjmp	.-196    	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	08 2e       	mov	r0, r24
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <nrk_gpio_toggle+0x158>
    1326:	22 0f       	add	r18, r18
    1328:	0a 94       	dec	r0
    132a:	ea f7       	brpl	.-6      	; 0x1326 <nrk_gpio_toggle+0x156>
    132c:	20 95       	com	r18
    132e:	29 23       	and	r18, r25
    1330:	2e b9       	out	0x0e, r18	; 14
    1332:	93 cf       	rjmp	.-218    	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1334:	2f b1       	in	r18, 0x0f	; 15
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	08 2e       	mov	r0, r24
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <nrk_gpio_toggle+0x170>
    133c:	35 95       	asr	r19
    133e:	27 95       	ror	r18
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1344:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1346:	20 fd       	sbrc	r18, 0
    1348:	0a c0       	rjmp	.+20     	; 0x135e <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	08 2e       	mov	r0, r24
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <nrk_gpio_toggle+0x184>
    1352:	22 0f       	add	r18, r18
    1354:	0a 94       	dec	r0
    1356:	ea f7       	brpl	.-6      	; 0x1352 <nrk_gpio_toggle+0x182>
    1358:	92 2b       	or	r25, r18
    135a:	91 bb       	out	0x11, r25	; 17
    135c:	7e cf       	rjmp	.-260    	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	08 2e       	mov	r0, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <nrk_gpio_toggle+0x198>
    1366:	22 0f       	add	r18, r18
    1368:	0a 94       	dec	r0
    136a:	ea f7       	brpl	.-6      	; 0x1366 <nrk_gpio_toggle+0x196>
    136c:	20 95       	com	r18
    136e:	29 23       	and	r18, r25
    1370:	21 bb       	out	0x11, r18	; 17
    1372:	73 cf       	rjmp	.-282    	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1374:	22 b3       	in	r18, 0x12	; 18
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	08 2e       	mov	r0, r24
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <nrk_gpio_toggle+0x1b0>
    137c:	35 95       	asr	r19
    137e:	27 95       	ror	r18
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1384:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1386:	20 fd       	sbrc	r18, 0
    1388:	0a c0       	rjmp	.+20     	; 0x139e <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	08 2e       	mov	r0, r24
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <nrk_gpio_toggle+0x1c4>
    1392:	22 0f       	add	r18, r18
    1394:	0a 94       	dec	r0
    1396:	ea f7       	brpl	.-6      	; 0x1392 <nrk_gpio_toggle+0x1c2>
    1398:	92 2b       	or	r25, r18
    139a:	94 bb       	out	0x14, r25	; 20
    139c:	5e cf       	rjmp	.-324    	; 0x125a <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    139e:	21 e0       	ldi	r18, 0x01	; 1
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	08 2e       	mov	r0, r24
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <nrk_gpio_toggle+0x1d8>
    13a6:	22 0f       	add	r18, r18
    13a8:	0a 94       	dec	r0
    13aa:	ea f7       	brpl	.-6      	; 0x13a6 <nrk_gpio_toggle+0x1d6>
    13ac:	20 95       	com	r18
    13ae:	29 23       	and	r18, r25
    13b0:	24 bb       	out	0x14, r18	; 20
    13b2:	53 cf       	rjmp	.-346    	; 0x125a <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    13b6:	08 95       	ret

000013b8 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    13b8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ba:	09 f4       	brne	.+2      	; 0x13be <nrk_gpio_direction+0x6>
    13bc:	be c0       	rjmp	.+380    	; 0x153a <nrk_gpio_direction+0x182>
    13be:	48 2f       	mov	r20, r24
    13c0:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    13c2:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    13c4:	61 11       	cpse	r22, r1
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    13c8:	47 30       	cpi	r20, 0x07	; 7
    13ca:	51 05       	cpc	r21, r1
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <nrk_gpio_direction+0x18>
    13ce:	b5 c0       	rjmp	.+362    	; 0x153a <nrk_gpio_direction+0x182>
    13d0:	fa 01       	movw	r30, r20
    13d2:	e4 55       	subi	r30, 0x54	; 84
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	86 95       	lsr	r24
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    13e0:	91 b1       	in	r25, 0x01	; 1
    13e2:	21 e0       	ldi	r18, 0x01	; 1
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	08 2e       	mov	r0, r24
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <nrk_gpio_direction+0x34>
    13ea:	22 0f       	add	r18, r18
    13ec:	0a 94       	dec	r0
    13ee:	ea f7       	brpl	.-6      	; 0x13ea <nrk_gpio_direction+0x32>
    13f0:	20 95       	com	r18
    13f2:	29 23       	and	r18, r25
    13f4:	21 b9       	out	0x01, r18	; 1
    13f6:	9f c0       	rjmp	.+318    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    13f8:	94 b1       	in	r25, 0x04	; 4
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	08 2e       	mov	r0, r24
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <nrk_gpio_direction+0x4c>
    1402:	22 0f       	add	r18, r18
    1404:	0a 94       	dec	r0
    1406:	ea f7       	brpl	.-6      	; 0x1402 <nrk_gpio_direction+0x4a>
    1408:	20 95       	com	r18
    140a:	29 23       	and	r18, r25
    140c:	24 b9       	out	0x04, r18	; 4
    140e:	93 c0       	rjmp	.+294    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1410:	97 b1       	in	r25, 0x07	; 7
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	08 2e       	mov	r0, r24
    1418:	01 c0       	rjmp	.+2      	; 0x141c <nrk_gpio_direction+0x64>
    141a:	22 0f       	add	r18, r18
    141c:	0a 94       	dec	r0
    141e:	ea f7       	brpl	.-6      	; 0x141a <nrk_gpio_direction+0x62>
    1420:	20 95       	com	r18
    1422:	29 23       	and	r18, r25
    1424:	27 b9       	out	0x07, r18	; 7
    1426:	87 c0       	rjmp	.+270    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1428:	9a b1       	in	r25, 0x0a	; 10
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	08 2e       	mov	r0, r24
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <nrk_gpio_direction+0x7c>
    1432:	22 0f       	add	r18, r18
    1434:	0a 94       	dec	r0
    1436:	ea f7       	brpl	.-6      	; 0x1432 <nrk_gpio_direction+0x7a>
    1438:	20 95       	com	r18
    143a:	29 23       	and	r18, r25
    143c:	2a b9       	out	0x0a, r18	; 10
    143e:	7b c0       	rjmp	.+246    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1440:	9d b1       	in	r25, 0x0d	; 13
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	08 2e       	mov	r0, r24
    1448:	01 c0       	rjmp	.+2      	; 0x144c <nrk_gpio_direction+0x94>
    144a:	22 0f       	add	r18, r18
    144c:	0a 94       	dec	r0
    144e:	ea f7       	brpl	.-6      	; 0x144a <nrk_gpio_direction+0x92>
    1450:	20 95       	com	r18
    1452:	29 23       	and	r18, r25
    1454:	2d b9       	out	0x0d, r18	; 13
    1456:	6f c0       	rjmp	.+222    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1458:	90 b3       	in	r25, 0x10	; 16
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	08 2e       	mov	r0, r24
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <nrk_gpio_direction+0xac>
    1462:	22 0f       	add	r18, r18
    1464:	0a 94       	dec	r0
    1466:	ea f7       	brpl	.-6      	; 0x1462 <nrk_gpio_direction+0xaa>
    1468:	20 95       	com	r18
    146a:	29 23       	and	r18, r25
    146c:	20 bb       	out	0x10, r18	; 16
    146e:	63 c0       	rjmp	.+198    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1470:	93 b3       	in	r25, 0x13	; 19
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	08 2e       	mov	r0, r24
    1478:	01 c0       	rjmp	.+2      	; 0x147c <nrk_gpio_direction+0xc4>
    147a:	22 0f       	add	r18, r18
    147c:	0a 94       	dec	r0
    147e:	ea f7       	brpl	.-6      	; 0x147a <nrk_gpio_direction+0xc2>
    1480:	20 95       	com	r18
    1482:	29 23       	and	r18, r25
    1484:	23 bb       	out	0x13, r18	; 19
    1486:	57 c0       	rjmp	.+174    	; 0x1536 <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1488:	47 30       	cpi	r20, 0x07	; 7
    148a:	51 05       	cpc	r21, r1
    148c:	08 f0       	brcs	.+2      	; 0x1490 <nrk_gpio_direction+0xd8>
    148e:	55 c0       	rjmp	.+170    	; 0x153a <nrk_gpio_direction+0x182>
    1490:	fa 01       	movw	r30, r20
    1492:	ed 54       	subi	r30, 0x4D	; 77
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	86 95       	lsr	r24
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    14a0:	91 b1       	in	r25, 0x01	; 1
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	08 2e       	mov	r0, r24
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <nrk_gpio_direction+0xf4>
    14aa:	22 0f       	add	r18, r18
    14ac:	0a 94       	dec	r0
    14ae:	ea f7       	brpl	.-6      	; 0x14aa <nrk_gpio_direction+0xf2>
    14b0:	92 2b       	or	r25, r18
    14b2:	91 b9       	out	0x01, r25	; 1
    14b4:	40 c0       	rjmp	.+128    	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    14b6:	94 b1       	in	r25, 0x04	; 4
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	08 2e       	mov	r0, r24
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <nrk_gpio_direction+0x10a>
    14c0:	22 0f       	add	r18, r18
    14c2:	0a 94       	dec	r0
    14c4:	ea f7       	brpl	.-6      	; 0x14c0 <nrk_gpio_direction+0x108>
    14c6:	92 2b       	or	r25, r18
    14c8:	94 b9       	out	0x04, r25	; 4
    14ca:	35 c0       	rjmp	.+106    	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    14cc:	97 b1       	in	r25, 0x07	; 7
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	08 2e       	mov	r0, r24
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <nrk_gpio_direction+0x120>
    14d6:	22 0f       	add	r18, r18
    14d8:	0a 94       	dec	r0
    14da:	ea f7       	brpl	.-6      	; 0x14d6 <nrk_gpio_direction+0x11e>
    14dc:	92 2b       	or	r25, r18
    14de:	97 b9       	out	0x07, r25	; 7
    14e0:	2a c0       	rjmp	.+84     	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    14e2:	9a b1       	in	r25, 0x0a	; 10
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	08 2e       	mov	r0, r24
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <nrk_gpio_direction+0x136>
    14ec:	22 0f       	add	r18, r18
    14ee:	0a 94       	dec	r0
    14f0:	ea f7       	brpl	.-6      	; 0x14ec <nrk_gpio_direction+0x134>
    14f2:	92 2b       	or	r25, r18
    14f4:	9a b9       	out	0x0a, r25	; 10
    14f6:	1f c0       	rjmp	.+62     	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    14f8:	9d b1       	in	r25, 0x0d	; 13
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	08 2e       	mov	r0, r24
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <nrk_gpio_direction+0x14c>
    1502:	22 0f       	add	r18, r18
    1504:	0a 94       	dec	r0
    1506:	ea f7       	brpl	.-6      	; 0x1502 <nrk_gpio_direction+0x14a>
    1508:	92 2b       	or	r25, r18
    150a:	9d b9       	out	0x0d, r25	; 13
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    150e:	90 b3       	in	r25, 0x10	; 16
    1510:	21 e0       	ldi	r18, 0x01	; 1
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	08 2e       	mov	r0, r24
    1516:	01 c0       	rjmp	.+2      	; 0x151a <nrk_gpio_direction+0x162>
    1518:	22 0f       	add	r18, r18
    151a:	0a 94       	dec	r0
    151c:	ea f7       	brpl	.-6      	; 0x1518 <nrk_gpio_direction+0x160>
    151e:	92 2b       	or	r25, r18
    1520:	90 bb       	out	0x10, r25	; 16
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1524:	93 b3       	in	r25, 0x13	; 19
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	01 c0       	rjmp	.+2      	; 0x152e <nrk_gpio_direction+0x176>
    152c:	22 0f       	add	r18, r18
    152e:	8a 95       	dec	r24
    1530:	ea f7       	brpl	.-6      	; 0x152c <nrk_gpio_direction+0x174>
    1532:	92 2b       	or	r25, r18
    1534:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1538:	08 95       	ret
                        default: return -1;
    153a:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    153c:	08 95       	ret

0000153e <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    153e:	81 11       	cpse	r24, r1
    1540:	06 c0       	rjmp	.+12     	; 0x154e <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1542:	80 b1       	in	r24, 0x00	; 0
    1544:	86 95       	lsr	r24
    1546:	81 70       	andi	r24, 0x01	; 1
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	89 27       	eor	r24, r25
    154c:	08 95       	ret
	} 
return -1;
    154e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1550:	08 95       	ret

00001552 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	11 f4       	brne	.+4      	; 0x155a <nrk_led_toggle+0x8>
    1556:	83 e2       	ldi	r24, 0x23	; 35
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	11 f4       	brne	.+4      	; 0x1564 <nrk_led_toggle+0x12>
    1560:	8b e2       	ldi	r24, 0x2B	; 43
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	11 f4       	brne	.+4      	; 0x156e <nrk_led_toggle+0x1c>
    156a:	83 e3       	ldi	r24, 0x33	; 51
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    156e:	03 97       	sbiw	r24, 0x03	; 3
    1570:	29 f4       	brne	.+10     	; 0x157c <nrk_led_toggle+0x2a>
    1572:	8b e3       	ldi	r24, 0x3B	; 59
    1574:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <nrk_gpio_toggle>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret
return -1;
    157c:	8f ef       	ldi	r24, 0xFF	; 255
}
    157e:	08 95       	ret

00001580 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	11 f4       	brne	.+4      	; 0x1588 <nrk_led_clr+0x8>
    1584:	83 e2       	ldi	r24, 0x23	; 35
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	11 f4       	brne	.+4      	; 0x1592 <nrk_led_clr+0x12>
    158e:	8b e2       	ldi	r24, 0x2B	; 43
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	91 05       	cpc	r25, r1
    1596:	11 f4       	brne	.+4      	; 0x159c <nrk_led_clr+0x1c>
    1598:	83 e3       	ldi	r24, 0x33	; 51
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    159c:	03 97       	sbiw	r24, 0x03	; 3
    159e:	29 f4       	brne	.+10     	; 0x15aa <nrk_led_clr+0x2a>
    15a0:	8b e3       	ldi	r24, 0x3B	; 59
    15a2:	0e 94 03 08 	call	0x1006	; 0x1006 <nrk_gpio_set>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	08 95       	ret
return -1;
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
}
    15ac:	08 95       	ret

000015ae <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <nrk_led_set+0x8>
    15b2:	83 e2       	ldi	r24, 0x23	; 35
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 05       	cpc	r25, r1
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <nrk_led_set+0x12>
    15bc:	8b e2       	ldi	r24, 0x2B	; 43
    15be:	08 c0       	rjmp	.+16     	; 0x15d0 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	11 f4       	brne	.+4      	; 0x15ca <nrk_led_set+0x1c>
    15c6:	83 e3       	ldi	r24, 0x33	; 51
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    15ca:	03 97       	sbiw	r24, 0x03	; 3
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <nrk_led_set+0x2a>
    15ce:	8b e3       	ldi	r24, 0x3B	; 59
    15d0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <nrk_gpio_clr>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	08 95       	ret
return -1;
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
}
    15da:	08 95       	ret

000015dc <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    15dc:	88 23       	and	r24, r24
    15de:	19 f0       	breq	.+6      	; 0x15e6 <nrk_gpio_pullups+0xa>
    15e0:	85 b7       	in	r24, 0x35	; 53
    15e2:	8f 7e       	andi	r24, 0xEF	; 239
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    15e6:	85 b7       	in	r24, 0x35	; 53
    15e8:	80 61       	ori	r24, 0x10	; 16
    15ea:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	08 95       	ret

000015f0 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    15f0:	90 91 c8 00 	lds	r25, 0x00C8
    15f4:	95 ff       	sbrs	r25, 5
    15f6:	fc cf       	rjmp	.-8      	; 0x15f0 <putc1>
    15f8:	80 93 ce 00 	sts	0x00CE, r24
    15fc:	08 95       	ret

000015fe <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    15fe:	90 93 c5 00 	sts	0x00C5, r25
    1602:	80 93 c4 00 	sts	0x00C4, r24
    1606:	86 e0       	ldi	r24, 0x06	; 6
    1608:	80 93 c2 00 	sts	0x00C2, r24
    160c:	e1 ec       	ldi	r30, 0xC1	; 193
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8b 7f       	andi	r24, 0xFB	; 251
    1614:	80 83       	st	Z, r24
    1616:	a0 ec       	ldi	r26, 0xC0	; 192
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	8c 91       	ld	r24, X
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	8c 93       	st	X, r24
ENABLE_UART0();
    1620:	80 81       	ld	r24, Z
    1622:	88 61       	ori	r24, 0x18	; 24
    1624:	80 83       	st	Z, r24
    1626:	08 95       	ret

00001628 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1628:	90 93 cd 00 	sts	0x00CD, r25
    162c:	80 93 cc 00 	sts	0x00CC, r24
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	80 93 ca 00 	sts	0x00CA, r24
    1636:	e9 ec       	ldi	r30, 0xC9	; 201
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8b 7f       	andi	r24, 0xFB	; 251
    163e:	80 83       	st	Z, r24
    1640:	a8 ec       	ldi	r26, 0xC8	; 200
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	8c 91       	ld	r24, X
    1646:	82 60       	ori	r24, 0x02	; 2
    1648:	8c 93       	st	X, r24
ENABLE_UART1();
    164a:	80 81       	ld	r24, Z
    164c:	88 61       	ori	r24, 0x18	; 24
    164e:	80 83       	st	Z, r24
    1650:	08 95       	ret

00001652 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1652:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1656:	69 eb       	ldi	r22, 0xB9	; 185
    1658:	77 e0       	ldi	r23, 0x07	; 7
    165a:	85 ec       	ldi	r24, 0xC5	; 197
    165c:	97 e0       	ldi	r25, 0x07	; 7
    165e:	0e 94 77 24 	call	0x48ee	; 0x48ee <fdevopen>
    1662:	90 93 41 06 	sts	0x0641, r25
    1666:	80 93 40 06 	sts	0x0640, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    166a:	69 eb       	ldi	r22, 0xB9	; 185
    166c:	77 e0       	ldi	r23, 0x07	; 7
    166e:	85 ec       	ldi	r24, 0xC5	; 197
    1670:	97 e0       	ldi	r25, 0x07	; 7
    1672:	0e 94 77 24 	call	0x48ee	; 0x48ee <fdevopen>
    1676:	90 93 3f 06 	sts	0x063F, r25
    167a:	80 93 3e 06 	sts	0x063E, r24
    167e:	08 95       	ret

00001680 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1680:	80 91 c8 00 	lds	r24, 0x00C8
    1684:	87 ff       	sbrs	r24, 7
    1686:	fc cf       	rjmp	.-8      	; 0x1680 <getc1>
    1688:	80 91 c8 00 	lds	r24, 0x00C8
    168c:	8f 77       	andi	r24, 0x7F	; 127
    168e:	80 93 c8 00 	sts	0x00C8, r24
    1692:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1696:	08 95       	ret

00001698 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <halWait>

} // halWait
    16a6:	08 95       	ret

000016a8 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    16a8:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>

000016ac <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    16ac:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__eewr_byte_m128rfa1>
}
    16b0:	08 95       	ret

000016b2 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    16c8:	f8 2e       	mov	r15, r24
    16ca:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    16d4:	e8 2e       	mov	r14, r24
    16d6:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    16e0:	08 2f       	mov	r16, r24
    16e2:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    16ec:	18 2f       	mov	r17, r24
    16ee:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    16f0:	84 e0       	ldi	r24, 0x04	; 4
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    16f8:	9e 2d       	mov	r25, r14
    16fa:	9f 0d       	add	r25, r15
ct+=buf[2];
    16fc:	90 0f       	add	r25, r16
ct+=buf[3];
    16fe:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    1700:	89 13       	cpse	r24, r25
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <read_eeprom_mac_address+0x56>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	01 c0       	rjmp	.+2      	; 0x170a <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    1708:	8f ef       	ldi	r24, 0xFF	; 255
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	08 95       	ret

00001718 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    1726:	88 83       	st	Y, r24
return NRK_OK;
}
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1730:	fc 01       	movw	r30, r24
    1732:	60 81       	ld	r22, Z
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	08 95       	ret

00001740 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1746:	86 e0       	ldi	r24, 0x06	; 6
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    174e:	88 83       	st	Y, r24
  return NRK_OK;
}
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	8c 01       	movw	r16, r24
    1762:	c8 e0       	ldi	r28, 0x08	; 8
    1764:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1766:	ce 01       	movw	r24, r28
    1768:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    176c:	f8 01       	movw	r30, r16
    176e:	81 93       	st	Z+, r24
    1770:	8f 01       	movw	r16, r30
    1772:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1774:	c8 31       	cpi	r28, 0x18	; 24
    1776:	d1 05       	cpc	r29, r1
    1778:	b1 f7       	brne	.-20     	; 0x1766 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	8c 01       	movw	r16, r24
    1790:	c8 e0       	ldi	r28, 0x08	; 8
    1792:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1794:	f8 01       	movw	r30, r16
    1796:	61 91       	ld	r22, Z+
    1798:	8f 01       	movw	r16, r30
    179a:	ce 01       	movw	r24, r28
    179c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__eewr_byte_m128rfa1>
    17a0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17a2:	c8 31       	cpi	r28, 0x18	; 24
    17a4:	d1 05       	cpc	r29, r1
    17a6:	b1 f7       	brne	.-20     	; 0x1794 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    17ba:	87 e0       	ldi	r24, 0x07	; 7
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__eerd_byte_m128rfa1>
    17c2:	88 83       	st	Y, r24
  return NRK_OK;
}
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    17cc:	fc 01       	movw	r30, r24
    17ce:	60 81       	ld	r22, Z
    17d0:	87 e0       	ldi	r24, 0x07	; 7
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	08 95       	ret

000017dc <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    17dc:	f8 94       	cli
    17de:	08 95       	ret

000017e0 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    17e0:	78 94       	sei
    17e2:	08 95       	ret

000017e4 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    17e4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    17e8:	ff cf       	rjmp	.-2      	; 0x17e8 <nrk_halt+0x4>

000017ea <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	a3 97       	sbiw	r28, 0x23	; 35
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    17fe:	0e 94 9d 10 	call	0x213a	; 0x213a <nrk_signal_create>
    1802:	80 93 09 06 	sts	0x0609, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1806:	8f 3f       	cpi	r24, 0xFF	; 255
    1808:	21 f4       	brne	.+8      	; 0x1812 <nrk_init+0x28>
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	8e e0       	ldi	r24, 0x0E	; 14
    180e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1812:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1816:	80 ff       	sbrs	r24, 0
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <nrk_init+0x38>
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1822:	10 92 0c 06 	sts	0x060C, r1
    nrk_cur_task_TCB = NULL;
    1826:	10 92 1a 06 	sts	0x061A, r1
    182a:	10 92 19 06 	sts	0x0619, r1
    
    nrk_high_ready_TCB = NULL;
    182e:	10 92 0b 06 	sts	0x060B, r1
    1832:	10 92 0a 06 	sts	0x060A, r1
    nrk_high_ready_prio = 0; 
    1836:	10 92 1b 06 	sts	0x061B, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    183a:	10 92 18 06 	sts	0x0618, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	80 93 05 06 	sts	0x0605, r24
    nrk_sem_list[i].value=-1;
    1844:	80 93 07 06 	sts	0x0607, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1848:	80 93 06 06 	sts	0x0606, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    184c:	93 e6       	ldi	r25, 0x63	; 99
    184e:	90 93 61 05 	sts	0x0561, r25
        nrk_task_TCB[i].task_ID = -1; 
    1852:	80 93 5f 05 	sts	0x055F, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1856:	90 93 8c 05 	sts	0x058C, r25
        nrk_task_TCB[i].task_ID = -1; 
    185a:	80 93 8a 05 	sts	0x058A, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    185e:	90 93 b7 05 	sts	0x05B7, r25
        nrk_task_TCB[i].task_ID = -1; 
    1862:	80 93 b5 05 	sts	0x05B5, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1866:	90 93 e2 05 	sts	0x05E2, r25
        nrk_task_TCB[i].task_ID = -1; 
    186a:	80 93 e0 05 	sts	0x05E0, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    186e:	21 e2       	ldi	r18, 0x21	; 33
    1870:	36 e0       	ldi	r19, 0x06	; 6
    1872:	30 93 20 06 	sts	0x0620, r19
    1876:	20 93 1f 06 	sts	0x061F, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    187a:	8c e1       	ldi	r24, 0x1C	; 28
    187c:	96 e0       	ldi	r25, 0x06	; 6
    187e:	90 93 23 06 	sts	0x0623, r25
    1882:	80 93 22 06 	sts	0x0622, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1886:	46 e2       	ldi	r20, 0x26	; 38
    1888:	56 e0       	ldi	r21, 0x06	; 6
    188a:	50 93 25 06 	sts	0x0625, r21
    188e:	40 93 24 06 	sts	0x0624, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1892:	30 93 28 06 	sts	0x0628, r19
    1896:	20 93 27 06 	sts	0x0627, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    189a:	2b e2       	ldi	r18, 0x2B	; 43
    189c:	36 e0       	ldi	r19, 0x06	; 6
    189e:	30 93 2a 06 	sts	0x062A, r19
    18a2:	20 93 29 06 	sts	0x0629, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18a6:	50 93 2d 06 	sts	0x062D, r21
    18aa:	40 93 2c 06 	sts	0x062C, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18ae:	40 e3       	ldi	r20, 0x30	; 48
    18b0:	56 e0       	ldi	r21, 0x06	; 6
    18b2:	50 93 2f 06 	sts	0x062F, r21
    18b6:	40 93 2e 06 	sts	0x062E, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18ba:	30 93 32 06 	sts	0x0632, r19
    18be:	20 93 31 06 	sts	0x0631, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    18c2:	10 92 1e 06 	sts	0x061E, r1
    18c6:	10 92 1d 06 	sts	0x061D, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    18ca:	10 92 34 06 	sts	0x0634, r1
    18ce:	10 92 33 06 	sts	0x0633, r1
	_head_node = NULL;
    18d2:	10 92 0f 06 	sts	0x060F, r1
    18d6:	10 92 0e 06 	sts	0x060E, r1
	_free_node = &_nrk_readyQ[0];
    18da:	90 93 56 05 	sts	0x0556, r25
    18de:	80 93 55 05 	sts	0x0555, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    18e2:	65 e1       	ldi	r22, 0x15	; 21
    18e4:	7a e1       	ldi	r23, 0x1A	; 26
    18e6:	ce 01       	movw	r24, r28
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	0e 94 1e 21 	call	0x423c	; 0x423c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	6d ec       	ldi	r22, 0xCD	; 205
    18f4:	74 e0       	ldi	r23, 0x04	; 4
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 22 21 	call	0x4244	; 0x4244 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    18fe:	85 e5       	ldi	r24, 0x55	; 85
    1900:	80 93 cd 04 	sts	0x04CD, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1904:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1906:	1c 86       	std	Y+12, r1	; 0x0c
    1908:	1d 86       	std	Y+13, r1	; 0x0d
    190a:	1e 86       	std	Y+14, r1	; 0x0e
    190c:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    190e:	18 8a       	std	Y+16, r1	; 0x10
    1910:	19 8a       	std	Y+17, r1	; 0x11
    1912:	1a 8a       	std	Y+18, r1	; 0x12
    1914:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1916:	1c 8a       	std	Y+20, r1	; 0x14
    1918:	1d 8a       	std	Y+21, r1	; 0x15
    191a:	1e 8a       	std	Y+22, r1	; 0x16
    191c:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    191e:	18 8e       	std	Y+24, r1	; 0x18
    1920:	19 8e       	std	Y+25, r1	; 0x19
    1922:	1a 8e       	std	Y+26, r1	; 0x1a
    1924:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1926:	1c 8e       	std	Y+28, r1	; 0x1c
    1928:	1d 8e       	std	Y+29, r1	; 0x1d
    192a:	1e 8e       	std	Y+30, r1	; 0x1e
    192c:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    192e:	18 a2       	std	Y+32, r1	; 0x20
    1930:	19 a2       	std	Y+33, r1	; 0x21
    1932:	1a a2       	std	Y+34, r1	; 0x22
    1934:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    193e:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	0e 94 af 14 	call	0x295e	; 0x295e <nrk_activate_task>
	
}
    1948:	a3 96       	adiw	r28, 0x23	; 35
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <nrk_start>:




void nrk_start (void)
{
    195a:	cf e5       	ldi	r28, 0x5F	; 95
    195c:	d5 e0       	ldi	r29, 0x05	; 5
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    195e:	f1 2c       	mov	r15, r1
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1960:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	d8 12       	cpse	r13, r24
    1966:	21 c0       	rjmp	.+66     	; 0x19aa <nrk_start+0x50>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1968:	f3 94       	inc	r15
    196a:	ab 96       	adiw	r28, 0x2b	; 43
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	f9 12       	cpse	r15, r25
    1970:	f7 cf       	rjmp	.-18     	; 0x1960 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1972:	0e 94 ac 13 	call	0x2758	; 0x2758 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1976:	9b e2       	ldi	r25, 0x2B	; 43
    1978:	89 02       	muls	r24, r25
    197a:	f0 01       	movw	r30, r0
    197c:	11 24       	eor	r1, r1
    197e:	e9 5a       	subi	r30, 0xA9	; 169
    1980:	fa 4f       	sbci	r31, 0xFA	; 250
    1982:	82 85       	ldd	r24, Z+10	; 0x0a
    1984:	80 93 1b 06 	sts	0x061B, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1988:	f0 93 1a 06 	sts	0x061A, r31
    198c:	e0 93 19 06 	sts	0x0619, r30
    1990:	f0 93 0b 06 	sts	0x060B, r31
    1994:	e0 93 0a 06 	sts	0x060A, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1998:	80 93 0c 06 	sts	0x060C, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    199c:	0e 94 a6 21 	call	0x434c	; 0x434c <nrk_target_start>
    nrk_stack_pointer_init(); 
    19a0:	0e 94 90 21 	call	0x4320	; 0x4320 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    19a4:	0e 94 aa 21 	call	0x4354	; 0x4354 <nrk_start_high_ready_task>
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <nrk_start+0x78>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    19aa:	0f e5       	ldi	r16, 0x5F	; 95
    19ac:	15 e0       	ldi	r17, 0x05	; 5
    19ae:	e1 2c       	mov	r14, r1
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    19b0:	fe 14       	cp	r15, r14
    19b2:	41 f0       	breq	.+16     	; 0x19c4 <nrk_start+0x6a>
    19b4:	f8 01       	movw	r30, r16
    19b6:	80 81       	ld	r24, Z
    19b8:	d8 12       	cpse	r13, r24
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <nrk_start+0x6a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    19bc:	6d 2d       	mov	r22, r13
    19be:	85 e0       	ldi	r24, 0x05	; 5
    19c0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    19c4:	e3 94       	inc	r14
    19c6:	05 5d       	subi	r16, 0xD5	; 213
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	f4 e0       	ldi	r31, 0x04	; 4
    19cc:	ef 12       	cpse	r14, r31
    19ce:	f0 cf       	rjmp	.-32     	; 0x19b0 <nrk_start+0x56>
    19d0:	cb cf       	rjmp	.-106    	; 0x1968 <nrk_start+0xe>
    19d2:	ff cf       	rjmp	.-2      	; 0x19d2 <nrk_start+0x78>

000019d4 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	1f 92       	push	r1
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	5c 01       	movw	r10, r24
    19f0:	6b 01       	movw	r12, r22
    19f2:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    19f4:	dc 01       	movw	r26, r24
    19f6:	19 96       	adiw	r26, 0x09	; 9
    19f8:	8c 91       	ld	r24, X
    19fa:	19 97       	sbiw	r26, 0x09	; 9
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	21 f0       	breq	.+8      	; 0x1a08 <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    1a00:	80 91 08 06 	lds	r24, 0x0608
    1a04:	8c 93       	st	X, r24
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1a08:	f5 01       	movw	r30, r10
    1a0a:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1a0c:	80 91 08 06 	lds	r24, 0x0608
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	20 f0       	brcs	.+8      	; 0x1a1c <nrk_TCB_init+0x48>
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	87 e0       	ldi	r24, 0x07	; 7
    1a18:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1a1c:	d5 01       	movw	r26, r10
    1a1e:	19 96       	adiw	r26, 0x09	; 9
    1a20:	8c 91       	ld	r24, X
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	29 f0       	breq	.+10     	; 0x1a30 <nrk_TCB_init+0x5c>
    1a26:	80 91 08 06 	lds	r24, 0x0608
    1a2a:	8f 5f       	subi	r24, 0xFF	; 255
    1a2c:	80 93 08 06 	sts	0x0608, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1a30:	80 91 08 06 	lds	r24, 0x0608
    1a34:	81 11       	cpse	r24, r1
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <nrk_TCB_init+0x6a>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 08 06 	sts	0x0608, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1a3e:	f5 01       	movw	r30, r10
    1a40:	30 81       	ld	r19, Z
    1a42:	2b e2       	ldi	r18, 0x2B	; 43
    1a44:	32 03       	mulsu	r19, r18
    1a46:	f0 01       	movw	r30, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	e9 5a       	subi	r30, 0xA9	; 169
    1a4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1a4e:	d1 82       	std	Z+1, r13	; 0x01
    1a50:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1a52:	d5 01       	movw	r26, r10
    1a54:	18 96       	adiw	r26, 0x08	; 8
    1a56:	8c 91       	ld	r24, X
    1a58:	18 97       	sbiw	r26, 0x08	; 8
    1a5a:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1a5c:	3c 91       	ld	r19, X
    1a5e:	32 03       	mulsu	r19, r18
    1a60:	f0 01       	movw	r30, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	e9 5a       	subi	r30, 0xA9	; 169
    1a66:	fa 4f       	sbci	r31, 0xFA	; 250
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1a6c:	3c 91       	ld	r19, X
    1a6e:	32 03       	mulsu	r19, r18
    1a70:	f0 01       	movw	r30, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	e9 5a       	subi	r30, 0xA9	; 169
    1a76:	fa 4f       	sbci	r31, 0xFA	; 250
    1a78:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1a7a:	0c 91       	ld	r16, X
    1a7c:	02 03       	mulsu	r16, r18
    1a7e:	80 01       	movw	r16, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	09 5a       	subi	r16, 0xA9	; 169
    1a84:	1a 4f       	sbci	r17, 0xFA	; 250
    1a86:	f8 01       	movw	r30, r16
    1a88:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	0b 96       	adiw	r24, 0x0b	; 11
    1a8e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_nrk_time_to_ticks_long>
    1a92:	d8 01       	movw	r26, r16
    1a94:	91 96       	adiw	r26, 0x21	; 33
    1a96:	6d 93       	st	X+, r22
    1a98:	7d 93       	st	X+, r23
    1a9a:	8d 93       	st	X+, r24
    1a9c:	9c 93       	st	X, r25
    1a9e:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1aa0:	f5 01       	movw	r30, r10
    1aa2:	83 85       	ldd	r24, Z+11	; 0x0b
    1aa4:	94 85       	ldd	r25, Z+12	; 0x0c
    1aa6:	a5 85       	ldd	r26, Z+13	; 0x0d
    1aa8:	b6 85       	ldd	r27, Z+14	; 0x0e
    1aaa:	88 33       	cpi	r24, 0x38	; 56
    1aac:	99 48       	sbci	r25, 0x89	; 137
    1aae:	a1 44       	sbci	r26, 0x41	; 65
    1ab0:	b1 05       	cpc	r27, r1
    1ab2:	28 f0       	brcs	.+10     	; 0x1abe <nrk_TCB_init+0xea>
    1ab4:	d5 01       	movw	r26, r10
    1ab6:	6c 91       	ld	r22, X
    1ab8:	86 e1       	ldi	r24, 0x16	; 22
    1aba:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1abe:	f5 01       	movw	r30, r10
    1ac0:	00 81       	ld	r16, Z
    1ac2:	11 27       	eor	r17, r17
    1ac4:	07 fd       	sbrc	r16, 7
    1ac6:	10 95       	com	r17
    1ac8:	c5 01       	movw	r24, r10
    1aca:	4b 96       	adiw	r24, 0x1b	; 27
    1acc:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_nrk_time_to_ticks_long>
    1ad0:	4b e2       	ldi	r20, 0x2B	; 43
    1ad2:	40 9f       	mul	r20, r16
    1ad4:	f0 01       	movw	r30, r0
    1ad6:	41 9f       	mul	r20, r17
    1ad8:	f0 0d       	add	r31, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	e9 5a       	subi	r30, 0xA9	; 169
    1ade:	fa 4f       	sbci	r31, 0xFA	; 250
    1ae0:	65 8b       	std	Z+21, r22	; 0x15
    1ae2:	76 8b       	std	Z+22, r23	; 0x16
    1ae4:	87 8b       	std	Z+23, r24	; 0x17
    1ae6:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1ae8:	d5 01       	movw	r26, r10
    1aea:	2c 91       	ld	r18, X
    1aec:	24 03       	mulsu	r18, r20
    1aee:	60 01       	movw	r12, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	f6 01       	movw	r30, r12
    1af4:	e9 5a       	subi	r30, 0xA9	; 169
    1af6:	fa 4f       	sbci	r31, 0xFA	; 250
    1af8:	6f 01       	movw	r12, r30
    1afa:	05 89       	ldd	r16, Z+21	; 0x15
    1afc:	16 89       	ldd	r17, Z+22	; 0x16
    1afe:	27 89       	ldd	r18, Z+23	; 0x17
    1b00:	30 8d       	ldd	r19, Z+24	; 0x18
    1b02:	81 a1       	ldd	r24, Z+33	; 0x21
    1b04:	92 a1       	ldd	r25, Z+34	; 0x22
    1b06:	a3 a1       	ldd	r26, Z+35	; 0x23
    1b08:	b4 a1       	ldd	r27, Z+36	; 0x24
    1b0a:	08 0f       	add	r16, r24
    1b0c:	19 1f       	adc	r17, r25
    1b0e:	2a 1f       	adc	r18, r26
    1b10:	3b 1f       	adc	r19, r27
    1b12:	01 8f       	std	Z+25, r16	; 0x19
    1b14:	12 8f       	std	Z+26, r17	; 0x1a
    1b16:	23 8f       	std	Z+27, r18	; 0x1b
    1b18:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1b1a:	c5 01       	movw	r24, r10
    1b1c:	43 96       	adiw	r24, 0x13	; 19
    1b1e:	49 83       	std	Y+1, r20	; 0x01
    1b20:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_nrk_time_to_ticks_long>
    1b24:	f6 01       	movw	r30, r12
    1b26:	65 a3       	std	Z+37, r22	; 0x25
    1b28:	76 a3       	std	Z+38, r23	; 0x26
    1b2a:	87 a3       	std	Z+39, r24	; 0x27
    1b2c:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1b2e:	d5 01       	movw	r26, r10
    1b30:	2c 91       	ld	r18, X
    1b32:	49 81       	ldd	r20, Y+1	; 0x01
    1b34:	24 03       	mulsu	r18, r20
    1b36:	f0 01       	movw	r30, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	e9 5a       	subi	r30, 0xA9	; 169
    1b3c:	fa 4f       	sbci	r31, 0xFA	; 250
    1b3e:	85 a1       	ldd	r24, Z+37	; 0x25
    1b40:	96 a1       	ldd	r25, Z+38	; 0x26
    1b42:	a7 a1       	ldd	r26, Z+39	; 0x27
    1b44:	b0 a5       	ldd	r27, Z+40	; 0x28
    1b46:	85 8f       	std	Z+29, r24	; 0x1d
    1b48:	96 8f       	std	Z+30, r25	; 0x1e
    1b4a:	a7 8f       	std	Z+31, r26	; 0x1f
    1b4c:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	92 a7       	std	Z+42, r25	; 0x2a
    1b54:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1b56:	f3 82       	std	Z+3, r15	; 0x03
    1b58:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1b5e:	0f 90       	pop	r0
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	bf 90       	pop	r11
    1b72:	af 90       	pop	r10
    1b74:	08 95       	ret

00001b76 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1b76:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <_nrk_scheduler>

00001b7a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1b7a:	85 e6       	ldi	r24, 0x65	; 101
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	08 95       	ret

00001b80 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    1b80:	e0 91 19 06 	lds	r30, 0x0619
    1b84:	f0 91 1a 06 	lds	r31, 0x061A
    1b88:	84 87       	std	Z+12, r24	; 0x0c
    1b8a:	08 95       	ret

00001b8c <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1b8c:	e0 91 19 06 	lds	r30, 0x0619
    1b90:	f0 91 1a 06 	lds	r31, 0x061A
}
    1b94:	84 85       	ldd	r24, Z+12	; 0x0c
    1b96:	08 95       	ret

00001b98 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    1b98:	20 91 cb 04 	lds	r18, 0x04CB
    1b9c:	22 23       	and	r18, r18
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    1ba0:	fb 01       	movw	r30, r22
    1ba2:	20 83       	st	Z, r18
    *task_id = error_task;
    1ba4:	20 91 82 04 	lds	r18, 0x0482
    1ba8:	fc 01       	movw	r30, r24
    1baa:	20 83       	st	Z, r18
    return 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    1bb2:	08 95       	ret

00001bb4 <pause>:
    }

}

void pause()
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1bbe:	19 82       	std	Y+1, r1	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	84 36       	cpi	r24, 0x64	; 100
    1bc4:	40 f4       	brcc	.+16     	; 0x1bd6 <pause+0x22>
        nrk_spin_wait_us (2000);
    1bc6:	80 ed       	ldi	r24, 0xD0	; 208
    1bc8:	97 e0       	ldi	r25, 0x07	; 7
    1bca:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	f5 cf       	rjmp	.-22     	; 0x1bc0 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1bd6:	0f 90       	pop	r0
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
    pause();
    1be6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
    pause();
    1bea:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
    pause();
    1bee:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
    nrk_led_clr(GREEN_LED);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    pause();
    1bfa:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <pause>

00001bfe <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
    pause();
    1c06:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
    nrk_led_clr(GREEN_LED);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    pause();
    1c12:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <pause>

00001c16 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <blink_morse_code_error+0xc>
    1c22:	1f 92       	push	r1
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1c28:	1f 92       	push	r1
    1c2a:	8f 93       	push	r24
    1c2c:	8e e7       	ldi	r24, 0x7E	; 126
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	8e 01       	movw	r16, r28
    1c36:	0f 5f       	subi	r16, 0xFF	; 255
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	1f 93       	push	r17
    1c3c:	0f 93       	push	r16
    1c3e:	0e 94 39 25 	call	0x4a72	; 0x4a72 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	f1 2c       	mov	r15, r1
    1c50:	f8 01       	movw	r30, r16
    1c52:	01 90       	ld	r0, Z+
    1c54:	00 20       	and	r0, r0
    1c56:	e9 f7       	brne	.-6      	; 0x1c52 <blink_morse_code_error+0x3c>
    1c58:	31 97       	sbiw	r30, 0x01	; 1
    1c5a:	e0 1b       	sub	r30, r16
    1c5c:	f1 0b       	sbc	r31, r17
    1c5e:	8f 2d       	mov	r24, r15
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	8e 17       	cp	r24, r30
    1c64:	9f 07       	cpc	r25, r31
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <blink_morse_code_error+0x54>
    1c68:	5c c0       	rjmp	.+184    	; 0x1d22 <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	e8 0f       	add	r30, r24
    1c6e:	f9 1f       	adc	r31, r25
    1c70:	80 81       	ld	r24, Z
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	fc 01       	movw	r30, r24
    1c76:	f0 97       	sbiw	r30, 0x30	; 48
    1c78:	ea 30       	cpi	r30, 0x0A	; 10
    1c7a:	f1 05       	cpc	r31, r1
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <blink_morse_code_error+0x6a>
    1c7e:	49 c0       	rjmp	.+146    	; 0x1d12 <blink_morse_code_error+0xfc>
    1c80:	e6 54       	subi	r30, 0x46	; 70
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
        {
        case '0':
            blink_dash();
    1c88:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1c8e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dash();
    1c92:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1c96:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1c9a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1c9e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            break;
    1ca2:	37 c0       	rjmp	.+110    	; 0x1d12 <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    1ca4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1ca8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cac:	f4 cf       	rjmp	.-24     	; 0x1c96 <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1cae:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1cb2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1cb6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cba:	ef cf       	rjmp	.-34     	; 0x1c9a <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1cbc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1cc0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1cc4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            blink_dot();
    1cc8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1ccc:	e8 cf       	rjmp	.-48     	; 0x1c9e <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1cce:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1cd4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dot();
    1cd8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1cde:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1ce2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dot();
    1ce6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1cec:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1cf0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1cf4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dot();
    1cf8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
    1cfc:	08 c0       	rjmp	.+16     	; 0x1d0e <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1cfe:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1d02:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1d06:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dash();
    1d0a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <blink_dash>
            blink_dot();
    1d0e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <blink_dot>
            break;
        }
        pause();
    1d12:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
        pause();
    1d16:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
        pause();
    1d1a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1d1e:	f3 94       	inc	r15
    1d20:	97 cf       	rjmp	.-210    	; 0x1c50 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	08 95       	ret

00001d34 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    int8_t t=0,i=0;
    if (error_num == 0)
    1d38:	80 91 cb 04 	lds	r24, 0x04CB
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <nrk_error_print+0xe>
    1d40:	c6 c0       	rjmp	.+396    	; 0x1ece <nrk_error_print+0x19a>
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    1d42:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    1d46:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1d4a:	80 ee       	ldi	r24, 0xE0	; 224
    1d4c:	93 e0       	ldi	r25, 0x03	; 3
    1d4e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <nrk_kprintf>
        printf ("%d", error_task);
    1d52:	80 91 82 04 	lds	r24, 0x0482
    1d56:	1f 92       	push	r1
    1d58:	8f 93       	push	r24
    1d5a:	8e e7       	ldi	r24, 0x7E	; 126
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	9f 93       	push	r25
    1d60:	8f 93       	push	r24
    1d62:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
        nrk_kprintf (PSTR ("): "));
    1d66:	8c ed       	ldi	r24, 0xDC	; 220
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	80 91 cb 04 	lds	r24, 0x04CB
    1d7a:	88 31       	cpi	r24, 0x18	; 24
    1d7c:	10 f0       	brcs	.+4      	; 0x1d82 <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1d7e:	10 92 cb 04 	sts	0x04CB, r1
        switch (error_num)
    1d82:	80 91 cb 04 	lds	r24, 0x04CB
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	fc 01       	movw	r30, r24
    1d8a:	31 97       	sbiw	r30, 0x01	; 1
    1d8c:	e6 31       	cpi	r30, 0x16	; 22
    1d8e:	f1 05       	cpc	r31, r1
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <nrk_error_print+0x60>
    1d92:	46 c0       	rjmp	.+140    	; 0x1e20 <nrk_error_print+0xec>
    1d94:	ec 53       	subi	r30, 0x3C	; 60
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	0c 94 45 24 	jmp	0x488a	; 0x488a <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1d9c:	80 ea       	ldi	r24, 0xA0	; 160
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	41 c0       	rjmp	.+130    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1da2:	89 e7       	ldi	r24, 0x79	; 121
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	3e c0       	rjmp	.+124    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1da8:	85 e6       	ldi	r24, 0x65	; 101
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	3b c0       	rjmp	.+118    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1dae:	8f e4       	ldi	r24, 0x4F	; 79
    1db0:	93 e0       	ldi	r25, 0x03	; 3
    1db2:	38 c0       	rjmp	.+112    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1db4:	84 e3       	ldi	r24, 0x34	; 52
    1db6:	93 e0       	ldi	r25, 0x03	; 3
    1db8:	35 c0       	rjmp	.+106    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1dba:	8e e1       	ldi	r24, 0x1E	; 30
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	32 c0       	rjmp	.+100    	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	93 e0       	ldi	r25, 0x03	; 3
    1dc4:	2f c0       	rjmp	.+94     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1dc6:	83 ef       	ldi	r24, 0xF3	; 243
    1dc8:	92 e0       	ldi	r25, 0x02	; 2
    1dca:	2c c0       	rjmp	.+88     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1dcc:	80 ee       	ldi	r24, 0xE0	; 224
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	29 c0       	rjmp	.+82     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1dd2:	82 ec       	ldi	r24, 0xC2	; 194
    1dd4:	92 e0       	ldi	r25, 0x02	; 2
    1dd6:	26 c0       	rjmp	.+76     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1dd8:	8d e9       	ldi	r24, 0x9D	; 157
    1dda:	92 e0       	ldi	r25, 0x02	; 2
    1ddc:	23 c0       	rjmp	.+70     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1dde:	81 e9       	ldi	r24, 0x91	; 145
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	20 c0       	rjmp	.+64     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1de4:	86 e7       	ldi	r24, 0x76	; 118
    1de6:	92 e0       	ldi	r25, 0x02	; 2
    1de8:	1d c0       	rjmp	.+58     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1dea:	87 e6       	ldi	r24, 0x67	; 103
    1dec:	92 e0       	ldi	r25, 0x02	; 2
    1dee:	1a c0       	rjmp	.+52     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1df0:	83 e5       	ldi	r24, 0x53	; 83
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	17 c0       	rjmp	.+46     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1df6:	82 e4       	ldi	r24, 0x42	; 66
    1df8:	92 e0       	ldi	r25, 0x02	; 2
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1dfc:	8e e2       	ldi	r24, 0x2E	; 46
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	11 c0       	rjmp	.+34     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1e02:	8e e0       	ldi	r24, 0x0E	; 14
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	0e c0       	rjmp	.+28     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1e08:	86 ef       	ldi	r24, 0xF6	; 246
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	0b c0       	rjmp	.+22     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    1e0e:	8b ed       	ldi	r24, 0xDB	; 219
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    1e14:	8a ec       	ldi	r24, 0xCA	; 202
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <nrk_error_print+0xf0>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    1e1a:	8b eb       	ldi	r24, 0xBB	; 187
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <nrk_error_print+0xf0>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    1e20:	84 eb       	ldi	r24, 0xB4	; 180
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <nrk_kprintf>
        }
        putchar ('\r');
    1e28:	60 91 40 06 	lds	r22, 0x0640
    1e2c:	70 91 41 06 	lds	r23, 0x0641
    1e30:	8d e0       	ldi	r24, 0x0D	; 13
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
        putchar ('\n');
    1e38:	60 91 40 06 	lds	r22, 0x0640
    1e3c:	70 91 41 06 	lds	r23, 0x0641
    1e40:	8a e0       	ldi	r24, 0x0A	; 10
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1e48:	c0 e0       	ldi	r28, 0x00	; 0
    1e4a:	c4 31       	cpi	r28, 0x14	; 20
    1e4c:	04 f5       	brge	.+64     	; 0x1e8e <nrk_error_print+0x15a>
        {
            nrk_led_set (2);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
            nrk_led_clr (3);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    1e5e:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1e60:	88 ee       	ldi	r24, 0xE8	; 232
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <nrk_spin_wait_us>
    1e68:	d1 50       	subi	r29, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1e6a:	d1 f7       	brne	.-12     	; 0x1e60 <nrk_error_print+0x12c>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
            nrk_led_clr (2);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    1e7c:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1e7e:	88 ee       	ldi	r24, 0xE8	; 232
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <nrk_spin_wait_us>
    1e86:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1e88:	d1 f7       	brne	.-12     	; 0x1e7e <nrk_error_print+0x14a>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1e8a:	cf 5f       	subi	r28, 0xFF	; 255
    1e8c:	de cf       	rjmp	.-68     	; 0x1e4a <nrk_error_print+0x116>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
        nrk_led_clr (2);
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
        blink_morse_code_error( error_task );
    1e9e:	80 91 82 04 	lds	r24, 0x0482
    1ea2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <blink_morse_code_error>
        pause();
    1ea6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
        nrk_led_set(2);
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
        pause();
    1eb2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
        nrk_led_clr(2);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
        pause();
    1ebe:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <pause>
        blink_morse_code_error( error_num);
    1ec2:	80 91 cb 04 	lds	r24, 0x04CB
    1ec6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1eca:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_led_set(2);
        pause();
        nrk_led_clr(2);
        pause();
        blink_morse_code_error( error_num);
    }
    1ecc:	c0 cf       	rjmp	.-128    	; 0x1e4e <nrk_error_print+0x11a>

#endif  /*  */
    error_num = 0;
    return t;
}
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	08 95       	ret

00001ed6 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    1ed6:	80 93 cb 04 	sts	0x04CB, r24
    error_task = nrk_cur_task_TCB->task_ID;
    1eda:	e0 91 19 06 	lds	r30, 0x0619
    1ede:	f0 91 1a 06 	lds	r31, 0x061A
    1ee2:	80 85       	ldd	r24, Z+8	; 0x08
    1ee4:	80 93 82 04 	sts	0x0482, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1ee8:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <nrk_error_print>

00001eec <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    1eec:	18 2f       	mov	r17, r24
    1eee:	06 2f       	mov	r16, r22
    error_num = n;
    1ef0:	80 93 cb 04 	sts	0x04CB, r24
    error_task = task;
    1ef4:	60 93 82 04 	sts	0x0482, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1ef8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1efc:	c0 e0       	ldi	r28, 0x00	; 0
    1efe:	c4 31       	cpi	r28, 0x14	; 20
    1f00:	00 f5       	brcc	.+64     	; 0x1f42 <nrk_kernel_error_add+0x56>
        {
            nrk_led_set (2);
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
            nrk_led_clr (3);
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    1f12:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f14:	88 ee       	ldi	r24, 0xE8	; 232
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <nrk_spin_wait_us>
    1f1c:	d1 50       	subi	r29, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1f1e:	d1 f7       	brne	.-12     	; 0x1f14 <nrk_kernel_error_add+0x28>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
            nrk_led_clr (2);
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    1f30:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f32:	88 ee       	ldi	r24, 0xE8	; 232
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <nrk_spin_wait_us>
    1f3a:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1f3c:	d1 f7       	brne	.-12     	; 0x1f32 <nrk_kernel_error_add+0x46>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1f3e:	cf 5f       	subi	r28, 0xFF	; 255
    1f40:	de cf       	rjmp	.-68     	; 0x1efe <nrk_kernel_error_add+0x12>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
        nrk_led_clr (2);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
        blink_morse_code_error( task );
    1f52:	80 2f       	mov	r24, r16
    1f54:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <blink_morse_code_error>
        blink_morse_code_error( n );
    1f58:	81 2f       	mov	r24, r17
    1f5a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1f5e:	c0 e0       	ldi	r28, 0x00	; 0
        }
        nrk_led_clr (3);
        nrk_led_clr (2);
        blink_morse_code_error( task );
        blink_morse_code_error( n );
    }
    1f60:	d0 cf       	rjmp	.-96     	; 0x1f02 <nrk_kernel_error_add+0x16>

00001f62 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    1f7e:	8c ee       	ldi	r24, 0xEC	; 236
    1f80:	93 e0       	ldi	r25, 0x03	; 3
    1f82:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    1f86:	e0 91 19 06 	lds	r30, 0x0619
    1f8a:	f0 91 1a 06 	lds	r31, 0x061A
    1f8e:	20 85       	ldd	r18, Z+8	; 0x08
    1f90:	82 2f       	mov	r24, r18
    1f92:	99 27       	eor	r25, r25
    1f94:	87 fd       	sbrc	r24, 7
    1f96:	90 95       	com	r25
    1f98:	9f 93       	push	r25
    1f9a:	2f 93       	push	r18
    1f9c:	82 e3       	ldi	r24, 0x32	; 50
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	9f 93       	push	r25
    1fa2:	8f 93       	push	r24
    1fa4:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    1fa8:	e0 91 19 06 	lds	r30, 0x0619
    1fac:	f0 91 1a 06 	lds	r31, 0x061A
    1fb0:	c2 81       	ldd	r28, Z+2	; 0x02
    1fb2:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	86 e6       	ldi	r24, 0x66	; 102
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	9f 93       	push	r25
    1fbe:	8f 93       	push	r24
    1fc0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    printf( "canary = %x ",*stkc );
    1fc4:	88 81       	ld	r24, Y
    1fc6:	1f 92       	push	r1
    1fc8:	8f 93       	push	r24
    1fca:	8b e3       	ldi	r24, 0x3B	; 59
    1fcc:	93 e0       	ldi	r25, 0x03	; 3
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    1fd6:	e0 91 19 06 	lds	r30, 0x0619
    1fda:	f0 91 1a 06 	lds	r31, 0x061A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	8f 93       	push	r24
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 93       	push	r24
    1fe6:	88 e4       	ldi	r24, 0x48	; 72
    1fe8:	93 e0       	ldi	r25, 0x03	; 3
    1fea:	9f 93       	push	r25
    1fec:	8f 93       	push	r24
    1fee:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    1ff2:	80 91 1a 06 	lds	r24, 0x061A
    1ff6:	8f 93       	push	r24
    1ff8:	80 91 19 06 	lds	r24, 0x0619
    1ffc:	8f 93       	push	r24
    1ffe:	82 e5       	ldi	r24, 0x52	; 82
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	9f 93       	push	r25
    2004:	8f 93       	push	r24
    2006:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    200a:	c7 e5       	ldi	r28, 0x57	; 87
    200c:	d5 e0       	ldi	r29, 0x05	; 5
    200e:	ed b7       	in	r30, 0x3d	; 61
    2010:	fe b7       	in	r31, 0x3e	; 62
    2012:	74 96       	adiw	r30, 0x14	; 20
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	fe bf       	out	0x3e, r31	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	ed bf       	out	0x3d, r30	; 61
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2022:	82 e6       	ldi	r24, 0x62	; 98
    2024:	68 2e       	mov	r6, r24
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    202a:	9b e3       	ldi	r25, 0x3B	; 59
    202c:	89 2e       	mov	r8, r25
    202e:	93 e0       	ldi	r25, 0x03	; 3
    2030:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2032:	28 e4       	ldi	r18, 0x48	; 72
    2034:	a2 2e       	mov	r10, r18
    2036:	23 e0       	ldi	r18, 0x03	; 3
    2038:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    203a:	32 e5       	ldi	r19, 0x52	; 82
    203c:	c3 2e       	mov	r12, r19
    203e:	33 e0       	ldi	r19, 0x03	; 3
    2040:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2042:	ea 80       	ldd	r14, Y+2	; 0x02
    2044:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2046:	ff 92       	push	r15
    2048:	ef 92       	push	r14
    204a:	1f 93       	push	r17
    204c:	0f 93       	push	r16
    204e:	7f 92       	push	r7
    2050:	6f 92       	push	r6
    2052:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
        printf( "canary = %x ",*stkc );
    2056:	f7 01       	movw	r30, r14
    2058:	80 81       	ld	r24, Z
    205a:	1f 92       	push	r1
    205c:	8f 93       	push	r24
    205e:	9f 92       	push	r9
    2060:	8f 92       	push	r8
    2062:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8f 93       	push	r24
    206a:	88 81       	ld	r24, Y
    206c:	8f 93       	push	r24
    206e:	bf 92       	push	r11
    2070:	af 92       	push	r10
    2072:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	df 92       	push	r13
    207c:	cf 92       	push	r12
    207e:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <printf>
    2082:	0f 5f       	subi	r16, 0xFF	; 255
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2088:	ed b7       	in	r30, 0x3d	; 61
    208a:	fe b7       	in	r31, 0x3e	; 62
    208c:	72 96       	adiw	r30, 0x12	; 18
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	fe bf       	out	0x3e, r31	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	ed bf       	out	0x3d, r30	; 61
    2098:	04 30       	cpi	r16, 0x04	; 4
    209a:	11 05       	cpc	r17, r1
    209c:	91 f6       	brne	.-92     	; 0x2042 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	bf 90       	pop	r11
    20b0:	af 90       	pop	r10
    20b2:	9f 90       	pop	r9
    20b4:	8f 90       	pop	r8
    20b6:	7f 90       	pop	r7
    20b8:	6f 90       	pop	r6
    20ba:	08 95       	ret

000020bc <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    20c0:	e0 91 19 06 	lds	r30, 0x0619
    20c4:	f0 91 1a 06 	lds	r31, 0x061A
    20c8:	c2 81       	ldd	r28, Z+2	; 0x02
    20ca:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    20cc:	88 81       	ld	r24, Y
    20ce:	85 35       	cpi	r24, 0x55	; 85
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    20d2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    20dc:	85 e5       	ldi	r24, 0x55	; 85
    20de:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    20e0:	e0 91 19 06 	lds	r30, 0x0619
    20e4:	f0 91 1a 06 	lds	r31, 0x061A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	81 15       	cp	r24, r1
    20ee:	92 44       	sbci	r25, 0x42	; 66
    20f0:	38 f0       	brcs	.+14     	; 0x2100 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    20f2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    20f6:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    20fc:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <nrk_error_add>




#endif
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2106:	2b e2       	ldi	r18, 0x2B	; 43
    2108:	82 02       	muls	r24, r18
    210a:	f0 01       	movw	r30, r0
    210c:	11 24       	eor	r1, r1
    210e:	e9 5a       	subi	r30, 0xA9	; 169
    2110:	fa 4f       	sbci	r31, 0xFA	; 250
    2112:	a2 81       	ldd	r26, Z+2	; 0x02
    2114:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2116:	8c 91       	ld	r24, X
    2118:	85 35       	cpi	r24, 0x55	; 85
    211a:	19 f0       	breq	.+6      	; 0x2122 <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    211c:	85 e5       	ldi	r24, 0x55	; 85
    211e:	8c 93       	st	X, r24
    2120:	08 c0       	rjmp	.+16     	; 0x2132 <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	81 15       	cp	r24, r1
    2128:	92 44       	sbci	r25, 0x42	; 66
    212a:	28 f0       	brcs	.+10     	; 0x2136 <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    212c:	82 e1       	ldi	r24, 0x12	; 18
    212e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <nrk_error_add>
        return NRK_ERROR;
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	08 95       	ret
    }
#endif
    return NRK_OK;
    2136:	81 e0       	ldi	r24, 0x01	; 1
}
    2138:	08 95       	ret

0000213a <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    213e:	00 91 86 03 	lds	r16, 0x0386
    2142:	10 91 87 03 	lds	r17, 0x0387
    2146:	20 91 88 03 	lds	r18, 0x0388
    214a:	30 91 89 03 	lds	r19, 0x0389
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	b9 01       	movw	r22, r18
    2154:	a8 01       	movw	r20, r16
    2156:	08 2e       	mov	r0, r24
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <nrk_signal_create+0x28>
    215a:	76 95       	lsr	r23
    215c:	67 95       	ror	r22
    215e:	57 95       	ror	r21
    2160:	47 95       	ror	r20
    2162:	0a 94       	dec	r0
    2164:	d2 f7       	brpl	.-12     	; 0x215a <nrk_signal_create+0x20>
    2166:	40 fd       	sbrc	r20, 0
    2168:	19 c0       	rjmp	.+50     	; 0x219c <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	08 2e       	mov	r0, r24
    2174:	04 c0       	rjmp	.+8      	; 0x217e <nrk_signal_create+0x44>
    2176:	44 0f       	add	r20, r20
    2178:	55 1f       	adc	r21, r21
    217a:	66 1f       	adc	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	0a 94       	dec	r0
    2180:	d2 f7       	brpl	.-12     	; 0x2176 <nrk_signal_create+0x3c>
    2182:	40 2b       	or	r20, r16
    2184:	51 2b       	or	r21, r17
    2186:	62 2b       	or	r22, r18
    2188:	73 2b       	or	r23, r19
    218a:	40 93 86 03 	sts	0x0386, r20
    218e:	50 93 87 03 	sts	0x0387, r21
    2192:	60 93 88 03 	sts	0x0388, r22
    2196:	70 93 89 03 	sts	0x0389, r23
			return i;
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <nrk_signal_create+0x6c>
    219c:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    219e:	80 32       	cpi	r24, 0x20	; 32
    21a0:	91 05       	cpc	r25, r1
    21a2:	b9 f6       	brne	.-82     	; 0x2152 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    21a4:	8f ef       	ldi	r24, 0xFF	; 255


}
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    21ac:	e0 91 19 06 	lds	r30, 0x0619
    21b0:	f0 91 1a 06 	lds	r31, 0x061A
    21b4:	65 85       	ldd	r22, Z+13	; 0x0d
    21b6:	76 85       	ldd	r23, Z+14	; 0x0e
    21b8:	87 85       	ldd	r24, Z+15	; 0x0f
    21ba:	90 89       	ldd	r25, Z+16	; 0x10
}
    21bc:	08 95       	ret

000021be <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	1f 92       	push	r1
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    21d4:	c1 2c       	mov	r12, r1
    21d6:	d1 2c       	mov	r13, r1
    21d8:	76 01       	movw	r14, r12
    21da:	c3 94       	inc	r12
    21dc:	08 2e       	mov	r0, r24
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <nrk_signal_delete+0x2a>
    21e0:	cc 0c       	add	r12, r12
    21e2:	dd 1c       	adc	r13, r13
    21e4:	ee 1c       	adc	r14, r14
    21e6:	ff 1c       	adc	r15, r15
    21e8:	0a 94       	dec	r0
    21ea:	d2 f7       	brpl	.-12     	; 0x21e0 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    21ec:	40 91 86 03 	lds	r20, 0x0386
    21f0:	50 91 87 03 	lds	r21, 0x0387
    21f4:	60 91 88 03 	lds	r22, 0x0388
    21f8:	70 91 89 03 	lds	r23, 0x0389
    21fc:	4c 21       	and	r20, r12
    21fe:	5d 21       	and	r21, r13
    2200:	6e 21       	and	r22, r14
    2202:	7f 21       	and	r23, r15
    2204:	45 2b       	or	r20, r21
    2206:	46 2b       	or	r20, r22
    2208:	47 2b       	or	r20, r23
    220a:	09 f4       	brne	.+2      	; 0x220e <nrk_signal_delete+0x50>
    220c:	63 c0       	rjmp	.+198    	; 0x22d4 <nrk_signal_delete+0x116>

	nrk_int_disable();
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    2214:	e0 e6       	ldi	r30, 0x60	; 96
    2216:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2218:	97 01       	movw	r18, r14
    221a:	86 01       	movw	r16, r12
    221c:	00 95       	com	r16
    221e:	10 95       	com	r17
    2220:	20 95       	com	r18
    2222:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	df 01       	movw	r26, r30
    222a:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    222c:	4c 91       	ld	r20, X
    222e:	4f 3f       	cpi	r20, 0xFF	; 255
    2230:	49 f1       	breq	.+82     	; 0x2284 <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2232:	44 81       	ldd	r20, Z+4	; 0x04
    2234:	55 81       	ldd	r21, Z+5	; 0x05
    2236:	66 81       	ldd	r22, Z+6	; 0x06
    2238:	77 81       	ldd	r23, Z+7	; 0x07
    223a:	4c 15       	cp	r20, r12
    223c:	5d 05       	cpc	r21, r13
    223e:	6e 05       	cpc	r22, r14
    2240:	7f 05       	cpc	r23, r15
    2242:	41 f4       	brne	.+16     	; 0x2254 <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2244:	10 86       	std	Z+8, r1	; 0x08
    2246:	11 86       	std	Z+9, r1	; 0x09
    2248:	12 86       	std	Z+10, r1	; 0x0a
    224a:	13 86       	std	Z+11, r1	; 0x0b
    224c:	df 01       	movw	r26, r30
    224e:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    2250:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2252:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2254:	44 81       	ldd	r20, Z+4	; 0x04
    2256:	55 81       	ldd	r21, Z+5	; 0x05
    2258:	66 81       	ldd	r22, Z+6	; 0x06
    225a:	77 81       	ldd	r23, Z+7	; 0x07
    225c:	40 23       	and	r20, r16
    225e:	51 23       	and	r21, r17
    2260:	62 23       	and	r22, r18
    2262:	73 23       	and	r23, r19
    2264:	44 83       	std	Z+4, r20	; 0x04
    2266:	55 83       	std	Z+5, r21	; 0x05
    2268:	66 83       	std	Z+6, r22	; 0x06
    226a:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    226c:	40 85       	ldd	r20, Z+8	; 0x08
    226e:	51 85       	ldd	r21, Z+9	; 0x09
    2270:	62 85       	ldd	r22, Z+10	; 0x0a
    2272:	73 85       	ldd	r23, Z+11	; 0x0b
    2274:	40 23       	and	r20, r16
    2276:	51 23       	and	r21, r17
    2278:	62 23       	and	r22, r18
    227a:	73 23       	and	r23, r19
    227c:	40 87       	std	Z+8, r20	; 0x08
    227e:	51 87       	std	Z+9, r21	; 0x09
    2280:	62 87       	std	Z+10, r22	; 0x0a
    2282:	73 87       	std	Z+11, r23	; 0x0b
    2284:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2286:	46 e0       	ldi	r20, 0x06	; 6
    2288:	ec 30       	cpi	r30, 0x0C	; 12
    228a:	f4 07       	cpc	r31, r20
    228c:	69 f6       	brne	.-102    	; 0x2228 <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    228e:	4e ef       	ldi	r20, 0xFE	; 254
    2290:	5f ef       	ldi	r21, 0xFF	; 255
    2292:	6f ef       	ldi	r22, 0xFF	; 255
    2294:	7f ef       	ldi	r23, 0xFF	; 255
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <nrk_signal_delete+0xe2>
    2298:	44 0f       	add	r20, r20
    229a:	55 1f       	adc	r21, r21
    229c:	66 1f       	adc	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	8a 95       	dec	r24
    22a2:	d2 f7       	brpl	.-12     	; 0x2298 <nrk_signal_delete+0xda>
    22a4:	80 91 86 03 	lds	r24, 0x0386
    22a8:	90 91 87 03 	lds	r25, 0x0387
    22ac:	a0 91 88 03 	lds	r26, 0x0388
    22b0:	b0 91 89 03 	lds	r27, 0x0389
    22b4:	84 23       	and	r24, r20
    22b6:	95 23       	and	r25, r21
    22b8:	a6 23       	and	r26, r22
    22ba:	b7 23       	and	r27, r23
    22bc:	80 93 86 03 	sts	0x0386, r24
    22c0:	90 93 87 03 	sts	0x0387, r25
    22c4:	a0 93 88 03 	sts	0x0388, r26
    22c8:	b0 93 89 03 	sts	0x0389, r27
	nrk_int_enable();
    22cc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>

	return NRK_OK;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	08 95       	ret

000022ea <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    22ee:	41 e0       	ldi	r20, 0x01	; 1
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <nrk_signal_unregister+0x16>
    22f8:	44 0f       	add	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	66 1f       	adc	r22, r22
    22fe:	77 1f       	adc	r23, r23
    2300:	8a 95       	dec	r24
    2302:	d2 f7       	brpl	.-12     	; 0x22f8 <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2304:	e0 91 19 06 	lds	r30, 0x0619
    2308:	f0 91 1a 06 	lds	r31, 0x061A
    230c:	85 85       	ldd	r24, Z+13	; 0x0d
    230e:	96 85       	ldd	r25, Z+14	; 0x0e
    2310:	a7 85       	ldd	r26, Z+15	; 0x0f
    2312:	b0 89       	ldd	r27, Z+16	; 0x10
    2314:	8a 01       	movw	r16, r20
    2316:	9b 01       	movw	r18, r22
    2318:	08 23       	and	r16, r24
    231a:	19 23       	and	r17, r25
    231c:	2a 23       	and	r18, r26
    231e:	3b 23       	and	r19, r27
    2320:	01 2b       	or	r16, r17
    2322:	02 2b       	or	r16, r18
    2324:	03 2b       	or	r16, r19
    2326:	d1 f0       	breq	.+52     	; 0x235c <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2328:	40 95       	com	r20
    232a:	50 95       	com	r21
    232c:	60 95       	com	r22
    232e:	70 95       	com	r23
    2330:	84 23       	and	r24, r20
    2332:	95 23       	and	r25, r21
    2334:	a6 23       	and	r26, r22
    2336:	b7 23       	and	r27, r23
    2338:	85 87       	std	Z+13, r24	; 0x0d
    233a:	96 87       	std	Z+14, r25	; 0x0e
    233c:	a7 87       	std	Z+15, r26	; 0x0f
    233e:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2340:	81 89       	ldd	r24, Z+17	; 0x11
    2342:	92 89       	ldd	r25, Z+18	; 0x12
    2344:	a3 89       	ldd	r26, Z+19	; 0x13
    2346:	b4 89       	ldd	r27, Z+20	; 0x14
    2348:	84 23       	and	r24, r20
    234a:	95 23       	and	r25, r21
    234c:	a6 23       	and	r26, r22
    234e:	b7 23       	and	r27, r23
    2350:	81 8b       	std	Z+17, r24	; 0x11
    2352:	92 8b       	std	Z+18, r25	; 0x12
    2354:	a3 8b       	std	Z+19, r26	; 0x13
    2356:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	01 c0       	rjmp	.+2      	; 0x235e <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    235c:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2364:	40 91 86 03 	lds	r20, 0x0386
    2368:	50 91 87 03 	lds	r21, 0x0387
    236c:	60 91 88 03 	lds	r22, 0x0388
    2370:	70 91 89 03 	lds	r23, 0x0389
    2374:	08 2e       	mov	r0, r24
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <nrk_signal_register+0x1c>
    2378:	76 95       	lsr	r23
    237a:	67 95       	ror	r22
    237c:	57 95       	ror	r21
    237e:	47 95       	ror	r20
    2380:	0a 94       	dec	r0
    2382:	d2 f7       	brpl	.-12     	; 0x2378 <nrk_signal_register+0x14>
    2384:	40 ff       	sbrs	r20, 0
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2388:	e0 91 19 06 	lds	r30, 0x0619
    238c:	f0 91 1a 06 	lds	r31, 0x061A
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <nrk_signal_register+0x3e>
    239a:	44 0f       	add	r20, r20
    239c:	55 1f       	adc	r21, r21
    239e:	66 1f       	adc	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	8a 95       	dec	r24
    23a4:	d2 f7       	brpl	.-12     	; 0x239a <nrk_signal_register+0x36>
    23a6:	85 85       	ldd	r24, Z+13	; 0x0d
    23a8:	96 85       	ldd	r25, Z+14	; 0x0e
    23aa:	a7 85       	ldd	r26, Z+15	; 0x0f
    23ac:	b0 89       	ldd	r27, Z+16	; 0x10
    23ae:	84 2b       	or	r24, r20
    23b0:	95 2b       	or	r25, r21
    23b2:	a6 2b       	or	r26, r22
    23b4:	b7 2b       	or	r27, r23
    23b6:	85 87       	std	Z+13, r24	; 0x0d
    23b8:	96 87       	std	Z+14, r25	; 0x0e
    23ba:	a7 87       	std	Z+15, r26	; 0x0f
    23bc:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	08 95       	ret
	}
            
	return NRK_ERROR;
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
}
    23c4:	08 95       	ret

000023c6 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    23d4:	c1 2c       	mov	r12, r1
    23d6:	d1 2c       	mov	r13, r1
    23d8:	76 01       	movw	r14, r12
    23da:	c3 94       	inc	r12
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <nrk_event_signal+0x20>
    23de:	cc 0c       	add	r12, r12
    23e0:	dd 1c       	adc	r13, r13
    23e2:	ee 1c       	adc	r14, r14
    23e4:	ff 1c       	adc	r15, r15
    23e6:	8a 95       	dec	r24
    23e8:	d2 f7       	brpl	.-12     	; 0x23de <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    23ea:	80 91 86 03 	lds	r24, 0x0386
    23ee:	90 91 87 03 	lds	r25, 0x0387
    23f2:	a0 91 88 03 	lds	r26, 0x0388
    23f6:	b0 91 89 03 	lds	r27, 0x0389
    23fa:	8c 21       	and	r24, r12
    23fc:	9d 21       	and	r25, r13
    23fe:	ae 21       	and	r26, r14
    2400:	bf 21       	and	r27, r15
    2402:	89 2b       	or	r24, r25
    2404:	8a 2b       	or	r24, r26
    2406:	8b 2b       	or	r24, r27
    2408:	11 f4       	brne	.+4      	; 0x240e <nrk_event_signal+0x48>
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	44 c0       	rjmp	.+136    	; 0x2496 <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    240e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    2412:	ee e5       	ldi	r30, 0x5E	; 94
    2414:	f5 e0       	ldi	r31, 0x05	; 5
    2416:	c0 e6       	ldi	r28, 0x60	; 96
    2418:	d5 e0       	ldi	r29, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    241a:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    241c:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    241e:	80 81       	ld	r24, Z
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	b9 f4       	brne	.+46     	; 0x2452 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2424:	82 85       	ldd	r24, Z+10	; 0x0a
    2426:	93 85       	ldd	r25, Z+11	; 0x0b
    2428:	a4 85       	ldd	r26, Z+12	; 0x0c
    242a:	b5 85       	ldd	r27, Z+13	; 0x0d
    242c:	8c 21       	and	r24, r12
    242e:	9d 21       	and	r25, r13
    2430:	ae 21       	and	r26, r14
    2432:	bf 21       	and	r27, r15
    2434:	89 2b       	or	r24, r25
    2436:	8a 2b       	or	r24, r26
    2438:	8b 2b       	or	r24, r27
    243a:	59 f0       	breq	.+22     	; 0x2452 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    243c:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    243e:	16 86       	std	Z+14, r1	; 0x0e
    2440:	17 86       	std	Z+15, r1	; 0x0f
    2442:	10 8a       	std	Z+16, r1	; 0x10
    2444:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2446:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2448:	c2 86       	std	Z+10, r12	; 0x0a
    244a:	d3 86       	std	Z+11, r13	; 0x0b
    244c:	e4 86       	std	Z+12, r14	; 0x0c
    244e:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2450:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2452:	80 81       	ld	r24, Z
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	a1 f4       	brne	.+40     	; 0x2480 <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2458:	82 85       	ldd	r24, Z+10	; 0x0a
    245a:	93 85       	ldd	r25, Z+11	; 0x0b
    245c:	a4 85       	ldd	r26, Z+12	; 0x0c
    245e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2460:	8c 15       	cp	r24, r12
    2462:	9d 05       	cpc	r25, r13
    2464:	ae 05       	cpc	r26, r14
    2466:	bf 05       	cpc	r27, r15
    2468:	59 f4       	brne	.+22     	; 0x2480 <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    246a:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    246c:	16 86       	std	Z+14, r1	; 0x0e
    246e:	17 86       	std	Z+15, r1	; 0x0f
    2470:	10 8a       	std	Z+16, r1	; 0x10
    2472:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2474:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2476:	12 86       	std	Z+10, r1	; 0x0a
    2478:	13 86       	std	Z+11, r1	; 0x0b
    247a:	14 86       	std	Z+12, r1	; 0x0c
    247c:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    247e:	11 e0       	ldi	r17, 0x01	; 1
    2480:	bb 96       	adiw	r30, 0x2b	; 43
    2482:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2484:	86 e0       	ldi	r24, 0x06	; 6
    2486:	ea 30       	cpi	r30, 0x0A	; 10
    2488:	f8 07       	cpc	r31, r24
    248a:	49 f6       	brne	.-110    	; 0x241e <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    248c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
	if(event_occured)
    2490:	11 11       	cpse	r17, r1
    2492:	05 c0       	rjmp	.+10     	; 0x249e <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_nrk_errno_set>
	return NRK_ERROR;
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    249e:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	08 95       	ret

000024b0 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    24b4:	e0 91 19 06 	lds	r30, 0x0619
    24b8:	f0 91 1a 06 	lds	r31, 0x061A
    24bc:	05 85       	ldd	r16, Z+13	; 0x0d
    24be:	16 85       	ldd	r17, Z+14	; 0x0e
    24c0:	27 85       	ldd	r18, Z+15	; 0x0f
    24c2:	30 89       	ldd	r19, Z+16	; 0x10
    24c4:	06 23       	and	r16, r22
    24c6:	17 23       	and	r17, r23
    24c8:	28 23       	and	r18, r24
    24ca:	39 23       	and	r19, r25
    24cc:	01 2b       	or	r16, r17
    24ce:	02 2b       	or	r16, r18
    24d0:	03 2b       	or	r16, r19
    24d2:	19 f1       	breq	.+70     	; 0x251a <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    24d4:	61 8b       	std	Z+17, r22	; 0x11
    24d6:	72 8b       	std	Z+18, r23	; 0x12
    24d8:	83 8b       	std	Z+19, r24	; 0x13
    24da:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    24dc:	21 e0       	ldi	r18, 0x01	; 1
    24de:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	00 90 09 06 	lds	r0, 0x0609
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <nrk_event_wait+0x42>
    24ea:	b6 95       	lsr	r27
    24ec:	a7 95       	ror	r26
    24ee:	97 95       	ror	r25
    24f0:	87 95       	ror	r24
    24f2:	0a 94       	dec	r0
    24f4:	d2 f7       	brpl	.-12     	; 0x24ea <nrk_event_wait+0x3a>
    24f6:	80 ff       	sbrs	r24, 0
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    24fa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <nrk_wait_until_nw>
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2508:	e0 91 19 06 	lds	r30, 0x0619
    250c:	f0 91 1a 06 	lds	r31, 0x061A
    2510:	61 89       	ldd	r22, Z+17	; 0x11
    2512:	72 89       	ldd	r23, Z+18	; 0x12
    2514:	83 89       	ldd	r24, Z+19	; 0x13
    2516:	94 89       	ldd	r25, Z+20	; 0x14
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	08 95       	ret

0000252c <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	85 50       	subi	r24, 0x05	; 5
    2530:	96 40       	sbci	r25, 0x06	; 6
    2532:	09 f4       	brne	.+2      	; 0x2536 <nrk_get_resource_index+0xa>
    2534:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    2536:	82 2f       	mov	r24, r18
    2538:	81 95       	neg	r24
    253a:	08 95       	ret

0000253c <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    253c:	0e 94 96 12 	call	0x252c	; 0x252c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2540:	8f 3f       	cpi	r24, 0xFF	; 255
    2542:	11 f4       	brne	.+4      	; 0x2548 <nrk_sem_query+0xc>
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	03 c0       	rjmp	.+6      	; 0x254e <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	29 f4       	brne	.+10     	; 0x2556 <nrk_sem_query+0x1a>
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_nrk_errno_set>
    2552:	8f ef       	ldi	r24, 0xFF	; 255
    2554:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2556:	99 27       	eor	r25, r25
    2558:	87 fd       	sbrc	r24, 7
    255a:	90 95       	com	r25
    255c:	fc 01       	movw	r30, r24
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	e8 0f       	add	r30, r24
    2564:	f9 1f       	adc	r31, r25
    2566:	e9 5f       	subi	r30, 0xF9	; 249
    2568:	f9 4f       	sbci	r31, 0xF9	; 249
    256a:	80 81       	ld	r24, Z
}
    256c:	08 95       	ret

0000256e <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	1f 92       	push	r1
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2580:	0e 94 96 12 	call	0x252c	; 0x252c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2584:	8f 3f       	cpi	r24, 0xFF	; 255
    2586:	11 f4       	brne	.+4      	; 0x258c <nrk_sem_pend+0x1e>
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	03 c0       	rjmp	.+6      	; 0x2592 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	29 f4       	brne	.+10     	; 0x259a <nrk_sem_pend+0x2c>
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_nrk_errno_set>
    2596:	8f ef       	ldi	r24, 0xFF	; 255
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	e8 2e       	mov	r14, r24
    25a4:	ff 24       	eor	r15, r15
    25a6:	e7 fc       	sbrc	r14, 7
    25a8:	f0 94       	com	r15
    25aa:	87 01       	movw	r16, r14
    25ac:	00 0f       	add	r16, r16
    25ae:	11 1f       	adc	r17, r17
    25b0:	f8 01       	movw	r30, r16
    25b2:	ee 0d       	add	r30, r14
    25b4:	ff 1d       	adc	r31, r15
    25b6:	e9 5f       	subi	r30, 0xF9	; 249
    25b8:	f9 4f       	sbci	r31, 0xF9	; 249
    25ba:	90 81       	ld	r25, Z
    25bc:	91 11       	cpse	r25, r1
    25be:	16 c0       	rjmp	.+44     	; 0x25ec <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    25c0:	e0 91 19 06 	lds	r30, 0x0619
    25c4:	f0 91 1a 06 	lds	r31, 0x061A
    25c8:	97 81       	ldd	r25, Z+7	; 0x07
    25ca:	92 60       	ori	r25, 0x02	; 2
    25cc:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    25ce:	99 27       	eor	r25, r25
    25d0:	87 fd       	sbrc	r24, 7
    25d2:	90 95       	com	r25
    25d4:	a9 2f       	mov	r26, r25
    25d6:	b9 2f       	mov	r27, r25
    25d8:	81 8b       	std	Z+17, r24	; 0x11
    25da:	92 8b       	std	Z+18, r25	; 0x12
    25dc:	a3 8b       	std	Z+19, r26	; 0x13
    25de:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    25e0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    25ec:	0e 0d       	add	r16, r14
    25ee:	1f 1d       	adc	r17, r15
    25f0:	f8 01       	movw	r30, r16
    25f2:	e9 5f       	subi	r30, 0xF9	; 249
    25f4:	f9 4f       	sbci	r31, 0xF9	; 249
    25f6:	80 81       	ld	r24, Z
    25f8:	81 50       	subi	r24, 0x01	; 1
    25fa:	80 83       	st	Z, r24
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    25fc:	e0 91 19 06 	lds	r30, 0x0619
    2600:	f0 91 1a 06 	lds	r31, 0x061A
    2604:	d8 01       	movw	r26, r16
    2606:	aa 5f       	subi	r26, 0xFA	; 250
    2608:	b9 4f       	sbci	r27, 0xF9	; 249
    260a:	8c 91       	ld	r24, X
    260c:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2612:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>

	return NRK_OK;
    2616:	81 e0       	ldi	r24, 0x01	; 1
}
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	08 95       	ret

00002628 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	1f 92       	push	r1
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    263e:	0e 94 96 12 	call	0x252c	; 0x252c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2642:	8f 3f       	cpi	r24, 0xFF	; 255
    2644:	11 f4       	brne	.+4      	; 0x264a <nrk_sem_post+0x22>
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <nrk_sem_post+0x28>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	29 f4       	brne	.+10     	; 0x2658 <nrk_sem_post+0x30>
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_nrk_errno_set>
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	4d c0       	rjmp	.+154    	; 0x26f2 <nrk_sem_post+0xca>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2658:	48 2f       	mov	r20, r24
    265a:	55 27       	eor	r21, r21
    265c:	47 fd       	sbrc	r20, 7
    265e:	50 95       	com	r21
    2660:	9a 01       	movw	r18, r20
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	24 0f       	add	r18, r20
    2668:	35 1f       	adc	r19, r21
    266a:	89 01       	movw	r16, r18
    266c:	09 5f       	subi	r16, 0xF9	; 249
    266e:	19 4f       	sbci	r17, 0xF9	; 249
    2670:	f9 01       	movw	r30, r18
    2672:	eb 5f       	subi	r30, 0xFB	; 251
    2674:	f9 4f       	sbci	r31, 0xF9	; 249
    2676:	d8 01       	movw	r26, r16
    2678:	4c 91       	ld	r20, X
    267a:	90 81       	ld	r25, Z
    267c:	49 17       	cp	r20, r25
    267e:	c4 f5       	brge	.+112    	; 0x26f0 <nrk_sem_post+0xc8>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>

		nrk_sem_list[id].value++;
    2686:	f8 01       	movw	r30, r16
    2688:	90 81       	ld	r25, Z
    268a:	9f 5f       	subi	r25, 0xFF	; 255
    268c:	90 83       	st	Z, r25
		nrk_cur_task_TCB->elevated_prio_flag=0;
    268e:	e0 91 19 06 	lds	r30, 0x0619
    2692:	f0 91 1a 06 	lds	r31, 0x061A
    2696:	14 82       	std	Z+4, r1	; 0x04
    2698:	ee e5       	ldi	r30, 0x5E	; 94
    269a:	f5 e0       	ldi	r31, 0x05	; 5
    269c:	00 e6       	ldi	r16, 0x60	; 96
    269e:	15 e0       	ldi	r17, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	c8 2e       	mov	r12, r24
    26a4:	dd 24       	eor	r13, r13
    26a6:	c7 fc       	sbrc	r12, 7
    26a8:	d0 94       	com	r13
    26aa:	ed 2c       	mov	r14, r13
    26ac:	fd 2c       	mov	r15, r13
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26ae:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    26b0:	30 81       	ld	r19, Z
    26b2:	32 30       	cpi	r19, 0x02	; 2
    26b4:	a1 f4       	brne	.+40     	; 0x26de <nrk_sem_post+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    26b6:	42 85       	ldd	r20, Z+10	; 0x0a
    26b8:	53 85       	ldd	r21, Z+11	; 0x0b
    26ba:	64 85       	ldd	r22, Z+12	; 0x0c
    26bc:	75 85       	ldd	r23, Z+13	; 0x0d
    26be:	4c 15       	cp	r20, r12
    26c0:	5d 05       	cpc	r21, r13
    26c2:	6e 05       	cpc	r22, r14
    26c4:	7f 05       	cpc	r23, r15
    26c6:	59 f4       	brne	.+22     	; 0x26de <nrk_sem_post+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26c8:	d8 01       	movw	r26, r16
    26ca:	2c 93       	st	X, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    26cc:	16 86       	std	Z+14, r1	; 0x0e
    26ce:	17 86       	std	Z+15, r1	; 0x0f
    26d0:	10 8a       	std	Z+16, r1	; 0x10
    26d2:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    26d4:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    26d6:	12 86       	std	Z+10, r1	; 0x0a
    26d8:	13 86       	std	Z+11, r1	; 0x0b
    26da:	14 86       	std	Z+12, r1	; 0x0c
    26dc:	15 86       	std	Z+13, r1	; 0x0d
    26de:	bb 96       	adiw	r30, 0x2b	; 43
    26e0:	05 5d       	subi	r16, 0xD5	; 213
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    26e4:	b6 e0       	ldi	r27, 0x06	; 6
    26e6:	ea 30       	cpi	r30, 0x0A	; 10
    26e8:	fb 07       	cpc	r31, r27
    26ea:	11 f7       	brne	.-60     	; 0x26b0 <nrk_sem_post+0x88>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    26ec:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
	}
		
return NRK_OK;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
}
    26f2:	0f 90       	pop	r0
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	08 95       	ret

00002706 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2706:	0e 94 96 12 	call	0x252c	; 0x252c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    270a:	8f 3f       	cpi	r24, 0xFF	; 255
    270c:	11 f4       	brne	.+4      	; 0x2712 <nrk_sem_delete+0xc>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	29 f4       	brne	.+10     	; 0x2720 <nrk_sem_delete+0x1a>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_nrk_errno_set>
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2720:	99 27       	eor	r25, r25
    2722:	87 fd       	sbrc	r24, 7
    2724:	90 95       	com	r25
    2726:	9c 01       	movw	r18, r24
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	28 0f       	add	r18, r24
    272e:	39 1f       	adc	r19, r25
    2730:	f9 01       	movw	r30, r18
    2732:	eb 5f       	subi	r30, 0xFB	; 251
    2734:	f9 4f       	sbci	r31, 0xF9	; 249
    2736:	8f ef       	ldi	r24, 0xFF	; 255
    2738:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    273a:	f9 01       	movw	r30, r18
    273c:	e9 5f       	subi	r30, 0xF9	; 249
    273e:	f9 4f       	sbci	r31, 0xF9	; 249
    2740:	80 83       	st	Z, r24
	nrk_sem_list[id].resource_ceiling=-1;
    2742:	f9 01       	movw	r30, r18
    2744:	ea 5f       	subi	r30, 0xFA	; 250
    2746:	f9 4f       	sbci	r31, 0xF9	; 249
    2748:	80 83       	st	Z, r24
	_nrk_resource_cnt--;
    274a:	80 91 18 06 	lds	r24, 0x0618
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	80 93 18 06 	sts	0x0618, r24
return NRK_OK;
    2754:	81 e0       	ldi	r24, 0x01	; 1
}
    2756:	08 95       	ret

00002758 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2758:	e0 91 0e 06 	lds	r30, 0x060E
    275c:	f0 91 0f 06 	lds	r31, 0x060F
}
    2760:	80 81       	ld	r24, Z
    2762:	08 95       	ret

00002764 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2764:	e0 91 0e 06 	lds	r30, 0x060E
    2768:	f0 91 0f 06 	lds	r31, 0x060F
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    276c:	30 97       	sbiw	r30, 0x00	; 0
    276e:	21 f0       	breq	.+8      	; 0x2778 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2770:	03 80       	ldd	r0, Z+3	; 0x03
    2772:	f4 81       	ldd	r31, Z+4	; 0x04
    2774:	e0 2d       	mov	r30, r0
    2776:	fa cf       	rjmp	.-12     	; 0x276c <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2778:	08 95       	ret

0000277a <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    278a:	e0 91 55 05 	lds	r30, 0x0555
    278e:	f0 91 56 05 	lds	r31, 0x0556
    2792:	30 97       	sbiw	r30, 0x00	; 0
    2794:	09 f4       	brne	.+2      	; 0x2798 <nrk_add_to_readyQ+0x1e>
    2796:	8a c0       	rjmp	.+276    	; 0x28ac <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    2798:	40 91 0e 06 	lds	r20, 0x060E
    279c:	50 91 0f 06 	lds	r21, 0x060F
    CurNode = _free_node;

    if (_head_node != NULL)
    27a0:	41 15       	cp	r20, r1
    27a2:	51 05       	cpc	r21, r1
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <nrk_add_to_readyQ+0x2e>
    27a6:	46 c0       	rjmp	.+140    	; 0x2834 <nrk_add_to_readyQ+0xba>
    27a8:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    27aa:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    27ac:	69 2f       	mov	r22, r25
    27ae:	78 2f       	mov	r23, r24
    27b0:	76 03       	mulsu	r23, r22
    27b2:	90 01       	movw	r18, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	29 5a       	subi	r18, 0xA9	; 169
    27b8:	3a 4f       	sbci	r19, 0xFA	; 250
    27ba:	89 01       	movw	r16, r18
    27bc:	06 5f       	subi	r16, 0xF6	; 246
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    27c0:	79 01       	movw	r14, r18
    27c2:	c4 e0       	ldi	r28, 0x04	; 4
    27c4:	ec 0e       	add	r14, r28
    27c6:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    27c8:	25 5f       	subi	r18, 0xF5	; 245
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    27cc:	6c 91       	ld	r22, X
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	96 9f       	mul	r25, r22
    27d2:	e0 01       	movw	r28, r0
    27d4:	97 9f       	mul	r25, r23
    27d6:	d0 0d       	add	r29, r0
    27d8:	11 24       	eor	r1, r1
    27da:	c9 5a       	subi	r28, 0xA9	; 169
    27dc:	da 4f       	sbci	r29, 0xFA	; 250
    27de:	dc 80       	ldd	r13, Y+4	; 0x04
    27e0:	dd 20       	and	r13, r13
    27e2:	29 f0       	breq	.+10     	; 0x27ee <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    27e4:	db 84       	ldd	r13, Y+11	; 0x0b
    27e6:	e8 01       	movw	r28, r16
    27e8:	c8 80       	ld	r12, Y
    27ea:	dc 14       	cp	r13, r12
    27ec:	28 f1       	brcs	.+74     	; 0x2838 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    27ee:	e7 01       	movw	r28, r14
    27f0:	d8 80       	ld	r13, Y
    27f2:	dd 20       	and	r13, r13
    27f4:	61 f0       	breq	.+24     	; 0x280e <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    27f6:	96 9f       	mul	r25, r22
    27f8:	e0 01       	movw	r28, r0
    27fa:	97 9f       	mul	r25, r23
    27fc:	d0 0d       	add	r29, r0
    27fe:	11 24       	eor	r1, r1
    2800:	c9 5a       	subi	r28, 0xA9	; 169
    2802:	da 4f       	sbci	r29, 0xFA	; 250
    2804:	da 84       	ldd	r13, Y+10	; 0x0a
    2806:	e9 01       	movw	r28, r18
    2808:	c8 80       	ld	r12, Y
    280a:	dc 14       	cp	r13, r12
    280c:	a8 f0       	brcs	.+42     	; 0x2838 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    280e:	96 9f       	mul	r25, r22
    2810:	e0 01       	movw	r28, r0
    2812:	97 9f       	mul	r25, r23
    2814:	d0 0d       	add	r29, r0
    2816:	11 24       	eor	r1, r1
    2818:	c9 5a       	subi	r28, 0xA9	; 169
    281a:	da 4f       	sbci	r29, 0xFA	; 250
    281c:	7a 85       	ldd	r23, Y+10	; 0x0a
    281e:	e8 01       	movw	r28, r16
    2820:	68 81       	ld	r22, Y
    2822:	76 17       	cp	r23, r22
    2824:	48 f0       	brcs	.+18     	; 0x2838 <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2826:	13 96       	adiw	r26, 0x03	; 3
    2828:	0d 90       	ld	r0, X+
    282a:	bc 91       	ld	r27, X
    282c:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    282e:	10 97       	sbiw	r26, 0x00	; 0
    2830:	69 f6       	brne	.-102    	; 0x27cc <nrk_add_to_readyQ+0x52>
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <nrk_add_to_readyQ+0xbe>
    2834:	a0 e0       	ldi	r26, 0x00	; 0
    2836:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2838:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    283a:	c3 81       	ldd	r28, Z+3	; 0x03
    283c:	d4 81       	ldd	r29, Z+4	; 0x04
    283e:	d0 93 56 05 	sts	0x0556, r29
    2842:	c0 93 55 05 	sts	0x0555, r28

    if (NextNode == _head_node)
    2846:	a4 17       	cp	r26, r20
    2848:	b5 07       	cpc	r27, r21
    284a:	b1 f4       	brne	.+44     	; 0x2878 <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    284c:	10 97       	sbiw	r26, 0x00	; 0
    284e:	49 f0       	breq	.+18     	; 0x2862 <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    2850:	b4 83       	std	Z+4, r27	; 0x04
    2852:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2854:	12 82       	std	Z+2, r1	; 0x02
    2856:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2858:	12 96       	adiw	r26, 0x02	; 2
    285a:	fc 93       	st	X, r31
    285c:	ee 93       	st	-X, r30
    285e:	11 97       	sbiw	r26, 0x01	; 1
    2860:	06 c0       	rjmp	.+12     	; 0x286e <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    2862:	14 82       	std	Z+4, r1	; 0x04
    2864:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2866:	12 82       	std	Z+2, r1	; 0x02
    2868:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    286a:	fa 83       	std	Y+2, r31	; 0x02
    286c:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    286e:	f0 93 0f 06 	sts	0x060F, r31
    2872:	e0 93 0e 06 	sts	0x060E, r30
    2876:	1a c0       	rjmp	.+52     	; 0x28ac <nrk_add_to_readyQ+0x132>
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	8d 91       	ld	r24, X+
    287c:	9c 91       	ld	r25, X
    287e:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2880:	ac 17       	cp	r26, r28
    2882:	bd 07       	cpc	r27, r29
    2884:	59 f0       	breq	.+22     	; 0x289c <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2886:	92 83       	std	Z+2, r25	; 0x02
    2888:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    288a:	b4 83       	std	Z+4, r27	; 0x04
    288c:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    288e:	11 96       	adiw	r26, 0x01	; 1
    2890:	cd 91       	ld	r28, X+
    2892:	dc 91       	ld	r29, X
    2894:	12 97       	sbiw	r26, 0x02	; 2
    2896:	fc 83       	std	Y+4, r31	; 0x04
    2898:	eb 83       	std	Y+3, r30	; 0x03
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    289c:	14 82       	std	Z+4, r1	; 0x04
    289e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    28a0:	92 83       	std	Z+2, r25	; 0x02
    28a2:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    28a4:	12 96       	adiw	r26, 0x02	; 2
    28a6:	fc 93       	st	X, r31
    28a8:	ee 93       	st	-X, r30
    28aa:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	ff 90       	pop	r15
    28b6:	ef 90       	pop	r14
    28b8:	df 90       	pop	r13
    28ba:	cf 90       	pop	r12
    28bc:	08 95       	ret

000028be <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    28c2:	e0 91 0e 06 	lds	r30, 0x060E
    28c6:	f0 91 0f 06 	lds	r31, 0x060F
    28ca:	30 97       	sbiw	r30, 0x00	; 0
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <nrk_rem_from_readyQ+0x12>
    28ce:	44 c0       	rjmp	.+136    	; 0x2958 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    28d0:	99 27       	eor	r25, r25
    28d2:	87 fd       	sbrc	r24, 7
    28d4:	90 95       	com	r25
    28d6:	20 81       	ld	r18, Z
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	28 17       	cp	r18, r24
    28dc:	39 07       	cpc	r19, r25
    28de:	81 f4       	brne	.+32     	; 0x2900 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    28e0:	a3 81       	ldd	r26, Z+3	; 0x03
    28e2:	b4 81       	ldd	r27, Z+4	; 0x04
    28e4:	b0 93 0f 06 	sts	0x060F, r27
    28e8:	a0 93 0e 06 	sts	0x060E, r26
        _head_node->Prev = NULL;
    28ec:	12 96       	adiw	r26, 0x02	; 2
    28ee:	1c 92       	st	X, r1
    28f0:	1e 92       	st	-X, r1
    28f2:	11 97       	sbiw	r26, 0x01	; 1
    28f4:	18 c0       	rjmp	.+48     	; 0x2926 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    28f6:	03 80       	ldd	r0, Z+3	; 0x03
    28f8:	f4 81       	ldd	r31, Z+4	; 0x04
    28fa:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    28fc:	30 97       	sbiw	r30, 0x00	; 0
    28fe:	61 f1       	breq	.+88     	; 0x2958 <nrk_rem_from_readyQ+0x9a>
    2900:	20 81       	ld	r18, Z
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	b1 f7       	brne	.-20     	; 0x28f6 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    290a:	c1 81       	ldd	r28, Z+1	; 0x01
    290c:	d2 81       	ldd	r29, Z+2	; 0x02
    290e:	83 81       	ldd	r24, Z+3	; 0x03
    2910:	94 81       	ldd	r25, Z+4	; 0x04
    2912:	9c 83       	std	Y+4, r25	; 0x04
    2914:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2916:	a3 81       	ldd	r26, Z+3	; 0x03
    2918:	b4 81       	ldd	r27, Z+4	; 0x04
    291a:	10 97       	sbiw	r26, 0x00	; 0
    291c:	21 f0       	breq	.+8      	; 0x2926 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	dc 93       	st	X, r29
    2922:	ce 93       	st	-X, r28
    2924:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2926:	a0 91 55 05 	lds	r26, 0x0555
    292a:	b0 91 56 05 	lds	r27, 0x0556
    292e:	10 97       	sbiw	r26, 0x00	; 0
    2930:	39 f4       	brne	.+14     	; 0x2940 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2932:	f0 93 56 05 	sts	0x0556, r31
    2936:	e0 93 55 05 	sts	0x0555, r30
        _free_node->Next = NULL;
    293a:	14 82       	std	Z+4, r1	; 0x04
    293c:	13 82       	std	Z+3, r1	; 0x03
    293e:	0a c0       	rjmp	.+20     	; 0x2954 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2940:	b4 83       	std	Z+4, r27	; 0x04
    2942:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2944:	12 96       	adiw	r26, 0x02	; 2
    2946:	fc 93       	st	X, r31
    2948:	ee 93       	st	-X, r30
    294a:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    294c:	f0 93 56 05 	sts	0x0556, r31
    2950:	e0 93 55 05 	sts	0x0555, r30
    }
    _free_node->Prev = NULL;
    2954:	12 82       	std	Z+2, r1	; 0x02
    2956:	11 82       	std	Z+1, r1	; 0x01
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	08 95       	ret

0000295e <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    296c:	4b 81       	ldd	r20, Y+3	; 0x03
    296e:	5c 81       	ldd	r21, Y+4	; 0x04
    2970:	69 81       	ldd	r22, Y+1	; 0x01
    2972:	7a 81       	ldd	r23, Y+2	; 0x02
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	0e 94 41 21 	call	0x4282	; 0x4282 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    297c:	2f 81       	ldd	r18, Y+7	; 0x07
    297e:	22 23       	and	r18, r18
    2980:	71 f0       	breq	.+28     	; 0x299e <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2982:	4b 81       	ldd	r20, Y+3	; 0x03
    2984:	5c 81       	ldd	r21, Y+4	; 0x04
    2986:	e1 2c       	mov	r14, r1
    2988:	f1 2c       	mov	r15, r1
    298a:	00 e0       	ldi	r16, 0x00	; 0
    298c:	10 e0       	ldi	r17, 0x00	; 0
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	bc 01       	movw	r22, r24
    2994:	ce 01       	movw	r24, r28
    2996:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    299a:	1f 82       	std	Y+7, r1	; 0x07
    299c:	0c c0       	rjmp	.+24     	; 0x29b6 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    299e:	e8 81       	ld	r30, Y
    29a0:	2b e2       	ldi	r18, 0x2B	; 43
    29a2:	e2 02       	muls	r30, r18
    29a4:	f0 01       	movw	r30, r0
    29a6:	11 24       	eor	r1, r1
    29a8:	e9 5a       	subi	r30, 0xA9	; 169
    29aa:	fa 4f       	sbci	r31, 0xFA	; 250
    29ac:	21 85       	ldd	r18, Z+9	; 0x09
    29ae:	23 30       	cpi	r18, 0x03	; 3
    29b0:	b9 f4       	brne	.+46     	; 0x29e0 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    29b6:	e8 81       	ld	r30, Y
    29b8:	8b e2       	ldi	r24, 0x2B	; 43
    29ba:	e8 02       	muls	r30, r24
    29bc:	f0 01       	movw	r30, r0
    29be:	11 24       	eor	r1, r1
    29c0:	e9 5a       	subi	r30, 0xA9	; 169
    29c2:	fa 4f       	sbci	r31, 0xFA	; 250
    29c4:	45 89       	ldd	r20, Z+21	; 0x15
    29c6:	56 89       	ldd	r21, Z+22	; 0x16
    29c8:	67 89       	ldd	r22, Z+23	; 0x17
    29ca:	70 8d       	ldd	r23, Z+24	; 0x18
    29cc:	45 2b       	or	r20, r21
    29ce:	46 2b       	or	r20, r22
    29d0:	47 2b       	or	r20, r23
    29d2:	41 f4       	brne	.+16     	; 0x29e4 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    29d8:	88 81       	ld	r24, Y
    29da:	0e 94 bd 13 	call	0x277a	; 0x277a <nrk_add_to_readyQ>
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    29e0:	8f ef       	ldi	r24, 0xFF	; 255
    29e2:	01 c0       	rjmp	.+2      	; 0x29e6 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
}
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	08 95       	ret

000029f4 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	28 97       	sbiw	r28, 0x08	; 8
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	29 83       	std	Y+1, r18	; 0x01
    2a0c:	3a 83       	std	Y+2, r19	; 0x02
    2a0e:	4b 83       	std	Y+3, r20	; 0x03
    2a10:	5c 83       	std	Y+4, r21	; 0x04
    2a12:	6d 83       	std	Y+5, r22	; 0x05
    2a14:	7e 83       	std	Y+6, r23	; 0x06
    2a16:	8f 83       	std	Y+7, r24	; 0x07
    2a18:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2a1a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2a1e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2a22:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2a24:	ce 01       	movw	r24, r28
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2a2c:	63 30       	cpi	r22, 0x03	; 3
    2a2e:	71 05       	cpc	r23, r1
    2a30:	98 f0       	brcs	.+38     	; 0x2a58 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2a32:	e0 91 19 06 	lds	r30, 0x0619
    2a36:	f0 91 1a 06 	lds	r31, 0x061A
    2a3a:	21 2f       	mov	r18, r17
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	26 0f       	add	r18, r22
    2a40:	37 1f       	adc	r19, r23
    2a42:	c9 01       	movw	r24, r18
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	85 8b       	std	Z+21, r24	; 0x15
    2a4a:	96 8b       	std	Z+22, r25	; 0x16
    2a4c:	a7 8b       	std	Z+23, r26	; 0x17
    2a4e:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2a50:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>

    return NRK_OK;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2a5a:	28 96       	adiw	r28, 0x08	; 8
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	08 95       	ret

00002a6e <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2a6e:	0e 94 13 21 	call	0x4226	; 0x4226 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2a72:	e0 91 19 06 	lds	r30, 0x0619
    2a76:	f0 91 1a 06 	lds	r31, 0x061A
    2a7a:	85 81       	ldd	r24, Z+5	; 0x05
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	f7 cf       	rjmp	.-18     	; 0x2a6e <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2a80:	08 95       	ret

00002a82 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2a82:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2a84:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2a88:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2a8c:	e0 91 19 06 	lds	r30, 0x0619
    2a90:	f0 91 1a 06 	lds	r31, 0x061A
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	92 a7       	std	Z+42, r25	; 0x2a
    2a9a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2aa0:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2aa4:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2aa6:	88 3f       	cpi	r24, 0xF8	; 248
    2aa8:	88 f4       	brcc	.+34     	; 0x2acc <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2aaa:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2aae:	2c 2f       	mov	r18, r28
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	24 17       	cp	r18, r20
    2abc:	35 07       	cpc	r19, r21
    2abe:	34 f4       	brge	.+12     	; 0x2acc <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2ac4:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2ac8:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2acc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2ad0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2ada:	e0 91 19 06 	lds	r30, 0x0619
    2ade:	f0 91 1a 06 	lds	r31, 0x061A
    2ae2:	80 85       	ldd	r24, Z+8	; 0x08
    2ae4:	0e 94 5f 14 	call	0x28be	; 0x28be <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2ae8:	e0 91 19 06 	lds	r30, 0x0619
    2aec:	f0 91 1a 06 	lds	r31, 0x061A
    2af0:	84 e0       	ldi	r24, 0x04	; 4
    2af2:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2af4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	08 95       	ret

00002afc <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2b02:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nrk_stack_check>

    if (p == 0)
    2b06:	20 97       	sbiw	r28, 0x00	; 0
    2b08:	11 f4       	brne	.+4      	; 0x2b0e <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2b0a:	c1 e0       	ldi	r28, 0x01	; 1
    2b0c:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2b0e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2b12:	e0 91 19 06 	lds	r30, 0x0619
    2b16:	f0 91 1a 06 	lds	r31, 0x061A
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2b1e:	d2 a7       	std	Z+42, r29	; 0x2a
    2b20:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2b22:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2b26:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2b28:	88 3f       	cpi	r24, 0xF8	; 248
    2b2a:	88 f4       	brcc	.+34     	; 0x2b4e <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2b2c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2b30:	2c 2f       	mov	r18, r28
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	2f 5f       	subi	r18, 0xFF	; 255
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	48 2f       	mov	r20, r24
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	24 17       	cp	r18, r20
    2b3e:	35 07       	cpc	r19, r21
    2b40:	34 f4       	brge	.+12     	; 0x2b4e <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2b46:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2b4a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2b4e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2b52:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	08 95       	ret

00002b5e <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2b6a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2b6e:	e0 91 19 06 	lds	r30, 0x0619
    2b72:	f0 91 1a 06 	lds	r31, 0x061A
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2b7a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2b7e:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2b80:	e0 91 19 06 	lds	r30, 0x0619
    2b84:	f0 91 1a 06 	lds	r31, 0x061A
    2b88:	c8 2f       	mov	r28, r24
    2b8a:	d0 e0       	ldi	r29, 0x00	; 0
    2b8c:	ae 01       	movw	r20, r28
    2b8e:	40 0f       	add	r20, r16
    2b90:	51 1f       	adc	r21, r17
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	45 8b       	std	Z+21, r20	; 0x15
    2b98:	56 8b       	std	Z+22, r21	; 0x16
    2b9a:	67 8b       	std	Z+23, r22	; 0x17
    2b9c:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2b9e:	87 ef       	ldi	r24, 0xF7	; 247
    2ba0:	8f 15       	cp	r24, r15
    2ba2:	70 f0       	brcs	.+28     	; 0x2bc0 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2ba4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2ba8:	21 96       	adiw	r28, 0x01	; 1
    2baa:	28 2f       	mov	r18, r24
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	c2 17       	cp	r28, r18
    2bb0:	d3 07       	cpc	r29, r19
    2bb2:	34 f4       	brge	.+12     	; 0x2bc0 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    2bb8:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);
    2bbc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2bc0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2bc4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	08 95       	ret

00002bd6 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2bdc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2be0:	e0 91 19 06 	lds	r30, 0x0619
    2be4:	f0 91 1a 06 	lds	r31, 0x061A
    2be8:	21 e0       	ldi	r18, 0x01	; 1
    2bea:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2bec:	ce 01       	movw	r24, r28
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	85 8b       	std	Z+21, r24	; 0x15
    2bf4:	96 8b       	std	Z+22, r25	; 0x16
    2bf6:	a7 8b       	std	Z+23, r26	; 0x17
    2bf8:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2bfa:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2bfe:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2c00:	88 3f       	cpi	r24, 0xF8	; 248
    2c02:	88 f4       	brcc	.+34     	; 0x2c26 <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c04:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2c08:	2c 2f       	mov	r18, r28
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	2f 5f       	subi	r18, 0xFF	; 255
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	48 2f       	mov	r20, r24
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	24 17       	cp	r18, r20
    2c16:	35 07       	cpc	r19, r21
    2c18:	34 f4       	brge	.+12     	; 0x2c26 <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2c1e:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);
    2c22:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2c26:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2c2a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2c36:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2c38:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c3c:	e0 91 19 06 	lds	r30, 0x0619
    2c40:	f0 91 1a 06 	lds	r31, 0x061A
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2c48:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2c4a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2c4e:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2c50:	88 3f       	cpi	r24, 0xF8	; 248
    2c52:	88 f4       	brcc	.+34     	; 0x2c76 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c54:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2c58:	2c 2f       	mov	r18, r28
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	2f 5f       	subi	r18, 0xFF	; 255
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	48 2f       	mov	r20, r24
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	24 17       	cp	r18, r20
    2c66:	35 07       	cpc	r19, r21
    2c68:	34 f4       	brge	.+12     	; 0x2c76 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2c6e:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);
    2c72:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2c76:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2c7a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	28 97       	sbiw	r28, 0x08	; 8
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	29 83       	std	Y+1, r18	; 0x01
    2c9c:	3a 83       	std	Y+2, r19	; 0x02
    2c9e:	4b 83       	std	Y+3, r20	; 0x03
    2ca0:	5c 83       	std	Y+4, r21	; 0x04
    2ca2:	6d 83       	std	Y+5, r22	; 0x05
    2ca4:	7e 83       	std	Y+6, r23	; 0x06
    2ca6:	8f 83       	std	Y+7, r24	; 0x07
    2ca8:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2caa:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nrk_stack_check>

    nrk_int_disable ();
    2cae:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2cb2:	e0 91 19 06 	lds	r30, 0x0619
    2cb6:	f0 91 1a 06 	lds	r31, 0x061A
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	92 a7       	std	Z+42, r25	; 0x2a
    2cc4:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2cc6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2cca:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2ccc:	ce 01       	movw	r24, r28
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2cd4:	e0 91 19 06 	lds	r30, 0x0619
    2cd8:	f0 91 1a 06 	lds	r31, 0x061A
    2cdc:	61 0f       	add	r22, r17
    2cde:	71 1d       	adc	r23, r1
    2ce0:	81 1d       	adc	r24, r1
    2ce2:	91 1d       	adc	r25, r1
    2ce4:	65 8b       	std	Z+21, r22	; 0x15
    2ce6:	76 8b       	std	Z+22, r23	; 0x16
    2ce8:	87 8b       	std	Z+23, r24	; 0x17
    2cea:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2cec:	18 3f       	cpi	r17, 0xF8	; 248
    2cee:	88 f4       	brcc	.+34     	; 0x2d12 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cf0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    2cf4:	21 2f       	mov	r18, r17
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	2f 5f       	subi	r18, 0xFF	; 255
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	24 17       	cp	r18, r20
    2d02:	35 07       	cpc	r19, r21
    2d04:	34 f4       	brge	.+12     	; 0x2d12 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2d0a:	80 93 ca 04 	sts	0x04CA, r24
            _nrk_set_next_wakeup (timer);
    2d0e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2d12:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2d16:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	28 96       	adiw	r28, 0x08	; 8
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	1f 91       	pop	r17
    2d2e:	08 95       	ret

00002d30 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	60 97       	sbiw	r28, 0x10	; 16
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	29 87       	std	Y+9, r18	; 0x09
    2d5a:	3a 87       	std	Y+10, r19	; 0x0a
    2d5c:	4b 87       	std	Y+11, r20	; 0x0b
    2d5e:	5c 87       	std	Y+12, r21	; 0x0c
    2d60:	6d 87       	std	Y+13, r22	; 0x0d
    2d62:	7e 87       	std	Y+14, r23	; 0x0e
    2d64:	8f 87       	std	Y+15, r24	; 0x0f
    2d66:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2d68:	ce 01       	movw	r24, r28
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2d70:	89 80       	ldd	r8, Y+1	; 0x01
    2d72:	9a 80       	ldd	r9, Y+2	; 0x02
    2d74:	ab 80       	ldd	r10, Y+3	; 0x03
    2d76:	bc 80       	ldd	r11, Y+4	; 0x04
    2d78:	cd 80       	ldd	r12, Y+5	; 0x05
    2d7a:	de 80       	ldd	r13, Y+6	; 0x06
    2d7c:	ef 80       	ldd	r14, Y+7	; 0x07
    2d7e:	f8 84       	ldd	r15, Y+8	; 0x08
    2d80:	09 85       	ldd	r16, Y+9	; 0x09
    2d82:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d84:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d86:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d88:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d8a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d8e:	78 89       	ldd	r23, Y+16	; 0x10
    2d90:	ce 01       	movw	r24, r28
    2d92:	09 96       	adiw	r24, 0x09	; 9
    2d94:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2d98:	8f 3f       	cpi	r24, 0xFF	; 255
    2d9a:	61 f0       	breq	.+24     	; 0x2db4 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2d9c:	29 85       	ldd	r18, Y+9	; 0x09
    2d9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2da0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2da2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2da4:	6d 85       	ldd	r22, Y+13	; 0x0d
    2da6:	7e 85       	ldd	r23, Y+14	; 0x0e
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	98 89       	ldd	r25, Y+16	; 0x10
    2dac:	0e 94 42 16 	call	0x2c84	; 0x2c84 <nrk_wait>

    return NRK_OK;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2db6:	60 96       	adiw	r28, 0x10	; 16
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	ff 90       	pop	r15
    2dcc:	ef 90       	pop	r14
    2dce:	df 90       	pop	r13
    2dd0:	cf 90       	pop	r12
    2dd2:	bf 90       	pop	r11
    2dd4:	af 90       	pop	r10
    2dd6:	9f 90       	pop	r9
    2dd8:	8f 90       	pop	r8
    2dda:	08 95       	ret

00002ddc <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2ddc:	e0 91 19 06 	lds	r30, 0x0619
    2de0:	f0 91 1a 06 	lds	r31, 0x061A
}
    2de4:	80 85       	ldd	r24, Z+8	; 0x08
    2de6:	08 95       	ret

00002de8 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2de8:	cf 92       	push	r12
    2dea:	df 92       	push	r13
    2dec:	ef 92       	push	r14
    2dee:	ff 92       	push	r15
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2df6:	1c 82       	std	Y+4, r1	; 0x04
    2df8:	1d 82       	std	Y+5, r1	; 0x05
    2dfa:	1e 82       	std	Y+6, r1	; 0x06
    2dfc:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2dfe:	40 91 10 06 	lds	r20, 0x0610
    2e02:	50 91 11 06 	lds	r21, 0x0611
    2e06:	60 91 12 06 	lds	r22, 0x0612
    2e0a:	70 91 13 06 	lds	r23, 0x0613
    2e0e:	48 83       	st	Y, r20
    2e10:	59 83       	std	Y+1, r21	; 0x01
    2e12:	6a 83       	std	Y+2, r22	; 0x02
    2e14:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2e16:	c0 90 14 06 	lds	r12, 0x0614
    2e1a:	d0 90 15 06 	lds	r13, 0x0615
    2e1e:	e0 90 16 06 	lds	r14, 0x0616
    2e22:	f0 90 17 06 	lds	r15, 0x0617
    2e26:	cc 82       	std	Y+4, r12	; 0x04
    2e28:	dd 82       	std	Y+5, r13	; 0x05
    2e2a:	ee 82       	std	Y+6, r14	; 0x06
    2e2c:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2e2e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    2e32:	a8 2f       	mov	r26, r24
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	23 eb       	ldi	r18, 0xB3	; 179
    2e38:	36 ee       	ldi	r19, 0xE6	; 230
    2e3a:	4e e0       	ldi	r20, 0x0E	; 14
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	0e 94 a9 23 	call	0x4752	; 0x4752 <__muluhisi3>
    2e42:	6c 0d       	add	r22, r12
    2e44:	7d 1d       	adc	r23, r13
    2e46:	8e 1d       	adc	r24, r14
    2e48:	9f 1d       	adc	r25, r15
    2e4a:	6c 83       	std	Y+4, r22	; 0x04
    2e4c:	7d 83       	std	Y+5, r23	; 0x05
    2e4e:	8e 83       	std	Y+6, r24	; 0x06
    2e50:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2e52:	4c 81       	ldd	r20, Y+4	; 0x04
    2e54:	5d 81       	ldd	r21, Y+5	; 0x05
    2e56:	6e 81       	ldd	r22, Y+6	; 0x06
    2e58:	7f 81       	ldd	r23, Y+7	; 0x07
    2e5a:	41 15       	cp	r20, r1
    2e5c:	8a ec       	ldi	r24, 0xCA	; 202
    2e5e:	58 07       	cpc	r21, r24
    2e60:	8a e9       	ldi	r24, 0x9A	; 154
    2e62:	68 07       	cpc	r22, r24
    2e64:	8b e3       	ldi	r24, 0x3B	; 59
    2e66:	78 07       	cpc	r23, r24
    2e68:	a0 f0       	brcs	.+40     	; 0x2e92 <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    2e6a:	5a 5c       	subi	r21, 0xCA	; 202
    2e6c:	6a 49       	sbci	r22, 0x9A	; 154
    2e6e:	7b 43       	sbci	r23, 0x3B	; 59
    2e70:	4c 83       	std	Y+4, r20	; 0x04
    2e72:	5d 83       	std	Y+5, r21	; 0x05
    2e74:	6e 83       	std	Y+6, r22	; 0x06
    2e76:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    2e78:	48 81       	ld	r20, Y
    2e7a:	59 81       	ldd	r21, Y+1	; 0x01
    2e7c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e7e:	7b 81       	ldd	r23, Y+3	; 0x03
    2e80:	4f 5f       	subi	r20, 0xFF	; 255
    2e82:	5f 4f       	sbci	r21, 0xFF	; 255
    2e84:	6f 4f       	sbci	r22, 0xFF	; 255
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	48 83       	st	Y, r20
    2e8a:	59 83       	std	Y+1, r21	; 0x01
    2e8c:	6a 83       	std	Y+2, r22	; 0x02
    2e8e:	7b 83       	std	Y+3, r23	; 0x03
    2e90:	e0 cf       	rjmp	.-64     	; 0x2e52 <nrk_time_get+0x6a>
    }

}
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	08 95       	ret

00002ea0 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    2ea0:	8f 92       	push	r8
    2ea2:	9f 92       	push	r9
    2ea4:	af 92       	push	r10
    2ea6:	bf 92       	push	r11
    2ea8:	cf 92       	push	r12
    2eaa:	df 92       	push	r13
    2eac:	ef 92       	push	r14
    2eae:	ff 92       	push	r15
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	60 97       	sbiw	r28, 0x10	; 16
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	fc 01       	movw	r30, r24
    2eca:	09 83       	std	Y+1, r16	; 0x01
    2ecc:	1a 83       	std	Y+2, r17	; 0x02
    2ece:	2b 83       	std	Y+3, r18	; 0x03
    2ed0:	3c 83       	std	Y+4, r19	; 0x04
    2ed2:	4d 83       	std	Y+5, r20	; 0x05
    2ed4:	5e 83       	std	Y+6, r21	; 0x06
    2ed6:	6f 83       	std	Y+7, r22	; 0x07
    2ed8:	78 87       	std	Y+8, r23	; 0x08
    2eda:	89 86       	std	Y+9, r8	; 0x09
    2edc:	9a 86       	std	Y+10, r9	; 0x0a
    2ede:	ab 86       	std	Y+11, r10	; 0x0b
    2ee0:	bc 86       	std	Y+12, r11	; 0x0c
    2ee2:	cd 86       	std	Y+13, r12	; 0x0d
    2ee4:	de 86       	std	Y+14, r13	; 0x0e
    2ee6:	ef 86       	std	Y+15, r14	; 0x0f
    2ee8:	f8 8a       	std	Y+16, r15	; 0x10
    2eea:	89 80       	ldd	r8, Y+1	; 0x01
    2eec:	9a 80       	ldd	r9, Y+2	; 0x02
    2eee:	ab 80       	ldd	r10, Y+3	; 0x03
    2ef0:	bc 80       	ldd	r11, Y+4	; 0x04
    2ef2:	0d 81       	ldd	r16, Y+5	; 0x05
    2ef4:	1e 81       	ldd	r17, Y+6	; 0x06
    2ef6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ef8:	38 85       	ldd	r19, Y+8	; 0x08
    2efa:	c9 84       	ldd	r12, Y+9	; 0x09
    2efc:	da 84       	ldd	r13, Y+10	; 0x0a
    2efe:	eb 84       	ldd	r14, Y+11	; 0x0b
    2f00:	fc 84       	ldd	r15, Y+12	; 0x0c
    2f02:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f04:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f08:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    2f0a:	8c 14       	cp	r8, r12
    2f0c:	9d 04       	cpc	r9, r13
    2f0e:	ae 04       	cpc	r10, r14
    2f10:	bf 04       	cpc	r11, r15
    2f12:	08 f4       	brcc	.+2      	; 0x2f16 <nrk_time_sub+0x76>
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    2f16:	c8 14       	cp	r12, r8
    2f18:	d9 04       	cpc	r13, r9
    2f1a:	ea 04       	cpc	r14, r10
    2f1c:	fb 04       	cpc	r15, r11
    2f1e:	91 f4       	brne	.+36     	; 0x2f44 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    2f20:	04 17       	cp	r16, r20
    2f22:	15 07       	cpc	r17, r21
    2f24:	26 07       	cpc	r18, r22
    2f26:	37 07       	cpc	r19, r23
    2f28:	a8 f1       	brcs	.+106    	; 0x2f94 <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    2f2a:	04 1b       	sub	r16, r20
    2f2c:	15 0b       	sbc	r17, r21
    2f2e:	26 0b       	sbc	r18, r22
    2f30:	37 0b       	sbc	r19, r23
    2f32:	04 83       	std	Z+4, r16	; 0x04
    2f34:	15 83       	std	Z+5, r17	; 0x05
    2f36:	26 83       	std	Z+6, r18	; 0x06
    2f38:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    2f3a:	10 82       	st	Z, r1
    2f3c:	11 82       	std	Z+1, r1	; 0x01
    2f3e:	12 82       	std	Z+2, r1	; 0x02
    2f40:	13 82       	std	Z+3, r1	; 0x03
    2f42:	26 c0       	rjmp	.+76     	; 0x2f90 <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    2f44:	04 17       	cp	r16, r20
    2f46:	15 07       	cpc	r17, r21
    2f48:	26 07       	cpc	r18, r22
    2f4a:	37 07       	cpc	r19, r23
    2f4c:	88 f4       	brcc	.+34     	; 0x2f70 <nrk_time_sub+0xd0>
{
	high.secs--;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	88 1a       	sub	r8, r24
    2f52:	91 08       	sbc	r9, r1
    2f54:	a1 08       	sbc	r10, r1
    2f56:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    2f58:	8c 18       	sub	r8, r12
    2f5a:	9d 08       	sbc	r9, r13
    2f5c:	ae 08       	sbc	r10, r14
    2f5e:	bf 08       	sbc	r11, r15
    2f60:	80 82       	st	Z, r8
    2f62:	91 82       	std	Z+1, r9	; 0x01
    2f64:	a2 82       	std	Z+2, r10	; 0x02
    2f66:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    2f68:	16 53       	subi	r17, 0x36	; 54
    2f6a:	25 46       	sbci	r18, 0x65	; 101
    2f6c:	34 4c       	sbci	r19, 0xC4	; 196
    2f6e:	08 c0       	rjmp	.+16     	; 0x2f80 <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    2f70:	8c 18       	sub	r8, r12
    2f72:	9d 08       	sbc	r9, r13
    2f74:	ae 08       	sbc	r10, r14
    2f76:	bf 08       	sbc	r11, r15
    2f78:	80 82       	st	Z, r8
    2f7a:	91 82       	std	Z+1, r9	; 0x01
    2f7c:	a2 82       	std	Z+2, r10	; 0x02
    2f7e:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    2f80:	04 1b       	sub	r16, r20
    2f82:	15 0b       	sbc	r17, r21
    2f84:	26 0b       	sbc	r18, r22
    2f86:	37 0b       	sbc	r19, r23
    2f88:	04 83       	std	Z+4, r16	; 0x04
    2f8a:	15 83       	std	Z+5, r17	; 0x05
    2f8c:	26 83       	std	Z+6, r18	; 0x06
    2f8e:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    2f94:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    2f96:	60 96       	adiw	r28, 0x10	; 16
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	cf 90       	pop	r12
    2fb2:	bf 90       	pop	r11
    2fb4:	af 90       	pop	r10
    2fb6:	9f 90       	pop	r9
    2fb8:	8f 90       	pop	r8
    2fba:	08 95       	ret

00002fbc <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    2fbc:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    2fbe:	44 81       	ldd	r20, Z+4	; 0x04
    2fc0:	55 81       	ldd	r21, Z+5	; 0x05
    2fc2:	66 81       	ldd	r22, Z+6	; 0x06
    2fc4:	77 81       	ldd	r23, Z+7	; 0x07
    2fc6:	41 15       	cp	r20, r1
    2fc8:	8a ec       	ldi	r24, 0xCA	; 202
    2fca:	58 07       	cpc	r21, r24
    2fcc:	8a e9       	ldi	r24, 0x9A	; 154
    2fce:	68 07       	cpc	r22, r24
    2fd0:	8b e3       	ldi	r24, 0x3B	; 59
    2fd2:	78 07       	cpc	r23, r24
    2fd4:	a0 f0       	brcs	.+40     	; 0x2ffe <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    2fd6:	5a 5c       	subi	r21, 0xCA	; 202
    2fd8:	6a 49       	sbci	r22, 0x9A	; 154
    2fda:	7b 43       	sbci	r23, 0x3B	; 59
    2fdc:	44 83       	std	Z+4, r20	; 0x04
    2fde:	55 83       	std	Z+5, r21	; 0x05
    2fe0:	66 83       	std	Z+6, r22	; 0x06
    2fe2:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    2fe4:	40 81       	ld	r20, Z
    2fe6:	51 81       	ldd	r21, Z+1	; 0x01
    2fe8:	62 81       	ldd	r22, Z+2	; 0x02
    2fea:	73 81       	ldd	r23, Z+3	; 0x03
    2fec:	4f 5f       	subi	r20, 0xFF	; 255
    2fee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff0:	6f 4f       	sbci	r22, 0xFF	; 255
    2ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff4:	40 83       	st	Z, r20
    2ff6:	51 83       	std	Z+1, r21	; 0x01
    2ff8:	62 83       	std	Z+2, r22	; 0x02
    2ffa:	73 83       	std	Z+3, r23	; 0x03
    2ffc:	e0 cf       	rjmp	.-64     	; 0x2fbe <nrk_time_compact_nanos+0x2>
    }
}
    2ffe:	08 95       	ret

00003000 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3000:	8f 92       	push	r8
    3002:	9f 92       	push	r9
    3004:	af 92       	push	r10
    3006:	bf 92       	push	r11
    3008:	cf 92       	push	r12
    300a:	df 92       	push	r13
    300c:	ef 92       	push	r14
    300e:	ff 92       	push	r15
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	60 97       	sbiw	r28, 0x10	; 16
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	09 83       	std	Y+1, r16	; 0x01
    302a:	1a 83       	std	Y+2, r17	; 0x02
    302c:	2b 83       	std	Y+3, r18	; 0x03
    302e:	3c 83       	std	Y+4, r19	; 0x04
    3030:	4d 83       	std	Y+5, r20	; 0x05
    3032:	5e 83       	std	Y+6, r21	; 0x06
    3034:	6f 83       	std	Y+7, r22	; 0x07
    3036:	78 87       	std	Y+8, r23	; 0x08
    3038:	89 86       	std	Y+9, r8	; 0x09
    303a:	9a 86       	std	Y+10, r9	; 0x0a
    303c:	ab 86       	std	Y+11, r10	; 0x0b
    303e:	bc 86       	std	Y+12, r11	; 0x0c
    3040:	cd 86       	std	Y+13, r12	; 0x0d
    3042:	de 86       	std	Y+14, r13	; 0x0e
    3044:	ef 86       	std	Y+15, r14	; 0x0f
    3046:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3048:	49 85       	ldd	r20, Y+9	; 0x09
    304a:	5a 85       	ldd	r21, Y+10	; 0x0a
    304c:	6b 85       	ldd	r22, Y+11	; 0x0b
    304e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3050:	09 81       	ldd	r16, Y+1	; 0x01
    3052:	1a 81       	ldd	r17, Y+2	; 0x02
    3054:	2b 81       	ldd	r18, Y+3	; 0x03
    3056:	3c 81       	ldd	r19, Y+4	; 0x04
    3058:	40 0f       	add	r20, r16
    305a:	51 1f       	adc	r21, r17
    305c:	62 1f       	adc	r22, r18
    305e:	73 1f       	adc	r23, r19
    3060:	fc 01       	movw	r30, r24
    3062:	40 83       	st	Z, r20
    3064:	51 83       	std	Z+1, r21	; 0x01
    3066:	62 83       	std	Z+2, r22	; 0x02
    3068:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    306a:	4d 85       	ldd	r20, Y+13	; 0x0d
    306c:	5e 85       	ldd	r21, Y+14	; 0x0e
    306e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3070:	78 89       	ldd	r23, Y+16	; 0x10
    3072:	0d 81       	ldd	r16, Y+5	; 0x05
    3074:	1e 81       	ldd	r17, Y+6	; 0x06
    3076:	2f 81       	ldd	r18, Y+7	; 0x07
    3078:	38 85       	ldd	r19, Y+8	; 0x08
    307a:	40 0f       	add	r20, r16
    307c:	51 1f       	adc	r21, r17
    307e:	62 1f       	adc	r22, r18
    3080:	73 1f       	adc	r23, r19
    3082:	44 83       	std	Z+4, r20	; 0x04
    3084:	55 83       	std	Z+5, r21	; 0x05
    3086:	66 83       	std	Z+6, r22	; 0x06
    3088:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    308a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <nrk_time_compact_nanos>
return NRK_OK;
}
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	60 96       	adiw	r28, 0x10	; 16
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	08 95       	ret

000030b6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    30b6:	60 93 10 06 	sts	0x0610, r22
    30ba:	70 93 11 06 	sts	0x0611, r23
    30be:	80 93 12 06 	sts	0x0612, r24
    30c2:	90 93 13 06 	sts	0x0613, r25
  nrk_system_time.nano_secs=nano_secs;
    30c6:	20 93 14 06 	sts	0x0614, r18
    30ca:	30 93 15 06 	sts	0x0615, r19
    30ce:	40 93 16 06 	sts	0x0616, r20
    30d2:	50 93 17 06 	sts	0x0617, r21
    30d6:	08 95       	ret

000030d8 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    30d8:	2f 92       	push	r2
    30da:	3f 92       	push	r3
    30dc:	4f 92       	push	r4
    30de:	5f 92       	push	r5
    30e0:	6f 92       	push	r6
    30e2:	7f 92       	push	r7
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	62 97       	sbiw	r28, 0x12	; 18
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    310c:	dc 01       	movw	r26, r24
    310e:	4d 90       	ld	r4, X+
    3110:	5d 90       	ld	r5, X+
    3112:	6d 90       	ld	r6, X+
    3114:	7c 90       	ld	r7, X
    3116:	13 97       	sbiw	r26, 0x03	; 3
    3118:	14 96       	adiw	r26, 0x04	; 4
    311a:	6d 91       	ld	r22, X+
    311c:	7d 91       	ld	r23, X+
    311e:	8d 91       	ld	r24, X+
    3120:	9c 91       	ld	r25, X
    3122:	17 97       	sbiw	r26, 0x07	; 7
    3124:	41 14       	cp	r4, r1
    3126:	51 04       	cpc	r5, r1
    3128:	61 04       	cpc	r6, r1
    312a:	71 04       	cpc	r7, r1
    312c:	09 f4       	brne	.+2      	; 0x3130 <_nrk_time_to_ticks+0x58>
    312e:	6c c0       	rjmp	.+216    	; 0x3208 <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3130:	b2 e4       	ldi	r27, 0x42	; 66
    3132:	4b 16       	cp	r4, r27
    3134:	51 04       	cpc	r5, r1
    3136:	61 04       	cpc	r6, r1
    3138:	71 04       	cpc	r7, r1
    313a:	08 f0       	brcs	.+2      	; 0x313e <_nrk_time_to_ticks+0x66>
    313c:	6d c0       	rjmp	.+218    	; 0x3218 <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    313e:	7b 01       	movw	r14, r22
    3140:	8c 01       	movw	r16, r24
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	a9 01       	movw	r20, r18
    3148:	69 83       	std	Y+1, r22	; 0x01
    314a:	fa 82       	std	Y+2, r15	; 0x02
    314c:	0b 83       	std	Y+3, r16	; 0x03
    314e:	1c 83       	std	Y+4, r17	; 0x04
    3150:	2d 83       	std	Y+5, r18	; 0x05
    3152:	3e 83       	std	Y+6, r19	; 0x06
    3154:	4f 83       	std	Y+7, r20	; 0x07
    3156:	58 87       	std	Y+8, r21	; 0x08
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	19 8a       	std	Y+17, r1	; 0x11
    315e:	1a 8a       	std	Y+18, r1	; 0x12
    3160:	31 2c       	mov	r3, r1
    3162:	81 2c       	mov	r8, r1
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	e0 e0       	ldi	r30, 0x00	; 0
    3168:	91 2c       	mov	r9, r1
    316a:	9d 01       	movw	r18, r26
    316c:	49 89       	ldd	r20, Y+17	; 0x11
    316e:	5a 89       	ldd	r21, Y+18	; 0x12
    3170:	63 2d       	mov	r22, r3
    3172:	78 2d       	mov	r23, r8
    3174:	8f 2f       	mov	r24, r31
    3176:	9e 2f       	mov	r25, r30
    3178:	a9 80       	ldd	r10, Y+1	; 0x01
    317a:	ba 80       	ldd	r11, Y+2	; 0x02
    317c:	cb 80       	ldd	r12, Y+3	; 0x03
    317e:	dc 80       	ldd	r13, Y+4	; 0x04
    3180:	ed 80       	ldd	r14, Y+5	; 0x05
    3182:	fe 80       	ldd	r15, Y+6	; 0x06
    3184:	0f 81       	ldd	r16, Y+7	; 0x07
    3186:	18 85       	ldd	r17, Y+8	; 0x08
    3188:	0e 94 4b 24 	call	0x4896	; 0x4896 <__adddi3>
    318c:	22 2e       	mov	r2, r18
    318e:	39 87       	std	Y+9, r19	; 0x09
    3190:	4a 87       	std	Y+10, r20	; 0x0a
    3192:	5b 87       	std	Y+11, r21	; 0x0b
    3194:	6c 87       	std	Y+12, r22	; 0x0c
    3196:	7d 87       	std	Y+13, r23	; 0x0d
    3198:	8e 87       	std	Y+14, r24	; 0x0e
    319a:	9f 87       	std	Y+15, r25	; 0x0f
    319c:	9d 01       	movw	r18, r26
    319e:	49 89       	ldd	r20, Y+17	; 0x11
    31a0:	5a 89       	ldd	r21, Y+18	; 0x12
    31a2:	63 2d       	mov	r22, r3
    31a4:	78 2d       	mov	r23, r8
    31a6:	8f 2f       	mov	r24, r31
    31a8:	9e 2f       	mov	r25, r30
    31aa:	36 53       	subi	r19, 0x36	; 54
    31ac:	45 46       	sbci	r20, 0x65	; 101
    31ae:	54 4c       	sbci	r21, 0xC4	; 196
    31b0:	6f 4f       	sbci	r22, 0xFF	; 255
    31b2:	7f 4f       	sbci	r23, 0xFF	; 255
    31b4:	8f 4f       	sbci	r24, 0xFF	; 255
    31b6:	9f 4f       	sbci	r25, 0xFF	; 255
    31b8:	d9 01       	movw	r26, r18
    31ba:	49 8b       	std	Y+17, r20	; 0x11
    31bc:	5a 8b       	std	Y+18, r21	; 0x12
    31be:	36 2e       	mov	r3, r22
    31c0:	87 2e       	mov	r8, r23
    31c2:	f8 2f       	mov	r31, r24
    31c4:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    31c6:	49 2d       	mov	r20, r9
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	60 e0       	ldi	r22, 0x00	; 0
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	44 15       	cp	r20, r4
    31d0:	55 05       	cpc	r21, r5
    31d2:	66 05       	cpc	r22, r6
    31d4:	77 05       	cpc	r23, r7
    31d6:	10 f4       	brcc	.+4      	; 0x31dc <_nrk_time_to_ticks+0x104>
    31d8:	93 94       	inc	r9
    31da:	c7 cf       	rjmp	.-114    	; 0x316a <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    31dc:	83 eb       	ldi	r24, 0xB3	; 179
    31de:	a8 2e       	mov	r10, r24
    31e0:	96 ee       	ldi	r25, 0xE6	; 230
    31e2:	b9 2e       	mov	r11, r25
    31e4:	2e e0       	ldi	r18, 0x0E	; 14
    31e6:	c2 2e       	mov	r12, r18
    31e8:	d1 2c       	mov	r13, r1
    31ea:	e1 2c       	mov	r14, r1
    31ec:	f1 2c       	mov	r15, r1
    31ee:	00 e0       	ldi	r16, 0x00	; 0
    31f0:	10 e0       	ldi	r17, 0x00	; 0
    31f2:	22 2d       	mov	r18, r2
    31f4:	39 85       	ldd	r19, Y+9	; 0x09
    31f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    31f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    31fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    31fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    31fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3200:	9f 85       	ldd	r25, Y+15	; 0x0f
    3202:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivdi3>
    3206:	06 c0       	rjmp	.+12     	; 0x3214 <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3208:	23 eb       	ldi	r18, 0xB3	; 179
    320a:	36 ee       	ldi	r19, 0xE6	; 230
    320c:	4e e0       	ldi	r20, 0x0E	; 14
    320e:	50 e0       	ldi	r21, 0x00	; 0
    3210:	0e 94 c4 23 	call	0x4788	; 0x4788 <__udivmodsi4>
    3214:	c9 01       	movw	r24, r18
    3216:	02 c0       	rjmp	.+4      	; 0x321c <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    321c:	62 96       	adiw	r28, 0x12	; 18
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	df 90       	pop	r13
    3236:	cf 90       	pop	r12
    3238:	bf 90       	pop	r11
    323a:	af 90       	pop	r10
    323c:	9f 90       	pop	r9
    323e:	8f 90       	pop	r8
    3240:	7f 90       	pop	r7
    3242:	6f 90       	pop	r6
    3244:	5f 90       	pop	r5
    3246:	4f 90       	pop	r4
    3248:	3f 90       	pop	r3
    324a:	2f 90       	pop	r2
    324c:	08 95       	ret

0000324e <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	ff 92       	push	r15
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	28 97       	sbiw	r28, 0x08	; 8
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    326a:	6b 01       	movw	r12, r22
    326c:	7c 01       	movw	r14, r24
    326e:	3a e0       	ldi	r19, 0x0A	; 10
    3270:	f6 94       	lsr	r15
    3272:	e7 94       	ror	r14
    3274:	d7 94       	ror	r13
    3276:	c7 94       	ror	r12
    3278:	3a 95       	dec	r19
    327a:	d1 f7       	brne	.-12     	; 0x3270 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    327c:	c9 82       	std	Y+1, r12	; 0x01
    327e:	da 82       	std	Y+2, r13	; 0x02
    3280:	eb 82       	std	Y+3, r14	; 0x03
    3282:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3284:	9b 01       	movw	r18, r22
    3286:	ac 01       	movw	r20, r24
    3288:	33 70       	andi	r19, 0x03	; 3
    328a:	44 27       	eor	r20, r20
    328c:	55 27       	eor	r21, r21
    328e:	63 eb       	ldi	r22, 0xB3	; 179
    3290:	76 ee       	ldi	r23, 0xE6	; 230
    3292:	8e e0       	ldi	r24, 0x0E	; 14
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 b4 23 	call	0x4768	; 0x4768 <__mulsi3>

return t;
    329a:	6d 83       	std	Y+5, r22	; 0x05
    329c:	7e 83       	std	Y+6, r23	; 0x06
    329e:	8f 83       	std	Y+7, r24	; 0x07
    32a0:	98 87       	std	Y+8, r25	; 0x08
    32a2:	2c 2d       	mov	r18, r12
    32a4:	3a 81       	ldd	r19, Y+2	; 0x02
    32a6:	4b 81       	ldd	r20, Y+3	; 0x03
    32a8:	5c 81       	ldd	r21, Y+4	; 0x04
}
    32aa:	28 96       	adiw	r28, 0x08	; 8
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	ff 90       	pop	r15
    32bc:	ef 90       	pop	r14
    32be:	df 90       	pop	r13
    32c0:	cf 90       	pop	r12
    32c2:	08 95       	ret

000032c4 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	62 97       	sbiw	r28, 0x12	; 18
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    32f8:	dc 01       	movw	r26, r24
    32fa:	4d 90       	ld	r4, X+
    32fc:	5d 90       	ld	r5, X+
    32fe:	6d 90       	ld	r6, X+
    3300:	7c 90       	ld	r7, X
    3302:	13 97       	sbiw	r26, 0x03	; 3
    3304:	14 96       	adiw	r26, 0x04	; 4
    3306:	6d 91       	ld	r22, X+
    3308:	7d 91       	ld	r23, X+
    330a:	8d 91       	ld	r24, X+
    330c:	9c 91       	ld	r25, X
    330e:	17 97       	sbiw	r26, 0x07	; 7
    3310:	41 14       	cp	r4, r1
    3312:	51 04       	cpc	r5, r1
    3314:	61 04       	cpc	r6, r1
    3316:	71 04       	cpc	r7, r1
    3318:	09 f4       	brne	.+2      	; 0x331c <_nrk_time_to_ticks_long+0x58>
    331a:	66 c0       	rjmp	.+204    	; 0x33e8 <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    331c:	7b 01       	movw	r14, r22
    331e:	8c 01       	movw	r16, r24
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	a9 01       	movw	r20, r18
    3326:	69 83       	std	Y+1, r22	; 0x01
    3328:	fa 82       	std	Y+2, r15	; 0x02
    332a:	0b 83       	std	Y+3, r16	; 0x03
    332c:	1c 83       	std	Y+4, r17	; 0x04
    332e:	2d 83       	std	Y+5, r18	; 0x05
    3330:	3e 83       	std	Y+6, r19	; 0x06
    3332:	4f 83       	std	Y+7, r20	; 0x07
    3334:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3336:	a0 e0       	ldi	r26, 0x00	; 0
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	19 8a       	std	Y+17, r1	; 0x11
    333c:	1a 8a       	std	Y+18, r1	; 0x12
    333e:	31 2c       	mov	r3, r1
    3340:	81 2c       	mov	r8, r1
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	e0 e0       	ldi	r30, 0x00	; 0
    3346:	91 2c       	mov	r9, r1
    3348:	9d 01       	movw	r18, r26
    334a:	49 89       	ldd	r20, Y+17	; 0x11
    334c:	5a 89       	ldd	r21, Y+18	; 0x12
    334e:	63 2d       	mov	r22, r3
    3350:	78 2d       	mov	r23, r8
    3352:	8f 2f       	mov	r24, r31
    3354:	9e 2f       	mov	r25, r30
    3356:	a9 80       	ldd	r10, Y+1	; 0x01
    3358:	ba 80       	ldd	r11, Y+2	; 0x02
    335a:	cb 80       	ldd	r12, Y+3	; 0x03
    335c:	dc 80       	ldd	r13, Y+4	; 0x04
    335e:	ed 80       	ldd	r14, Y+5	; 0x05
    3360:	fe 80       	ldd	r15, Y+6	; 0x06
    3362:	0f 81       	ldd	r16, Y+7	; 0x07
    3364:	18 85       	ldd	r17, Y+8	; 0x08
    3366:	0e 94 4b 24 	call	0x4896	; 0x4896 <__adddi3>
    336a:	22 2e       	mov	r2, r18
    336c:	39 87       	std	Y+9, r19	; 0x09
    336e:	4a 87       	std	Y+10, r20	; 0x0a
    3370:	5b 87       	std	Y+11, r21	; 0x0b
    3372:	6c 87       	std	Y+12, r22	; 0x0c
    3374:	7d 87       	std	Y+13, r23	; 0x0d
    3376:	8e 87       	std	Y+14, r24	; 0x0e
    3378:	9f 87       	std	Y+15, r25	; 0x0f
    337a:	9d 01       	movw	r18, r26
    337c:	49 89       	ldd	r20, Y+17	; 0x11
    337e:	5a 89       	ldd	r21, Y+18	; 0x12
    3380:	63 2d       	mov	r22, r3
    3382:	78 2d       	mov	r23, r8
    3384:	8f 2f       	mov	r24, r31
    3386:	9e 2f       	mov	r25, r30
    3388:	36 53       	subi	r19, 0x36	; 54
    338a:	45 46       	sbci	r20, 0x65	; 101
    338c:	54 4c       	sbci	r21, 0xC4	; 196
    338e:	6f 4f       	sbci	r22, 0xFF	; 255
    3390:	7f 4f       	sbci	r23, 0xFF	; 255
    3392:	8f 4f       	sbci	r24, 0xFF	; 255
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	d9 01       	movw	r26, r18
    3398:	49 8b       	std	Y+17, r20	; 0x11
    339a:	5a 8b       	std	Y+18, r21	; 0x12
    339c:	36 2e       	mov	r3, r22
    339e:	87 2e       	mov	r8, r23
    33a0:	f8 2f       	mov	r31, r24
    33a2:	e9 2f       	mov	r30, r25
    33a4:	49 2d       	mov	r20, r9
    33a6:	50 e0       	ldi	r21, 0x00	; 0
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	44 15       	cp	r20, r4
    33ae:	55 05       	cpc	r21, r5
    33b0:	66 05       	cpc	r22, r6
    33b2:	77 05       	cpc	r23, r7
    33b4:	10 f4       	brcc	.+4      	; 0x33ba <_nrk_time_to_ticks_long+0xf6>
    33b6:	93 94       	inc	r9
    33b8:	c7 cf       	rjmp	.-114    	; 0x3348 <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    33ba:	43 eb       	ldi	r20, 0xB3	; 179
    33bc:	a4 2e       	mov	r10, r20
    33be:	56 ee       	ldi	r21, 0xE6	; 230
    33c0:	b5 2e       	mov	r11, r21
    33c2:	6e e0       	ldi	r22, 0x0E	; 14
    33c4:	c6 2e       	mov	r12, r22
    33c6:	d1 2c       	mov	r13, r1
    33c8:	e1 2c       	mov	r14, r1
    33ca:	f1 2c       	mov	r15, r1
    33cc:	00 e0       	ldi	r16, 0x00	; 0
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	22 2d       	mov	r18, r2
    33d2:	39 85       	ldd	r19, Y+9	; 0x09
    33d4:	4a 85       	ldd	r20, Y+10	; 0x0a
    33d6:	5b 85       	ldd	r21, Y+11	; 0x0b
    33d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    33da:	7d 85       	ldd	r23, Y+13	; 0x0d
    33dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    33de:	9f 85       	ldd	r25, Y+15	; 0x0f
    33e0:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__udivdi3>
    33e4:	ca 01       	movw	r24, r20
    33e6:	07 c0       	rjmp	.+14     	; 0x33f6 <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    33e8:	23 eb       	ldi	r18, 0xB3	; 179
    33ea:	36 ee       	ldi	r19, 0xE6	; 230
    33ec:	4e e0       	ldi	r20, 0x0E	; 14
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	0e 94 c4 23 	call	0x4788	; 0x4788 <__udivmodsi4>
    33f4:	ca 01       	movw	r24, r20
}
return ticks;
}
    33f6:	b9 01       	movw	r22, r18
    33f8:	62 96       	adiw	r28, 0x12	; 18
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	9f 90       	pop	r9
    341a:	8f 90       	pop	r8
    341c:	7f 90       	pop	r7
    341e:	6f 90       	pop	r6
    3420:	5f 90       	pop	r5
    3422:	4f 90       	pop	r4
    3424:	3f 90       	pop	r3
    3426:	2f 90       	pop	r2
    3428:	08 95       	ret

0000342a <nrk_idle_task>:

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    342a:	c1 e0       	ldi	r28, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    342c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3430:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_nrk_get_next_wakeup>
    3434:	84 30       	cpi	r24, 0x04	; 4
    3436:	10 f4       	brcc	.+4      	; 0x343c <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3438:	c0 93 0d 06 	sts	0x060D, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    343c:	0e 94 13 21 	call	0x4226	; 0x4226 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3440:	80 91 cd 04 	lds	r24, 0x04CD
    3444:	85 35       	cpi	r24, 0x55	; 85
    3446:	19 f0       	breq	.+6      	; 0x344e <nrk_idle_task+0x24>
    3448:	88 e0       	ldi	r24, 0x08	; 8
    344a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    344e:	80 91 7e 41 	lds	r24, 0x417E
    3452:	85 35       	cpi	r24, 0x55	; 85
    3454:	59 f3       	breq	.-42     	; 0x342c <nrk_idle_task+0x2>
    3456:	88 e0       	ldi	r24, 0x08	; 8
    3458:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <nrk_error_add>
    345c:	e7 cf       	rjmp	.-50     	; 0x342c <nrk_idle_task+0x2>

0000345e <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    345e:	2f 92       	push	r2
    3460:	3f 92       	push	r3
    3462:	4f 92       	push	r4
    3464:	5f 92       	push	r5
    3466:	6f 92       	push	r6
    3468:	7f 92       	push	r7
    346a:	8f 92       	push	r8
    346c:	9f 92       	push	r9
    346e:	af 92       	push	r10
    3470:	bf 92       	push	r11
    3472:	cf 92       	push	r12
    3474:	df 92       	push	r13
    3476:	ef 92       	push	r14
    3478:	ff 92       	push	r15
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	29 97       	sbiw	r28, 0x09	; 9
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    3492:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    3496:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    349a:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    349e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <_nrk_high_speed_timer_get>
    34a2:	9f 83       	std	Y+7, r25	; 0x07
    34a4:	8e 83       	std	Y+6, r24	; 0x06
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    34a6:	8a ef       	ldi	r24, 0xFA	; 250
    34a8:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    34ac:	a0 91 ca 04 	lds	r26, 0x04CA
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	23 eb       	ldi	r18, 0xB3	; 179
    34b4:	36 ee       	ldi	r19, 0xE6	; 230
    34b6:	4e e0       	ldi	r20, 0x0E	; 14
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	0e 94 a9 23 	call	0x4752	; 0x4752 <__muluhisi3>
    34be:	6b 01       	movw	r12, r22
    34c0:	7c 01       	movw	r14, r24
    34c2:	80 91 14 06 	lds	r24, 0x0614
    34c6:	90 91 15 06 	lds	r25, 0x0615
    34ca:	a0 91 16 06 	lds	r26, 0x0616
    34ce:	b0 91 17 06 	lds	r27, 0x0617
    34d2:	c8 0e       	add	r12, r24
    34d4:	d9 1e       	adc	r13, r25
    34d6:	ea 1e       	adc	r14, r26
    34d8:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    34da:	c7 01       	movw	r24, r14
    34dc:	b6 01       	movw	r22, r12
    34de:	0e 94 c4 23 	call	0x4788	; 0x4788 <__udivmodsi4>
    34e2:	00 91 10 06 	lds	r16, 0x0610
    34e6:	10 91 11 06 	lds	r17, 0x0611
    34ea:	20 91 12 06 	lds	r18, 0x0612
    34ee:	30 91 13 06 	lds	r19, 0x0613
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    34f2:	c6 1a       	sub	r12, r22
    34f4:	d7 0a       	sbc	r13, r23
    34f6:	e8 0a       	sbc	r14, r24
    34f8:	f9 0a       	sbc	r15, r25
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    34fa:	63 eb       	ldi	r22, 0xB3	; 179
    34fc:	46 2e       	mov	r4, r22
    34fe:	66 ee       	ldi	r22, 0xE6	; 230
    3500:	56 2e       	mov	r5, r22
    3502:	6e e0       	ldi	r22, 0x0E	; 14
    3504:	66 2e       	mov	r6, r22
    3506:	71 2c       	mov	r7, r1
    3508:	48 01       	movw	r8, r16
    350a:	59 01       	movw	r10, r18
    350c:	9f ef       	ldi	r25, 0xFF	; 255
    350e:	89 1a       	sub	r8, r25
    3510:	99 0a       	sbc	r9, r25
    3512:	a9 0a       	sbc	r10, r25
    3514:	b9 0a       	sbc	r11, r25
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3516:	c1 14       	cp	r12, r1
    3518:	aa ec       	ldi	r26, 0xCA	; 202
    351a:	da 06       	cpc	r13, r26
    351c:	aa e9       	ldi	r26, 0x9A	; 154
    351e:	ea 06       	cpc	r14, r26
    3520:	ab e3       	ldi	r26, 0x3B	; 59
    3522:	fa 06       	cpc	r15, r26
    3524:	98 f0       	brcs	.+38     	; 0x354c <_nrk_scheduler+0xee>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3526:	8a ec       	ldi	r24, 0xCA	; 202
    3528:	d8 1a       	sub	r13, r24
    352a:	8a e9       	ldi	r24, 0x9A	; 154
    352c:	e8 0a       	sbc	r14, r24
    352e:	8b e3       	ldi	r24, 0x3B	; 59
    3530:	f8 0a       	sbc	r15, r24
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3532:	c7 01       	movw	r24, r14
    3534:	b6 01       	movw	r22, r12
    3536:	a3 01       	movw	r20, r6
    3538:	92 01       	movw	r18, r4
    353a:	0e 94 c4 23 	call	0x4788	; 0x4788 <__udivmodsi4>
    353e:	c6 1a       	sub	r12, r22
    3540:	d7 0a       	sbc	r13, r23
    3542:	e8 0a       	sbc	r14, r24
    3544:	f9 0a       	sbc	r15, r25
    3546:	95 01       	movw	r18, r10
    3548:	84 01       	movw	r16, r8
    354a:	de cf       	rjmp	.-68     	; 0x3508 <_nrk_scheduler+0xaa>
    354c:	00 93 10 06 	sts	0x0610, r16
    3550:	10 93 11 06 	sts	0x0611, r17
    3554:	20 93 12 06 	sts	0x0612, r18
    3558:	30 93 13 06 	sts	0x0613, r19
    355c:	c0 92 14 06 	sts	0x0614, r12
    3560:	d0 92 15 06 	sts	0x0615, r13
    3564:	e0 92 16 06 	sts	0x0616, r14
    3568:	f0 92 17 06 	sts	0x0617, r15
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    356c:	e0 91 19 06 	lds	r30, 0x0619
    3570:	f0 91 1a 06 	lds	r31, 0x061A
    3574:	85 81       	ldd	r24, Z+5	; 0x05
    3576:	88 23       	and	r24, r24
    3578:	39 f1       	breq	.+78     	; 0x35c8 <_nrk_scheduler+0x16a>
    357a:	81 85       	ldd	r24, Z+9	; 0x09
    357c:	84 30       	cpi	r24, 0x04	; 4
    357e:	21 f1       	breq	.+72     	; 0x35c8 <_nrk_scheduler+0x16a>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3580:	87 81       	ldd	r24, Z+7	; 0x07
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	29 f0       	breq	.+10     	; 0x3590 <_nrk_scheduler+0x132>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3586:	88 23       	and	r24, r24
    3588:	41 f0       	breq	.+16     	; 0x359a <_nrk_scheduler+0x13c>
    358a:	86 81       	ldd	r24, Z+6	; 0x06
    358c:	81 11       	cpse	r24, r1
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <_nrk_scheduler+0x136>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3590:	85 e0       	ldi	r24, 0x05	; 5
    3592:	01 c0       	rjmp	.+2      	; 0x3596 <_nrk_scheduler+0x138>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	81 87       	std	Z+9, r24	; 0x09
    3598:	14 c0       	rjmp	.+40     	; 0x35c2 <_nrk_scheduler+0x164>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    359e:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    35a0:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    35a2:	85 89       	ldd	r24, Z+21	; 0x15
    35a4:	96 89       	ldd	r25, Z+22	; 0x16
    35a6:	a7 89       	ldd	r26, Z+23	; 0x17
    35a8:	b0 8d       	ldd	r27, Z+24	; 0x18
    35aa:	89 2b       	or	r24, r25
    35ac:	8a 2b       	or	r24, r26
    35ae:	8b 2b       	or	r24, r27
    35b0:	41 f4       	brne	.+16     	; 0x35c2 <_nrk_scheduler+0x164>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    35b2:	81 8d       	ldd	r24, Z+25	; 0x19
    35b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    35b6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    35b8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    35ba:	85 8b       	std	Z+21, r24	; 0x15
    35bc:	96 8b       	std	Z+22, r25	; 0x16
    35be:	a7 8b       	std	Z+23, r26	; 0x17
    35c0:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    35c2:	80 85       	ldd	r24, Z+8	; 0x08
    35c4:	0e 94 5f 14 	call	0x28be	; 0x28be <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    35c8:	e0 91 19 06 	lds	r30, 0x0619
    35cc:	f0 91 1a 06 	lds	r31, 0x061A
    35d0:	85 a1       	ldd	r24, Z+37	; 0x25
    35d2:	96 a1       	ldd	r25, Z+38	; 0x26
    35d4:	a7 a1       	ldd	r26, Z+39	; 0x27
    35d6:	b0 a5       	ldd	r27, Z+40	; 0x28
    35d8:	89 2b       	or	r24, r25
    35da:	8a 2b       	or	r24, r26
    35dc:	8b 2b       	or	r24, r27
    35de:	09 f4       	brne	.+2      	; 0x35e2 <_nrk_scheduler+0x184>
    35e0:	44 c0       	rjmp	.+136    	; 0x366a <_nrk_scheduler+0x20c>
    35e2:	20 85       	ldd	r18, Z+8	; 0x08
    35e4:	22 23       	and	r18, r18
    35e6:	09 f4       	brne	.+2      	; 0x35ea <_nrk_scheduler+0x18c>
    35e8:	40 c0       	rjmp	.+128    	; 0x366a <_nrk_scheduler+0x20c>
    35ea:	81 85       	ldd	r24, Z+9	; 0x09
    35ec:	84 30       	cpi	r24, 0x04	; 4
    35ee:	e9 f1       	breq	.+122    	; 0x366a <_nrk_scheduler+0x20c>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    35f0:	45 8d       	ldd	r20, Z+29	; 0x1d
    35f2:	56 8d       	ldd	r21, Z+30	; 0x1e
    35f4:	67 8d       	ldd	r22, Z+31	; 0x1f
    35f6:	70 a1       	ldd	r23, Z+32	; 0x20
    35f8:	80 91 ca 04 	lds	r24, 0x04CA
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a0 e0       	ldi	r26, 0x00	; 0
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	48 17       	cp	r20, r24
    3604:	59 07       	cpc	r21, r25
    3606:	6a 07       	cpc	r22, r26
    3608:	7b 07       	cpc	r23, r27
    360a:	68 f4       	brcc	.+26     	; 0x3626 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    360c:	62 2f       	mov	r22, r18
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3614:	e0 91 19 06 	lds	r30, 0x0619
    3618:	f0 91 1a 06 	lds	r31, 0x061A
    361c:	15 8e       	std	Z+29, r1	; 0x1d
    361e:	16 8e       	std	Z+30, r1	; 0x1e
    3620:	17 8e       	std	Z+31, r1	; 0x1f
    3622:	10 a2       	std	Z+32, r1	; 0x20
    3624:	08 c0       	rjmp	.+16     	; 0x3636 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3626:	48 1b       	sub	r20, r24
    3628:	59 0b       	sbc	r21, r25
    362a:	6a 0b       	sbc	r22, r26
    362c:	7b 0b       	sbc	r23, r27
    362e:	45 8f       	std	Z+29, r20	; 0x1d
    3630:	56 8f       	std	Z+30, r21	; 0x1e
    3632:	67 8f       	std	Z+31, r22	; 0x1f
    3634:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    3636:	e0 91 19 06 	lds	r30, 0x0619
    363a:	f0 91 1a 06 	lds	r31, 0x061A
    363e:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3640:	45 8d       	ldd	r20, Z+29	; 0x1d
    3642:	56 8d       	ldd	r21, Z+30	; 0x1e
    3644:	67 8d       	ldd	r22, Z+31	; 0x1f
    3646:	70 a1       	ldd	r23, Z+32	; 0x20
    3648:	45 2b       	or	r20, r21
    364a:	46 2b       	or	r20, r22
    364c:	47 2b       	or	r20, r23
    364e:	69 f4       	brne	.+26     	; 0x366a <_nrk_scheduler+0x20c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3650:	61 2f       	mov	r22, r17
    3652:	83 e0       	ldi	r24, 0x03	; 3
    3654:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3658:	e0 91 19 06 	lds	r30, 0x0619
    365c:	f0 91 1a 06 	lds	r31, 0x061A
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3664:	81 2f       	mov	r24, r17
    3666:	0e 94 5f 14 	call	0x28be	; 0x28be <nrk_rem_from_readyQ>
    366a:	ef e5       	ldi	r30, 0x5F	; 95
    366c:	f5 e0       	ldi	r31, 0x05	; 5
    366e:	f9 87       	std	Y+9, r31	; 0x09
    3670:	e8 87       	std	Y+8, r30	; 0x08
    3672:	30 e6       	ldi	r19, 0x60	; 96
    3674:	23 2e       	mov	r2, r19
    3676:	35 e0       	ldi	r19, 0x05	; 5
    3678:	33 2e       	mov	r3, r19
    367a:	4c e6       	ldi	r20, 0x6C	; 108
    367c:	a4 2e       	mov	r10, r20
    367e:	45 e0       	ldi	r20, 0x05	; 5
    3680:	b4 2e       	mov	r11, r20
    3682:	8e e5       	ldi	r24, 0x5E	; 94
    3684:	95 e0       	ldi	r25, 0x05	; 5
    3686:	9c 83       	std	Y+4, r25	; 0x04
    3688:	8b 83       	std	Y+3, r24	; 0x03
    368a:	ad e5       	ldi	r26, 0x5D	; 93
    368c:	b5 e0       	ldi	r27, 0x05	; 5
    368e:	ba 83       	std	Y+2, r27	; 0x02
    3690:	a9 83       	std	Y+1, r26	; 0x01
    3692:	5c e5       	ldi	r21, 0x5C	; 92
    3694:	85 2e       	mov	r8, r21
    3696:	55 e0       	ldi	r21, 0x05	; 5
    3698:	95 2e       	mov	r9, r21
    369a:	00 e6       	ldi	r16, 0x60	; 96
    369c:	1a ee       	ldi	r17, 0xEA	; 234
    369e:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    36a0:	e8 85       	ldd	r30, Y+8	; 0x08
    36a2:	f9 85       	ldd	r31, Y+9	; 0x09
    36a4:	80 81       	ld	r24, Z
    36a6:	8f 3f       	cpi	r24, 0xFF	; 255
    36a8:	09 f4       	brne	.+2      	; 0x36ac <_nrk_scheduler+0x24e>
    36aa:	33 c1       	rjmp	.+614    	; 0x3912 <_nrk_scheduler+0x4b4>
        nrk_task_TCB[task_ID].suspend_flag=0;
    36ac:	d4 01       	movw	r26, r8
    36ae:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    36b0:	80 81       	ld	r24, Z
    36b2:	88 23       	and	r24, r24
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <_nrk_scheduler+0x25a>
    36b6:	6a c0       	rjmp	.+212    	; 0x378c <_nrk_scheduler+0x32e>
    36b8:	f1 01       	movw	r30, r2
    36ba:	80 81       	ld	r24, Z
    36bc:	84 30       	cpi	r24, 0x04	; 4
    36be:	09 f4       	brne	.+2      	; 0x36c2 <_nrk_scheduler+0x264>
    36c0:	65 c0       	rjmp	.+202    	; 0x378c <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    36c2:	d5 01       	movw	r26, r10
    36c4:	cd 90       	ld	r12, X+
    36c6:	dd 90       	ld	r13, X+
    36c8:	ed 90       	ld	r14, X+
    36ca:	fc 90       	ld	r15, X
    36cc:	60 91 ca 04 	lds	r22, 0x04CA
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	c6 16       	cp	r12, r22
    36d8:	d7 06       	cpc	r13, r23
    36da:	e8 06       	cpc	r14, r24
    36dc:	f9 06       	cpc	r15, r25
    36de:	50 f0       	brcs	.+20     	; 0x36f4 <_nrk_scheduler+0x296>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    36e0:	c6 1a       	sub	r12, r22
    36e2:	d7 0a       	sbc	r13, r23
    36e4:	e8 0a       	sbc	r14, r24
    36e6:	f9 0a       	sbc	r15, r25
    36e8:	f5 01       	movw	r30, r10
    36ea:	c0 82       	st	Z, r12
    36ec:	d1 82       	std	Z+1, r13	; 0x01
    36ee:	e2 82       	std	Z+2, r14	; 0x02
    36f0:	f3 82       	std	Z+3, r15	; 0x03
    36f2:	06 c0       	rjmp	.+12     	; 0x3700 <_nrk_scheduler+0x2a2>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    36f4:	d5 01       	movw	r26, r10
    36f6:	1d 92       	st	X+, r1
    36f8:	1d 92       	st	X+, r1
    36fa:	1d 92       	st	X+, r1
    36fc:	1c 92       	st	X, r1
    36fe:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3700:	e8 85       	ldd	r30, Y+8	; 0x08
    3702:	f9 85       	ldd	r31, Y+9	; 0x09
    3704:	c1 88       	ldd	r12, Z+17	; 0x11
    3706:	d2 88       	ldd	r13, Z+18	; 0x12
    3708:	e3 88       	ldd	r14, Z+19	; 0x13
    370a:	f4 88       	ldd	r15, Z+20	; 0x14
    370c:	c6 16       	cp	r12, r22
    370e:	d7 06       	cpc	r13, r23
    3710:	e8 06       	cpc	r14, r24
    3712:	f9 06       	cpc	r15, r25
    3714:	48 f0       	brcs	.+18     	; 0x3728 <_nrk_scheduler+0x2ca>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3716:	c6 1a       	sub	r12, r22
    3718:	d7 0a       	sbc	r13, r23
    371a:	e8 0a       	sbc	r14, r24
    371c:	f9 0a       	sbc	r15, r25
    371e:	c1 8a       	std	Z+17, r12	; 0x11
    3720:	d2 8a       	std	Z+18, r13	; 0x12
    3722:	e3 8a       	std	Z+19, r14	; 0x13
    3724:	f4 8a       	std	Z+20, r15	; 0x14
    3726:	20 c0       	rjmp	.+64     	; 0x3768 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3728:	e8 85       	ldd	r30, Y+8	; 0x08
    372a:	f9 85       	ldd	r31, Y+9	; 0x09
    372c:	21 8d       	ldd	r18, Z+25	; 0x19
    372e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3730:	43 8d       	ldd	r20, Z+27	; 0x1b
    3732:	54 8d       	ldd	r21, Z+28	; 0x1c
    3734:	62 17       	cp	r22, r18
    3736:	73 07       	cpc	r23, r19
    3738:	84 07       	cpc	r24, r20
    373a:	95 07       	cpc	r25, r21
    373c:	58 f4       	brcc	.+22     	; 0x3754 <_nrk_scheduler+0x2f6>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    373e:	69 01       	movw	r12, r18
    3740:	7a 01       	movw	r14, r20
    3742:	c6 1a       	sub	r12, r22
    3744:	d7 0a       	sbc	r13, r23
    3746:	e8 0a       	sbc	r14, r24
    3748:	f9 0a       	sbc	r15, r25
    374a:	c1 8a       	std	Z+17, r12	; 0x11
    374c:	d2 8a       	std	Z+18, r13	; 0x12
    374e:	e3 8a       	std	Z+19, r14	; 0x13
    3750:	f4 8a       	std	Z+20, r15	; 0x14
    3752:	0a c0       	rjmp	.+20     	; 0x3768 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3754:	0e 94 c4 23 	call	0x4788	; 0x4788 <__udivmodsi4>
    3758:	a8 85       	ldd	r26, Y+8	; 0x08
    375a:	b9 85       	ldd	r27, Y+9	; 0x09
    375c:	51 96       	adiw	r26, 0x11	; 17
    375e:	6d 93       	st	X+, r22
    3760:	7d 93       	st	X+, r23
    3762:	8d 93       	st	X+, r24
    3764:	9c 93       	st	X, r25
    3766:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3768:	e8 85       	ldd	r30, Y+8	; 0x08
    376a:	f9 85       	ldd	r31, Y+9	; 0x09
    376c:	81 89       	ldd	r24, Z+17	; 0x11
    376e:	92 89       	ldd	r25, Z+18	; 0x12
    3770:	a3 89       	ldd	r26, Z+19	; 0x13
    3772:	b4 89       	ldd	r27, Z+20	; 0x14
    3774:	89 2b       	or	r24, r25
    3776:	8a 2b       	or	r24, r26
    3778:	8b 2b       	or	r24, r27
    377a:	41 f4       	brne	.+16     	; 0x378c <_nrk_scheduler+0x32e>
    377c:	81 8d       	ldd	r24, Z+25	; 0x19
    377e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3780:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3782:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3784:	81 8b       	std	Z+17, r24	; 0x11
    3786:	92 8b       	std	Z+18, r25	; 0x12
    3788:	a3 8b       	std	Z+19, r26	; 0x13
    378a:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    378c:	d1 01       	movw	r26, r2
    378e:	8c 91       	ld	r24, X
    3790:	83 30       	cpi	r24, 0x03	; 3
    3792:	09 f0       	breq	.+2      	; 0x3796 <_nrk_scheduler+0x338>
    3794:	be c0       	rjmp	.+380    	; 0x3912 <_nrk_scheduler+0x4b4>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3796:	f5 01       	movw	r30, r10
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	a2 81       	ldd	r26, Z+2	; 0x02
    379e:	b3 81       	ldd	r27, Z+3	; 0x03
    37a0:	89 2b       	or	r24, r25
    37a2:	8a 2b       	or	r24, r26
    37a4:	8b 2b       	or	r24, r27
    37a6:	09 f0       	breq	.+2      	; 0x37aa <_nrk_scheduler+0x34c>
    37a8:	a2 c0       	rjmp	.+324    	; 0x38ee <_nrk_scheduler+0x490>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    37aa:	ab 81       	ldd	r26, Y+3	; 0x03
    37ac:	bc 81       	ldd	r27, Y+4	; 0x04
    37ae:	8c 91       	ld	r24, X
    37b0:	88 23       	and	r24, r24
    37b2:	c1 f0       	breq	.+48     	; 0x37e4 <_nrk_scheduler+0x386>
    37b4:	e9 81       	ldd	r30, Y+1	; 0x01
    37b6:	fa 81       	ldd	r31, Y+2	; 0x02
    37b8:	80 81       	ld	r24, Z
    37ba:	88 23       	and	r24, r24
    37bc:	99 f0       	breq	.+38     	; 0x37e4 <_nrk_scheduler+0x386>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a0 e0       	ldi	r26, 0x00	; 0
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	00 90 09 06 	lds	r0, 0x0609
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <_nrk_scheduler+0x376>
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	aa 1f       	adc	r26, r26
    37d2:	bb 1f       	adc	r27, r27
    37d4:	0a 94       	dec	r0
    37d6:	d2 f7       	brpl	.-12     	; 0x37cc <_nrk_scheduler+0x36e>
    37d8:	e8 85       	ldd	r30, Y+8	; 0x08
    37da:	f9 85       	ldd	r31, Y+9	; 0x09
    37dc:	81 87       	std	Z+9, r24	; 0x09
    37de:	92 87       	std	Z+10, r25	; 0x0a
    37e0:	a3 87       	std	Z+11, r26	; 0x0b
    37e2:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    37e4:	ab 81       	ldd	r26, Y+3	; 0x03
    37e6:	bc 81       	ldd	r27, Y+4	; 0x04
    37e8:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    37ea:	e9 81       	ldd	r30, Y+1	; 0x01
    37ec:	fa 81       	ldd	r31, Y+2	; 0x02
    37ee:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    37f0:	d4 01       	movw	r26, r8
    37f2:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    37f4:	f5 01       	movw	r30, r10
    37f6:	84 89       	ldd	r24, Z+20	; 0x14
    37f8:	95 89       	ldd	r25, Z+21	; 0x15
    37fa:	a8 85       	ldd	r26, Y+8	; 0x08
    37fc:	b9 85       	ldd	r27, Y+9	; 0x09
    37fe:	5d 96       	adiw	r26, 0x1d	; 29
    3800:	4d 91       	ld	r20, X+
    3802:	5d 91       	ld	r21, X+
    3804:	6d 91       	ld	r22, X+
    3806:	7c 91       	ld	r23, X
    3808:	90 97       	sbiw	r26, 0x20	; 32
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	61 f5       	brne	.+88     	; 0x3866 <_nrk_scheduler+0x408>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    380e:	fd 01       	movw	r30, r26
    3810:	45 8b       	std	Z+21, r20	; 0x15
    3812:	56 8b       	std	Z+22, r21	; 0x16
    3814:	67 8b       	std	Z+23, r22	; 0x17
    3816:	70 8f       	std	Z+24, r23	; 0x18
                    nrk_task_TCB[task_ID].task_state = READY;
    3818:	e2 e0       	ldi	r30, 0x02	; 2
    381a:	d1 01       	movw	r26, r2
    381c:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    381e:	e8 85       	ldd	r30, Y+8	; 0x08
    3820:	f9 85       	ldd	r31, Y+9	; 0x09
    3822:	81 89       	ldd	r24, Z+17	; 0x11
    3824:	92 89       	ldd	r25, Z+18	; 0x12
    3826:	a3 89       	ldd	r26, Z+19	; 0x13
    3828:	b4 89       	ldd	r27, Z+20	; 0x14
    382a:	f5 01       	movw	r30, r10
    382c:	80 83       	st	Z, r24
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	a2 83       	std	Z+2, r26	; 0x02
    3832:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3834:	e8 85       	ldd	r30, Y+8	; 0x08
    3836:	f9 85       	ldd	r31, Y+9	; 0x09
    3838:	81 8d       	ldd	r24, Z+25	; 0x19
    383a:	92 8d       	ldd	r25, Z+26	; 0x1a
    383c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    383e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3840:	89 2b       	or	r24, r25
    3842:	8a 2b       	or	r24, r26
    3844:	8b 2b       	or	r24, r27
    3846:	59 f4       	brne	.+22     	; 0x385e <_nrk_scheduler+0x400>
    3848:	2a ef       	ldi	r18, 0xFA	; 250
    384a:	c2 2e       	mov	r12, r18
    384c:	d1 2c       	mov	r13, r1
    384e:	e1 2c       	mov	r14, r1
    3850:	f1 2c       	mov	r15, r1
    3852:	d5 01       	movw	r26, r10
    3854:	cd 92       	st	X+, r12
    3856:	dd 92       	st	X+, r13
    3858:	ed 92       	st	X+, r14
    385a:	fc 92       	st	X, r15
    385c:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	0e 94 bd 13 	call	0x277a	; 0x277a <nrk_add_to_readyQ>
    3864:	44 c0       	rjmp	.+136    	; 0x38ee <_nrk_scheduler+0x490>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3866:	e8 85       	ldd	r30, Y+8	; 0x08
    3868:	f9 85       	ldd	r31, Y+9	; 0x09
    386a:	45 8b       	std	Z+21, r20	; 0x15
    386c:	56 8b       	std	Z+22, r21	; 0x16
    386e:	67 8b       	std	Z+23, r22	; 0x17
    3870:	70 8f       	std	Z+24, r23	; 0x18
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3872:	d5 01       	movw	r26, r10
    3874:	54 96       	adiw	r26, 0x14	; 20
    3876:	4d 90       	ld	r4, X+
    3878:	5c 90       	ld	r5, X
    387a:	55 97       	sbiw	r26, 0x15	; 21
    387c:	b1 e0       	ldi	r27, 0x01	; 1
    387e:	4b 1a       	sub	r4, r27
    3880:	51 08       	sbc	r5, r1
    3882:	61 2c       	mov	r6, r1
    3884:	71 2c       	mov	r7, r1
    3886:	61 8d       	ldd	r22, Z+25	; 0x19
    3888:	72 8d       	ldd	r23, Z+26	; 0x1a
    388a:	83 8d       	ldd	r24, Z+27	; 0x1b
    388c:	94 8d       	ldd	r25, Z+28	; 0x1c
    388e:	a3 01       	movw	r20, r6
    3890:	92 01       	movw	r18, r4
    3892:	0e 94 b4 23 	call	0x4768	; 0x4768 <__mulsi3>
    3896:	f5 01       	movw	r30, r10
    3898:	60 83       	st	Z, r22
    389a:	71 83       	std	Z+1, r23	; 0x01
    389c:	82 83       	std	Z+2, r24	; 0x02
    389e:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    38a0:	a8 85       	ldd	r26, Y+8	; 0x08
    38a2:	b9 85       	ldd	r27, Y+9	; 0x09
    38a4:	59 96       	adiw	r26, 0x19	; 25
    38a6:	cd 90       	ld	r12, X+
    38a8:	dd 90       	ld	r13, X+
    38aa:	ed 90       	ld	r14, X+
    38ac:	fc 90       	ld	r15, X
    38ae:	5c 97       	sbiw	r26, 0x1c	; 28
    38b0:	c7 01       	movw	r24, r14
    38b2:	b6 01       	movw	r22, r12
    38b4:	0e 94 b4 23 	call	0x4768	; 0x4768 <__mulsi3>
    38b8:	e8 85       	ldd	r30, Y+8	; 0x08
    38ba:	f9 85       	ldd	r31, Y+9	; 0x09
    38bc:	61 8b       	std	Z+17, r22	; 0x11
    38be:	72 8b       	std	Z+18, r23	; 0x12
    38c0:	83 8b       	std	Z+19, r24	; 0x13
    38c2:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    38c4:	cd 28       	or	r12, r13
    38c6:	ce 28       	or	r12, r14
    38c8:	cf 28       	or	r12, r15
    38ca:	59 f4       	brne	.+22     	; 0x38e2 <_nrk_scheduler+0x484>
    38cc:	9a ef       	ldi	r25, 0xFA	; 250
    38ce:	c9 2e       	mov	r12, r25
    38d0:	d1 2c       	mov	r13, r1
    38d2:	e1 2c       	mov	r14, r1
    38d4:	f1 2c       	mov	r15, r1
    38d6:	d5 01       	movw	r26, r10
    38d8:	cd 92       	st	X+, r12
    38da:	dd 92       	st	X+, r13
    38dc:	ed 92       	st	X+, r14
    38de:	fc 92       	st	X, r15
    38e0:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    38e2:	cc 24       	eor	r12, r12
    38e4:	c3 94       	inc	r12
    38e6:	d1 2c       	mov	r13, r1
    38e8:	f5 01       	movw	r30, r10
    38ea:	d5 8a       	std	Z+21, r13	; 0x15
    38ec:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    38ee:	f5 01       	movw	r30, r10
    38f0:	80 81       	ld	r24, Z
    38f2:	91 81       	ldd	r25, Z+1	; 0x01
    38f4:	a2 81       	ldd	r26, Z+2	; 0x02
    38f6:	b3 81       	ldd	r27, Z+3	; 0x03
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	a1 05       	cpc	r26, r1
    38fc:	b1 05       	cpc	r27, r1
    38fe:	49 f0       	breq	.+18     	; 0x3912 <_nrk_scheduler+0x4b4>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3900:	a8 01       	movw	r20, r16
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3906:	84 17       	cp	r24, r20
    3908:	95 07       	cpc	r25, r21
    390a:	a6 07       	cpc	r26, r22
    390c:	b7 07       	cpc	r27, r23
    390e:	08 f4       	brcc	.+2      	; 0x3912 <_nrk_scheduler+0x4b4>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3910:	8c 01       	movw	r16, r24
    3912:	fd 81       	ldd	r31, Y+5	; 0x05
    3914:	ff 5f       	subi	r31, 0xFF	; 255
    3916:	fd 83       	std	Y+5, r31	; 0x05
    3918:	88 85       	ldd	r24, Y+8	; 0x08
    391a:	99 85       	ldd	r25, Y+9	; 0x09
    391c:	8b 96       	adiw	r24, 0x2b	; 43
    391e:	99 87       	std	Y+9, r25	; 0x09
    3920:	88 87       	std	Y+8, r24	; 0x08
    3922:	9b e2       	ldi	r25, 0x2B	; 43
    3924:	29 0e       	add	r2, r25
    3926:	31 1c       	adc	r3, r1
    3928:	ab e2       	ldi	r26, 0x2B	; 43
    392a:	aa 0e       	add	r10, r26
    392c:	b1 1c       	adc	r11, r1
    392e:	eb 81       	ldd	r30, Y+3	; 0x03
    3930:	fc 81       	ldd	r31, Y+4	; 0x04
    3932:	bb 96       	adiw	r30, 0x2b	; 43
    3934:	fc 83       	std	Y+4, r31	; 0x04
    3936:	eb 83       	std	Y+3, r30	; 0x03
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	9a 81       	ldd	r25, Y+2	; 0x02
    393c:	8b 96       	adiw	r24, 0x2b	; 43
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	9b e2       	ldi	r25, 0x2B	; 43
    3944:	89 0e       	add	r8, r25
    3946:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3948:	ad 81       	ldd	r26, Y+5	; 0x05
    394a:	a4 30       	cpi	r26, 0x04	; 4
    394c:	09 f0       	breq	.+2      	; 0x3950 <_nrk_scheduler+0x4f2>
    394e:	a8 ce       	rjmp	.-688    	; 0x36a0 <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3950:	0e 94 ac 13 	call	0x2758	; 0x2758 <nrk_get_high_ready_task_ID>
    3954:	b8 2e       	mov	r11, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3956:	bb e2       	ldi	r27, 0x2B	; 43
    3958:	8b 02       	muls	r24, r27
    395a:	f0 01       	movw	r30, r0
    395c:	11 24       	eor	r1, r1
    395e:	e9 5a       	subi	r30, 0xA9	; 169
    3960:	fa 4f       	sbci	r31, 0xFA	; 250
    3962:	82 85       	ldd	r24, Z+10	; 0x0a
    3964:	80 93 1b 06 	sts	0x061B, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3968:	f0 93 0b 06 	sts	0x060B, r31
    396c:	e0 93 0a 06 	sts	0x060A, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3970:	bb 20       	and	r11, r11
    3972:	d9 f0       	breq	.+54     	; 0x39aa <_nrk_scheduler+0x54c>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3974:	45 a1       	ldd	r20, Z+37	; 0x25
    3976:	56 a1       	ldd	r21, Z+38	; 0x26
    3978:	67 a1       	ldd	r22, Z+39	; 0x27
    397a:	70 a5       	ldd	r23, Z+40	; 0x28
    397c:	45 2b       	or	r20, r21
    397e:	46 2b       	or	r20, r22
    3980:	47 2b       	or	r20, r23
    3982:	99 f0       	breq	.+38     	; 0x39aa <_nrk_scheduler+0x54c>
    3984:	45 8d       	ldd	r20, Z+29	; 0x1d
    3986:	56 8d       	ldd	r21, Z+30	; 0x1e
    3988:	67 8d       	ldd	r22, Z+31	; 0x1f
    398a:	70 a1       	ldd	r23, Z+32	; 0x20
    398c:	4a 3f       	cpi	r20, 0xFA	; 250
    398e:	51 05       	cpc	r21, r1
    3990:	61 05       	cpc	r22, r1
    3992:	71 05       	cpc	r23, r1
    3994:	50 f4       	brcc	.+20     	; 0x39aa <_nrk_scheduler+0x54c>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    3996:	68 01       	movw	r12, r16
    3998:	e1 2c       	mov	r14, r1
    399a:	f1 2c       	mov	r15, r1
    399c:	4c 15       	cp	r20, r12
    399e:	5d 05       	cpc	r21, r13
    39a0:	6e 05       	cpc	r22, r14
    39a2:	7f 05       	cpc	r23, r15
    39a4:	10 f4       	brcc	.+4      	; 0x39aa <_nrk_scheduler+0x54c>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    39a6:	8a 01       	movw	r16, r20
    39a8:	05 c0       	rjmp	.+10     	; 0x39b4 <_nrk_scheduler+0x556>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    39aa:	0b 3f       	cpi	r16, 0xFB	; 251
    39ac:	11 05       	cpc	r17, r1
    39ae:	10 f0       	brcs	.+4      	; 0x39b4 <_nrk_scheduler+0x556>
    39b0:	0a ef       	ldi	r16, 0xFA	; 250
    39b2:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    39b4:	80 93 0c 06 	sts	0x060C, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    39b8:	f0 93 1a 06 	sts	0x061A, r31
    39bc:	e0 93 19 06 	sts	0x0619, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    39c0:	00 93 ca 04 	sts	0x04CA, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    39c4:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    39c8:	28 2f       	mov	r18, r24
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	2f 5f       	subi	r18, 0xFF	; 255
    39ce:	3f 4f       	sbci	r19, 0xFF	; 255
    39d0:	20 17       	cp	r18, r16
    39d2:	31 07       	cpc	r19, r17
    39d4:	40 f0       	brcs	.+16     	; 0x39e6 <_nrk_scheduler+0x588>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    39d6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_nrk_os_timer_get>
    39da:	08 2f       	mov	r16, r24
    39dc:	10 e0       	ldi	r17, 0x00	; 0
    39de:	0e 5f       	subi	r16, 0xFE	; 254
    39e0:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    39e2:	00 93 ca 04 	sts	0x04CA, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    39e6:	b1 10       	cpse	r11, r1
    39e8:	10 92 0d 06 	sts	0x060D, r1

    _nrk_set_next_wakeup(next_wake);
    39ec:	80 2f       	mov	r24, r16
    39ee:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    39f2:	6c ed       	ldi	r22, 0xDC	; 220
    39f4:	75 e0       	ldi	r23, 0x05	; 5
    39f6:	8e 81       	ldd	r24, Y+6	; 0x06
    39f8:	9f 81       	ldd	r25, Y+7	; 0x07
    39fa:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    39fe:	0e 94 9f 21 	call	0x433e	; 0x433e <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3a02:	29 96       	adiw	r28, 0x09	; 9
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	ff 90       	pop	r15
    3a18:	ef 90       	pop	r14
    3a1a:	df 90       	pop	r13
    3a1c:	cf 90       	pop	r12
    3a1e:	bf 90       	pop	r11
    3a20:	af 90       	pop	r10
    3a22:	9f 90       	pop	r9
    3a24:	8f 90       	pop	r8
    3a26:	7f 90       	pop	r7
    3a28:	6f 90       	pop	r6
    3a2a:	5f 90       	pop	r5
    3a2c:	4f 90       	pop	r4
    3a2e:	3f 90       	pop	r3
    3a30:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3a32:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <nrk_start_high_ready_task>

00003a36 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	89 f7       	brne	.-30     	; 0x3a36 <nrk_spin_wait_us>

}
    3a54:	08 95       	ret

00003a56 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3a56:	10 92 21 01 	sts	0x0121, r1
    3a5a:	08 95       	ret

00003a5c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3a5c:	89 e0       	ldi	r24, 0x09	; 9
    3a5e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3a62:	8d e8       	ldi	r24, 0x8D	; 141
    3a64:	9c e3       	ldi	r25, 0x3C	; 60
    3a66:	90 93 29 01 	sts	0x0129, r25
    3a6a:	80 93 28 01 	sts	0x0128, r24
    3a6e:	08 95       	ret

00003a70 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3a70:	10 92 25 01 	sts	0x0125, r1
    3a74:	10 92 24 01 	sts	0x0124, r1
    3a78:	08 95       	ret

00003a7a <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <_nrk_precision_os_timer_get+0x6>
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3a84:	80 91 24 01 	lds	r24, 0x0124
    3a88:	90 91 25 01 	lds	r25, 0x0125
    3a8c:	9a 83       	std	Y+2, r25	; 0x02
    3a8e:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	08 95       	ret

00003a9e <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3a9e:	10 92 81 00 	sts	0x0081, r1
    3aa2:	08 95       	ret

00003aa4 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	80 93 81 00 	sts	0x0081, r24
    3aaa:	08 95       	ret

00003aac <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3aac:	83 b5       	in	r24, 0x23	; 35
    3aae:	81 60       	ori	r24, 0x01	; 1
    3ab0:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3ab2:	10 92 85 00 	sts	0x0085, r1
    3ab6:	10 92 84 00 	sts	0x0084, r1
    3aba:	08 95       	ret

00003abc <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <_nrk_high_speed_timer_get+0x6>
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3ac6:	80 91 84 00 	lds	r24, 0x0084
    3aca:	90 91 85 00 	lds	r25, 0x0085
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

00003ae0 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3aec:	ec 01       	movw	r28, r24
    3aee:	cc 0f       	add	r28, r28
    3af0:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3af2:	c9 37       	cpi	r28, 0x79	; 121
    3af4:	8f ef       	ldi	r24, 0xFF	; 255
    3af6:	d8 07       	cpc	r29, r24
    3af8:	10 f0       	brcs	.+4      	; 0x3afe <nrk_high_speed_timer_wait+0x1e>
    3afa:	c0 e0       	ldi	r28, 0x00	; 0
    3afc:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3afe:	6b 01       	movw	r12, r22
    3b00:	e1 2c       	mov	r14, r1
    3b02:	f1 2c       	mov	r15, r1
    3b04:	cc 0e       	add	r12, r28
    3b06:	dd 1e       	adc	r13, r29
    3b08:	e1 1c       	adc	r14, r1
    3b0a:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	c8 16       	cp	r12, r24
    3b10:	d1 04       	cpc	r13, r1
    3b12:	e8 06       	cpc	r14, r24
    3b14:	f1 04       	cpc	r15, r1
    3b16:	40 f0       	brcs	.+16     	; 0x3b28 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	e8 1a       	sub	r14, r24
    3b1c:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3b1e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <_nrk_high_speed_timer_get>
    3b22:	c8 17       	cp	r28, r24
    3b24:	d9 07       	cpc	r29, r25
    3b26:	d8 f3       	brcs	.-10     	; 0x3b1e <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3b28:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <_nrk_high_speed_timer_get>
    3b2c:	8c 15       	cp	r24, r12
    3b2e:	9d 05       	cpc	r25, r13
    3b30:	d8 f3       	brcs	.-10     	; 0x3b28 <nrk_high_speed_timer_wait+0x48>
}
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	ff 90       	pop	r15
    3b38:	ef 90       	pop	r14
    3b3a:	df 90       	pop	r13
    3b3c:	cf 90       	pop	r12
    3b3e:	08 95       	ret

00003b40 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3b40:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3b44:	e0 e7       	ldi	r30, 0x70	; 112
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	80 81       	ld	r24, Z
    3b4a:	8d 7f       	andi	r24, 0xFD	; 253
    3b4c:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3b4e:	80 81       	ld	r24, Z
    3b50:	8e 7f       	andi	r24, 0xFE	; 254
    3b52:	80 83       	st	Z, r24
    3b54:	08 95       	ret

00003b56 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3b56:	80 93 b2 00 	sts	0x00B2, r24
    3b5a:	08 95       	ret

00003b5c <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3b5c:	e0 e7       	ldi	r30, 0x70	; 112
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	83 60       	ori	r24, 0x03	; 3
    3b64:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3b66:	83 e0       	ldi	r24, 0x03	; 3
    3b68:	80 93 b1 00 	sts	0x00B1, r24
    3b6c:	08 95       	ret

00003b6e <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3b6e:	83 b5       	in	r24, 0x23	; 35
    3b70:	82 60       	ori	r24, 0x02	; 2
    3b72:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3b74:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3b78:	10 92 8e 04 	sts	0x048E, r1
    _nrk_prev_timer_val=0;
    3b7c:	10 92 ca 04 	sts	0x04CA, r1
    3b80:	08 95       	ret

00003b82 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3b86:	8e ef       	ldi	r24, 0xFE	; 254
    3b88:	80 93 ca 04 	sts	0x04CA, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3b8c:	80 e2       	ldi	r24, 0x20	; 32
    3b8e:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3b92:	80 91 ca 04 	lds	r24, 0x04CA
    3b96:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3b9a:	83 e0       	ldi	r24, 0x03	; 3
    3b9c:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3b9e:	92 e0       	ldi	r25, 0x02	; 2
    3ba0:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3ba4:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ba8:	93 b5       	in	r25, 0x23	; 35
    3baa:	92 60       	ori	r25, 0x02	; 2
    3bac:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3bae:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3bb0:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3bb2:	83 b5       	in	r24, 0x23	; 35
    3bb4:	82 60       	ori	r24, 0x02	; 2
    3bb6:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3bb8:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3bc2:	10 92 85 00 	sts	0x0085, r1
    3bc6:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3bca:	83 b5       	in	r24, 0x23	; 35
    3bcc:	82 60       	ori	r24, 0x02	; 2
    3bce:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3bd0:	83 b5       	in	r24, 0x23	; 35
    3bd2:	81 60       	ori	r24, 0x01	; 1
    3bd4:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3bd6:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3bda:	c4 e2       	ldi	r28, 0x24	; 36
    3bdc:	d1 e0       	ldi	r29, 0x01	; 1
    3bde:	19 82       	std	Y+1, r1	; 0x01
    3be0:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3be2:	83 b5       	in	r24, 0x23	; 35
    3be4:	82 60       	ori	r24, 0x02	; 2
    3be6:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3be8:	83 b5       	in	r24, 0x23	; 35
    3bea:	81 60       	ori	r24, 0x01	; 1
    3bec:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3bee:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3bf2:	19 82       	std	Y+1, r1	; 0x01
    3bf4:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3bf6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3bfa:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3bfe:	10 92 8e 04 	sts	0x048E, r1
}
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	08 95       	ret

00003c08 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3c08:	80 91 b3 00 	lds	r24, 0x00B3
}
    3c0c:	8f 5f       	subi	r24, 0xFF	; 255
    3c0e:	08 95       	ret

00003c10 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3c10:	81 50       	subi	r24, 0x01	; 1
    3c12:	80 93 b3 00 	sts	0x00B3, r24
    3c16:	08 95       	ret

00003c18 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3c18:	81 11       	cpse	r24, r1
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3c1c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3c20:	8f ef       	ldi	r24, 0xFF	; 255
    3c22:	08 95       	ret

00003c24 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3c24:	81 11       	cpse	r24, r1
    3c26:	06 c0       	rjmp	.+12     	; 0x3c34 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3c28:	10 92 95 00 	sts	0x0095, r1
    3c2c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	08 95       	ret
	}
return NRK_ERROR;
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
}
    3c36:	08 95       	ret

00003c38 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3c38:	81 11       	cpse	r24, r1
    3c3a:	05 c0       	rjmp	.+10     	; 0x3c46 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3c3c:	80 91 94 00 	lds	r24, 0x0094
    3c40:	90 91 95 00 	lds	r25, 0x0095
    3c44:	08 95       	ret
	}
return 0;
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0

}
    3c4a:	08 95       	ret

00003c4c <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3c4c:	81 11       	cpse	r24, r1
    3c4e:	05 c0       	rjmp	.+10     	; 0x3c5a <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	08 95       	ret
	}
return NRK_ERROR;
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3c5c:	08 95       	ret

00003c5e <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3c5e:	81 11       	cpse	r24, r1
    3c60:	35 c0       	rjmp	.+106    	; 0x3ccc <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3c62:	cb 01       	movw	r24, r22
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	05 97       	sbiw	r24, 0x05	; 5
    3c68:	10 f4       	brcc	.+4      	; 0x3c6e <nrk_timer_int_configure+0x10>
    3c6a:	60 93 c3 04 	sts	0x04C3, r22
	TCCR3A = 0;  
    3c6e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3c72:	88 e0       	ldi	r24, 0x08	; 8
    3c74:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3c78:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3c7c:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3c80:	30 93 7e 04 	sts	0x047E, r19
    3c84:	20 93 7d 04 	sts	0x047D, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3c88:	80 91 c3 04 	lds	r24, 0x04C3
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	21 f4       	brne	.+8      	; 0x3c98 <nrk_timer_int_configure+0x3a>
    3c90:	80 91 91 00 	lds	r24, 0x0091
    3c94:	81 60       	ori	r24, 0x01	; 1
    3c96:	11 c0       	rjmp	.+34     	; 0x3cba <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3c98:	82 30       	cpi	r24, 0x02	; 2
    3c9a:	21 f4       	brne	.+8      	; 0x3ca4 <nrk_timer_int_configure+0x46>
    3c9c:	80 91 91 00 	lds	r24, 0x0091
    3ca0:	82 60       	ori	r24, 0x02	; 2
    3ca2:	0b c0       	rjmp	.+22     	; 0x3cba <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3ca4:	83 30       	cpi	r24, 0x03	; 3
    3ca6:	21 f4       	brne	.+8      	; 0x3cb0 <nrk_timer_int_configure+0x52>
    3ca8:	80 91 91 00 	lds	r24, 0x0091
    3cac:	83 60       	ori	r24, 0x03	; 3
    3cae:	05 c0       	rjmp	.+10     	; 0x3cba <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3cb0:	84 30       	cpi	r24, 0x04	; 4
    3cb2:	31 f4       	brne	.+12     	; 0x3cc0 <nrk_timer_int_configure+0x62>
    3cb4:	80 91 91 00 	lds	r24, 0x0091
    3cb8:	84 60       	ori	r24, 0x04	; 4
    3cba:	80 93 91 00 	sts	0x0091, r24
    3cbe:	08 c0       	rjmp	.+16     	; 0x3cd0 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3cc0:	85 30       	cpi	r24, 0x05	; 5
    3cc2:	31 f4       	brne	.+12     	; 0x3cd0 <nrk_timer_int_configure+0x72>
    3cc4:	80 91 91 00 	lds	r24, 0x0091
    3cc8:	85 60       	ori	r24, 0x05	; 5
    3cca:	f7 cf       	rjmp	.-18     	; 0x3cba <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3ccc:	8f ef       	ldi	r24, 0xFF	; 255
    3cce:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3cd2:	08 95       	ret

00003cd4 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3cd4:	80 91 b2 00 	lds	r24, 0x00B2
}
    3cd8:	08 95       	ret

00003cda <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3cda:	1f 92       	push	r1
    3cdc:	0f 92       	push	r0
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	0f 92       	push	r0
    3ce2:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3ce4:	60 e0       	ldi	r22, 0x00	; 0
    3ce6:	8a e0       	ldi	r24, 0x0A	; 10
    3ce8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
    3cec:	ff cf       	rjmp	.-2      	; 0x3cec <__vector_default+0x12>

00003cee <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    3cee:	0f 92       	push	r0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	0f 92       	push	r0
    3cf4:	1f 92       	push	r1
    3cf6:	2f 92       	push	r2
    3cf8:	3f 92       	push	r3
    3cfa:	4f 92       	push	r4
    3cfc:	5f 92       	push	r5
    3cfe:	6f 92       	push	r6
    3d00:	7f 92       	push	r7
    3d02:	8f 92       	push	r8
    3d04:	9f 92       	push	r9
    3d06:	af 92       	push	r10
    3d08:	bf 92       	push	r11
    3d0a:	cf 92       	push	r12
    3d0c:	df 92       	push	r13
    3d0e:	ef 92       	push	r14
    3d10:	ff 92       	push	r15
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	2f 93       	push	r18
    3d18:	3f 93       	push	r19
    3d1a:	4f 93       	push	r20
    3d1c:	5f 93       	push	r21
    3d1e:	6f 93       	push	r22
    3d20:	7f 93       	push	r23
    3d22:	8f 93       	push	r24
    3d24:	9f 93       	push	r25
    3d26:	af 93       	push	r26
    3d28:	bf 93       	push	r27
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	ef 93       	push	r30
    3d30:	ff 93       	push	r31
    3d32:	a0 91 19 06 	lds	r26, 0x0619
    3d36:	b0 91 1a 06 	lds	r27, 0x061A
    3d3a:	0d b6       	in	r0, 0x3d	; 61
    3d3c:	0d 92       	st	X+, r0
    3d3e:	0e b6       	in	r0, 0x3e	; 62
    3d40:	0d 92       	st	X+, r0
    3d42:	1f 92       	push	r1
    3d44:	a0 91 b1 04 	lds	r26, 0x04B1
    3d48:	b0 91 b2 04 	lds	r27, 0x04B2
    3d4c:	1e 90       	ld	r1, -X
    3d4e:	be bf       	out	0x3e, r27	; 62
    3d50:	ad bf       	out	0x3d, r26	; 61
    3d52:	08 95       	ret

00003d54 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    3d54:	1f 92       	push	r1
    3d56:	0f 92       	push	r0
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	0f 92       	push	r0
    3d5c:	11 24       	eor	r1, r1
    3d5e:	0b b6       	in	r0, 0x3b	; 59
    3d60:	0f 92       	push	r0
    3d62:	2f 93       	push	r18
    3d64:	3f 93       	push	r19
    3d66:	4f 93       	push	r20
    3d68:	5f 93       	push	r21
    3d6a:	6f 93       	push	r22
    3d6c:	7f 93       	push	r23
    3d6e:	8f 93       	push	r24
    3d70:	9f 93       	push	r25
    3d72:	af 93       	push	r26
    3d74:	bf 93       	push	r27
    3d76:	ef 93       	push	r30
    3d78:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    3d7a:	e0 91 7d 04 	lds	r30, 0x047D
    3d7e:	f0 91 7e 04 	lds	r31, 0x047E
    3d82:	30 97       	sbiw	r30, 0x00	; 0
    3d84:	11 f0       	breq	.+4      	; 0x3d8a <__vector_32+0x36>
    3d86:	09 95       	icall
    3d88:	04 c0       	rjmp	.+8      	; 0x3d92 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	8a e0       	ldi	r24, 0x0A	; 10
    3d8e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
	return;  	
}
    3d92:	ff 91       	pop	r31
    3d94:	ef 91       	pop	r30
    3d96:	bf 91       	pop	r27
    3d98:	af 91       	pop	r26
    3d9a:	9f 91       	pop	r25
    3d9c:	8f 91       	pop	r24
    3d9e:	7f 91       	pop	r23
    3da0:	6f 91       	pop	r22
    3da2:	5f 91       	pop	r21
    3da4:	4f 91       	pop	r20
    3da6:	3f 91       	pop	r19
    3da8:	2f 91       	pop	r18
    3daa:	0f 90       	pop	r0
    3dac:	0b be       	out	0x3b, r0	; 59
    3dae:	0f 90       	pop	r0
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	0f 90       	pop	r0
    3db4:	1f 90       	pop	r1
    3db6:	18 95       	reti

00003db8 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    3db8:	1f 92       	push	r1
    3dba:	0f 92       	push	r0
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	0f 92       	push	r0
    3dc0:	11 24       	eor	r1, r1

	return;  	
} 
    3dc2:	0f 90       	pop	r0
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	0f 90       	pop	r0
    3dc8:	1f 90       	pop	r1
    3dca:	18 95       	reti

00003dcc <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    3dcc:	04 b6       	in	r0, 0x34	; 52
    3dce:	03 fc       	sbrc	r0, 3
    3dd0:	02 c0       	rjmp	.+4      	; 0x3dd6 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    3dd6:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    3dd8:	04 b6       	in	r0, 0x34	; 52
    3dda:	02 fe       	sbrs	r0, 2
    3ddc:	06 c0       	rjmp	.+12     	; 0x3dea <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    3dde:	94 b7       	in	r25, 0x34	; 52
    3de0:	9b 7f       	andi	r25, 0xFB	; 251
    3de2:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    3de4:	04 b6       	in	r0, 0x34	; 52
    3de6:	00 fe       	sbrs	r0, 0
		error|=0x04;
    3de8:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    3dea:	04 b6       	in	r0, 0x34	; 52
    3dec:	01 fe       	sbrs	r0, 1
    3dee:	05 c0       	rjmp	.+10     	; 0x3dfa <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    3df0:	94 b7       	in	r25, 0x34	; 52
    3df2:	9d 7f       	andi	r25, 0xFD	; 253
    3df4:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    3df6:	82 60       	ori	r24, 0x02	; 2
    3df8:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    3dfa:	81 11       	cpse	r24, r1
    3dfc:	0c c0       	rjmp	.+24     	; 0x3e16 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    3dfe:	04 b6       	in	r0, 0x34	; 52
    3e00:	00 fe       	sbrs	r0, 0
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    3e04:	94 b7       	in	r25, 0x34	; 52
    3e06:	9e 7f       	andi	r25, 0xFE	; 254
    3e08:	94 bf       	out	0x34, r25	; 52
    3e0a:	01 c0       	rjmp	.+2      	; 0x3e0e <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    3e0e:	90 91 b0 00 	lds	r25, 0x00B0
    3e12:	91 11       	cpse	r25, r1
    3e14:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    3e16:	08 95       	ret

00003e18 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    3e18:	81 11       	cpse	r24, r1
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <nrk_ext_int_enable+0x8>
    3e1c:	e8 9a       	sbi	0x1d, 0	; 29
    3e1e:	39 c0       	rjmp	.+114    	; 0x3e92 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	11 f4       	brne	.+4      	; 0x3e28 <nrk_ext_int_enable+0x10>
    3e24:	e9 9a       	sbi	0x1d, 1	; 29
    3e26:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    3e28:	82 30       	cpi	r24, 0x02	; 2
    3e2a:	11 f4       	brne	.+4      	; 0x3e30 <nrk_ext_int_enable+0x18>
    3e2c:	ea 9a       	sbi	0x1d, 2	; 29
    3e2e:	31 c0       	rjmp	.+98     	; 0x3e92 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    3e30:	83 30       	cpi	r24, 0x03	; 3
    3e32:	21 f4       	brne	.+8      	; 0x3e3c <nrk_ext_int_enable+0x24>
    3e34:	80 91 6b 00 	lds	r24, 0x006B
    3e38:	81 60       	ori	r24, 0x01	; 1
    3e3a:	29 c0       	rjmp	.+82     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    3e3c:	84 30       	cpi	r24, 0x04	; 4
    3e3e:	21 f4       	brne	.+8      	; 0x3e48 <nrk_ext_int_enable+0x30>
    3e40:	80 91 6b 00 	lds	r24, 0x006B
    3e44:	82 60       	ori	r24, 0x02	; 2
    3e46:	23 c0       	rjmp	.+70     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    3e48:	85 30       	cpi	r24, 0x05	; 5
    3e4a:	21 f4       	brne	.+8      	; 0x3e54 <nrk_ext_int_enable+0x3c>
    3e4c:	80 91 6b 00 	lds	r24, 0x006B
    3e50:	84 60       	ori	r24, 0x04	; 4
    3e52:	1d c0       	rjmp	.+58     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    3e54:	86 30       	cpi	r24, 0x06	; 6
    3e56:	21 f4       	brne	.+8      	; 0x3e60 <nrk_ext_int_enable+0x48>
    3e58:	80 91 6b 00 	lds	r24, 0x006B
    3e5c:	88 60       	ori	r24, 0x08	; 8
    3e5e:	17 c0       	rjmp	.+46     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    3e60:	87 30       	cpi	r24, 0x07	; 7
    3e62:	21 f4       	brne	.+8      	; 0x3e6c <nrk_ext_int_enable+0x54>
    3e64:	80 91 6b 00 	lds	r24, 0x006B
    3e68:	80 61       	ori	r24, 0x10	; 16
    3e6a:	11 c0       	rjmp	.+34     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    3e6c:	88 30       	cpi	r24, 0x08	; 8
    3e6e:	21 f4       	brne	.+8      	; 0x3e78 <nrk_ext_int_enable+0x60>
    3e70:	80 91 6b 00 	lds	r24, 0x006B
    3e74:	80 62       	ori	r24, 0x20	; 32
    3e76:	0b c0       	rjmp	.+22     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    3e78:	89 30       	cpi	r24, 0x09	; 9
    3e7a:	21 f4       	brne	.+8      	; 0x3e84 <nrk_ext_int_enable+0x6c>
    3e7c:	80 91 6b 00 	lds	r24, 0x006B
    3e80:	80 64       	ori	r24, 0x40	; 64
    3e82:	05 c0       	rjmp	.+10     	; 0x3e8e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    3e84:	8a 30       	cpi	r24, 0x0A	; 10
    3e86:	39 f4       	brne	.+14     	; 0x3e96 <nrk_ext_int_enable+0x7e>
    3e88:	80 91 6b 00 	lds	r24, 0x006B
    3e8c:	80 68       	ori	r24, 0x80	; 128
    3e8e:	80 93 6b 00 	sts	0x006B, r24
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	08 95       	ret
return NRK_ERROR;
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
}
    3e98:	08 95       	ret

00003e9a <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    3e9a:	81 11       	cpse	r24, r1
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <nrk_ext_int_disable+0x8>
    3e9e:	e8 98       	cbi	0x1d, 0	; 29
    3ea0:	39 c0       	rjmp	.+114    	; 0x3f14 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	11 f4       	brne	.+4      	; 0x3eaa <nrk_ext_int_disable+0x10>
    3ea6:	e9 98       	cbi	0x1d, 1	; 29
    3ea8:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3eaa:	82 30       	cpi	r24, 0x02	; 2
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <nrk_ext_int_disable+0x18>
    3eae:	e9 98       	cbi	0x1d, 1	; 29
    3eb0:	31 c0       	rjmp	.+98     	; 0x3f14 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    3eb2:	83 30       	cpi	r24, 0x03	; 3
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <nrk_ext_int_disable+0x24>
    3eb6:	80 91 6b 00 	lds	r24, 0x006B
    3eba:	8e 7f       	andi	r24, 0xFE	; 254
    3ebc:	29 c0       	rjmp	.+82     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    3ebe:	84 30       	cpi	r24, 0x04	; 4
    3ec0:	21 f4       	brne	.+8      	; 0x3eca <nrk_ext_int_disable+0x30>
    3ec2:	80 91 6b 00 	lds	r24, 0x006B
    3ec6:	8d 7f       	andi	r24, 0xFD	; 253
    3ec8:	23 c0       	rjmp	.+70     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    3eca:	85 30       	cpi	r24, 0x05	; 5
    3ecc:	21 f4       	brne	.+8      	; 0x3ed6 <nrk_ext_int_disable+0x3c>
    3ece:	80 91 6b 00 	lds	r24, 0x006B
    3ed2:	8b 7f       	andi	r24, 0xFB	; 251
    3ed4:	1d c0       	rjmp	.+58     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    3ed6:	86 30       	cpi	r24, 0x06	; 6
    3ed8:	21 f4       	brne	.+8      	; 0x3ee2 <nrk_ext_int_disable+0x48>
    3eda:	80 91 6b 00 	lds	r24, 0x006B
    3ede:	87 7f       	andi	r24, 0xF7	; 247
    3ee0:	17 c0       	rjmp	.+46     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    3ee2:	87 30       	cpi	r24, 0x07	; 7
    3ee4:	21 f4       	brne	.+8      	; 0x3eee <nrk_ext_int_disable+0x54>
    3ee6:	80 91 6b 00 	lds	r24, 0x006B
    3eea:	8f 7e       	andi	r24, 0xEF	; 239
    3eec:	11 c0       	rjmp	.+34     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    3eee:	88 30       	cpi	r24, 0x08	; 8
    3ef0:	21 f4       	brne	.+8      	; 0x3efa <nrk_ext_int_disable+0x60>
    3ef2:	80 91 6b 00 	lds	r24, 0x006B
    3ef6:	8f 7d       	andi	r24, 0xDF	; 223
    3ef8:	0b c0       	rjmp	.+22     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    3efa:	89 30       	cpi	r24, 0x09	; 9
    3efc:	21 f4       	brne	.+8      	; 0x3f06 <nrk_ext_int_disable+0x6c>
    3efe:	80 91 6b 00 	lds	r24, 0x006B
    3f02:	8f 7b       	andi	r24, 0xBF	; 191
    3f04:	05 c0       	rjmp	.+10     	; 0x3f10 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    3f06:	8a 30       	cpi	r24, 0x0A	; 10
    3f08:	39 f4       	brne	.+14     	; 0x3f18 <nrk_ext_int_disable+0x7e>
    3f0a:	80 91 6b 00 	lds	r24, 0x006B
    3f0e:	8f 77       	andi	r24, 0x7F	; 127
    3f10:	80 93 6b 00 	sts	0x006B, r24
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	08 95       	ret
return NRK_ERROR;
    3f18:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f1a:	08 95       	ret

00003f1c <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    3f1c:	81 11       	cpse	r24, r1
    3f1e:	26 c0       	rjmp	.+76     	; 0x3f6c <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    3f20:	50 93 39 06 	sts	0x0639, r21
    3f24:	40 93 38 06 	sts	0x0638, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    3f28:	61 11       	cpse	r22, r1
    3f2a:	04 c0       	rjmp	.+8      	; 0x3f34 <nrk_ext_int_configure+0x18>
    3f2c:	80 91 69 00 	lds	r24, 0x0069
    3f30:	8c 7f       	andi	r24, 0xFC	; 252
    3f32:	3d c0       	rjmp	.+122    	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3f34:	61 30       	cpi	r22, 0x01	; 1
    3f36:	49 f4       	brne	.+18     	; 0x3f4a <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    3f38:	80 91 69 00 	lds	r24, 0x0069
    3f3c:	8d 7f       	andi	r24, 0xFD	; 253
    3f3e:	80 93 69 00 	sts	0x0069, r24
    3f42:	80 91 69 00 	lds	r24, 0x0069
    3f46:	81 60       	ori	r24, 0x01	; 1
    3f48:	32 c0       	rjmp	.+100    	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3f4a:	62 30       	cpi	r22, 0x02	; 2
    3f4c:	49 f4       	brne	.+18     	; 0x3f60 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    3f4e:	80 91 69 00 	lds	r24, 0x0069
    3f52:	82 60       	ori	r24, 0x02	; 2
    3f54:	80 93 69 00 	sts	0x0069, r24
    3f58:	80 91 69 00 	lds	r24, 0x0069
    3f5c:	8e 7f       	andi	r24, 0xFE	; 254
    3f5e:	27 c0       	rjmp	.+78     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    3f60:	63 30       	cpi	r22, 0x03	; 3
    3f62:	39 f5       	brne	.+78     	; 0x3fb2 <nrk_ext_int_configure+0x96>
    3f64:	80 91 69 00 	lds	r24, 0x0069
    3f68:	83 60       	ori	r24, 0x03	; 3
    3f6a:	21 c0       	rjmp	.+66     	; 0x3fae <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    3f6c:	81 30       	cpi	r24, 0x01	; 1
    3f6e:	49 f5       	brne	.+82     	; 0x3fc2 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    3f70:	50 93 37 06 	sts	0x0637, r21
    3f74:	40 93 36 06 	sts	0x0636, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    3f78:	61 11       	cpse	r22, r1
    3f7a:	04 c0       	rjmp	.+8      	; 0x3f84 <nrk_ext_int_configure+0x68>
    3f7c:	80 91 69 00 	lds	r24, 0x0069
    3f80:	83 7f       	andi	r24, 0xF3	; 243
    3f82:	15 c0       	rjmp	.+42     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3f84:	61 30       	cpi	r22, 0x01	; 1
    3f86:	49 f4       	brne	.+18     	; 0x3f9a <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    3f88:	80 91 69 00 	lds	r24, 0x0069
    3f8c:	87 7f       	andi	r24, 0xF7	; 247
    3f8e:	80 93 69 00 	sts	0x0069, r24
    3f92:	80 91 69 00 	lds	r24, 0x0069
    3f96:	84 60       	ori	r24, 0x04	; 4
    3f98:	0a c0       	rjmp	.+20     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3f9a:	62 30       	cpi	r22, 0x02	; 2
    3f9c:	61 f4       	brne	.+24     	; 0x3fb6 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    3f9e:	80 91 69 00 	lds	r24, 0x0069
    3fa2:	88 60       	ori	r24, 0x08	; 8
    3fa4:	80 93 69 00 	sts	0x0069, r24
    3fa8:	80 91 69 00 	lds	r24, 0x0069
    3fac:	8b 7f       	andi	r24, 0xFB	; 251
    3fae:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    3fb6:	63 30       	cpi	r22, 0x03	; 3
    3fb8:	e1 f7       	brne	.-8      	; 0x3fb2 <nrk_ext_int_configure+0x96>
    3fba:	80 91 69 00 	lds	r24, 0x0069
    3fbe:	8c 60       	ori	r24, 0x0C	; 12
    3fc0:	f6 cf       	rjmp	.-20     	; 0x3fae <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    3fc2:	82 30       	cpi	r24, 0x02	; 2
    3fc4:	31 f5       	brne	.+76     	; 0x4012 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    3fc6:	50 93 3b 06 	sts	0x063B, r21
    3fca:	40 93 3a 06 	sts	0x063A, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    3fce:	61 11       	cpse	r22, r1
    3fd0:	04 c0       	rjmp	.+8      	; 0x3fda <nrk_ext_int_configure+0xbe>
    3fd2:	80 91 69 00 	lds	r24, 0x0069
    3fd6:	8f 7c       	andi	r24, 0xCF	; 207
    3fd8:	ea cf       	rjmp	.-44     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3fda:	61 30       	cpi	r22, 0x01	; 1
    3fdc:	49 f4       	brne	.+18     	; 0x3ff0 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    3fde:	80 91 69 00 	lds	r24, 0x0069
    3fe2:	8f 7d       	andi	r24, 0xDF	; 223
    3fe4:	80 93 69 00 	sts	0x0069, r24
    3fe8:	80 91 69 00 	lds	r24, 0x0069
    3fec:	80 61       	ori	r24, 0x10	; 16
    3fee:	df cf       	rjmp	.-66     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3ff0:	62 30       	cpi	r22, 0x02	; 2
    3ff2:	49 f4       	brne	.+18     	; 0x4006 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    3ff4:	80 91 69 00 	lds	r24, 0x0069
    3ff8:	80 62       	ori	r24, 0x20	; 32
    3ffa:	80 93 69 00 	sts	0x0069, r24
    3ffe:	80 91 69 00 	lds	r24, 0x0069
    4002:	8f 7e       	andi	r24, 0xEF	; 239
    4004:	d4 cf       	rjmp	.-88     	; 0x3fae <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4006:	63 30       	cpi	r22, 0x03	; 3
    4008:	a1 f6       	brne	.-88     	; 0x3fb2 <nrk_ext_int_configure+0x96>
    400a:	80 91 69 00 	lds	r24, 0x0069
    400e:	80 63       	ori	r24, 0x30	; 48
    4010:	ce cf       	rjmp	.-100    	; 0x3fae <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4012:	83 50       	subi	r24, 0x03	; 3
    4014:	88 30       	cpi	r24, 0x08	; 8
    4016:	50 f4       	brcc	.+20     	; 0x402c <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4018:	80 91 68 00 	lds	r24, 0x0068
    401c:	81 60       	ori	r24, 0x01	; 1
    401e:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4022:	50 93 3d 06 	sts	0x063D, r21
    4026:	40 93 3c 06 	sts	0x063C, r20
    402a:	c3 cf       	rjmp	.-122    	; 0x3fb2 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    402c:	8f ef       	ldi	r24, 0xFF	; 255
}
    402e:	08 95       	ret

00004030 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4030:	1f 92       	push	r1
    4032:	0f 92       	push	r0
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	0f 92       	push	r0
    4038:	11 24       	eor	r1, r1
    403a:	0b b6       	in	r0, 0x3b	; 59
    403c:	0f 92       	push	r0
    403e:	2f 93       	push	r18
    4040:	3f 93       	push	r19
    4042:	4f 93       	push	r20
    4044:	5f 93       	push	r21
    4046:	6f 93       	push	r22
    4048:	7f 93       	push	r23
    404a:	8f 93       	push	r24
    404c:	9f 93       	push	r25
    404e:	af 93       	push	r26
    4050:	bf 93       	push	r27
    4052:	ef 93       	push	r30
    4054:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4056:	e0 91 3c 06 	lds	r30, 0x063C
    405a:	f0 91 3d 06 	lds	r31, 0x063D
    405e:	30 97       	sbiw	r30, 0x00	; 0
    4060:	11 f0       	breq	.+4      	; 0x4066 <__vector_9+0x36>
    4062:	09 95       	icall
    4064:	04 c0       	rjmp	.+8      	; 0x406e <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	8a e0       	ldi	r24, 0x0A	; 10
    406a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
	return;  	
}
    406e:	ff 91       	pop	r31
    4070:	ef 91       	pop	r30
    4072:	bf 91       	pop	r27
    4074:	af 91       	pop	r26
    4076:	9f 91       	pop	r25
    4078:	8f 91       	pop	r24
    407a:	7f 91       	pop	r23
    407c:	6f 91       	pop	r22
    407e:	5f 91       	pop	r21
    4080:	4f 91       	pop	r20
    4082:	3f 91       	pop	r19
    4084:	2f 91       	pop	r18
    4086:	0f 90       	pop	r0
    4088:	0b be       	out	0x3b, r0	; 59
    408a:	0f 90       	pop	r0
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	0f 90       	pop	r0
    4090:	1f 90       	pop	r1
    4092:	18 95       	reti

00004094 <__vector_1>:


SIGNAL(INT0_vect) {
    4094:	1f 92       	push	r1
    4096:	0f 92       	push	r0
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	0f 92       	push	r0
    409c:	11 24       	eor	r1, r1
    409e:	0b b6       	in	r0, 0x3b	; 59
    40a0:	0f 92       	push	r0
    40a2:	2f 93       	push	r18
    40a4:	3f 93       	push	r19
    40a6:	4f 93       	push	r20
    40a8:	5f 93       	push	r21
    40aa:	6f 93       	push	r22
    40ac:	7f 93       	push	r23
    40ae:	8f 93       	push	r24
    40b0:	9f 93       	push	r25
    40b2:	af 93       	push	r26
    40b4:	bf 93       	push	r27
    40b6:	ef 93       	push	r30
    40b8:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    40ba:	e0 91 38 06 	lds	r30, 0x0638
    40be:	f0 91 39 06 	lds	r31, 0x0639
    40c2:	30 97       	sbiw	r30, 0x00	; 0
    40c4:	11 f0       	breq	.+4      	; 0x40ca <__vector_1+0x36>
    40c6:	09 95       	icall
    40c8:	04 c0       	rjmp	.+8      	; 0x40d2 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	8a e0       	ldi	r24, 0x0A	; 10
    40ce:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
	return;  	
}
    40d2:	ff 91       	pop	r31
    40d4:	ef 91       	pop	r30
    40d6:	bf 91       	pop	r27
    40d8:	af 91       	pop	r26
    40da:	9f 91       	pop	r25
    40dc:	8f 91       	pop	r24
    40de:	7f 91       	pop	r23
    40e0:	6f 91       	pop	r22
    40e2:	5f 91       	pop	r21
    40e4:	4f 91       	pop	r20
    40e6:	3f 91       	pop	r19
    40e8:	2f 91       	pop	r18
    40ea:	0f 90       	pop	r0
    40ec:	0b be       	out	0x3b, r0	; 59
    40ee:	0f 90       	pop	r0
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	0f 90       	pop	r0
    40f4:	1f 90       	pop	r1
    40f6:	18 95       	reti

000040f8 <__vector_2>:

SIGNAL(INT1_vect) {
    40f8:	1f 92       	push	r1
    40fa:	0f 92       	push	r0
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	0f 92       	push	r0
    4100:	11 24       	eor	r1, r1
    4102:	0b b6       	in	r0, 0x3b	; 59
    4104:	0f 92       	push	r0
    4106:	2f 93       	push	r18
    4108:	3f 93       	push	r19
    410a:	4f 93       	push	r20
    410c:	5f 93       	push	r21
    410e:	6f 93       	push	r22
    4110:	7f 93       	push	r23
    4112:	8f 93       	push	r24
    4114:	9f 93       	push	r25
    4116:	af 93       	push	r26
    4118:	bf 93       	push	r27
    411a:	ef 93       	push	r30
    411c:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    411e:	e0 91 36 06 	lds	r30, 0x0636
    4122:	f0 91 37 06 	lds	r31, 0x0637
    4126:	30 97       	sbiw	r30, 0x00	; 0
    4128:	11 f0       	breq	.+4      	; 0x412e <__vector_2+0x36>
    412a:	09 95       	icall
    412c:	04 c0       	rjmp	.+8      	; 0x4136 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	8a e0       	ldi	r24, 0x0A	; 10
    4132:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
	return;  	
}
    4136:	ff 91       	pop	r31
    4138:	ef 91       	pop	r30
    413a:	bf 91       	pop	r27
    413c:	af 91       	pop	r26
    413e:	9f 91       	pop	r25
    4140:	8f 91       	pop	r24
    4142:	7f 91       	pop	r23
    4144:	6f 91       	pop	r22
    4146:	5f 91       	pop	r21
    4148:	4f 91       	pop	r20
    414a:	3f 91       	pop	r19
    414c:	2f 91       	pop	r18
    414e:	0f 90       	pop	r0
    4150:	0b be       	out	0x3b, r0	; 59
    4152:	0f 90       	pop	r0
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	0f 90       	pop	r0
    4158:	1f 90       	pop	r1
    415a:	18 95       	reti

0000415c <__vector_3>:

SIGNAL(INT2_vect) {
    415c:	1f 92       	push	r1
    415e:	0f 92       	push	r0
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	0f 92       	push	r0
    4164:	11 24       	eor	r1, r1
    4166:	0b b6       	in	r0, 0x3b	; 59
    4168:	0f 92       	push	r0
    416a:	2f 93       	push	r18
    416c:	3f 93       	push	r19
    416e:	4f 93       	push	r20
    4170:	5f 93       	push	r21
    4172:	6f 93       	push	r22
    4174:	7f 93       	push	r23
    4176:	8f 93       	push	r24
    4178:	9f 93       	push	r25
    417a:	af 93       	push	r26
    417c:	bf 93       	push	r27
    417e:	ef 93       	push	r30
    4180:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4182:	e0 91 3a 06 	lds	r30, 0x063A
    4186:	f0 91 3b 06 	lds	r31, 0x063B
    418a:	30 97       	sbiw	r30, 0x00	; 0
    418c:	11 f0       	breq	.+4      	; 0x4192 <__vector_3+0x36>
    418e:	09 95       	icall
    4190:	04 c0       	rjmp	.+8      	; 0x419a <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	8a e0       	ldi	r24, 0x0A	; 10
    4196:	0e 94 76 0f 	call	0x1eec	; 0x1eec <nrk_kernel_error_add>
	return;  	
}
    419a:	ff 91       	pop	r31
    419c:	ef 91       	pop	r30
    419e:	bf 91       	pop	r27
    41a0:	af 91       	pop	r26
    41a2:	9f 91       	pop	r25
    41a4:	8f 91       	pop	r24
    41a6:	7f 91       	pop	r23
    41a8:	6f 91       	pop	r22
    41aa:	5f 91       	pop	r21
    41ac:	4f 91       	pop	r20
    41ae:	3f 91       	pop	r19
    41b0:	2f 91       	pop	r18
    41b2:	0f 90       	pop	r0
    41b4:	0b be       	out	0x3b, r0	; 59
    41b6:	0f 90       	pop	r0
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	0f 90       	pop	r0
    41bc:	1f 90       	pop	r1
    41be:	18 95       	reti

000041c0 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    41c0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    41c4:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    41c6:	84 b7       	in	r24, 0x34	; 52
    41c8:	87 7f       	andi	r24, 0xF7	; 247
    41ca:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    41cc:	e0 e6       	ldi	r30, 0x60	; 96
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	88 61       	ori	r24, 0x18	; 24
    41d4:	80 83       	st	Z, r24
WDTCSR = 0;
    41d6:	10 82       	st	Z, r1
nrk_int_enable();
    41d8:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <nrk_int_enable>

000041dc <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    41dc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    41e0:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    41e2:	84 b7       	in	r24, 0x34	; 52
    41e4:	87 7f       	andi	r24, 0xF7	; 247
    41e6:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    41e8:	e0 e6       	ldi	r30, 0x60	; 96
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	88 61       	ori	r24, 0x18	; 24
    41f0:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    41f2:	8d e0       	ldi	r24, 0x0D	; 13
    41f4:	80 83       	st	Z, r24
nrk_int_enable();
    41f6:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <nrk_int_enable>

000041fa <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    41fa:	04 b6       	in	r0, 0x34	; 52
    41fc:	03 fc       	sbrc	r0, 3
    41fe:	02 c0       	rjmp	.+4      	; 0x4204 <__stack+0x5>
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	08 95       	ret
return NRK_ERROR;
    4204:	8f ef       	ldi	r24, 0xFF	; 255
}
    4206:	08 95       	ret

00004208 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4208:	a8 95       	wdr
    420a:	08 95       	ret

0000420c <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    420c:	08 95       	ret

0000420e <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    420e:	83 b7       	in	r24, 0x33	; 51
    4210:	81 7f       	andi	r24, 0xF1	; 241
    4212:	86 60       	ori	r24, 0x06	; 6
    4214:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4216:	83 b7       	in	r24, 0x33	; 51
    4218:	81 60       	ori	r24, 0x01	; 1
    421a:	83 bf       	out	0x33, r24	; 51
    421c:	88 95       	sleep
    421e:	83 b7       	in	r24, 0x33	; 51
    4220:	8e 7f       	andi	r24, 0xFE	; 254
    4222:	83 bf       	out	0x33, r24	; 51
    4224:	08 95       	ret

00004226 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4226:	83 b7       	in	r24, 0x33	; 51
    4228:	81 7f       	andi	r24, 0xF1	; 241
    422a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    422c:	83 b7       	in	r24, 0x33	; 51
    422e:	81 60       	ori	r24, 0x01	; 1
    4230:	83 bf       	out	0x33, r24	; 51
    4232:	88 95       	sleep
    4234:	83 b7       	in	r24, 0x33	; 51
    4236:	8e 7f       	andi	r24, 0xFE	; 254
    4238:	83 bf       	out	0x33, r24	; 51
    423a:	08 95       	ret

0000423c <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    423c:	fc 01       	movw	r30, r24
    423e:	76 83       	std	Z+6, r23	; 0x06
    4240:	65 83       	std	Z+5, r22	; 0x05
    4242:	08 95       	ret

00004244 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4244:	ef 92       	push	r14
    4246:	ff 92       	push	r15
    4248:	0f 93       	push	r16
    424a:	1f 93       	push	r17
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	ec 01       	movw	r28, r24
    4252:	8b 01       	movw	r16, r22
    4254:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4256:	40 32       	cpi	r20, 0x20	; 32
    4258:	51 05       	cpc	r21, r1
    425a:	18 f4       	brcc	.+6      	; 0x4262 <nrk_task_set_stk+0x1e>
    425c:	81 e1       	ldi	r24, 0x11	; 17
    425e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4262:	a7 01       	movw	r20, r14
    4264:	41 50       	subi	r20, 0x01	; 1
    4266:	51 09       	sbc	r21, r1
    4268:	40 0f       	add	r20, r16
    426a:	51 1f       	adc	r21, r17
    426c:	5a 83       	std	Y+2, r21	; 0x02
    426e:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    4270:	1c 83       	std	Y+4, r17	; 0x04
    4272:	0b 83       	std	Y+3, r16	; 0x03

}
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	ff 90       	pop	r15
    427e:	ef 90       	pop	r14
    4280:	08 95       	ret

00004282 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4282:	25 e5       	ldi	r18, 0x55	; 85
    4284:	fa 01       	movw	r30, r20
    4286:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4288:	fb 01       	movw	r30, r22
    428a:	32 97       	sbiw	r30, 0x02	; 2
    428c:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    428e:	fb 01       	movw	r30, r22
    4290:	31 97       	sbiw	r30, 0x01	; 1
    4292:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4294:	fb 01       	movw	r30, r22
    4296:	34 97       	sbiw	r30, 0x04	; 4
    4298:	11 82       	std	Z+1, r1	; 0x01
    429a:	10 82       	st	Z, r1
    *(--stk) = 0;       
    429c:	fb 01       	movw	r30, r22
    429e:	36 97       	sbiw	r30, 0x06	; 6
    42a0:	11 82       	std	Z+1, r1	; 0x01
    42a2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    42a4:	fb 01       	movw	r30, r22
    42a6:	38 97       	sbiw	r30, 0x08	; 8
    42a8:	11 82       	std	Z+1, r1	; 0x01
    42aa:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    42ac:	fb 01       	movw	r30, r22
    42ae:	3a 97       	sbiw	r30, 0x0a	; 10
    42b0:	11 82       	std	Z+1, r1	; 0x01
    42b2:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    42b4:	fb 01       	movw	r30, r22
    42b6:	3c 97       	sbiw	r30, 0x0c	; 12
    42b8:	11 82       	std	Z+1, r1	; 0x01
    42ba:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    42bc:	fb 01       	movw	r30, r22
    42be:	3e 97       	sbiw	r30, 0x0e	; 14
    42c0:	11 82       	std	Z+1, r1	; 0x01
    42c2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    42c4:	fb 01       	movw	r30, r22
    42c6:	70 97       	sbiw	r30, 0x10	; 16
    42c8:	11 82       	std	Z+1, r1	; 0x01
    42ca:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42cc:	fb 01       	movw	r30, r22
    42ce:	72 97       	sbiw	r30, 0x12	; 18
    42d0:	11 82       	std	Z+1, r1	; 0x01
    42d2:	10 82       	st	Z, r1

    *(--stk) = 0; 
    42d4:	fb 01       	movw	r30, r22
    42d6:	74 97       	sbiw	r30, 0x14	; 20
    42d8:	11 82       	std	Z+1, r1	; 0x01
    42da:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42dc:	fb 01       	movw	r30, r22
    42de:	76 97       	sbiw	r30, 0x16	; 22
    42e0:	11 82       	std	Z+1, r1	; 0x01
    42e2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42e4:	fb 01       	movw	r30, r22
    42e6:	78 97       	sbiw	r30, 0x18	; 24
    42e8:	11 82       	std	Z+1, r1	; 0x01
    42ea:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42ec:	fb 01       	movw	r30, r22
    42ee:	7a 97       	sbiw	r30, 0x1a	; 26
    42f0:	11 82       	std	Z+1, r1	; 0x01
    42f2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42f4:	fb 01       	movw	r30, r22
    42f6:	7c 97       	sbiw	r30, 0x1c	; 28
    42f8:	11 82       	std	Z+1, r1	; 0x01
    42fa:	10 82       	st	Z, r1
    *(--stk) = 0; 
    42fc:	fb 01       	movw	r30, r22
    42fe:	7e 97       	sbiw	r30, 0x1e	; 30
    4300:	11 82       	std	Z+1, r1	; 0x01
    4302:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4304:	fb 01       	movw	r30, r22
    4306:	b0 97       	sbiw	r30, 0x20	; 32
    4308:	11 82       	std	Z+1, r1	; 0x01
    430a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    430c:	fb 01       	movw	r30, r22
    430e:	b2 97       	sbiw	r30, 0x22	; 34
    4310:	11 82       	std	Z+1, r1	; 0x01
    4312:	10 82       	st	Z, r1
    *(--stk) = 0;
    4314:	cb 01       	movw	r24, r22
    4316:	84 97       	sbiw	r24, 0x24	; 36
    4318:	fc 01       	movw	r30, r24
    431a:	11 82       	std	Z+1, r1	; 0x01
    431c:	10 82       	st	Z, r1


    return ((void *)stk);
}
    431e:	08 95       	ret

00004320 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4320:	85 e5       	ldi	r24, 0x55	; 85
    4322:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4326:	ee ef       	ldi	r30, 0xFE	; 254
    4328:	f1 e4       	ldi	r31, 0x41	; 65
    432a:	f0 93 b2 04 	sts	0x04B2, r31
    432e:	e0 93 b1 04 	sts	0x04B1, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4332:	8b eb       	ldi	r24, 0xBB	; 187
    4334:	9d e0       	ldi	r25, 0x0D	; 13
    4336:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4338:	80 93 ff 41 	sts	0x41FF, r24
    433c:	08 95       	ret

0000433e <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    433e:	8b eb       	ldi	r24, 0xBB	; 187
    4340:	9d e0       	ldi	r25, 0x0D	; 13
    4342:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4346:	80 93 ff 41 	sts	0x41FF, r24
    434a:	08 95       	ret

0000434c <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    434c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <_nrk_setup_timer>
  nrk_int_enable();  
    4350:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <nrk_int_enable>

00004354 <nrk_start_high_ready_task>:
    4354:	a0 91 0a 06 	lds	r26, 0x060A
    4358:	b0 91 0b 06 	lds	r27, 0x060B
    435c:	cd 91       	ld	r28, X+
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	dd 91       	ld	r29, X+
    4362:	de bf       	out	0x3e, r29	; 62
    4364:	ff 91       	pop	r31
    4366:	ef 91       	pop	r30
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	bf 91       	pop	r27
    436e:	af 91       	pop	r26
    4370:	9f 91       	pop	r25
    4372:	8f 91       	pop	r24
    4374:	7f 91       	pop	r23
    4376:	6f 91       	pop	r22
    4378:	5f 91       	pop	r21
    437a:	4f 91       	pop	r20
    437c:	3f 91       	pop	r19
    437e:	2f 91       	pop	r18
    4380:	1f 91       	pop	r17
    4382:	0f 91       	pop	r16
    4384:	ff 90       	pop	r15
    4386:	ef 90       	pop	r14
    4388:	df 90       	pop	r13
    438a:	cf 90       	pop	r12
    438c:	bf 90       	pop	r11
    438e:	af 90       	pop	r10
    4390:	9f 90       	pop	r9
    4392:	8f 90       	pop	r8
    4394:	7f 90       	pop	r7
    4396:	6f 90       	pop	r6
    4398:	5f 90       	pop	r5
    439a:	4f 90       	pop	r4
    439c:	3f 90       	pop	r3
    439e:	2f 90       	pop	r2
    43a0:	1f 90       	pop	r1
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	18 95       	reti

000043aa <main>:
    43aa:	0e 94 01 08 	call	0x1002	; 0x1002 <nrk_setup_ports>
    43ae:	80 e1       	ldi	r24, 0x10	; 16
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 29 0b 	call	0x1652	; 0x1652 <nrk_setup_uart>
    43b6:	87 e5       	ldi	r24, 0x57	; 87
    43b8:	92 e0       	ldi	r25, 0x02	; 2
    43ba:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <puts>
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <nrk_led_set>
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    43d6:	83 e0       	ldi	r24, 0x03	; 3
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 c0 0a 	call	0x1580	; 0x1580 <nrk_led_clr>
    43de:	8a e8       	ldi	r24, 0x8A	; 138
    43e0:	93 e0       	ldi	r25, 0x03	; 3
    43e2:	90 93 80 03 	sts	0x0380, r25
    43e6:	80 93 7f 03 	sts	0x037F, r24
    43ea:	84 e7       	ldi	r24, 0x74	; 116
    43ec:	80 93 7e 03 	sts	0x037E, r24
    43f0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_int_enable>
    43f4:	24 e1       	ldi	r18, 0x14	; 20
    43f6:	32 e1       	ldi	r19, 0x12	; 18
    43f8:	40 e2       	ldi	r20, 0x20	; 32
    43fa:	54 e2       	ldi	r21, 0x24	; 36
    43fc:	6d e0       	ldi	r22, 0x0D	; 13
    43fe:	8a e7       	ldi	r24, 0x7A	; 122
    4400:	93 e0       	ldi	r25, 0x03	; 3
    4402:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rf_init>
    4406:	d1 2c       	mov	r13, r1
    4408:	23 e0       	ldi	r18, 0x03	; 3
    440a:	92 2e       	mov	r9, r18
    440c:	bb 24       	eor	r11, r11
    440e:	b3 94       	inc	r11
    4410:	30 ee       	ldi	r19, 0xE0	; 224
    4412:	a3 2e       	mov	r10, r19
    4414:	ce ef       	ldi	r28, 0xFE	; 254
    4416:	d3 e0       	ldi	r29, 0x03	; 3
    4418:	04 e6       	ldi	r16, 0x64	; 100
    441a:	12 e0       	ldi	r17, 0x02	; 2
    441c:	45 e1       	ldi	r20, 0x15	; 21
    441e:	e4 2e       	mov	r14, r20
    4420:	42 e1       	ldi	r20, 0x12	; 18
    4422:	f4 2e       	mov	r15, r20
    4424:	90 92 37 01 	sts	0x0137, r9
    4428:	b3 ba       	out	0x13, r11	; 19
    442a:	b4 ba       	out	0x14, r11	; 20
    442c:	ad b8       	out	0x0d, r10	; 13
    442e:	ae b8       	out	0x0e, r10	; 14
    4430:	d0 93 76 04 	sts	0x0476, r29
    4434:	c0 93 75 04 	sts	0x0475, r28
    4438:	1f 92       	push	r1
    443a:	df 92       	push	r13
    443c:	1f 93       	push	r17
    443e:	0f 93       	push	r16
    4440:	df 93       	push	r29
    4442:	cf 93       	push	r28
    4444:	0e 94 39 25 	call	0x4a72	; 0x4a72 <sprintf>
    4448:	fe 01       	movw	r30, r28
    444a:	01 90       	ld	r0, Z+
    444c:	00 20       	and	r0, r0
    444e:	e9 f7       	brne	.-6      	; 0x444a <main+0xa0>
    4450:	31 97       	sbiw	r30, 0x01	; 1
    4452:	ee 5f       	subi	r30, 0xFE	; 254
    4454:	f3 40       	sbci	r31, 0x03	; 3
    4456:	ef 5f       	subi	r30, 0xFF	; 255
    4458:	e0 93 74 04 	sts	0x0474, r30
    445c:	f0 92 73 04 	sts	0x0473, r15
    4460:	e0 92 72 04 	sts	0x0472, r14
    4464:	10 92 77 04 	sts	0x0477, r1
    4468:	10 92 78 04 	sts	0x0478, r1
    446c:	81 e8       	ldi	r24, 0x81	; 129
    446e:	92 e0       	ldi	r25, 0x02	; 2
    4470:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <puts>
    4474:	82 e7       	ldi	r24, 0x72	; 114
    4476:	94 e0       	ldi	r25, 0x04	; 4
    4478:	0e 94 8b 04 	call	0x916	; 0x916 <rf_tx_packet>
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	0f 90       	pop	r0
    4488:	81 30       	cpi	r24, 0x01	; 1
    448a:	21 f0       	breq	.+8      	; 0x4494 <main+0xea>
    448c:	8a e8       	ldi	r24, 0x8A	; 138
    448e:	92 e0       	ldi	r25, 0x02	; 2
    4490:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <puts>
    4494:	d3 94       	inc	r13
    4496:	90 e5       	ldi	r25, 0x50	; 80
    4498:	c9 2e       	mov	r12, r25
    449a:	80 e1       	ldi	r24, 0x10	; 16
    449c:	97 e2       	ldi	r25, 0x27	; 39
    449e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <halWait>
    44a2:	ca 94       	dec	r12
    44a4:	d1 f7       	brne	.-12     	; 0x449a <main+0xf0>
    44a6:	84 e1       	ldi	r24, 0x14	; 20
    44a8:	c8 2e       	mov	r12, r24
    44aa:	80 e1       	ldi	r24, 0x10	; 16
    44ac:	97 e2       	ldi	r25, 0x27	; 39
    44ae:	0e 94 4c 0b 	call	0x1698	; 0x1698 <halWait>
    44b2:	ca 94       	dec	r12
    44b4:	d1 f7       	brne	.-12     	; 0x44aa <main+0x100>
    44b6:	b6 cf       	rjmp	.-148    	; 0x4424 <main+0x7a>

000044b8 <vfprintf>:
    44b8:	6f 92       	push	r6
    44ba:	7f 92       	push	r7
    44bc:	9f 92       	push	r9
    44be:	af 92       	push	r10
    44c0:	bf 92       	push	r11
    44c2:	cf 92       	push	r12
    44c4:	df 92       	push	r13
    44c6:	ef 92       	push	r14
    44c8:	ff 92       	push	r15
    44ca:	0f 93       	push	r16
    44cc:	1f 93       	push	r17
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	cd b7       	in	r28, 0x3d	; 61
    44d4:	de b7       	in	r29, 0x3e	; 62
    44d6:	2c 97       	sbiw	r28, 0x0c	; 12
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	8c 01       	movw	r16, r24
    44e4:	7b 01       	movw	r14, r22
    44e6:	3a 01       	movw	r6, r20
    44e8:	fc 01       	movw	r30, r24
    44ea:	17 82       	std	Z+7, r1	; 0x07
    44ec:	16 82       	std	Z+6, r1	; 0x06
    44ee:	83 81       	ldd	r24, Z+3	; 0x03
    44f0:	81 ff       	sbrs	r24, 1
    44f2:	19 c1       	rjmp	.+562    	; 0x4726 <vfprintf+0x26e>
    44f4:	ce 01       	movw	r24, r28
    44f6:	01 96       	adiw	r24, 0x01	; 1
    44f8:	5c 01       	movw	r10, r24
    44fa:	f8 01       	movw	r30, r16
    44fc:	d3 80       	ldd	r13, Z+3	; 0x03
    44fe:	f7 01       	movw	r30, r14
    4500:	d3 fc       	sbrc	r13, 3
    4502:	25 91       	lpm	r18, Z+
    4504:	d3 fe       	sbrs	r13, 3
    4506:	21 91       	ld	r18, Z+
    4508:	7f 01       	movw	r14, r30
    450a:	22 23       	and	r18, r18
    450c:	09 f4       	brne	.+2      	; 0x4510 <vfprintf+0x58>
    450e:	07 c1       	rjmp	.+526    	; 0x471e <vfprintf+0x266>
    4510:	25 32       	cpi	r18, 0x25	; 37
    4512:	49 f4       	brne	.+18     	; 0x4526 <vfprintf+0x6e>
    4514:	d3 fc       	sbrc	r13, 3
    4516:	25 91       	lpm	r18, Z+
    4518:	d3 fe       	sbrs	r13, 3
    451a:	21 91       	ld	r18, Z+
    451c:	7f 01       	movw	r14, r30
    451e:	25 32       	cpi	r18, 0x25	; 37
    4520:	11 f0       	breq	.+4      	; 0x4526 <vfprintf+0x6e>
    4522:	91 2c       	mov	r9, r1
    4524:	1b c0       	rjmp	.+54     	; 0x455c <vfprintf+0xa4>
    4526:	b8 01       	movw	r22, r16
    4528:	82 2f       	mov	r24, r18
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    4530:	63 01       	movw	r12, r6
    4532:	36 01       	movw	r6, r12
    4534:	e2 cf       	rjmp	.-60     	; 0x44fa <vfprintf+0x42>
    4536:	22 23       	and	r18, r18
    4538:	09 f4       	brne	.+2      	; 0x453c <vfprintf+0x84>
    453a:	f1 c0       	rjmp	.+482    	; 0x471e <vfprintf+0x266>
    453c:	62 2f       	mov	r22, r18
    453e:	70 e0       	ldi	r23, 0x00	; 0
    4540:	82 e0       	ldi	r24, 0x02	; 2
    4542:	94 e0       	ldi	r25, 0x04	; 4
    4544:	2c 87       	std	Y+12, r18	; 0x0c
    4546:	0e 94 63 24 	call	0x48c6	; 0x48c6 <strchr_P>
    454a:	2c 85       	ldd	r18, Y+12	; 0x0c
    454c:	89 2b       	or	r24, r25
    454e:	49 f0       	breq	.+18     	; 0x4562 <vfprintf+0xaa>
    4550:	f7 01       	movw	r30, r14
    4552:	d3 fc       	sbrc	r13, 3
    4554:	25 91       	lpm	r18, Z+
    4556:	d3 fe       	sbrs	r13, 3
    4558:	21 91       	ld	r18, Z+
    455a:	7f 01       	movw	r14, r30
    455c:	97 fe       	sbrs	r9, 7
    455e:	eb cf       	rjmp	.-42     	; 0x4536 <vfprintf+0x7e>
    4560:	0c c0       	rjmp	.+24     	; 0x457a <vfprintf+0xc2>
    4562:	23 32       	cpi	r18, 0x23	; 35
    4564:	21 f4       	brne	.+8      	; 0x456e <vfprintf+0xb6>
    4566:	f9 2d       	mov	r31, r9
    4568:	f0 61       	ori	r31, 0x10	; 16
    456a:	9f 2e       	mov	r9, r31
    456c:	f1 cf       	rjmp	.-30     	; 0x4550 <vfprintf+0x98>
    456e:	2c 36       	cpi	r18, 0x6C	; 108
    4570:	39 f4       	brne	.+14     	; 0x4580 <vfprintf+0xc8>
    4572:	29 2d       	mov	r18, r9
    4574:	20 68       	ori	r18, 0x80	; 128
    4576:	92 2e       	mov	r9, r18
    4578:	eb cf       	rjmp	.-42     	; 0x4550 <vfprintf+0x98>
    457a:	22 23       	and	r18, r18
    457c:	09 f4       	brne	.+2      	; 0x4580 <vfprintf+0xc8>
    457e:	cf c0       	rjmp	.+414    	; 0x471e <vfprintf+0x266>
    4580:	62 2f       	mov	r22, r18
    4582:	70 e0       	ldi	r23, 0x00	; 0
    4584:	8b ef       	ldi	r24, 0xFB	; 251
    4586:	93 e0       	ldi	r25, 0x03	; 3
    4588:	2c 87       	std	Y+12, r18	; 0x0c
    458a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <strchr_P>
    458e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4590:	89 2b       	or	r24, r25
    4592:	41 f0       	breq	.+16     	; 0x45a4 <vfprintf+0xec>
    4594:	63 01       	movw	r12, r6
    4596:	f4 e0       	ldi	r31, 0x04	; 4
    4598:	cf 0e       	add	r12, r31
    459a:	d1 1c       	adc	r13, r1
    459c:	b8 01       	movw	r22, r16
    459e:	8f e3       	ldi	r24, 0x3F	; 63
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	12 c0       	rjmp	.+36     	; 0x45c8 <vfprintf+0x110>
    45a4:	23 36       	cpi	r18, 0x63	; 99
    45a6:	41 f0       	breq	.+16     	; 0x45b8 <vfprintf+0x100>
    45a8:	23 37       	cpi	r18, 0x73	; 115
    45aa:	89 f0       	breq	.+34     	; 0x45ce <vfprintf+0x116>
    45ac:	23 35       	cpi	r18, 0x53	; 83
    45ae:	21 f5       	brne	.+72     	; 0x45f8 <vfprintf+0x140>
    45b0:	f9 2d       	mov	r31, r9
    45b2:	f1 60       	ori	r31, 0x01	; 1
    45b4:	9f 2e       	mov	r9, r31
    45b6:	0b c0       	rjmp	.+22     	; 0x45ce <vfprintf+0x116>
    45b8:	63 01       	movw	r12, r6
    45ba:	22 e0       	ldi	r18, 0x02	; 2
    45bc:	c2 0e       	add	r12, r18
    45be:	d1 1c       	adc	r13, r1
    45c0:	b8 01       	movw	r22, r16
    45c2:	f3 01       	movw	r30, r6
    45c4:	80 81       	ld	r24, Z
    45c6:	91 81       	ldd	r25, Z+1	; 0x01
    45c8:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    45cc:	b2 cf       	rjmp	.-156    	; 0x4532 <vfprintf+0x7a>
    45ce:	63 01       	movw	r12, r6
    45d0:	22 e0       	ldi	r18, 0x02	; 2
    45d2:	c2 0e       	add	r12, r18
    45d4:	d1 1c       	adc	r13, r1
    45d6:	f3 01       	movw	r30, r6
    45d8:	60 80       	ld	r6, Z
    45da:	71 80       	ldd	r7, Z+1	; 0x01
    45dc:	f3 01       	movw	r30, r6
    45de:	90 fc       	sbrc	r9, 0
    45e0:	85 91       	lpm	r24, Z+
    45e2:	90 fe       	sbrs	r9, 0
    45e4:	81 91       	ld	r24, Z+
    45e6:	3f 01       	movw	r6, r30
    45e8:	88 23       	and	r24, r24
    45ea:	09 f4       	brne	.+2      	; 0x45ee <vfprintf+0x136>
    45ec:	a2 cf       	rjmp	.-188    	; 0x4532 <vfprintf+0x7a>
    45ee:	b8 01       	movw	r22, r16
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    45f6:	f2 cf       	rjmp	.-28     	; 0x45dc <vfprintf+0x124>
    45f8:	24 36       	cpi	r18, 0x64	; 100
    45fa:	11 f0       	breq	.+4      	; 0x4600 <vfprintf+0x148>
    45fc:	29 36       	cpi	r18, 0x69	; 105
    45fe:	39 f5       	brne	.+78     	; 0x464e <vfprintf+0x196>
    4600:	63 01       	movw	r12, r6
    4602:	97 fe       	sbrs	r9, 7
    4604:	09 c0       	rjmp	.+18     	; 0x4618 <vfprintf+0x160>
    4606:	f4 e0       	ldi	r31, 0x04	; 4
    4608:	cf 0e       	add	r12, r31
    460a:	d1 1c       	adc	r13, r1
    460c:	f3 01       	movw	r30, r6
    460e:	60 81       	ld	r22, Z
    4610:	71 81       	ldd	r23, Z+1	; 0x01
    4612:	82 81       	ldd	r24, Z+2	; 0x02
    4614:	93 81       	ldd	r25, Z+3	; 0x03
    4616:	0a c0       	rjmp	.+20     	; 0x462c <vfprintf+0x174>
    4618:	f2 e0       	ldi	r31, 0x02	; 2
    461a:	cf 0e       	add	r12, r31
    461c:	d1 1c       	adc	r13, r1
    461e:	f3 01       	movw	r30, r6
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	88 27       	eor	r24, r24
    4626:	77 fd       	sbrc	r23, 7
    4628:	80 95       	com	r24
    462a:	98 2f       	mov	r25, r24
    462c:	f9 2d       	mov	r31, r9
    462e:	ff 7e       	andi	r31, 0xEF	; 239
    4630:	9f 2e       	mov	r9, r31
    4632:	97 ff       	sbrs	r25, 7
    4634:	09 c0       	rjmp	.+18     	; 0x4648 <vfprintf+0x190>
    4636:	90 95       	com	r25
    4638:	80 95       	com	r24
    463a:	70 95       	com	r23
    463c:	61 95       	neg	r22
    463e:	7f 4f       	sbci	r23, 0xFF	; 255
    4640:	8f 4f       	sbci	r24, 0xFF	; 255
    4642:	9f 4f       	sbci	r25, 0xFF	; 255
    4644:	f0 64       	ori	r31, 0x40	; 64
    4646:	9f 2e       	mov	r9, r31
    4648:	2a e0       	ldi	r18, 0x0A	; 10
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	38 c0       	rjmp	.+112    	; 0x46be <vfprintf+0x206>
    464e:	20 37       	cpi	r18, 0x70	; 112
    4650:	a1 f0       	breq	.+40     	; 0x467a <vfprintf+0x1c2>
    4652:	40 f4       	brcc	.+16     	; 0x4664 <vfprintf+0x1ac>
    4654:	28 35       	cpi	r18, 0x58	; 88
    4656:	d1 f0       	breq	.+52     	; 0x468c <vfprintf+0x1d4>
    4658:	2f 36       	cpi	r18, 0x6F	; 111
    465a:	09 f0       	breq	.+2      	; 0x465e <vfprintf+0x1a6>
    465c:	60 c0       	rjmp	.+192    	; 0x471e <vfprintf+0x266>
    465e:	28 e0       	ldi	r18, 0x08	; 8
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	19 c0       	rjmp	.+50     	; 0x4696 <vfprintf+0x1de>
    4664:	25 37       	cpi	r18, 0x75	; 117
    4666:	19 f0       	breq	.+6      	; 0x466e <vfprintf+0x1b6>
    4668:	28 37       	cpi	r18, 0x78	; 120
    466a:	51 f0       	breq	.+20     	; 0x4680 <vfprintf+0x1c8>
    466c:	58 c0       	rjmp	.+176    	; 0x471e <vfprintf+0x266>
    466e:	29 2d       	mov	r18, r9
    4670:	2f 7e       	andi	r18, 0xEF	; 239
    4672:	92 2e       	mov	r9, r18
    4674:	2a e0       	ldi	r18, 0x0A	; 10
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	0e c0       	rjmp	.+28     	; 0x4696 <vfprintf+0x1de>
    467a:	89 2d       	mov	r24, r9
    467c:	80 61       	ori	r24, 0x10	; 16
    467e:	98 2e       	mov	r9, r24
    4680:	99 2d       	mov	r25, r9
    4682:	94 62       	ori	r25, 0x24	; 36
    4684:	99 2e       	mov	r9, r25
    4686:	20 e1       	ldi	r18, 0x10	; 16
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	05 c0       	rjmp	.+10     	; 0x4696 <vfprintf+0x1de>
    468c:	e9 2d       	mov	r30, r9
    468e:	e4 60       	ori	r30, 0x04	; 4
    4690:	9e 2e       	mov	r9, r30
    4692:	20 e1       	ldi	r18, 0x10	; 16
    4694:	32 e0       	ldi	r19, 0x02	; 2
    4696:	63 01       	movw	r12, r6
    4698:	97 fe       	sbrs	r9, 7
    469a:	09 c0       	rjmp	.+18     	; 0x46ae <vfprintf+0x1f6>
    469c:	f4 e0       	ldi	r31, 0x04	; 4
    469e:	cf 0e       	add	r12, r31
    46a0:	d1 1c       	adc	r13, r1
    46a2:	f3 01       	movw	r30, r6
    46a4:	60 81       	ld	r22, Z
    46a6:	71 81       	ldd	r23, Z+1	; 0x01
    46a8:	82 81       	ldd	r24, Z+2	; 0x02
    46aa:	93 81       	ldd	r25, Z+3	; 0x03
    46ac:	08 c0       	rjmp	.+16     	; 0x46be <vfprintf+0x206>
    46ae:	f2 e0       	ldi	r31, 0x02	; 2
    46b0:	cf 0e       	add	r12, r31
    46b2:	d1 1c       	adc	r13, r1
    46b4:	f3 01       	movw	r30, r6
    46b6:	60 81       	ld	r22, Z
    46b8:	71 81       	ldd	r23, Z+1	; 0x01
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	a5 01       	movw	r20, r10
    46c0:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <__ultoa_invert>
    46c4:	78 2e       	mov	r7, r24
    46c6:	7a 18       	sub	r7, r10
    46c8:	96 fe       	sbrs	r9, 6
    46ca:	05 c0       	rjmp	.+10     	; 0x46d6 <vfprintf+0x21e>
    46cc:	b8 01       	movw	r22, r16
    46ce:	8d e2       	ldi	r24, 0x2D	; 45
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    46d6:	94 fe       	sbrs	r9, 4
    46d8:	16 c0       	rjmp	.+44     	; 0x4706 <vfprintf+0x24e>
    46da:	fe 01       	movw	r30, r28
    46dc:	e7 0d       	add	r30, r7
    46de:	f1 1d       	adc	r31, r1
    46e0:	80 81       	ld	r24, Z
    46e2:	80 33       	cpi	r24, 0x30	; 48
    46e4:	81 f0       	breq	.+32     	; 0x4706 <vfprintf+0x24e>
    46e6:	b8 01       	movw	r22, r16
    46e8:	80 e3       	ldi	r24, 0x30	; 48
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    46f0:	92 fe       	sbrs	r9, 2
    46f2:	09 c0       	rjmp	.+18     	; 0x4706 <vfprintf+0x24e>
    46f4:	29 2d       	mov	r18, r9
    46f6:	20 72       	andi	r18, 0x20	; 32
    46f8:	82 2f       	mov	r24, r18
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	b8 01       	movw	r22, r16
    46fe:	88 5a       	subi	r24, 0xA8	; 168
    4700:	9f 4f       	sbci	r25, 0xFF	; 255
    4702:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    4706:	7a 94       	dec	r7
    4708:	f5 01       	movw	r30, r10
    470a:	e7 0d       	add	r30, r7
    470c:	f1 1d       	adc	r31, r1
    470e:	80 81       	ld	r24, Z
    4710:	b8 01       	movw	r22, r16
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	0e 94 c2 24 	call	0x4984	; 0x4984 <fputc>
    4718:	71 10       	cpse	r7, r1
    471a:	f5 cf       	rjmp	.-22     	; 0x4706 <vfprintf+0x24e>
    471c:	0a cf       	rjmp	.-492    	; 0x4532 <vfprintf+0x7a>
    471e:	f8 01       	movw	r30, r16
    4720:	86 81       	ldd	r24, Z+6	; 0x06
    4722:	97 81       	ldd	r25, Z+7	; 0x07
    4724:	02 c0       	rjmp	.+4      	; 0x472a <vfprintf+0x272>
    4726:	8f ef       	ldi	r24, 0xFF	; 255
    4728:	9f ef       	ldi	r25, 0xFF	; 255
    472a:	2c 96       	adiw	r28, 0x0c	; 12
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	ff 90       	pop	r15
    4740:	ef 90       	pop	r14
    4742:	df 90       	pop	r13
    4744:	cf 90       	pop	r12
    4746:	bf 90       	pop	r11
    4748:	af 90       	pop	r10
    474a:	9f 90       	pop	r9
    474c:	7f 90       	pop	r7
    474e:	6f 90       	pop	r6
    4750:	08 95       	ret

00004752 <__muluhisi3>:
    4752:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__umulhisi3>
    4756:	a5 9f       	mul	r26, r21
    4758:	90 0d       	add	r25, r0
    475a:	b4 9f       	mul	r27, r20
    475c:	90 0d       	add	r25, r0
    475e:	a4 9f       	mul	r26, r20
    4760:	80 0d       	add	r24, r0
    4762:	91 1d       	adc	r25, r1
    4764:	11 24       	eor	r1, r1
    4766:	08 95       	ret

00004768 <__mulsi3>:
    4768:	db 01       	movw	r26, r22
    476a:	8f 93       	push	r24
    476c:	9f 93       	push	r25
    476e:	0e 94 a9 23 	call	0x4752	; 0x4752 <__muluhisi3>
    4772:	bf 91       	pop	r27
    4774:	af 91       	pop	r26
    4776:	a2 9f       	mul	r26, r18
    4778:	80 0d       	add	r24, r0
    477a:	91 1d       	adc	r25, r1
    477c:	a3 9f       	mul	r26, r19
    477e:	90 0d       	add	r25, r0
    4780:	b2 9f       	mul	r27, r18
    4782:	90 0d       	add	r25, r0
    4784:	11 24       	eor	r1, r1
    4786:	08 95       	ret

00004788 <__udivmodsi4>:
    4788:	a1 e2       	ldi	r26, 0x21	; 33
    478a:	1a 2e       	mov	r1, r26
    478c:	aa 1b       	sub	r26, r26
    478e:	bb 1b       	sub	r27, r27
    4790:	fd 01       	movw	r30, r26
    4792:	0d c0       	rjmp	.+26     	; 0x47ae <__udivmodsi4_ep>

00004794 <__udivmodsi4_loop>:
    4794:	aa 1f       	adc	r26, r26
    4796:	bb 1f       	adc	r27, r27
    4798:	ee 1f       	adc	r30, r30
    479a:	ff 1f       	adc	r31, r31
    479c:	a2 17       	cp	r26, r18
    479e:	b3 07       	cpc	r27, r19
    47a0:	e4 07       	cpc	r30, r20
    47a2:	f5 07       	cpc	r31, r21
    47a4:	20 f0       	brcs	.+8      	; 0x47ae <__udivmodsi4_ep>
    47a6:	a2 1b       	sub	r26, r18
    47a8:	b3 0b       	sbc	r27, r19
    47aa:	e4 0b       	sbc	r30, r20
    47ac:	f5 0b       	sbc	r31, r21

000047ae <__udivmodsi4_ep>:
    47ae:	66 1f       	adc	r22, r22
    47b0:	77 1f       	adc	r23, r23
    47b2:	88 1f       	adc	r24, r24
    47b4:	99 1f       	adc	r25, r25
    47b6:	1a 94       	dec	r1
    47b8:	69 f7       	brne	.-38     	; 0x4794 <__udivmodsi4_loop>
    47ba:	60 95       	com	r22
    47bc:	70 95       	com	r23
    47be:	80 95       	com	r24
    47c0:	90 95       	com	r25
    47c2:	9b 01       	movw	r18, r22
    47c4:	ac 01       	movw	r20, r24
    47c6:	bd 01       	movw	r22, r26
    47c8:	cf 01       	movw	r24, r30
    47ca:	08 95       	ret

000047cc <__umoddi3>:
    47cc:	68 94       	set
    47ce:	01 c0       	rjmp	.+2      	; 0x47d2 <__udivdi3_umoddi3>

000047d0 <__udivdi3>:
    47d0:	e8 94       	clt

000047d2 <__udivdi3_umoddi3>:
    47d2:	8f 92       	push	r8
    47d4:	9f 92       	push	r9
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__udivmod64>
    47de:	df 91       	pop	r29
    47e0:	cf 91       	pop	r28
    47e2:	9f 90       	pop	r9
    47e4:	8f 90       	pop	r8
    47e6:	08 95       	ret

000047e8 <__udivmod64>:
    47e8:	88 24       	eor	r8, r8
    47ea:	99 24       	eor	r9, r9
    47ec:	f4 01       	movw	r30, r8
    47ee:	e4 01       	movw	r28, r8
    47f0:	b0 e4       	ldi	r27, 0x40	; 64
    47f2:	9f 93       	push	r25
    47f4:	aa 27       	eor	r26, r26
    47f6:	9a 15       	cp	r25, r10
    47f8:	8b 04       	cpc	r8, r11
    47fa:	9c 04       	cpc	r9, r12
    47fc:	ed 05       	cpc	r30, r13
    47fe:	fe 05       	cpc	r31, r14
    4800:	cf 05       	cpc	r28, r15
    4802:	d0 07       	cpc	r29, r16
    4804:	a1 07       	cpc	r26, r17
    4806:	98 f4       	brcc	.+38     	; 0x482e <__udivmod64+0x46>
    4808:	ad 2f       	mov	r26, r29
    480a:	dc 2f       	mov	r29, r28
    480c:	cf 2f       	mov	r28, r31
    480e:	fe 2f       	mov	r31, r30
    4810:	e9 2d       	mov	r30, r9
    4812:	98 2c       	mov	r9, r8
    4814:	89 2e       	mov	r8, r25
    4816:	98 2f       	mov	r25, r24
    4818:	87 2f       	mov	r24, r23
    481a:	76 2f       	mov	r23, r22
    481c:	65 2f       	mov	r22, r21
    481e:	54 2f       	mov	r21, r20
    4820:	43 2f       	mov	r20, r19
    4822:	32 2f       	mov	r19, r18
    4824:	22 27       	eor	r18, r18
    4826:	b8 50       	subi	r27, 0x08	; 8
    4828:	31 f7       	brne	.-52     	; 0x47f6 <__udivmod64+0xe>
    482a:	bf 91       	pop	r27
    482c:	27 c0       	rjmp	.+78     	; 0x487c <__udivmod64+0x94>
    482e:	1b 2e       	mov	r1, r27
    4830:	bf 91       	pop	r27
    4832:	bb 27       	eor	r27, r27
    4834:	22 0f       	add	r18, r18
    4836:	33 1f       	adc	r19, r19
    4838:	44 1f       	adc	r20, r20
    483a:	55 1f       	adc	r21, r21
    483c:	66 1f       	adc	r22, r22
    483e:	77 1f       	adc	r23, r23
    4840:	88 1f       	adc	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	88 1c       	adc	r8, r8
    4846:	99 1c       	adc	r9, r9
    4848:	ee 1f       	adc	r30, r30
    484a:	ff 1f       	adc	r31, r31
    484c:	cc 1f       	adc	r28, r28
    484e:	dd 1f       	adc	r29, r29
    4850:	aa 1f       	adc	r26, r26
    4852:	bb 1f       	adc	r27, r27
    4854:	8a 14       	cp	r8, r10
    4856:	9b 04       	cpc	r9, r11
    4858:	ec 05       	cpc	r30, r12
    485a:	fd 05       	cpc	r31, r13
    485c:	ce 05       	cpc	r28, r14
    485e:	df 05       	cpc	r29, r15
    4860:	a0 07       	cpc	r26, r16
    4862:	b1 07       	cpc	r27, r17
    4864:	48 f0       	brcs	.+18     	; 0x4878 <__udivmod64+0x90>
    4866:	8a 18       	sub	r8, r10
    4868:	9b 08       	sbc	r9, r11
    486a:	ec 09       	sbc	r30, r12
    486c:	fd 09       	sbc	r31, r13
    486e:	ce 09       	sbc	r28, r14
    4870:	df 09       	sbc	r29, r15
    4872:	a0 0b       	sbc	r26, r16
    4874:	b1 0b       	sbc	r27, r17
    4876:	21 60       	ori	r18, 0x01	; 1
    4878:	1a 94       	dec	r1
    487a:	e1 f6       	brne	.-72     	; 0x4834 <__udivmod64+0x4c>
    487c:	2e f4       	brtc	.+10     	; 0x4888 <__udivmod64+0xa0>
    487e:	94 01       	movw	r18, r8
    4880:	af 01       	movw	r20, r30
    4882:	be 01       	movw	r22, r28
    4884:	cd 01       	movw	r24, r26
    4886:	00 0c       	add	r0, r0
    4888:	08 95       	ret

0000488a <__tablejump2__>:
    488a:	ee 0f       	add	r30, r30
    488c:	ff 1f       	adc	r31, r31

0000488e <__tablejump__>:
    488e:	05 90       	lpm	r0, Z+
    4890:	f4 91       	lpm	r31, Z
    4892:	e0 2d       	mov	r30, r0
    4894:	09 94       	ijmp

00004896 <__adddi3>:
    4896:	2a 0d       	add	r18, r10
    4898:	3b 1d       	adc	r19, r11
    489a:	4c 1d       	adc	r20, r12
    489c:	5d 1d       	adc	r21, r13
    489e:	6e 1d       	adc	r22, r14
    48a0:	7f 1d       	adc	r23, r15
    48a2:	80 1f       	adc	r24, r16
    48a4:	91 1f       	adc	r25, r17
    48a6:	08 95       	ret

000048a8 <__umulhisi3>:
    48a8:	a2 9f       	mul	r26, r18
    48aa:	b0 01       	movw	r22, r0
    48ac:	b3 9f       	mul	r27, r19
    48ae:	c0 01       	movw	r24, r0
    48b0:	a3 9f       	mul	r26, r19
    48b2:	70 0d       	add	r23, r0
    48b4:	81 1d       	adc	r24, r1
    48b6:	11 24       	eor	r1, r1
    48b8:	91 1d       	adc	r25, r1
    48ba:	b2 9f       	mul	r27, r18
    48bc:	70 0d       	add	r23, r0
    48be:	81 1d       	adc	r24, r1
    48c0:	11 24       	eor	r1, r1
    48c2:	91 1d       	adc	r25, r1
    48c4:	08 95       	ret

000048c6 <strchr_P>:
    48c6:	fc 01       	movw	r30, r24
    48c8:	05 90       	lpm	r0, Z+
    48ca:	06 16       	cp	r0, r22
    48cc:	21 f0       	breq	.+8      	; 0x48d6 <strchr_P+0x10>
    48ce:	00 20       	and	r0, r0
    48d0:	d9 f7       	brne	.-10     	; 0x48c8 <strchr_P+0x2>
    48d2:	c0 01       	movw	r24, r0
    48d4:	08 95       	ret
    48d6:	31 97       	sbiw	r30, 0x01	; 1
    48d8:	cf 01       	movw	r24, r30
    48da:	08 95       	ret

000048dc <memcpy>:
    48dc:	fb 01       	movw	r30, r22
    48de:	dc 01       	movw	r26, r24
    48e0:	02 c0       	rjmp	.+4      	; 0x48e6 <memcpy+0xa>
    48e2:	01 90       	ld	r0, Z+
    48e4:	0d 92       	st	X+, r0
    48e6:	41 50       	subi	r20, 0x01	; 1
    48e8:	50 40       	sbci	r21, 0x00	; 0
    48ea:	d8 f7       	brcc	.-10     	; 0x48e2 <memcpy+0x6>
    48ec:	08 95       	ret

000048ee <fdevopen>:
    48ee:	0f 93       	push	r16
    48f0:	1f 93       	push	r17
    48f2:	cf 93       	push	r28
    48f4:	df 93       	push	r29
    48f6:	ec 01       	movw	r28, r24
    48f8:	8b 01       	movw	r16, r22
    48fa:	00 97       	sbiw	r24, 0x00	; 0
    48fc:	31 f4       	brne	.+12     	; 0x490a <fdevopen+0x1c>
    48fe:	61 15       	cp	r22, r1
    4900:	71 05       	cpc	r23, r1
    4902:	19 f4       	brne	.+6      	; 0x490a <fdevopen+0x1c>
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	38 c0       	rjmp	.+112    	; 0x497a <fdevopen+0x8c>
    490a:	6e e0       	ldi	r22, 0x0E	; 14
    490c:	70 e0       	ldi	r23, 0x00	; 0
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <calloc>
    4916:	fc 01       	movw	r30, r24
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	a1 f3       	breq	.-24     	; 0x4904 <fdevopen+0x16>
    491c:	80 e8       	ldi	r24, 0x80	; 128
    491e:	83 83       	std	Z+3, r24	; 0x03
    4920:	01 15       	cp	r16, r1
    4922:	11 05       	cpc	r17, r1
    4924:	71 f0       	breq	.+28     	; 0x4942 <fdevopen+0x54>
    4926:	13 87       	std	Z+11, r17	; 0x0b
    4928:	02 87       	std	Z+10, r16	; 0x0a
    492a:	81 e8       	ldi	r24, 0x81	; 129
    492c:	83 83       	std	Z+3, r24	; 0x03
    492e:	80 91 3e 06 	lds	r24, 0x063E
    4932:	90 91 3f 06 	lds	r25, 0x063F
    4936:	89 2b       	or	r24, r25
    4938:	21 f4       	brne	.+8      	; 0x4942 <fdevopen+0x54>
    493a:	f0 93 3f 06 	sts	0x063F, r31
    493e:	e0 93 3e 06 	sts	0x063E, r30
    4942:	20 97       	sbiw	r28, 0x00	; 0
    4944:	c9 f0       	breq	.+50     	; 0x4978 <fdevopen+0x8a>
    4946:	d1 87       	std	Z+9, r29	; 0x09
    4948:	c0 87       	std	Z+8, r28	; 0x08
    494a:	83 81       	ldd	r24, Z+3	; 0x03
    494c:	82 60       	ori	r24, 0x02	; 2
    494e:	83 83       	std	Z+3, r24	; 0x03
    4950:	80 91 40 06 	lds	r24, 0x0640
    4954:	90 91 41 06 	lds	r25, 0x0641
    4958:	89 2b       	or	r24, r25
    495a:	71 f4       	brne	.+28     	; 0x4978 <fdevopen+0x8a>
    495c:	f0 93 41 06 	sts	0x0641, r31
    4960:	e0 93 40 06 	sts	0x0640, r30
    4964:	80 91 42 06 	lds	r24, 0x0642
    4968:	90 91 43 06 	lds	r25, 0x0643
    496c:	89 2b       	or	r24, r25
    496e:	21 f4       	brne	.+8      	; 0x4978 <fdevopen+0x8a>
    4970:	f0 93 43 06 	sts	0x0643, r31
    4974:	e0 93 42 06 	sts	0x0642, r30
    4978:	cf 01       	movw	r24, r30
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	08 95       	ret

00004984 <fputc>:
    4984:	0f 93       	push	r16
    4986:	1f 93       	push	r17
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	18 2f       	mov	r17, r24
    498e:	09 2f       	mov	r16, r25
    4990:	eb 01       	movw	r28, r22
    4992:	8b 81       	ldd	r24, Y+3	; 0x03
    4994:	81 fd       	sbrc	r24, 1
    4996:	03 c0       	rjmp	.+6      	; 0x499e <fputc+0x1a>
    4998:	8f ef       	ldi	r24, 0xFF	; 255
    499a:	9f ef       	ldi	r25, 0xFF	; 255
    499c:	20 c0       	rjmp	.+64     	; 0x49de <fputc+0x5a>
    499e:	82 ff       	sbrs	r24, 2
    49a0:	10 c0       	rjmp	.+32     	; 0x49c2 <fputc+0x3e>
    49a2:	4e 81       	ldd	r20, Y+6	; 0x06
    49a4:	5f 81       	ldd	r21, Y+7	; 0x07
    49a6:	2c 81       	ldd	r18, Y+4	; 0x04
    49a8:	3d 81       	ldd	r19, Y+5	; 0x05
    49aa:	42 17       	cp	r20, r18
    49ac:	53 07       	cpc	r21, r19
    49ae:	7c f4       	brge	.+30     	; 0x49ce <fputc+0x4a>
    49b0:	e8 81       	ld	r30, Y
    49b2:	f9 81       	ldd	r31, Y+1	; 0x01
    49b4:	9f 01       	movw	r18, r30
    49b6:	2f 5f       	subi	r18, 0xFF	; 255
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	39 83       	std	Y+1, r19	; 0x01
    49bc:	28 83       	st	Y, r18
    49be:	10 83       	st	Z, r17
    49c0:	06 c0       	rjmp	.+12     	; 0x49ce <fputc+0x4a>
    49c2:	e8 85       	ldd	r30, Y+8	; 0x08
    49c4:	f9 85       	ldd	r31, Y+9	; 0x09
    49c6:	81 2f       	mov	r24, r17
    49c8:	09 95       	icall
    49ca:	89 2b       	or	r24, r25
    49cc:	29 f7       	brne	.-54     	; 0x4998 <fputc+0x14>
    49ce:	2e 81       	ldd	r18, Y+6	; 0x06
    49d0:	3f 81       	ldd	r19, Y+7	; 0x07
    49d2:	2f 5f       	subi	r18, 0xFF	; 255
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
    49d6:	3f 83       	std	Y+7, r19	; 0x07
    49d8:	2e 83       	std	Y+6, r18	; 0x06
    49da:	81 2f       	mov	r24, r17
    49dc:	90 2f       	mov	r25, r16
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	1f 91       	pop	r17
    49e4:	0f 91       	pop	r16
    49e6:	08 95       	ret

000049e8 <printf>:
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	fe 01       	movw	r30, r28
    49f2:	35 96       	adiw	r30, 0x05	; 5
    49f4:	61 91       	ld	r22, Z+
    49f6:	71 91       	ld	r23, Z+
    49f8:	af 01       	movw	r20, r30
    49fa:	80 91 40 06 	lds	r24, 0x0640
    49fe:	90 91 41 06 	lds	r25, 0x0641
    4a02:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <vfprintf>
    4a06:	df 91       	pop	r29
    4a08:	cf 91       	pop	r28
    4a0a:	08 95       	ret

00004a0c <putchar>:
    4a0c:	60 91 40 06 	lds	r22, 0x0640
    4a10:	70 91 41 06 	lds	r23, 0x0641
    4a14:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <fputc>

00004a18 <puts>:
    4a18:	0f 93       	push	r16
    4a1a:	1f 93       	push	r17
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	e0 91 40 06 	lds	r30, 0x0640
    4a24:	f0 91 41 06 	lds	r31, 0x0641
    4a28:	23 81       	ldd	r18, Z+3	; 0x03
    4a2a:	21 ff       	sbrs	r18, 1
    4a2c:	1b c0       	rjmp	.+54     	; 0x4a64 <puts+0x4c>
    4a2e:	ec 01       	movw	r28, r24
    4a30:	00 e0       	ldi	r16, 0x00	; 0
    4a32:	10 e0       	ldi	r17, 0x00	; 0
    4a34:	89 91       	ld	r24, Y+
    4a36:	60 91 40 06 	lds	r22, 0x0640
    4a3a:	70 91 41 06 	lds	r23, 0x0641
    4a3e:	db 01       	movw	r26, r22
    4a40:	18 96       	adiw	r26, 0x08	; 8
    4a42:	ed 91       	ld	r30, X+
    4a44:	fc 91       	ld	r31, X
    4a46:	19 97       	sbiw	r26, 0x09	; 9
    4a48:	88 23       	and	r24, r24
    4a4a:	31 f0       	breq	.+12     	; 0x4a58 <puts+0x40>
    4a4c:	09 95       	icall
    4a4e:	89 2b       	or	r24, r25
    4a50:	89 f3       	breq	.-30     	; 0x4a34 <puts+0x1c>
    4a52:	0f ef       	ldi	r16, 0xFF	; 255
    4a54:	1f ef       	ldi	r17, 0xFF	; 255
    4a56:	ee cf       	rjmp	.-36     	; 0x4a34 <puts+0x1c>
    4a58:	8a e0       	ldi	r24, 0x0A	; 10
    4a5a:	09 95       	icall
    4a5c:	89 2b       	or	r24, r25
    4a5e:	11 f4       	brne	.+4      	; 0x4a64 <puts+0x4c>
    4a60:	c8 01       	movw	r24, r16
    4a62:	02 c0       	rjmp	.+4      	; 0x4a68 <puts+0x50>
    4a64:	8f ef       	ldi	r24, 0xFF	; 255
    4a66:	9f ef       	ldi	r25, 0xFF	; 255
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	08 95       	ret

00004a72 <sprintf>:
    4a72:	0f 93       	push	r16
    4a74:	1f 93       	push	r17
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	2e 97       	sbiw	r28, 0x0e	; 14
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	0d 89       	ldd	r16, Y+21	; 0x15
    4a8c:	1e 89       	ldd	r17, Y+22	; 0x16
    4a8e:	86 e0       	ldi	r24, 0x06	; 6
    4a90:	8c 83       	std	Y+4, r24	; 0x04
    4a92:	1a 83       	std	Y+2, r17	; 0x02
    4a94:	09 83       	std	Y+1, r16	; 0x01
    4a96:	8f ef       	ldi	r24, 0xFF	; 255
    4a98:	9f e7       	ldi	r25, 0x7F	; 127
    4a9a:	9e 83       	std	Y+6, r25	; 0x06
    4a9c:	8d 83       	std	Y+5, r24	; 0x05
    4a9e:	ae 01       	movw	r20, r28
    4aa0:	47 5e       	subi	r20, 0xE7	; 231
    4aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa4:	6f 89       	ldd	r22, Y+23	; 0x17
    4aa6:	78 8d       	ldd	r23, Y+24	; 0x18
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	01 96       	adiw	r24, 0x01	; 1
    4aac:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <vfprintf>
    4ab0:	ef 81       	ldd	r30, Y+7	; 0x07
    4ab2:	f8 85       	ldd	r31, Y+8	; 0x08
    4ab4:	e0 0f       	add	r30, r16
    4ab6:	f1 1f       	adc	r31, r17
    4ab8:	10 82       	st	Z, r1
    4aba:	2e 96       	adiw	r28, 0x0e	; 14
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	08 95       	ret

00004ad0 <__ultoa_invert>:
    4ad0:	fa 01       	movw	r30, r20
    4ad2:	aa 27       	eor	r26, r26
    4ad4:	28 30       	cpi	r18, 0x08	; 8
    4ad6:	51 f1       	breq	.+84     	; 0x4b2c <__ultoa_invert+0x5c>
    4ad8:	20 31       	cpi	r18, 0x10	; 16
    4ada:	81 f1       	breq	.+96     	; 0x4b3c <__ultoa_invert+0x6c>
    4adc:	e8 94       	clt
    4ade:	6f 93       	push	r22
    4ae0:	6e 7f       	andi	r22, 0xFE	; 254
    4ae2:	6e 5f       	subi	r22, 0xFE	; 254
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aea:	af 4f       	sbci	r26, 0xFF	; 255
    4aec:	b1 e0       	ldi	r27, 0x01	; 1
    4aee:	3e d0       	rcall	.+124    	; 0x4b6c <__ultoa_invert+0x9c>
    4af0:	b4 e0       	ldi	r27, 0x04	; 4
    4af2:	3c d0       	rcall	.+120    	; 0x4b6c <__ultoa_invert+0x9c>
    4af4:	67 0f       	add	r22, r23
    4af6:	78 1f       	adc	r23, r24
    4af8:	89 1f       	adc	r24, r25
    4afa:	9a 1f       	adc	r25, r26
    4afc:	a1 1d       	adc	r26, r1
    4afe:	68 0f       	add	r22, r24
    4b00:	79 1f       	adc	r23, r25
    4b02:	8a 1f       	adc	r24, r26
    4b04:	91 1d       	adc	r25, r1
    4b06:	a1 1d       	adc	r26, r1
    4b08:	6a 0f       	add	r22, r26
    4b0a:	71 1d       	adc	r23, r1
    4b0c:	81 1d       	adc	r24, r1
    4b0e:	91 1d       	adc	r25, r1
    4b10:	a1 1d       	adc	r26, r1
    4b12:	20 d0       	rcall	.+64     	; 0x4b54 <__ultoa_invert+0x84>
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <__ultoa_invert+0x48>
    4b16:	68 94       	set
    4b18:	3f 91       	pop	r19
    4b1a:	2a e0       	ldi	r18, 0x0A	; 10
    4b1c:	26 9f       	mul	r18, r22
    4b1e:	11 24       	eor	r1, r1
    4b20:	30 19       	sub	r19, r0
    4b22:	30 5d       	subi	r19, 0xD0	; 208
    4b24:	31 93       	st	Z+, r19
    4b26:	de f6       	brtc	.-74     	; 0x4ade <__ultoa_invert+0xe>
    4b28:	cf 01       	movw	r24, r30
    4b2a:	08 95       	ret
    4b2c:	46 2f       	mov	r20, r22
    4b2e:	47 70       	andi	r20, 0x07	; 7
    4b30:	40 5d       	subi	r20, 0xD0	; 208
    4b32:	41 93       	st	Z+, r20
    4b34:	b3 e0       	ldi	r27, 0x03	; 3
    4b36:	0f d0       	rcall	.+30     	; 0x4b56 <__ultoa_invert+0x86>
    4b38:	c9 f7       	brne	.-14     	; 0x4b2c <__ultoa_invert+0x5c>
    4b3a:	f6 cf       	rjmp	.-20     	; 0x4b28 <__ultoa_invert+0x58>
    4b3c:	46 2f       	mov	r20, r22
    4b3e:	4f 70       	andi	r20, 0x0F	; 15
    4b40:	40 5d       	subi	r20, 0xD0	; 208
    4b42:	4a 33       	cpi	r20, 0x3A	; 58
    4b44:	18 f0       	brcs	.+6      	; 0x4b4c <__ultoa_invert+0x7c>
    4b46:	49 5d       	subi	r20, 0xD9	; 217
    4b48:	31 fd       	sbrc	r19, 1
    4b4a:	40 52       	subi	r20, 0x20	; 32
    4b4c:	41 93       	st	Z+, r20
    4b4e:	02 d0       	rcall	.+4      	; 0x4b54 <__ultoa_invert+0x84>
    4b50:	a9 f7       	brne	.-22     	; 0x4b3c <__ultoa_invert+0x6c>
    4b52:	ea cf       	rjmp	.-44     	; 0x4b28 <__ultoa_invert+0x58>
    4b54:	b4 e0       	ldi	r27, 0x04	; 4
    4b56:	a6 95       	lsr	r26
    4b58:	97 95       	ror	r25
    4b5a:	87 95       	ror	r24
    4b5c:	77 95       	ror	r23
    4b5e:	67 95       	ror	r22
    4b60:	ba 95       	dec	r27
    4b62:	c9 f7       	brne	.-14     	; 0x4b56 <__ultoa_invert+0x86>
    4b64:	00 97       	sbiw	r24, 0x00	; 0
    4b66:	61 05       	cpc	r22, r1
    4b68:	71 05       	cpc	r23, r1
    4b6a:	08 95       	ret
    4b6c:	9b 01       	movw	r18, r22
    4b6e:	ac 01       	movw	r20, r24
    4b70:	0a 2e       	mov	r0, r26
    4b72:	06 94       	lsr	r0
    4b74:	57 95       	ror	r21
    4b76:	47 95       	ror	r20
    4b78:	37 95       	ror	r19
    4b7a:	27 95       	ror	r18
    4b7c:	ba 95       	dec	r27
    4b7e:	c9 f7       	brne	.-14     	; 0x4b72 <__ultoa_invert+0xa2>
    4b80:	62 0f       	add	r22, r18
    4b82:	73 1f       	adc	r23, r19
    4b84:	84 1f       	adc	r24, r20
    4b86:	95 1f       	adc	r25, r21
    4b88:	a0 1d       	adc	r26, r0
    4b8a:	08 95       	ret

00004b8c <__eerd_byte_m128rfa1>:
    4b8c:	f9 99       	sbic	0x1f, 1	; 31
    4b8e:	fe cf       	rjmp	.-4      	; 0x4b8c <__eerd_byte_m128rfa1>
    4b90:	92 bd       	out	0x22, r25	; 34
    4b92:	81 bd       	out	0x21, r24	; 33
    4b94:	f8 9a       	sbi	0x1f, 0	; 31
    4b96:	99 27       	eor	r25, r25
    4b98:	80 b5       	in	r24, 0x20	; 32
    4b9a:	08 95       	ret

00004b9c <__eewr_byte_m128rfa1>:
    4b9c:	26 2f       	mov	r18, r22

00004b9e <__eewr_r18_m128rfa1>:
    4b9e:	f9 99       	sbic	0x1f, 1	; 31
    4ba0:	fe cf       	rjmp	.-4      	; 0x4b9e <__eewr_r18_m128rfa1>
    4ba2:	1f ba       	out	0x1f, r1	; 31
    4ba4:	92 bd       	out	0x22, r25	; 34
    4ba6:	81 bd       	out	0x21, r24	; 33
    4ba8:	20 bd       	out	0x20, r18	; 32
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	f8 94       	cli
    4bae:	fa 9a       	sbi	0x1f, 2	; 31
    4bb0:	f9 9a       	sbi	0x1f, 1	; 31
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	01 96       	adiw	r24, 0x01	; 1
    4bb6:	08 95       	ret

00004bb8 <calloc>:
    4bb8:	0f 93       	push	r16
    4bba:	1f 93       	push	r17
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	86 9f       	mul	r24, r22
    4bc2:	80 01       	movw	r16, r0
    4bc4:	87 9f       	mul	r24, r23
    4bc6:	10 0d       	add	r17, r0
    4bc8:	96 9f       	mul	r25, r22
    4bca:	10 0d       	add	r17, r0
    4bcc:	11 24       	eor	r1, r1
    4bce:	c8 01       	movw	r24, r16
    4bd0:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <malloc>
    4bd4:	ec 01       	movw	r28, r24
    4bd6:	00 97       	sbiw	r24, 0x00	; 0
    4bd8:	29 f0       	breq	.+10     	; 0x4be4 <calloc+0x2c>
    4bda:	a8 01       	movw	r20, r16
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	70 e0       	ldi	r23, 0x00	; 0
    4be0:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <memset>
    4be4:	ce 01       	movw	r24, r28
    4be6:	df 91       	pop	r29
    4be8:	cf 91       	pop	r28
    4bea:	1f 91       	pop	r17
    4bec:	0f 91       	pop	r16
    4bee:	08 95       	ret

00004bf0 <malloc>:
    4bf0:	cf 93       	push	r28
    4bf2:	df 93       	push	r29
    4bf4:	82 30       	cpi	r24, 0x02	; 2
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	10 f4       	brcc	.+4      	; 0x4bfe <malloc+0xe>
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	e0 91 46 06 	lds	r30, 0x0646
    4c02:	f0 91 47 06 	lds	r31, 0x0647
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	a0 e0       	ldi	r26, 0x00	; 0
    4c0c:	b0 e0       	ldi	r27, 0x00	; 0
    4c0e:	30 97       	sbiw	r30, 0x00	; 0
    4c10:	39 f1       	breq	.+78     	; 0x4c60 <malloc+0x70>
    4c12:	40 81       	ld	r20, Z
    4c14:	51 81       	ldd	r21, Z+1	; 0x01
    4c16:	48 17       	cp	r20, r24
    4c18:	59 07       	cpc	r21, r25
    4c1a:	b8 f0       	brcs	.+46     	; 0x4c4a <malloc+0x5a>
    4c1c:	48 17       	cp	r20, r24
    4c1e:	59 07       	cpc	r21, r25
    4c20:	71 f4       	brne	.+28     	; 0x4c3e <malloc+0x4e>
    4c22:	82 81       	ldd	r24, Z+2	; 0x02
    4c24:	93 81       	ldd	r25, Z+3	; 0x03
    4c26:	10 97       	sbiw	r26, 0x00	; 0
    4c28:	29 f0       	breq	.+10     	; 0x4c34 <malloc+0x44>
    4c2a:	13 96       	adiw	r26, 0x03	; 3
    4c2c:	9c 93       	st	X, r25
    4c2e:	8e 93       	st	-X, r24
    4c30:	12 97       	sbiw	r26, 0x02	; 2
    4c32:	2c c0       	rjmp	.+88     	; 0x4c8c <malloc+0x9c>
    4c34:	90 93 47 06 	sts	0x0647, r25
    4c38:	80 93 46 06 	sts	0x0646, r24
    4c3c:	27 c0       	rjmp	.+78     	; 0x4c8c <malloc+0x9c>
    4c3e:	21 15       	cp	r18, r1
    4c40:	31 05       	cpc	r19, r1
    4c42:	31 f0       	breq	.+12     	; 0x4c50 <malloc+0x60>
    4c44:	42 17       	cp	r20, r18
    4c46:	53 07       	cpc	r21, r19
    4c48:	18 f0       	brcs	.+6      	; 0x4c50 <malloc+0x60>
    4c4a:	a9 01       	movw	r20, r18
    4c4c:	db 01       	movw	r26, r22
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <malloc+0x62>
    4c50:	ef 01       	movw	r28, r30
    4c52:	9a 01       	movw	r18, r20
    4c54:	bd 01       	movw	r22, r26
    4c56:	df 01       	movw	r26, r30
    4c58:	02 80       	ldd	r0, Z+2	; 0x02
    4c5a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c5c:	e0 2d       	mov	r30, r0
    4c5e:	d7 cf       	rjmp	.-82     	; 0x4c0e <malloc+0x1e>
    4c60:	21 15       	cp	r18, r1
    4c62:	31 05       	cpc	r19, r1
    4c64:	f9 f0       	breq	.+62     	; 0x4ca4 <malloc+0xb4>
    4c66:	28 1b       	sub	r18, r24
    4c68:	39 0b       	sbc	r19, r25
    4c6a:	24 30       	cpi	r18, 0x04	; 4
    4c6c:	31 05       	cpc	r19, r1
    4c6e:	80 f4       	brcc	.+32     	; 0x4c90 <malloc+0xa0>
    4c70:	8a 81       	ldd	r24, Y+2	; 0x02
    4c72:	9b 81       	ldd	r25, Y+3	; 0x03
    4c74:	61 15       	cp	r22, r1
    4c76:	71 05       	cpc	r23, r1
    4c78:	21 f0       	breq	.+8      	; 0x4c82 <malloc+0x92>
    4c7a:	fb 01       	movw	r30, r22
    4c7c:	93 83       	std	Z+3, r25	; 0x03
    4c7e:	82 83       	std	Z+2, r24	; 0x02
    4c80:	04 c0       	rjmp	.+8      	; 0x4c8a <malloc+0x9a>
    4c82:	90 93 47 06 	sts	0x0647, r25
    4c86:	80 93 46 06 	sts	0x0646, r24
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	32 96       	adiw	r30, 0x02	; 2
    4c8e:	44 c0       	rjmp	.+136    	; 0x4d18 <malloc+0x128>
    4c90:	fe 01       	movw	r30, r28
    4c92:	e2 0f       	add	r30, r18
    4c94:	f3 1f       	adc	r31, r19
    4c96:	81 93       	st	Z+, r24
    4c98:	91 93       	st	Z+, r25
    4c9a:	22 50       	subi	r18, 0x02	; 2
    4c9c:	31 09       	sbc	r19, r1
    4c9e:	39 83       	std	Y+1, r19	; 0x01
    4ca0:	28 83       	st	Y, r18
    4ca2:	3a c0       	rjmp	.+116    	; 0x4d18 <malloc+0x128>
    4ca4:	20 91 44 06 	lds	r18, 0x0644
    4ca8:	30 91 45 06 	lds	r19, 0x0645
    4cac:	23 2b       	or	r18, r19
    4cae:	41 f4       	brne	.+16     	; 0x4cc0 <malloc+0xd0>
    4cb0:	20 91 02 02 	lds	r18, 0x0202
    4cb4:	30 91 03 02 	lds	r19, 0x0203
    4cb8:	30 93 45 06 	sts	0x0645, r19
    4cbc:	20 93 44 06 	sts	0x0644, r18
    4cc0:	20 91 00 02 	lds	r18, 0x0200
    4cc4:	30 91 01 02 	lds	r19, 0x0201
    4cc8:	21 15       	cp	r18, r1
    4cca:	31 05       	cpc	r19, r1
    4ccc:	41 f4       	brne	.+16     	; 0x4cde <malloc+0xee>
    4cce:	2d b7       	in	r18, 0x3d	; 61
    4cd0:	3e b7       	in	r19, 0x3e	; 62
    4cd2:	40 91 04 02 	lds	r20, 0x0204
    4cd6:	50 91 05 02 	lds	r21, 0x0205
    4cda:	24 1b       	sub	r18, r20
    4cdc:	35 0b       	sbc	r19, r21
    4cde:	e0 91 44 06 	lds	r30, 0x0644
    4ce2:	f0 91 45 06 	lds	r31, 0x0645
    4ce6:	e2 17       	cp	r30, r18
    4ce8:	f3 07       	cpc	r31, r19
    4cea:	a0 f4       	brcc	.+40     	; 0x4d14 <malloc+0x124>
    4cec:	2e 1b       	sub	r18, r30
    4cee:	3f 0b       	sbc	r19, r31
    4cf0:	28 17       	cp	r18, r24
    4cf2:	39 07       	cpc	r19, r25
    4cf4:	78 f0       	brcs	.+30     	; 0x4d14 <malloc+0x124>
    4cf6:	ac 01       	movw	r20, r24
    4cf8:	4e 5f       	subi	r20, 0xFE	; 254
    4cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfc:	24 17       	cp	r18, r20
    4cfe:	35 07       	cpc	r19, r21
    4d00:	48 f0       	brcs	.+18     	; 0x4d14 <malloc+0x124>
    4d02:	4e 0f       	add	r20, r30
    4d04:	5f 1f       	adc	r21, r31
    4d06:	50 93 45 06 	sts	0x0645, r21
    4d0a:	40 93 44 06 	sts	0x0644, r20
    4d0e:	81 93       	st	Z+, r24
    4d10:	91 93       	st	Z+, r25
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <malloc+0x128>
    4d14:	e0 e0       	ldi	r30, 0x00	; 0
    4d16:	f0 e0       	ldi	r31, 0x00	; 0
    4d18:	cf 01       	movw	r24, r30
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	08 95       	ret

00004d20 <free>:
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <free+0xa>
    4d28:	87 c0       	rjmp	.+270    	; 0x4e38 <free+0x118>
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	32 97       	sbiw	r30, 0x02	; 2
    4d2e:	13 82       	std	Z+3, r1	; 0x03
    4d30:	12 82       	std	Z+2, r1	; 0x02
    4d32:	c0 91 46 06 	lds	r28, 0x0646
    4d36:	d0 91 47 06 	lds	r29, 0x0647
    4d3a:	20 97       	sbiw	r28, 0x00	; 0
    4d3c:	81 f4       	brne	.+32     	; 0x4d5e <free+0x3e>
    4d3e:	20 81       	ld	r18, Z
    4d40:	31 81       	ldd	r19, Z+1	; 0x01
    4d42:	28 0f       	add	r18, r24
    4d44:	39 1f       	adc	r19, r25
    4d46:	80 91 44 06 	lds	r24, 0x0644
    4d4a:	90 91 45 06 	lds	r25, 0x0645
    4d4e:	82 17       	cp	r24, r18
    4d50:	93 07       	cpc	r25, r19
    4d52:	79 f5       	brne	.+94     	; 0x4db2 <free+0x92>
    4d54:	f0 93 45 06 	sts	0x0645, r31
    4d58:	e0 93 44 06 	sts	0x0644, r30
    4d5c:	6d c0       	rjmp	.+218    	; 0x4e38 <free+0x118>
    4d5e:	de 01       	movw	r26, r28
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	ae 17       	cp	r26, r30
    4d66:	bf 07       	cpc	r27, r31
    4d68:	50 f4       	brcc	.+20     	; 0x4d7e <free+0x5e>
    4d6a:	12 96       	adiw	r26, 0x02	; 2
    4d6c:	4d 91       	ld	r20, X+
    4d6e:	5c 91       	ld	r21, X
    4d70:	13 97       	sbiw	r26, 0x03	; 3
    4d72:	9d 01       	movw	r18, r26
    4d74:	41 15       	cp	r20, r1
    4d76:	51 05       	cpc	r21, r1
    4d78:	09 f1       	breq	.+66     	; 0x4dbc <free+0x9c>
    4d7a:	da 01       	movw	r26, r20
    4d7c:	f3 cf       	rjmp	.-26     	; 0x4d64 <free+0x44>
    4d7e:	b3 83       	std	Z+3, r27	; 0x03
    4d80:	a2 83       	std	Z+2, r26	; 0x02
    4d82:	40 81       	ld	r20, Z
    4d84:	51 81       	ldd	r21, Z+1	; 0x01
    4d86:	84 0f       	add	r24, r20
    4d88:	95 1f       	adc	r25, r21
    4d8a:	8a 17       	cp	r24, r26
    4d8c:	9b 07       	cpc	r25, r27
    4d8e:	71 f4       	brne	.+28     	; 0x4dac <free+0x8c>
    4d90:	8d 91       	ld	r24, X+
    4d92:	9c 91       	ld	r25, X
    4d94:	11 97       	sbiw	r26, 0x01	; 1
    4d96:	84 0f       	add	r24, r20
    4d98:	95 1f       	adc	r25, r21
    4d9a:	02 96       	adiw	r24, 0x02	; 2
    4d9c:	91 83       	std	Z+1, r25	; 0x01
    4d9e:	80 83       	st	Z, r24
    4da0:	12 96       	adiw	r26, 0x02	; 2
    4da2:	8d 91       	ld	r24, X+
    4da4:	9c 91       	ld	r25, X
    4da6:	13 97       	sbiw	r26, 0x03	; 3
    4da8:	93 83       	std	Z+3, r25	; 0x03
    4daa:	82 83       	std	Z+2, r24	; 0x02
    4dac:	21 15       	cp	r18, r1
    4dae:	31 05       	cpc	r19, r1
    4db0:	29 f4       	brne	.+10     	; 0x4dbc <free+0x9c>
    4db2:	f0 93 47 06 	sts	0x0647, r31
    4db6:	e0 93 46 06 	sts	0x0646, r30
    4dba:	3e c0       	rjmp	.+124    	; 0x4e38 <free+0x118>
    4dbc:	d9 01       	movw	r26, r18
    4dbe:	13 96       	adiw	r26, 0x03	; 3
    4dc0:	fc 93       	st	X, r31
    4dc2:	ee 93       	st	-X, r30
    4dc4:	12 97       	sbiw	r26, 0x02	; 2
    4dc6:	4d 91       	ld	r20, X+
    4dc8:	5d 91       	ld	r21, X+
    4dca:	a4 0f       	add	r26, r20
    4dcc:	b5 1f       	adc	r27, r21
    4dce:	ea 17       	cp	r30, r26
    4dd0:	fb 07       	cpc	r31, r27
    4dd2:	79 f4       	brne	.+30     	; 0x4df2 <free+0xd2>
    4dd4:	80 81       	ld	r24, Z
    4dd6:	91 81       	ldd	r25, Z+1	; 0x01
    4dd8:	84 0f       	add	r24, r20
    4dda:	95 1f       	adc	r25, r21
    4ddc:	02 96       	adiw	r24, 0x02	; 2
    4dde:	d9 01       	movw	r26, r18
    4de0:	11 96       	adiw	r26, 0x01	; 1
    4de2:	9c 93       	st	X, r25
    4de4:	8e 93       	st	-X, r24
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	13 96       	adiw	r26, 0x03	; 3
    4dec:	9c 93       	st	X, r25
    4dee:	8e 93       	st	-X, r24
    4df0:	12 97       	sbiw	r26, 0x02	; 2
    4df2:	e0 e0       	ldi	r30, 0x00	; 0
    4df4:	f0 e0       	ldi	r31, 0x00	; 0
    4df6:	8a 81       	ldd	r24, Y+2	; 0x02
    4df8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfa:	00 97       	sbiw	r24, 0x00	; 0
    4dfc:	19 f0       	breq	.+6      	; 0x4e04 <free+0xe4>
    4dfe:	fe 01       	movw	r30, r28
    4e00:	ec 01       	movw	r28, r24
    4e02:	f9 cf       	rjmp	.-14     	; 0x4df6 <free+0xd6>
    4e04:	ce 01       	movw	r24, r28
    4e06:	02 96       	adiw	r24, 0x02	; 2
    4e08:	28 81       	ld	r18, Y
    4e0a:	39 81       	ldd	r19, Y+1	; 0x01
    4e0c:	82 0f       	add	r24, r18
    4e0e:	93 1f       	adc	r25, r19
    4e10:	20 91 44 06 	lds	r18, 0x0644
    4e14:	30 91 45 06 	lds	r19, 0x0645
    4e18:	28 17       	cp	r18, r24
    4e1a:	39 07       	cpc	r19, r25
    4e1c:	69 f4       	brne	.+26     	; 0x4e38 <free+0x118>
    4e1e:	30 97       	sbiw	r30, 0x00	; 0
    4e20:	29 f4       	brne	.+10     	; 0x4e2c <free+0x10c>
    4e22:	10 92 47 06 	sts	0x0647, r1
    4e26:	10 92 46 06 	sts	0x0646, r1
    4e2a:	02 c0       	rjmp	.+4      	; 0x4e30 <free+0x110>
    4e2c:	13 82       	std	Z+3, r1	; 0x03
    4e2e:	12 82       	std	Z+2, r1	; 0x02
    4e30:	d0 93 45 06 	sts	0x0645, r29
    4e34:	c0 93 44 06 	sts	0x0644, r28
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	08 95       	ret

00004e3e <memset>:
    4e3e:	dc 01       	movw	r26, r24
    4e40:	01 c0       	rjmp	.+2      	; 0x4e44 <memset+0x6>
    4e42:	6d 93       	st	X+, r22
    4e44:	41 50       	subi	r20, 0x01	; 1
    4e46:	50 40       	sbci	r21, 0x00	; 0
    4e48:	e0 f7       	brcc	.-8      	; 0x4e42 <memset+0x4>
    4e4a:	08 95       	ret

00004e4c <_exit>:
    4e4c:	f8 94       	cli

00004e4e <__stop_program>:
    4e4e:	ff cf       	rjmp	.-2      	; 0x4e4e <__stop_program>
