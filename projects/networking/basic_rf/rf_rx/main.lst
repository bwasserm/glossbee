   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 309               		.section	.rodata.str1.1,"aMS",@progbits,1
 310               	.LC0:
 311 0000 5265 6365 		.string	"Receiver\r"
 311      6976 6572 
 311      0D00 
 312               	.LC1:
 313 000a 5761 6974 		.string	"Waiting for packet...\r"
 313      696E 6720 
 313      666F 7220 
 313      7061 636B 
 313      6574 2E2E 
 314               	.LC2:
 315 0021 7061 636B 		.string	"packet received\r"
 315      6574 2072 
 315      6563 6569 
 315      7665 640D 
 315      00
 316               	.LC3:
 317 0032 5345 514E 		.string	"SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n["
 317      554D 3A20 
 317      2564 2020 
 317      5352 4341 
 317      4444 523A 
 318               	.LC4:
 319 0058 5D0D 0A0D 		.string	"]\r\n\r"
 319      00
 320               	.LC5:
 321 005d 4352 4320 		.string	"CRC failed!\r"
 321      6661 696C 
 321      6564 210D 
 321      00
 322               		.section	.text.startup,"ax",@progbits
 324               	.global	main
 326               	main:
 327               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <basic_rf.h>
  30:main.c        **** #include <avr/sleep.h>
  31:main.c        **** #include <avr/wdt.h>
  32:main.c        **** #include <avr/eeprom.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** RF_TX_INFO rfTxInfo;
  37:main.c        **** RF_RX_INFO rfRxInfo;
  38:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  39:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  40:main.c        **** //------------------------------------------------------------------------------
  41:main.c        **** //      void main (void)
  42:main.c        **** //
  43:main.c        **** //      DESCRIPTION:
  44:main.c        **** //              Startup routine and main loop
  45:main.c        **** //------------------------------------------------------------------------------
  46:main.c        **** int main (void)
  47:main.c        **** {
 329               	.LM0:
 330               	.LFBB1:
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
  48:main.c        ****     uint8_t cnt,i,length,n;
  49:main.c        **** 
  50:main.c        ****     nrk_setup_ports(); 
 336               	.LM1:
 337 0000 0E94 0000 		call nrk_setup_ports
  51:main.c        ****     nrk_setup_uart (UART_BAUDRATE_115K2);
 339               	.LM2:
 340 0004 80E1      		ldi r24,lo8(16)
 341 0006 90E0      		ldi r25,0
 342 0008 0E94 0000 		call nrk_setup_uart
  52:main.c        ****  
  53:main.c        ****     printf( "Receiver\r\n" ); 
 344               	.LM3:
 345 000c 80E0      		ldi r24,lo8(.LC0)
 346 000e 90E0      		ldi r25,hi8(.LC0)
 347 0010 0E94 0000 		call puts
  54:main.c        ****     nrk_led_clr(0); 
 349               	.LM4:
 350 0014 80E0      		ldi r24,0
 351 0016 90E0      		ldi r25,0
 352 0018 0E94 0000 		call nrk_led_clr
  55:main.c        ****     nrk_led_clr(1); 
 354               	.LM5:
 355 001c 81E0      		ldi r24,lo8(1)
 356 001e 90E0      		ldi r25,0
 357 0020 0E94 0000 		call nrk_led_clr
  56:main.c        ****     nrk_led_clr(2); 
 359               	.LM6:
 360 0024 82E0      		ldi r24,lo8(2)
 361 0026 90E0      		ldi r25,0
 362 0028 0E94 0000 		call nrk_led_clr
  57:main.c        ****     nrk_led_clr(3); 
 364               	.LM7:
 365 002c 83E0      		ldi r24,lo8(3)
 366 002e 90E0      		ldi r25,0
 367 0030 0E94 0000 		call nrk_led_clr
  58:main.c        **** 
  59:main.c        ****     rfRxInfo.pPayload = rx_buf;
 369               	.LM8:
 370 0034 80E0      		ldi r24,lo8(rx_buf)
 371 0036 90E0      		ldi r25,hi8(rx_buf)
 372 0038 9093 0000 		sts rfRxInfo+5+1,r25
 373 003c 8093 0000 		sts rfRxInfo+5,r24
  60:main.c        ****     rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
 375               	.LM9:
 376 0040 84E7      		ldi r24,lo8(116)
 377 0042 8093 0000 		sts rfRxInfo+4,r24
  61:main.c        ****     rfRxInfo.ackRequest= 0;
 379               	.LM10:
 380 0046 1092 0000 		sts rfRxInfo+7,__zero_reg__
  62:main.c        **** 		nrk_int_enable();
 382               	.LM11:
 383 004a 0E94 0000 		call nrk_int_enable
  63:main.c        ****     rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
 385               	.LM12:
 386 004e 25E1      		ldi r18,lo8(21)
 387 0050 32E1      		ldi r19,lo8(18)
 388 0052 40E2      		ldi r20,lo8(32)
 389 0054 54E2      		ldi r21,lo8(36)
 390 0056 6DE0      		ldi r22,lo8(13)
 391 0058 80E0      		ldi r24,lo8(rfRxInfo)
 392 005a 90E0      		ldi r25,hi8(rfRxInfo)
 393 005c 0E94 0000 		call rf_init
  64:main.c        ****     printf( "Waiting for packet...\r\n" );
 395               	.LM13:
 396 0060 80E0      		ldi r24,lo8(.LC1)
 397 0062 90E0      		ldi r25,hi8(.LC1)
 398 0064 0E94 0000 		call puts
  65:main.c        ****     nrk_led_set(ORANGE_LED);
 400               	.LM14:
 401 0068 82E0      		ldi r24,lo8(2)
 402 006a 90E0      		ldi r25,0
 403 006c 0E94 0000 		call nrk_led_set
  66:main.c        ****     
  67:main.c        **** 		while(1){
  68:main.c        **** 				nrk_led_clr(GREEN_LED);
  69:main.c        ****         /*
  70:main.c        **** 				rf_init (&rfRxInfo, 13, 0x2420, 0x1215);
  71:main.c        ****         rf_set_rx (&rfRxInfo, 13); 	
  72:main.c        **** 				*/
  73:main.c        **** 
  74:main.c        **** 				rf_polling_rx_on();
  75:main.c        ****         while ((n = rf_rx_check_sfd()) == 0)
  76:main.c        **** 						continue; 
  77:main.c        **** 				nrk_led_set(GREEN_LED);
  78:main.c        ****  				if (n != 0) {
  79:main.c        ****         		n = 0;
  80:main.c        ****         		// Packet on its way
  81:main.c        ****     				cnt=0;
  82:main.c        ****         		while ((n = rf_polling_rx_packet ()) == 0) {
  83:main.c        **** 								if (cnt > 50) {
  84:main.c        ****                 		//printf( "PKT Timeout\r\n" );
  85:main.c        **** 										break;		// huge timeout as failsafe
  86:main.c        **** 								}
  87:main.c        ****         				halWait(10000);
  88:main.c        **** 								cnt++;
  89:main.c        **** 						}
  90:main.c        ****     		}
  91:main.c        **** 
  92:main.c        **** 				//rf_rx_off();
  93:main.c        ****     		if (n == 1) {
  94:main.c        ****     				nrk_led_clr(RED_LED);
  95:main.c        ****         		// CRC and checksum passed
  96:main.c        **** 						printf("packet received\r\n");
  97:main.c        **** 						printf("SEQNUM: %d  SRCADDR: 0x%x  SNR: %d\r\n[",
 405               	.LM15:
 406 0070 C0E0      		ldi r28,lo8(.LC3)
 407 0072 D0E0      		ldi r29,hi8(.LC3)
 408               	.L2:
  68:main.c        **** 				nrk_led_clr(GREEN_LED);
 410               	.LM16:
 411 0074 81E0      		ldi r24,lo8(1)
 412 0076 90E0      		ldi r25,0
 413 0078 0E94 0000 		call nrk_led_clr
  74:main.c        **** 				rf_polling_rx_on();
 415               	.LM17:
 416 007c 0E94 0000 		call rf_polling_rx_on
 417               	.L4:
 418               	.LBB2:
  75:main.c        ****         while ((n = rf_rx_check_sfd()) == 0)
 420               	.LM18:
 421 0080 0E94 0000 		call rf_rx_check_sfd
 422 0084 8823      		tst r24
 423 0086 01F0      		breq .L4
 424               	.LBE2:
  77:main.c        **** 				nrk_led_set(GREEN_LED);
 426               	.LM19:
 427 0088 81E0      		ldi r24,lo8(1)
 428 008a 90E0      		ldi r25,0
 429 008c 0E94 0000 		call nrk_led_set
 430 0090 14E3      		ldi r17,lo8(52)
 431               	.L5:
  82:main.c        ****         		while ((n = rf_polling_rx_packet ()) == 0) {
 433               	.LM20:
 434 0092 0E94 0000 		call rf_rx_packet_nonblock
 435 0096 8111      		cpse r24,__zero_reg__
 436 0098 00C0      		rjmp .L15
 437 009a 1150      		subi r17,lo8(-(-1))
  83:main.c        **** 								if (cnt > 50) {
 439               	.LM21:
 440 009c 01F0      		breq .L2
  87:main.c        ****         				halWait(10000);
 442               	.LM22:
 443 009e 80E1      		ldi r24,lo8(16)
 444 00a0 97E2      		ldi r25,lo8(39)
 445 00a2 0E94 0000 		call halWait
 446 00a6 00C0      		rjmp .L5
 447               	.L15:
  93:main.c        ****     		if (n == 1) {
 449               	.LM23:
 450 00a8 8130      		cpi r24,lo8(1)
 451 00aa 01F0      		breq .+2
 452 00ac 00C0      		rjmp .L8
  94:main.c        ****     				nrk_led_clr(RED_LED);
 454               	.LM24:
 455 00ae 80E0      		ldi r24,0
 456 00b0 90E0      		ldi r25,0
 457 00b2 0E94 0000 		call nrk_led_clr
  96:main.c        **** 						printf("packet received\r\n");
 459               	.LM25:
 460 00b6 80E0      		ldi r24,lo8(.LC2)
 461 00b8 90E0      		ldi r25,hi8(.LC2)
 462 00ba 0E94 0000 		call puts
 464               	.LM26:
 465 00be 2091 0000 		lds r18,rfRxInfo+8
 466 00c2 822F      		mov r24,r18
 467 00c4 9927      		clr r25
 468 00c6 87FD      		sbrc r24,7
 469 00c8 9095      		com r25
 470 00ca 9F93      		push r25
 471 00cc 2F93      		push r18
 472 00ce 8091 0000 		lds r24,rfRxInfo+2
 473 00d2 8F93      		push r24
 474 00d4 8091 0000 		lds r24,rfRxInfo+1
 475 00d8 8F93      		push r24
 476 00da 8091 0000 		lds r24,rfRxInfo
 477 00de 1F92      		push __zero_reg__
 478 00e0 8F93      		push r24
 479 00e2 DF93      		push r29
 480 00e4 CF93      		push r28
 481 00e6 0E94 0000 		call printf
  98:main.c        **** 								rfRxInfo.seqNumber, rfRxInfo.srcAddr, rfRxInfo.rssi);
  99:main.c        ****         	
 100:main.c        **** 						for(i=0; i<rfRxInfo.length; i++ )
 483               	.LM27:
 484 00ea 8DB7      		in r24,__SP_L__
 485 00ec 9EB7      		in r25,__SP_H__
 486 00ee 0896      		adiw r24,8
 487 00f0 0FB6      		in __tmp_reg__,__SREG__
 488 00f2 F894      		cli
 489 00f4 9EBF      		out __SP_H__,r25
 490 00f6 0FBE      		out __SREG__,__tmp_reg__
 491 00f8 8DBF      		out __SP_L__,r24
 492 00fa 10E0      		ldi r17,0
 493               	.L9:
 495               	.LM28:
 496 00fc 812F      		mov r24,r17
 497 00fe 90E0      		ldi r25,0
 498 0100 2091 0000 		lds r18,rfRxInfo+3
 499 0104 3327      		clr r19
 500 0106 27FD      		sbrc r18,7
 501 0108 3095      		com r19
 502 010a 8217      		cp r24,r18
 503 010c 9307      		cpc r25,r19
 504 010e 04F4      		brge .L16
 101:main.c        **** 								printf( "%c", rfRxInfo.pPayload[i]);
 506               	.LM29:
 507 0110 E091 0000 		lds r30,rfRxInfo+5
 508 0114 F091 0000 		lds r31,rfRxInfo+5+1
 509 0118 E80F      		add r30,r24
 510 011a F91F      		adc r31,r25
 511 011c 8081      		ld r24,Z
 512 011e 90E0      		ldi r25,0
 513 0120 0E94 0000 		call putchar
 100:main.c        **** 						for(i=0; i<rfRxInfo.length; i++ )
 515               	.LM30:
 516 0124 1F5F      		subi r17,lo8(-(1))
 517 0126 00C0      		rjmp .L9
 518               	.L16:
 102:main.c        **** 						printf( "]\r\n\r\n" );
 520               	.LM31:
 521 0128 80E0      		ldi r24,lo8(.LC4)
 522 012a 90E0      		ldi r25,hi8(.LC4)
 523 012c 0E94 0000 		call puts
 524 0130 00C0      		rjmp .L2
 525               	.L8:
 103:main.c        ****     		} 
 104:main.c        **** 				else if(n != 0){ 
 105:main.c        **** 						printf( "CRC failed!\r\n" ); nrk_led_set(RED_LED); 
 527               	.LM32:
 528 0132 80E0      		ldi r24,lo8(.LC5)
 529 0134 90E0      		ldi r25,hi8(.LC5)
 530 0136 0E94 0000 		call puts
 531 013a 80E0      		ldi r24,0
 532 013c 90E0      		ldi r25,0
 533 013e 0E94 0000 		call nrk_led_set
 534 0142 00C0      		rjmp .L2
 539               	.Lscope1:
 541               		.stabd	78,0,0
 542               		.comm	rx_buf,116,1
 543               		.comm	tx_buf,116,1
 544               		.comm	rfRxInfo,12,1
 545               		.comm	rfTxInfo,7,1
 546               		.comm	_nrk_signal_list,4,1
 552               		.text
 554               	.Letext0:
 555               		.ident	"GCC: (GNU) 4.8.2"
 556               	.global __do_copy_data
 557               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSxJ3Fa.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSxJ3Fa.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSxJ3Fa.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSxJ3Fa.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccSxJ3Fa.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSxJ3Fa.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSxJ3Fa.s:326    .text.startup:0000000000000000 main
                            *COM*:0000000000000074 rx_buf
                            *COM*:000000000000000c rfRxInfo
                            *COM*:0000000000000074 tx_buf
                            *COM*:0000000000000007 rfTxInfo
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_setup_ports
nrk_setup_uart
puts
nrk_led_clr
nrk_int_enable
rf_init
nrk_led_set
rf_polling_rx_on
rf_rx_check_sfd
rf_rx_packet_nonblock
halWait
printf
putchar
__do_copy_data
__do_clear_bss
