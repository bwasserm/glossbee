
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800200  00005c58  00005cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f5  00800360  00800360  00005e4c  2**0
                  ALLOC
  3 .stab         00014544  00000000  00000000  00005e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009a7f  00000000  00000000  0001a390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00023e0f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__ctors_end>
       4:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__vector_1>
       8:	0c 94 33 27 	jmp	0x4e66	; 0x4e66 <__vector_2>
       c:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__vector_3>
      10:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      14:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      18:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      1c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      20:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      24:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <__vector_9>
      28:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      2c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      30:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      34:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__vector_13>
      38:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      3c:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <__vector_13>
      40:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      44:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      48:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      4c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      50:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      54:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      58:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      5c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      60:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      64:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_25>
      68:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      6c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      70:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      74:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      78:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      7c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      80:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__vector_32>
      84:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      88:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      8c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      90:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      94:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      98:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      9c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      a0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      a4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      a8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      ac:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      b0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      b4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      b8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      bc:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      c0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      c4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      c8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      cc:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      d0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      d4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      d8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      dc:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      e0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
      e4:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_57>
      e8:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_58>
      ec:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_59>
      f0:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_60>
      f4:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_61>
      f8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__vector_62>
      fc:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_63>
     100:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_64>
     104:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     108:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     10c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     110:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     114:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     118:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     11c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__bad_interrupt>
     120:	ec 0e       	add	r14, r28
     122:	f7 0e       	add	r15, r23
     124:	02 0f       	add	r16, r18
     126:	0d 0f       	add	r16, r29
     128:	18 0f       	add	r17, r24
     12a:	23 0f       	add	r18, r19
     12c:	2e 0f       	add	r18, r30
     12e:	4d 0f       	add	r20, r29
     130:	59 0f       	add	r21, r25
     132:	65 0f       	add	r22, r21
     134:	71 0f       	add	r23, r17
     136:	7d 0f       	add	r23, r29
     138:	89 0f       	add	r24, r25
     13a:	89 0f       	add	r24, r25
     13c:	a7 0f       	add	r26, r23
     13e:	a9 0f       	add	r26, r25
     140:	ab 0f       	add	r26, r27
     142:	ad 0f       	add	r26, r29
     144:	af 0f       	add	r26, r31
     146:	b1 0f       	add	r27, r17
     148:	b3 0f       	add	r27, r19
     14a:	d1 0f       	add	r29, r17
     14c:	f1 0f       	add	r31, r17
     14e:	11 10       	cpse	r1, r1
     150:	31 10       	cpse	r3, r1
     152:	51 10       	cpse	r5, r1
     154:	71 10       	cpse	r7, r1
     156:	91 10       	cpse	r9, r1
     158:	c7 10       	cpse	r12, r7
     15a:	d3 10       	cpse	r13, r3
     15c:	df 10       	cpse	r13, r15
     15e:	eb 10       	cpse	r14, r11
     160:	f7 10       	cpse	r15, r7
     162:	03 11       	cpse	r16, r3
     164:	0f 11       	cpse	r16, r15
     166:	27 11       	cpse	r18, r7
     168:	32 11       	cpse	r19, r2
     16a:	3d 11       	cpse	r19, r13
     16c:	48 11       	cpse	r20, r8
     16e:	53 11       	cpse	r21, r3
     170:	5e 11       	cpse	r21, r14
     172:	69 11       	cpse	r22, r9
     174:	03 15       	cp	r16, r3
     176:	09 15       	cp	r16, r9
     178:	0c 15       	cp	r16, r12
     17a:	0f 15       	cp	r16, r15
     17c:	12 15       	cp	r17, r2
     17e:	15 15       	cp	r17, r5
     180:	1b 15       	cp	r17, r11
     182:	18 15       	cp	r17, r8
     184:	1e 15       	cp	r17, r14
     186:	21 15       	cp	r18, r1
     188:	24 15       	cp	r18, r4
     18a:	2d 15       	cp	r18, r13
     18c:	30 15       	cp	r19, r0
     18e:	33 15       	cp	r19, r3
     190:	36 15       	cp	r19, r6
     192:	2a 15       	cp	r18, r10
     194:	00 15       	cp	r16, r0
     196:	06 15       	cp	r16, r6
     198:	39 15       	cp	r19, r9
     19a:	3c 15       	cp	r19, r12
     19c:	27 15       	cp	r18, r7
     19e:	fd 14       	cp	r15, r13
     1a0:	d2 15       	cp	r29, r2
     1a2:	d5 15       	cp	r29, r5
     1a4:	e0 15       	cp	r30, r0
     1a6:	e5 15       	cp	r30, r5
     1a8:	ec 15       	cp	r30, r12
     1aa:	f5 15       	cp	r31, r5
     1ac:	f8 15       	cp	r31, r8
     1ae:	fd 15       	cp	r31, r13
     1b0:	04 16       	cp	r0, r20
     1b2:	0d 16       	cp	r0, r29

000001b4 <__c.3394>:
     1b4:	4f 53 20 74 69 63 6b 20 74 69 6d 65 3a 20 00        OS tick time: .

000001c3 <__c.3384>:
     1c3:	4d 61 78 20 77 61 6b 65 75 70 20 74 69 6d 65 3a     Max wakeup time:
     1d3:	20 00                                                .

000001d5 <__c.3382>:
     1d5:	4e 4f 20 50 4b 54 0d 0a 00                          NO PKT...

000001de <__c.3380>:
     1de:	4f 4b 20 20 52 53 53 49 3a 00                       OK  RSSI:.

000001e8 <__c.3378>:
     1e8:	52 58 20 73 74 61 74 75 73 3a 20 00                 RX status: .

000001f4 <__c.3376>:
     1f4:	4e 4f 4e 45 0d 0a 00                                NONE...

000001fb <__c.3374>:
     1fb:	4f 4b 0d 0a 00                                      OK...

00000200 <__c.3372>:
     200:	54 58 20 73 74 61 74 75 73 3a 20 00                 TX status: .

0000020c <__c.3370>:
     20c:	53 65 6c 66 20 54 65 73 74 20 43 79 63 6c 65 3a     Self Test Cycle:
     21c:	20 00                                                .

0000021e <__c.3368>:
     21e:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     22e:	72 72 6f 72 0d 0a 00                                rror...

00000235 <__c.3347>:
     235:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 62 6d     ERROR setting bm
     245:	61 63 20 72 61 74 65 0d 0a 00                       ac rate...

0000024f <__c.3637>:
     24f:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     25f:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

0000026b <__c.3611>:
     26b:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     27b:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     28b:	0d 0a 00                                            ...

0000028e <__c.3609>:
     28e:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     29e:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     2ae:	74 0d 0a 00                                         t...

000002b2 <__c.3593>:
     2b2:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2c2:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     2d2:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000002de <__c.3591>:
     2de:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2ee:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     2fe:	61 69 6c 65 64 0d 0a 00                             ailed...

00000306 <__c.3589>:
     306:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     316:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     326:	61 69 6c 65 64 0d 0a 00                             ailed...

0000032e <__c.3047>:
     32e:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     33e:	65 64 0d 0a 00                                      ed...

00000343 <__c.3307>:
     343:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000034a <__c.3304>:
     34a:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000359 <__c.3301>:
     359:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

0000036a <__c.3298>:
     36a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     37a:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000385 <__c.3295>:
     385:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     395:	20 53 69 67 6e 61 6c 00                              Signal.

0000039d <__c.3292>:
     39d:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     3ad:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003bd <__c.3289>:
     3bd:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     3cd:	72 6f 72 00                                         ror.

000003d1 <__c.3286>:
     3d1:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003e2 <__c.3283>:
     3e2:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3f2:	61 72 74 00                                         art.

000003f6 <__c.3280>:
     3f6:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000405 <__c.3277>:
     405:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     415:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000420 <__c.3274>:
     420:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000042c <__c.3271>:
     42c:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     43c:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     44c:	20 6f 6b 3f 00                                       ok?.

00000451 <__c.3268>:
     451:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     461:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000046f <__c.3265>:
     46f:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     47f:	72 74 00                                            rt.

00000482 <__c.3262>:
     482:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     492:	49 44 00                                            ID.

00000495 <__c.3259>:
     495:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     4a5:	20 57 61 6b 65 75 70 00                              Wakeup.

000004ad <__c.3256>:
     4ad:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4bd:	6c 61 74 65 64 00                                   lated.

000004c3 <__c.3253>:
     4c3:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     4d3:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000004de <__c.3250>:
     4de:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4ee:	69 6e 74 65 72 00                                   inter.

000004f4 <__c.3247>:
     4f4:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     504:	6c 6f 77 00                                         low.

00000508 <__c.3244>:
     508:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     518:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     528:	6e 6f 75 67 68 21 00                                nough!.

0000052f <__c.3240>:
     52f:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     53f:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     54f:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     55f:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000056b <__c.3237>:
     56b:	29 3a 20 00                                         ): .

0000056f <__c.3235>:
     56f:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000057b <__c.3172>:
     57b:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000058a <__c.2103>:
     58a:	45 46 47 65 66 67 00                                EFGefg.

00000591 <__c.2097>:
     591:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000005a2 <__ctors_end>:
     5a2:	11 24       	eor	r1, r1
     5a4:	1f be       	out	0x3f, r1	; 63
     5a6:	cf ef       	ldi	r28, 0xFF	; 255
     5a8:	d1 e4       	ldi	r29, 0x41	; 65
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	cd bf       	out	0x3d, r28	; 61

000005ae <__do_copy_data>:
     5ae:	13 e0       	ldi	r17, 0x03	; 3
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b2 e0       	ldi	r27, 0x02	; 2
     5b4:	e8 e5       	ldi	r30, 0x58	; 88
     5b6:	fc e5       	ldi	r31, 0x5C	; 92
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	0b bf       	out	0x3b, r16	; 59
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <__do_copy_data+0x14>
     5be:	07 90       	elpm	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	a0 36       	cpi	r26, 0x60	; 96
     5c4:	b1 07       	cpc	r27, r17
     5c6:	d9 f7       	brne	.-10     	; 0x5be <__do_copy_data+0x10>

000005c8 <__do_clear_bss>:
     5c8:	18 e0       	ldi	r17, 0x08	; 8
     5ca:	a0 e6       	ldi	r26, 0x60	; 96
     5cc:	b3 e0       	ldi	r27, 0x03	; 3
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <.do_clear_bss_start>

000005d0 <.do_clear_bss_loop>:
     5d0:	1d 92       	st	X+, r1

000005d2 <.do_clear_bss_start>:
     5d2:	a5 35       	cpi	r26, 0x55	; 85
     5d4:	b1 07       	cpc	r27, r17
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <.do_clear_bss_loop>
     5d8:	0e 94 8c 28 	call	0x5118	; 0x5118 <main>
     5dc:	0c 94 2a 2e 	jmp	0x5c54	; 0x5c54 <_exit>

000005e0 <__bad_interrupt>:
     5e0:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__vector_default>

000005e4 <rx_task>:

  return 0;
}

void rx_task ()
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <rx_task+0x6>
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
  nrk_time_t check_period;
  printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     5ee:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <nrk_get_pid>
     5f2:	1f 92       	push	r1
     5f4:	8f 93       	push	r24
     5f6:	8b e5       	ldi	r24, 0x5B	; 91
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>

  // init bmac on channel 25 
  bmac_init (25);
     602:	89 e1       	ldi	r24, 0x19	; 25
     604:	0e 94 7d 05 	call	0xafa	; 0xafa <bmac_init>
  rx_data_ok=0;
     608:	10 92 3a 04 	sts	0x043A, r1
  // bmac will try to receive fainter packets.  If the value is set
  // too high or too low performance will suffer greatly.
  // bmac_set_cca_thresh(-45); 


  if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
  // This sets the next RX buffer.
  // This can be called at anytime before releaseing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     614:	64 e7       	ldi	r22, 0x74	; 116
     616:	8c e0       	ldi	r24, 0x0C	; 12
     618:	96 e0       	ldi	r25, 0x06	; 6
     61a:	0e 94 6f 05 	call	0xade	; 0xade <bmac_rx_pkt_set_buffer>
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    rx_data_ok=1;
     61e:	11 e0       	ldi	r17, 0x01	; 1
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
     620:	0e 94 49 05 	call	0xa92	; 0xa92 <bmac_wait_until_rx_pkt>
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 ae 11 	call	0x235c	; 0x235c <nrk_led_set>
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     62c:	be 01       	movw	r22, r28
     62e:	6f 5f       	subi	r22, 0xFF	; 255
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	ce 01       	movw	r24, r28
     634:	02 96       	adiw	r24, 0x02	; 2
     636:	0e 94 61 06 	call	0xcc2	; 0xcc2 <bmac_rx_pkt_get>
    rx_data_ok=1;
     63a:	10 93 3a 04 	sts	0x043A, r17
    rx_rssi=rssi;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	80 93 67 05 	sts	0x0567, r24
    //printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
    //for (i = 0; i < len; i++)
    //  printf ("%c", rx_buf[i]);
    //printf ("]\r\n");
    nrk_led_clr (ORANGE_LED);
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     64c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <bmac_rx_pkt_release>
     650:	e7 cf       	rjmp	.-50     	; 0x620 <rx_task+0x3c>

00000652 <tx_task>:
  nrk_sig_mask_t ret;

  iterations=0;
  ticks_min=-1;
  ticks_max=0;
  tx_data_ok=0;
     652:	10 92 68 05 	sts	0x0568, r1
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     656:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <nrk_get_pid>
     65a:	1f 92       	push	r1
     65c:	8f 93       	push	r24
     65e:	8c e6       	ldi	r24, 0x6C	; 108
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0e 94 d3 06 	call	0xda6	; 0xda6 <bmac_started>
     676:	81 11       	cpse	r24, r1
     678:	03 c0       	rjmp	.+6      	; 0x680 <tx_task+0x2e>
    nrk_wait_until_next_period ();
     67a:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>
     67e:	f9 cf       	rjmp	.-14     	; 0x672 <tx_task+0x20>

  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     680:	0e 94 05 06 	call	0xc0a	; 0xc0a <bmac_get_tx_done_signal>
     684:	c8 2f       	mov	r28, r24
  nrk_signal_register (tx_done_signal);
     686:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>

    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     68a:	c1 2c       	mov	r12, r1
     68c:	d1 2c       	mov	r13, r1
     68e:	76 01       	movw	r14, r12
     690:	c3 94       	inc	r12
     692:	04 c0       	rjmp	.+8      	; 0x69c <tx_task+0x4a>
     694:	cc 0c       	add	r12, r12
     696:	dd 1c       	adc	r13, r13
     698:	ee 1c       	adc	r14, r14
     69a:	ff 1c       	adc	r15, r15
     69c:	ca 95       	dec	r28
     69e:	d2 f7       	brpl	.-12     	; 0x694 <tx_task+0x42>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     6a0:	41 2c       	mov	r4, r1
     6a2:	51 2c       	mov	r5, r1
     6a4:	32 01       	movw	r6, r4
     6a6:	43 94       	inc	r4
     6a8:	c1 14       	cp	r12, r1
     6aa:	d1 04       	cpc	r13, r1
     6ac:	e1 04       	cpc	r14, r1
     6ae:	f1 04       	cpc	r15, r1
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <tx_task+0x66>
     6b2:	41 2c       	mov	r4, r1
     6b4:	51 2c       	mov	r5, r1
     6b6:	32 01       	movw	r6, r4
  uint16_t iterations;
  uint16_t nrk_max_sleep_wakeup_time;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;

  iterations=0;
     6b8:	00 e0       	ldi	r16, 0x00	; 0
     6ba:	10 e0       	ldi	r17, 0x00	; 0
  ticks_min=-1;
  ticks_max=0;
     6bc:	a1 2c       	mov	r10, r1
     6be:	b1 2c       	mov	r11, r1
  uint16_t nrk_max_sleep_wakeup_time;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;

  iterations=0;
  ticks_min=-1;
     6c0:	22 24       	eor	r2, r2
     6c2:	2a 94       	dec	r2
     6c4:	32 2c       	mov	r3, r2
    //nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (GREEN_LED);
    nrk_wait_until_next_period ();

   nrk_kprintf( PSTR( "Self Test Cycle: ") );
   printf( "%d\r\n",iterations);
     6c6:	c7 e6       	ldi	r28, 0x67	; 103
     6c8:	d2 e0       	ldi	r29, 0x02	; 2
     6ca:	c8 01       	movw	r24, r16
     6cc:	99 27       	eor	r25, r25
  nrk_signal_register (tx_done_signal);

  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "This is a test %d", cnt);
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	ad e7       	ldi	r26, 0x7D	; 125
     6d4:	b2 e0       	ldi	r27, 0x02	; 2
     6d6:	bf 93       	push	r27
     6d8:	af 93       	push	r26
     6da:	a4 e8       	ldi	r26, 0x84	; 132
     6dc:	b6 e0       	ldi	r27, 0x06	; 6
     6de:	bf 93       	push	r27
     6e0:	af 93       	push	r26
     6e2:	0e 94 16 2c 	call	0x582c	; 0x582c <sprintf>
    cnt++;
    nrk_led_set (GREEN_LED);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 ae 11 	call	0x235c	; 0x235c <nrk_led_set>
    // For this there is no need to register  
    // val=bmac_tx_packet(tx_buf, strlen(tx_buf));

    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
     6ee:	a4 e8       	ldi	r26, 0x84	; 132
     6f0:	b6 e0       	ldi	r27, 0x06	; 6
     6f2:	0d 90       	ld	r0, X+
     6f4:	00 20       	and	r0, r0
     6f6:	e9 f7       	brne	.-6      	; 0x6f2 <tx_task+0xa0>
     6f8:	bd 01       	movw	r22, r26
     6fa:	61 50       	subi	r22, 0x01	; 1
     6fc:	71 09       	sbc	r23, r1
     6fe:	64 58       	subi	r22, 0x84	; 132
     700:	76 40       	sbci	r23, 0x06	; 6
     702:	84 e8       	ldi	r24, 0x84	; 132
     704:	96 e0       	ldi	r25, 0x06	; 6
     706:	0e 94 ed 05 	call	0xbda	; 0xbda <bmac_tx_pkt_nonblocking>
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 cf 18 	call	0x319e	; 0x319e <nrk_event_wait>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     712:	64 21       	and	r22, r4
     714:	75 21       	and	r23, r5
     716:	86 21       	and	r24, r6
     718:	97 21       	and	r25, r7
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	67 2b       	or	r22, r23
     728:	68 2b       	or	r22, r24
     72a:	69 2b       	or	r22, r25
     72c:	29 f0       	breq	.+10     	; 0x738 <tx_task+0xe6>
    	nrk_kprintf (PSTR ("TX done signal error\r\n"));
     72e:	8e e1       	ldi	r24, 0x1E	; 30
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
     736:	03 c0       	rjmp	.+6      	; 0x73e <tx_task+0xec>
    else tx_data_ok=1;
     738:	b1 e0       	ldi	r27, 0x01	; 1
     73a:	b0 93 68 05 	sts	0x0568, r27
    // Task gets control again after TX complete
    //nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (GREEN_LED);
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    nrk_wait_until_next_period ();
     746:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>

   nrk_kprintf( PSTR( "Self Test Cycle: ") );
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   printf( "%d\r\n",iterations);
     752:	1f 93       	push	r17
     754:	0f 93       	push	r16
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
   iterations++;
     75e:	0f 5f       	subi	r16, 0xFF	; 255
     760:	1f 4f       	sbci	r17, 0xFF	; 255
   nrk_kprintf( PSTR( "TX status: ") );
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   if(tx_data_ok==1) nrk_kprintf( PSTR( "OK\r\n" ));
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	80 91 68 05 	lds	r24, 0x0568
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	19 f4       	brne	.+6      	; 0x780 <tx_task+0x12e>
     77a:	8b ef       	ldi	r24, 0xFB	; 251
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	02 c0       	rjmp	.+4      	; 0x784 <tx_task+0x132>
	else  nrk_kprintf( PSTR( "NONE\r\n" ));
     780:	84 ef       	ldi	r24, 0xF4	; 244
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>

   nrk_kprintf( PSTR( "RX status: ") );
     788:	88 ee       	ldi	r24, 0xE8	; 232
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   if(rx_data_ok==1) {
     790:	80 91 3a 04 	lds	r24, 0x043A
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	c9 f4       	brne	.+50     	; 0x7ca <tx_task+0x178>
		nrk_led_clr(RED_LED);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
		nrk_kprintf( PSTR( "OK  RSSI:" ));
     7a0:	8e ed       	ldi	r24, 0xDE	; 222
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
		printf( "%d\r\n",rx_rssi );
     7a8:	20 91 67 05 	lds	r18, 0x0567
     7ac:	82 2f       	mov	r24, r18
     7ae:	99 27       	eor	r25, r25
     7b0:	87 fd       	sbrc	r24, 7
     7b2:	90 95       	com	r25
     7b4:	9f 93       	push	r25
     7b6:	2f 93       	push	r18
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <tx_task+0x188>
	}
	else  {
	nrk_led_set(RED_LED);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 ae 11 	call	0x235c	; 0x235c <nrk_led_set>
	nrk_kprintf( PSTR( "NO PKT\r\n" ));
     7d2:	85 ed       	ldi	r24, 0xD5	; 213
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
	}
   rx_data_ok=0;
     7da:	10 92 3a 04 	sts	0x043A, r1
   nrk_kprintf( PSTR( "Max wakeup time: " ));
     7de:	83 ec       	ldi	r24, 0xC3	; 195
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   printf( "%d\r\n",nrk_max_sleep_wakeup_time );
     7e6:	1f 92       	push	r1
     7e8:	1f 92       	push	r1
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
   
   nrk_wait_until_next_period ();
     7f2:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>
   _nrk_set_next_wakeup(25);
     7f6:	89 e1       	ldi	r24, 0x19	; 25
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
   nrk_int_disable(); 
     7fe:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
   	_nrk_os_timer_reset();
     802:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_nrk_os_timer_reset>
   	_nrk_high_speed_timer_reset(); 
     806:	0e 94 0d 24 	call	0x481a	; 0x481a <_nrk_high_speed_timer_reset>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
   	do{
   	} while((volatile)_nrk_os_timer_get()<16);
     812:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
     816:	40 97       	sbiw	r24, 0x10	; 16
     818:	e4 f3       	brlt	.-8      	; 0x812 <tx_task+0x1c0>
   	ticks=_nrk_high_speed_timer_get(); 
     81a:	0e 94 15 24 	call	0x482a	; 0x482a <_nrk_high_speed_timer_get>
   	
	ticks=ticks/16;
     81e:	4c 01       	movw	r8, r24
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	96 94       	lsr	r9
     824:	87 94       	ror	r8
     826:	8a 95       	dec	r24
     828:	e1 f7       	brne	.-8      	; 0x822 <tx_task+0x1d0>
     82a:	82 14       	cp	r8, r2
     82c:	93 04       	cpc	r9, r3
     82e:	08 f4       	brcc	.+2      	; 0x832 <tx_task+0x1e0>
     830:	14 01       	movw	r2, r8
     832:	a8 14       	cp	r10, r8
     834:	b9 04       	cpc	r11, r9
     836:	08 f4       	brcc	.+2      	; 0x83a <tx_task+0x1e8>
     838:	54 01       	movw	r10, r8
   	if(ticks<ticks_min) ticks_min=ticks;
   	if(ticks>ticks_max) ticks_max=ticks;
   	nrk_kprintf( PSTR( "OS tick time: " ));
     83a:	84 eb       	ldi	r24, 0xB4	; 180
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   	printf( "%u %u %u\r\n\r\n",ticks_min,ticks,ticks_max);
     842:	bf 92       	push	r11
     844:	af 92       	push	r10
     846:	9f 92       	push	r9
     848:	8f 92       	push	r8
     84a:	3f 92       	push	r3
     84c:	2f 92       	push	r2
     84e:	af e8       	ldi	r26, 0x8F	; 143
     850:	b2 e0       	ldi	r27, 0x02	; 2
     852:	bf 93       	push	r27
     854:	af 93       	push	r26
     856:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
   nrk_int_enable(); 
     85a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>

   nrk_wait_until_next_period ();
     85e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>
   

  }
     862:	8d b7       	in	r24, 0x3d	; 61
     864:	9e b7       	in	r25, 0x3e	; 62
     866:	08 96       	adiw	r24, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	9e bf       	out	0x3e, r25	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	8d bf       	out	0x3d, r24	; 61
     872:	2b cf       	rjmp	.-426    	; 0x6ca <tx_task+0x78>

00000874 <nrk_create_taskset>:

}

void nrk_create_taskset ()
{
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	cf 93       	push	r28


  RX_TASK.task = rx_task;
     87e:	82 ef       	ldi	r24, 0xF2	; 242
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	90 93 fe 06 	sts	0x06FE, r25
     886:	80 93 fd 06 	sts	0x06FD, r24
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	65 e7       	ldi	r22, 0x75	; 117
     890:	75 e0       	ldi	r23, 0x05	; 5
     892:	88 ef       	ldi	r24, 0xF8	; 248
     894:	96 e0       	ldi	r25, 0x06	; 6
     896:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <nrk_task_set_stk>
  RX_TASK.prio = 2;
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	80 93 00 07 	sts	0x0700, r24
  RX_TASK.FirstActivation = TRUE;
     8a0:	c1 e0       	ldi	r28, 0x01	; 1
     8a2:	c0 93 ff 06 	sts	0x06FF, r28
  RX_TASK.Type = BASIC_TASK;
     8a6:	c0 93 01 07 	sts	0x0701, r28
  RX_TASK.SchType = PREEMPTIVE;
     8aa:	c0 93 02 07 	sts	0x0702, r28
  RX_TASK.period.secs = 1;
     8ae:	c1 2c       	mov	r12, r1
     8b0:	d1 2c       	mov	r13, r1
     8b2:	76 01       	movw	r14, r12
     8b4:	c3 94       	inc	r12
     8b6:	c0 92 03 07 	sts	0x0703, r12
     8ba:	d0 92 04 07 	sts	0x0704, r13
     8be:	e0 92 05 07 	sts	0x0705, r14
     8c2:	f0 92 06 07 	sts	0x0706, r15
  RX_TASK.period.nano_secs = 0;
     8c6:	10 92 07 07 	sts	0x0707, r1
     8ca:	10 92 08 07 	sts	0x0708, r1
     8ce:	10 92 09 07 	sts	0x0709, r1
     8d2:	10 92 0a 07 	sts	0x070A, r1
  RX_TASK.cpu_reserve.secs = 1;
     8d6:	c0 92 0b 07 	sts	0x070B, r12
     8da:	d0 92 0c 07 	sts	0x070C, r13
     8de:	e0 92 0d 07 	sts	0x070D, r14
     8e2:	f0 92 0e 07 	sts	0x070E, r15
  RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	95 e6       	ldi	r25, 0x65	; 101
     8ea:	ad ec       	ldi	r26, 0xCD	; 205
     8ec:	bd e1       	ldi	r27, 0x1D	; 29
     8ee:	80 93 0f 07 	sts	0x070F, r24
     8f2:	90 93 10 07 	sts	0x0710, r25
     8f6:	a0 93 11 07 	sts	0x0711, r26
     8fa:	b0 93 12 07 	sts	0x0712, r27
  RX_TASK.offset.secs = 0;
     8fe:	10 92 13 07 	sts	0x0713, r1
     902:	10 92 14 07 	sts	0x0714, r1
     906:	10 92 15 07 	sts	0x0715, r1
     90a:	10 92 16 07 	sts	0x0716, r1
  RX_TASK.offset.nano_secs = 0;
     90e:	10 92 17 07 	sts	0x0717, r1
     912:	10 92 18 07 	sts	0x0718, r1
     916:	10 92 19 07 	sts	0x0719, r1
     91a:	10 92 1a 07 	sts	0x071A, r1
  nrk_activate_task (&RX_TASK);
     91e:	88 ef       	ldi	r24, 0xF8	; 248
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	0e 94 40 1b 	call	0x3680	; 0x3680 <nrk_activate_task>

  TX_TASK.task = tx_task;
     926:	89 e2       	ldi	r24, 0x29	; 41
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	90 93 21 07 	sts	0x0721, r25
     92e:	80 93 20 07 	sts	0x0720, r24
  nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
     932:	40 e8       	ldi	r20, 0x80	; 128
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	67 ee       	ldi	r22, 0xE7	; 231
     938:	74 e0       	ldi	r23, 0x04	; 4
     93a:	8b e1       	ldi	r24, 0x1B	; 27
     93c:	97 e0       	ldi	r25, 0x07	; 7
     93e:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <nrk_task_set_stk>
  TX_TASK.prio = 25;
     942:	89 e1       	ldi	r24, 0x19	; 25
     944:	80 93 23 07 	sts	0x0723, r24
  TX_TASK.FirstActivation = TRUE;
     948:	c0 93 22 07 	sts	0x0722, r28
  TX_TASK.Type = BASIC_TASK;
     94c:	c0 93 24 07 	sts	0x0724, r28
  TX_TASK.SchType = PREEMPTIVE;
     950:	c0 93 25 07 	sts	0x0725, r28
  TX_TASK.period.secs = 1;
     954:	c0 92 26 07 	sts	0x0726, r12
     958:	d0 92 27 07 	sts	0x0727, r13
     95c:	e0 92 28 07 	sts	0x0728, r14
     960:	f0 92 29 07 	sts	0x0729, r15
  TX_TASK.period.nano_secs = 0;
     964:	10 92 2a 07 	sts	0x072A, r1
     968:	10 92 2b 07 	sts	0x072B, r1
     96c:	10 92 2c 07 	sts	0x072C, r1
     970:	10 92 2d 07 	sts	0x072D, r1
  TX_TASK.cpu_reserve.secs = 0;
     974:	10 92 2e 07 	sts	0x072E, r1
     978:	10 92 2f 07 	sts	0x072F, r1
     97c:	10 92 30 07 	sts	0x0730, r1
     980:	10 92 31 07 	sts	0x0731, r1
  TX_TASK.cpu_reserve.nano_secs = 0;
     984:	10 92 32 07 	sts	0x0732, r1
     988:	10 92 33 07 	sts	0x0733, r1
     98c:	10 92 34 07 	sts	0x0734, r1
     990:	10 92 35 07 	sts	0x0735, r1
  TX_TASK.offset.secs = 0;
     994:	10 92 36 07 	sts	0x0736, r1
     998:	10 92 37 07 	sts	0x0737, r1
     99c:	10 92 38 07 	sts	0x0738, r1
     9a0:	10 92 39 07 	sts	0x0739, r1
  TX_TASK.offset.nano_secs = 0;
     9a4:	10 92 3a 07 	sts	0x073A, r1
     9a8:	10 92 3b 07 	sts	0x073B, r1
     9ac:	10 92 3c 07 	sts	0x073C, r1
     9b0:	10 92 3d 07 	sts	0x073D, r1
  nrk_activate_task (&TX_TASK);
     9b4:	8b e1       	ldi	r24, 0x1B	; 27
     9b6:	97 e0       	ldi	r25, 0x07	; 7

}
     9b8:	cf 91       	pop	r28
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
  TX_TASK.period.nano_secs = 0;
  TX_TASK.cpu_reserve.secs = 0;
  TX_TASK.cpu_reserve.nano_secs = 0;
  TX_TASK.offset.secs = 0;
  TX_TASK.offset.nano_secs = 0;
  nrk_activate_task (&TX_TASK);
     9c2:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <nrk_activate_task>

000009c6 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     9c6:	08 95       	ret

000009c8 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     9c8:	64 30       	cpi	r22, 0x04	; 4
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     9cc:	0e 94 45 0c 	call	0x188a	; 0x188a <rf_security_set_ctr_counter>
  return NRK_OK;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     9d4:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     9d6:	08 95       	ret

000009d8 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	08 95       	ret

000009dc <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	08 95       	ret

000009e2 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     9e2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <rf_auto_ack_disable>
  return NRK_OK;
}
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret

000009ea <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     9ea:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <rf_auto_ack_enable>
  return NRK_OK;
}
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	08 95       	ret

000009f2 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     9f2:	0e 94 ed 08 	call	0x11da	; 0x11da <rf_addr_decode_disable>
  return NRK_OK;
}
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret

000009fa <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     9fa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <rf_addr_decode_enable>
  return NRK_OK;
}
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	08 95       	ret

00000a02 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     a02:	0e 94 ff 08 	call	0x11fe	; 0x11fe <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	08 95       	ret

00000a0a <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     a0a:	90 93 f6 05 	sts	0x05F6, r25
     a0e:	80 93 f5 05 	sts	0x05F5, r24
  return NRK_OK;
}
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret

00000a16 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     a16:	0e 94 43 0c 	call	0x1886	; 0x1886 <rf_security_last_pkt_status>
}
     a1a:	08 95       	ret

00000a1c <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     a1c:	60 31       	cpi	r22, 0x10	; 16
     a1e:	21 f4       	brne	.+8      	; 0xa28 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     a20:	0e 94 46 0c 	call	0x188c	; 0x188c <rf_security_set_key>
  return NRK_OK;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     a28:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     a2a:	08 95       	ret

00000a2c <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	08 95       	ret

00000a30 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	08 95       	ret

00000a34 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     a34:	80 32       	cpi	r24, 0x20	; 32
     a36:	20 f4       	brcc	.+8      	; 0xa40 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     a38:	0e 94 dd 08 	call	0x11ba	; 0x11ba <rf_tx_power>
  return NRK_OK;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     a40:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     a42:	08 95       	ret

00000a44 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     a44:	80 93 69 03 	sts	0x0369, r24
     a48:	08 95       	ret

00000a4a <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     a4a:	99 27       	eor	r25, r25
     a4c:	87 fd       	sbrc	r24, 7
     a4e:	90 95       	com	r25
     a50:	0e 94 39 0c 	call	0x1872	; 0x1872 <rf_set_cca_thresh>
  return NRK_OK;
}
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 95       	ret

00000a58 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     a62:	8b 31       	cpi	r24, 0x1B	; 27
     a64:	88 f4       	brcc	.+34     	; 0xa88 <bmac_set_channel+0x30>
    return NRK_ERROR;
  g_chan = chan;
     a66:	80 93 73 03 	sts	0x0373, r24
  rf_power_up ();
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	0e 94 c7 08 	call	0x118e	; 0x118e <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	4f ef       	ldi	r20, 0xFF	; 255
     a76:	5f ef       	ldi	r21, 0xFF	; 255
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	68 2f       	mov	r22, r24
     a7c:	8f e3       	ldi	r24, 0x3F	; 63
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	0e 94 1f 09 	call	0x123e	; 0x123e <rf_init>
  return NRK_OK;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <bmac_set_channel+0x32>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     a88:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     a92:	80 91 76 03 	lds	r24, 0x0376
     a96:	88 23       	and	r24, r24
     a98:	01 f1       	breq	.+64     	; 0xada <bmac_wait_until_rx_pkt+0x48>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     a9a:	80 91 0b 06 	lds	r24, 0x060B
     a9e:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	00 90 0b 06 	lds	r0, 0x060B
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <bmac_wait_until_rx_pkt+0x26>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	0a 94       	dec	r0
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <bmac_wait_until_rx_pkt+0x1e>
     abc:	0e 94 cf 18 	call	0x319e	; 0x319e <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     ac0:	00 90 0b 06 	lds	r0, 0x060B
     ac4:	04 c0       	rjmp	.+8      	; 0xace <bmac_wait_until_rx_pkt+0x3c>
     ac6:	96 95       	lsr	r25
     ac8:	87 95       	ror	r24
     aca:	77 95       	ror	r23
     acc:	67 95       	ror	r22
     ace:	0a 94       	dec	r0
     ad0:	d2 f7       	brpl	.-12     	; 0xac6 <bmac_wait_until_rx_pkt+0x34>
     ad2:	60 fd       	sbrc	r22, 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <bmac_wait_until_rx_pkt+0x48>
    return NRK_ERROR;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	08 95       	ret
  else
    return NRK_OK;
     ada:	81 e0       	ldi	r24, 0x01	; 1
}
     adc:	08 95       	ret

00000ade <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	51 f0       	breq	.+20     	; 0xaf6 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     ae2:	90 93 45 07 	sts	0x0745, r25
     ae6:	80 93 44 07 	sts	0x0744, r24
  bmac_rfRxInfo.max_length = size;
     aea:	60 93 43 07 	sts	0x0743, r22
  rx_buf_empty = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 76 03 	sts	0x0376, r24
  return NRK_OK;
     af4:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     af8:	08 95       	ret

00000afa <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	d8 2f       	mov	r29, r24
  bmac_running = 0;
     b00:	10 92 75 03 	sts	0x0375, r1
  tx_reserve = -1;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	80 93 68 03 	sts	0x0368, r24
  cca_active = true;
     b0a:	c1 e0       	ldi	r28, 0x01	; 1
     b0c:	c0 93 69 03 	sts	0x0369, r28
  rx_failure_cnt = 0;
     b10:	10 92 78 03 	sts	0x0378, r1
     b14:	10 92 79 03 	sts	0x0379, r1
     b18:	10 92 7a 03 	sts	0x037A, r1
     b1c:	10 92 7b 03 	sts	0x037B, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     b20:	10 92 6a 03 	sts	0x036A, r1
     b24:	10 92 6b 03 	sts	0x036B, r1
     b28:	10 92 6c 03 	sts	0x036C, r1
     b2c:	10 92 6d 03 	sts	0x036D, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	51 ee       	ldi	r21, 0xE1	; 225
     b34:	65 ef       	ldi	r22, 0xF5	; 245
     b36:	75 e0       	ldi	r23, 0x05	; 5
     b38:	40 93 6e 03 	sts	0x036E, r20
     b3c:	50 93 6f 03 	sts	0x036F, r21
     b40:	60 93 70 03 	sts	0x0370, r22
     b44:	70 93 71 03 	sts	0x0371, r23
  bmac_rx_pkt_signal = nrk_signal_create ();
     b48:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_signal_create>
     b4c:	80 93 0b 06 	sts	0x060B, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     b50:	8f 3f       	cpi	r24, 0xFF	; 255
     b52:	19 f4       	brne	.+6      	; 0xb5a <bmac_init+0x60>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     b5a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_signal_create>
     b5e:	80 93 e5 07 	sts	0x07E5, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     b62:	8f 3f       	cpi	r24, 0xFF	; 255
     b64:	71 f4       	brne	.+28     	; 0xb82 <bmac_init+0x88>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     b66:	8e ed       	ldi	r24, 0xDE	; 222
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     b6e:	e0 91 80 06 	lds	r30, 0x0680
     b72:	f0 91 81 06 	lds	r31, 0x0681
     b76:	60 85       	ldd	r22, Z+8	; 0x08
     b78:	8e e0       	ldi	r24, 0x0E	; 14
     b7a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
    return NRK_ERROR;
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	29 c0       	rjmp	.+82     	; 0xbd4 <bmac_init+0xda>
  }
  bmac_enable_signal = nrk_signal_create ();
     b82:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_signal_create>
     b86:	80 93 74 05 	sts	0x0574, r24
  if (bmac_enable_signal == NRK_ERROR) {
     b8a:	8f 3f       	cpi	r24, 0xFF	; 255
     b8c:	19 f4       	brne	.+6      	; 0xb94 <bmac_init+0x9a>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     b8e:	82 eb       	ldi	r24, 0xB2	; 178
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	eb cf       	rjmp	.-42     	; 0xb6a <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     b94:	10 92 77 03 	sts	0x0377, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     b98:	10 92 76 03 	sts	0x0376, r1
  bmac_rfRxInfo.pPayload = NULL;
     b9c:	10 92 45 07 	sts	0x0745, r1
     ba0:	10 92 44 07 	sts	0x0744, r1
  bmac_rfRxInfo.max_length = 0;
     ba4:	10 92 43 07 	sts	0x0743, r1

  // Setup the cc2420 chip
  rf_power_up ();
     ba8:	0e 94 c7 08 	call	0x118e	; 0x118e <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	4f ef       	ldi	r20, 0xFF	; 255
     bb2:	5f ef       	ldi	r21, 0xFF	; 255
     bb4:	6d 2f       	mov	r22, r29
     bb6:	8f e3       	ldi	r24, 0x3F	; 63
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	0e 94 1f 09 	call	0x123e	; 0x123e <rf_init>
  g_chan = chan;
     bbe:	d0 93 73 03 	sts	0x0373, r29
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 39 0c 	call	0x1872	; 0x1872 <rf_set_cca_thresh>
  bmac_running = 1;
     bca:	c0 93 75 03 	sts	0x0375, r28
  is_enabled = 1;
     bce:	c0 93 72 03 	sts	0x0372, r28
  return NRK_OK;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     bda:	20 91 77 03 	lds	r18, 0x0377
     bde:	21 30       	cpi	r18, 0x01	; 1
     be0:	59 f0       	breq	.+22     	; 0xbf8 <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	20 93 77 03 	sts	0x0377, r18
  bmac_rfTxInfo.pPayload = buf;
     be8:	90 93 f9 05 	sts	0x05F9, r25
     bec:	80 93 f8 05 	sts	0x05F8, r24
  bmac_rfTxInfo.length = len;
     bf0:	60 93 f7 05 	sts	0x05F7, r22
  return NRK_OK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     bfa:	08 95       	ret

00000bfc <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     bfc:	80 91 0b 06 	lds	r24, 0x060B
     c00:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     c04:	80 91 0b 06 	lds	r24, 0x060B
     c08:	08 95       	ret

00000c0a <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c0a:	80 91 e5 07 	lds	r24, 0x07E5
     c0e:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     c12:	80 91 e5 07 	lds	r24, 0x07E5
     c16:	08 95       	ret

00000c18 <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	1f 92       	push	r1
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	7c 01       	movw	r14, r24
  uint32_t mask;
  if (tx_data_ready == 1)
     c2c:	80 91 77 03 	lds	r24, 0x0377
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	f1 f1       	breq	.+124    	; 0xcb0 <bmac_tx_pkt+0x98>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c34:	80 91 e5 07 	lds	r24, 0x07E5
     c38:	69 83       	std	Y+1, r22	; 0x01
     c3a:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
  tx_data_ready = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 77 03 	sts	0x0377, r24
  bmac_rfTxInfo.pPayload = buf;
     c44:	f0 92 f9 05 	sts	0x05F9, r15
     c48:	e0 92 f8 05 	sts	0x05F8, r14
  bmac_rfTxInfo.length = len;
     c4c:	69 81       	ldd	r22, Y+1	; 0x01
     c4e:	60 93 f7 05 	sts	0x05F7, r22
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	00 90 e5 07 	lds	r0, 0x07E5
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <bmac_tx_pkt+0x50>
     c60:	66 0f       	add	r22, r22
     c62:	77 1f       	adc	r23, r23
     c64:	88 1f       	adc	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	d2 f7       	brpl	.-12     	; 0xc60 <bmac_tx_pkt+0x48>
     c6c:	0e 94 cf 18 	call	0x319e	; 0x319e <nrk_event_wait>
     c70:	6b 01       	movw	r12, r22
     c72:	7c 01       	movw	r14, r24
  if (mask == 0)
     c74:	61 15       	cp	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	81 05       	cpc	r24, r1
     c7a:	91 05       	cpc	r25, r1
     c7c:	21 f4       	brne	.+8      	; 0xc86 <bmac_tx_pkt+0x6e>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     c7e:	8e e8       	ldi	r24, 0x8E	; 142
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     c86:	00 90 e5 07 	lds	r0, 0x07E5
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <bmac_tx_pkt+0x7c>
     c8c:	f6 94       	lsr	r15
     c8e:	e7 94       	ror	r14
     c90:	d7 94       	ror	r13
     c92:	c7 94       	ror	r12
     c94:	0a 94       	dec	r0
     c96:	d2 f7       	brpl	.-12     	; 0xc8c <bmac_tx_pkt+0x74>
     c98:	c0 fc       	sbrc	r12, 0
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <bmac_tx_pkt+0x8c>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     c9c:	8b e6       	ldi	r24, 0x6B	; 107
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
  if (pkt_got_ack)
     ca4:	80 91 74 03 	lds	r24, 0x0374
     ca8:	88 23       	and	r24, r24
     caa:	11 f0       	breq	.+4      	; 0xcb0 <bmac_tx_pkt+0x98>
    return NRK_OK;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <bmac_tx_pkt+0x9a>
  return NRK_ERROR;
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
}
     cb2:	0f 90       	pop	r0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	08 95       	ret

00000cc2 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     cc2:	20 91 76 03 	lds	r18, 0x0376
     cc6:	22 23       	and	r18, r18
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <bmac_rx_pkt_get+0x16>
    *len = 0;
     cca:	fc 01       	movw	r30, r24
     ccc:	10 82       	st	Z, r1
    *rssi = 0;
     cce:	fb 01       	movw	r30, r22
     cd0:	10 82       	st	Z, r1
    return NULL;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     cd8:	20 91 42 07 	lds	r18, 0x0742
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     ce0:	80 91 47 07 	lds	r24, 0x0747
     ce4:	fb 01       	movw	r30, r22
     ce6:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     ce8:	80 91 44 07 	lds	r24, 0x0744
     cec:	90 91 45 07 	lds	r25, 0x0745
}
     cf0:	08 95       	ret

00000cf2 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 91 76 03 	lds	r25, 0x0376
     cf8:	91 11       	cpse	r25, r1
     cfa:	80 e0       	ldi	r24, 0x00	; 0
}
     cfc:	08 95       	ret

00000cfe <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 76 03 	sts	0x0376, r24
  return NRK_OK;
}
     d04:	08 95       	ret

00000d06 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     d06:	10 92 72 03 	sts	0x0372, r1
  rf_power_down ();
     d0a:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <rf_power_down>

00000d0e <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 72 03 	sts	0x0372, r24
  rf_power_up ();
     d14:	0e 94 c7 08 	call	0x118e	; 0x118e <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     d18:	80 91 74 05 	lds	r24, 0x0574
     d1c:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <nrk_event_signal>

00000d20 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	28 97       	sbiw	r28, 0x08	; 8
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	29 83       	std	Y+1, r18	; 0x01
     d36:	3a 83       	std	Y+2, r19	; 0x02
     d38:	4b 83       	std	Y+3, r20	; 0x03
     d3a:	5c 83       	std	Y+4, r21	; 0x04
     d3c:	6d 83       	std	Y+5, r22	; 0x05
     d3e:	7e 83       	std	Y+6, r23	; 0x06
     d40:	8f 83       	std	Y+7, r24	; 0x07
     d42:	98 87       	std	Y+8, r25	; 0x08
     d44:	49 81       	ldd	r20, Y+1	; 0x01
     d46:	5a 81       	ldd	r21, Y+2	; 0x02
     d48:	6b 81       	ldd	r22, Y+3	; 0x03
     d4a:	7c 81       	ldd	r23, Y+4	; 0x04
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	af 81       	ldd	r26, Y+7	; 0x07
     d52:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
     d54:	41 15       	cp	r20, r1
     d56:	51 05       	cpc	r21, r1
     d58:	61 05       	cpc	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	41 f4       	brne	.+16     	; 0xd6e <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     d5e:	81 15       	cp	r24, r1
     d60:	2d e2       	ldi	r18, 0x2D	; 45
     d62:	92 07       	cpc	r25, r18
     d64:	21 e3       	ldi	r18, 0x31	; 49
     d66:	a2 07       	cpc	r26, r18
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	b2 07       	cpc	r27, r18
     d6c:	90 f0       	brcs	.+36     	; 0xd92 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     d6e:	40 93 6a 03 	sts	0x036A, r20
     d72:	50 93 6b 03 	sts	0x036B, r21
     d76:	60 93 6c 03 	sts	0x036C, r22
     d7a:	70 93 6d 03 	sts	0x036D, r23
  _bmac_check_period.nano_secs = period.nano_secs;
     d7e:	80 93 6e 03 	sts	0x036E, r24
     d82:	90 93 6f 03 	sts	0x036F, r25
     d86:	a0 93 70 03 	sts	0x0370, r26
     d8a:	b0 93 71 03 	sts	0x0371, r27
  return NRK_OK;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     d94:	28 96       	adiw	r28, 0x08	; 8
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     da6:	80 91 75 03 	lds	r24, 0x0375
     daa:	08 95       	ret

00000dac <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     dac:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
     dae:	0e 94 8e 09 	call	0x131c	; 0x131c <rf_rx_on>
  val += rf_cca_check ();
     db2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <rf_cca_check>
     db6:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
     db8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <rf_cca_check>
     dbc:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
     dbe:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <rf_cca_check>
     dc2:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     dc4:	0e 94 94 09 	call	0x1328	; 0x1328 <rf_rx_off>
     dc8:	8c 2f       	mov	r24, r28
     dca:	1c 16       	cp	r1, r28
     dcc:	0c f4       	brge	.+2      	; 0xdd0 <_bmac_channel_check+0x24>
     dce:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     dd4:	0e 94 8e 09 	call	0x131c	; 0x131c <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     dd8:	10 92 60 03 	sts	0x0360, r1
     ddc:	10 92 61 03 	sts	0x0361, r1
     de0:	10 92 62 03 	sts	0x0362, r1
     de4:	10 92 63 03 	sts	0x0363, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	68 2f       	mov	r22, r24
     dec:	80 93 64 03 	sts	0x0364, r24
     df0:	8b e4       	ldi	r24, 0x4B	; 75
     df2:	80 93 65 03 	sts	0x0365, r24
     df6:	8c e4       	ldi	r24, 0x4C	; 76
     df8:	80 93 66 03 	sts	0x0366, r24
     dfc:	10 92 67 03 	sts	0x0367, r1
  nrk_wait (dummy_t);
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 91 61 03 	lds	r19, 0x0361
     e06:	40 91 62 03 	lds	r20, 0x0362
     e0a:	50 91 63 03 	lds	r21, 0x0363
     e0e:	7b e4       	ldi	r23, 0x4B	; 75
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_wait>

  n = rf_rx_packet_nonblock ();
     e16:	0e 94 06 0b 	call	0x160c	; 0x160c <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	e9 f0       	breq	.+58     	; 0xe58 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
     e1e:	80 91 78 03 	lds	r24, 0x0378
     e22:	90 91 79 03 	lds	r25, 0x0379
     e26:	a0 91 7a 03 	lds	r26, 0x037A
     e2a:	b0 91 7b 03 	lds	r27, 0x037B
     e2e:	8f 3f       	cpi	r24, 0xFF	; 255
     e30:	2f ef       	ldi	r18, 0xFF	; 255
     e32:	92 07       	cpc	r25, r18
     e34:	a1 05       	cpc	r26, r1
     e36:	b1 05       	cpc	r27, r1
     e38:	58 f4       	brcc	.+22     	; 0xe50 <_bmac_rx+0x7c>
      rx_failure_cnt++;
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	a1 1d       	adc	r26, r1
     e3e:	b1 1d       	adc	r27, r1
     e40:	80 93 78 03 	sts	0x0378, r24
     e44:	90 93 79 03 	sts	0x0379, r25
     e48:	a0 93 7a 03 	sts	0x037A, r26
     e4c:	b0 93 7b 03 	sts	0x037B, r27
    rf_rx_off ();
     e50:	0e 94 94 09 	call	0x1328	; 0x1328 <rf_rx_off>
    return 0;
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     e58:	10 92 76 03 	sts	0x0376, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     e5c:	0e 94 94 09 	call	0x1328	; 0x1328 <rf_rx_off>
  return 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
}
     e62:	08 95       	ret

00000e64 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     e64:	80 91 78 03 	lds	r24, 0x0378
     e68:	90 91 79 03 	lds	r25, 0x0379
     e6c:	08 95       	ret

00000e6e <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     e6e:	10 92 78 03 	sts	0x0378, r1
     e72:	10 92 79 03 	sts	0x0379, r1
     e76:	10 92 7a 03 	sts	0x037A, r1
     e7a:	10 92 7b 03 	sts	0x037B, r1
  return NRK_OK;
}
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 95       	ret

00000e82 <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	50 f0       	brcs	.+20     	; 0xe9a <_b_pow+0x18>
    return 1;
  if (in > 7)
     e86:	88 30       	cpi	r24, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <_b_pow+0xa>
    in = 6;                     // cap it at 128 
     e8a:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
     e8c:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
     e8e:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     e90:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	28 17       	cp	r18, r24
     e96:	e0 f3       	brcs	.-8      	; 0xe90 <_b_pow+0xe>
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <_b_pow+0x1c>
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	08 95       	ret
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
     e9e:	89 2f       	mov	r24, r25
  return result;
}
     ea0:	08 95       	ret

00000ea2 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     eae:	80 91 69 03 	lds	r24, 0x0369
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <_bmac_tx+0x16>
     eb6:	47 c0       	rjmp	.+142    	; 0xf46 <_bmac_tx+0xa4>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     eb8:	8a e6       	ldi	r24, 0x6A	; 106
     eba:	93 e0       	ldi	r25, 0x03	; 3
     ebc:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_nrk_time_to_ticks>
     ec0:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     ec2:	0e 94 31 2b 	call	0x5662	; 0x5662 <rand>
     ec6:	6a e0       	ldi	r22, 0x0A	; 10
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	0e 94 31 2a 	call	0x5462	; 0x5462 <__divmodhi4>
     ece:	bc 01       	movw	r22, r24
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	ce 01       	movw	r24, r28
     ed6:	0e 94 1d 2a 	call	0x543a	; 0x543a <__udivmodhi4>
     eda:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     edc:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     ee0:	ff 24       	eor	r15, r15
     ee2:	f3 94       	inc	r15
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     ee4:	ca e0       	ldi	r28, 0x0A	; 10
     ee6:	d0 e0       	ldi	r29, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     ee8:	0e 94 d6 06 	call	0xdac	; 0xdac <_bmac_channel_check>
     eec:	e8 2e       	mov	r14, r24
      if (v == 1)
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	e8 16       	cp	r14, r24
     ef2:	49 f1       	breq	.+82     	; 0xf46 <_bmac_tx+0xa4>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     ef4:	0e 94 31 2b 	call	0x5662	; 0x5662 <rand>
     ef8:	8c 01       	movw	r16, r24
     efa:	8f 2d       	mov	r24, r15
     efc:	0e 94 41 07 	call	0xe82	; 0xe82 <_b_pow>
     f00:	68 2f       	mov	r22, r24
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	c8 01       	movw	r24, r16
     f06:	0e 94 31 2a 	call	0x5462	; 0x5462 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     f0a:	99 27       	eor	r25, r25
     f0c:	0e 94 0f 1c 	call	0x381e	; 0x381e <nrk_wait_until_next_n_periods>
      backoff_count++;
     f10:	f3 94       	inc	r15
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	8f 15       	cp	r24, r15
     f16:	10 f4       	brcc	.+4      	; 0xf1c <_bmac_tx+0x7a>
     f18:	86 e0       	ldi	r24, 0x06	; 6
     f1a:	f8 2e       	mov	r15, r24
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     f1c:	8a e6       	ldi	r24, 0x6A	; 106
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_nrk_time_to_ticks>
     f24:	8c 01       	movw	r16, r24
      b = b / ((rand () % 10) + 1);
     f26:	0e 94 31 2b 	call	0x5662	; 0x5662 <rand>
     f2a:	be 01       	movw	r22, r28
     f2c:	0e 94 31 2a 	call	0x5462	; 0x5462 <__divmodhi4>
     f30:	bc 01       	movw	r22, r24
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 1d 2a 	call	0x543a	; 0x543a <__udivmodhi4>
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     f3c:	cb 01       	movw	r24, r22
     f3e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
     f42:	ee 20       	and	r14, r14
     f44:	89 f2       	breq	.-94     	; 0xee8 <_bmac_tx+0x46>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
     f46:	10 92 fa 05 	sts	0x05FA, r1
  bmac_rfTxInfo.ackRequest = 0;
     f4a:	10 92 fb 05 	sts	0x05FB, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
     f4e:	20 91 6a 03 	lds	r18, 0x036A
     f52:	30 91 6b 03 	lds	r19, 0x036B
     f56:	88 ee       	ldi	r24, 0xE8	; 232
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	28 9f       	mul	r18, r24
     f5c:	e0 01       	movw	r28, r0
     f5e:	29 9f       	mul	r18, r25
     f60:	d0 0d       	add	r29, r0
     f62:	38 9f       	mul	r19, r24
     f64:	d0 0d       	add	r29, r0
     f66:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
     f68:	60 91 6e 03 	lds	r22, 0x036E
     f6c:	70 91 6f 03 	lds	r23, 0x036F
     f70:	80 91 70 03 	lds	r24, 0x0370
     f74:	90 91 71 03 	lds	r25, 0x0371
     f78:	20 e4       	ldi	r18, 0x40	; 64
     f7a:	32 e4       	ldi	r19, 0x42	; 66
     f7c:	4f e0       	ldi	r20, 0x0F	; 15
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
     f84:	c2 0f       	add	r28, r18
     f86:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
     f88:	0e 94 8e 09 	call	0x131c	; 0x131c <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
     f8c:	be 01       	movw	r22, r28
     f8e:	85 ef       	ldi	r24, 0xF5	; 245
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	0e 94 9a 09 	call	0x1334	; 0x1334 <rf_tx_packet_repeat>
     f96:	80 93 74 03 	sts	0x0374, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
     f9a:	0e 94 94 09 	call	0x1328	; 0x1328 <rf_rx_off>
  tx_data_ready = 0;
     f9e:	10 92 77 03 	sts	0x0377, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
     fa2:	80 91 e5 07 	lds	r24, 0x07E5
     fa6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <nrk_event_signal>
  return NRK_OK;
}
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	08 95       	ret

00000fba <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
     fba:	80 91 75 03 	lds	r24, 0x0375
     fbe:	81 11       	cpse	r24, r1
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
     fc2:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>
     fc6:	f9 cf       	rjmp	.-14     	; 0xfba <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
     fc8:	80 91 74 05 	lds	r24, 0x0574
     fcc:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
  if (v == NRK_ERROR)
     fd0:	8f 3f       	cpi	r24, 0xFF	; 255
     fd2:	21 f4       	brne	.+8      	; 0xfdc <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
     fd4:	8f e4       	ldi	r24, 0x4F	; 79
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
     fdc:	c1 2c       	mov	r12, r1
     fde:	d1 2c       	mov	r13, r1
     fe0:	76 01       	movw	r14, r12
     fe2:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
     fe4:	0e 94 c7 08 	call	0x118e	; 0x118e <rf_power_up>
    if (is_enabled) {
     fe8:	80 91 72 03 	lds	r24, 0x0372
     fec:	88 23       	and	r24, r24
     fee:	69 f1       	breq	.+90     	; 0x104a <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
     ff0:	80 91 76 03 	lds	r24, 0x0376
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	41 f4       	brne	.+16     	; 0x1008 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
     ff8:	0e 94 d6 06 	call	0xdac	; 0xdac <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
     ffc:	81 11       	cpse	r24, r1
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    1000:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_bmac_rx>
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	21 f4       	brne	.+8      	; 0x1010 <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    1008:	80 91 0b 06 	lds	r24, 0x060B
    100c:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    1010:	80 91 77 03 	lds	r24, 0x0377
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	11 f4       	brne	.+4      	; 0x101c <bmac_nw_task+0x62>
        _bmac_tx ();
    1018:	0e 94 51 07 	call	0xea2	; 0xea2 <_bmac_tx>
      }
      rf_rx_off ();
    101c:	0e 94 94 09 	call	0x1328	; 0x1328 <rf_rx_off>
      rf_power_down ();
    1020:	0e 94 a1 08 	call	0x1142	; 0x1142 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    1024:	20 91 6a 03 	lds	r18, 0x036A
    1028:	30 91 6b 03 	lds	r19, 0x036B
    102c:	40 91 6c 03 	lds	r20, 0x036C
    1030:	50 91 6d 03 	lds	r21, 0x036D
    1034:	60 91 6e 03 	lds	r22, 0x036E
    1038:	70 91 6f 03 	lds	r23, 0x036F
    103c:	80 91 70 03 	lds	r24, 0x0370
    1040:	90 91 71 03 	lds	r25, 0x0371
    1044:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_wait>
    1048:	cd cf       	rjmp	.-102    	; 0xfe4 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    104a:	80 91 74 05 	lds	r24, 0x0574
    104e:	0e 94 29 18 	call	0x3052	; 0x3052 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	00 90 74 05 	lds	r0, 0x0574
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <bmac_nw_task+0xaa>
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	d2 f7       	brpl	.-12     	; 0x105c <bmac_nw_task+0xa2>
    1068:	0e 94 cf 18 	call	0x319e	; 0x319e <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    106c:	00 90 74 05 	lds	r0, 0x0574
    1070:	04 c0       	rjmp	.+8      	; 0x107a <bmac_nw_task+0xc0>
    1072:	96 95       	lsr	r25
    1074:	87 95       	ror	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	0a 94       	dec	r0
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <bmac_nw_task+0xb8>
    107e:	60 ff       	sbrs	r22, 0
    1080:	e4 cf       	rjmp	.-56     	; 0x104a <bmac_nw_task+0x90>
    1082:	b0 cf       	rjmp	.-160    	; 0xfe4 <bmac_nw_task+0x2a>

00001084 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1084:	6d ed       	ldi	r22, 0xDD	; 221
    1086:	77 e0       	ldi	r23, 0x07	; 7
    1088:	8c ef       	ldi	r24, 0xFC	; 252
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	6c e7       	ldi	r22, 0x7C	; 124
    1096:	73 e0       	ldi	r23, 0x03	; 3
    1098:	8c ef       	ldi	r24, 0xFC	; 252
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    10a0:	84 e1       	ldi	r24, 0x14	; 20
    10a2:	80 93 04 04 	sts	0x0404, r24
  bmac_task.FirstActivation = TRUE;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 03 04 	sts	0x0403, r24
  bmac_task.Type = BASIC_TASK;
    10ac:	80 93 05 04 	sts	0x0405, r24
  bmac_task.SchType = PREEMPTIVE;
    10b0:	80 93 06 04 	sts	0x0406, r24
  bmac_task.period.secs = 0;
    10b4:	10 92 07 04 	sts	0x0407, r1
    10b8:	10 92 08 04 	sts	0x0408, r1
    10bc:	10 92 09 04 	sts	0x0409, r1
    10c0:	10 92 0a 04 	sts	0x040A, r1
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	9d e2       	ldi	r25, 0x2D	; 45
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b1 e0       	ldi	r27, 0x01	; 1
    10cc:	80 93 0b 04 	sts	0x040B, r24
    10d0:	90 93 0c 04 	sts	0x040C, r25
    10d4:	a0 93 0d 04 	sts	0x040D, r26
    10d8:	b0 93 0e 04 	sts	0x040E, r27
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    10dc:	10 92 0f 04 	sts	0x040F, r1
    10e0:	10 92 10 04 	sts	0x0410, r1
    10e4:	10 92 11 04 	sts	0x0411, r1
    10e8:	10 92 12 04 	sts	0x0412, r1
  bmac_task.cpu_reserve.nano_secs = 0;
    10ec:	10 92 13 04 	sts	0x0413, r1
    10f0:	10 92 14 04 	sts	0x0414, r1
    10f4:	10 92 15 04 	sts	0x0415, r1
    10f8:	10 92 16 04 	sts	0x0416, r1
  bmac_task.offset.secs = 0;
    10fc:	10 92 17 04 	sts	0x0417, r1
    1100:	10 92 18 04 	sts	0x0418, r1
    1104:	10 92 19 04 	sts	0x0419, r1
    1108:	10 92 1a 04 	sts	0x041A, r1
  bmac_task.offset.nano_secs = 0;
    110c:	10 92 1b 04 	sts	0x041B, r1
    1110:	10 92 1c 04 	sts	0x041C, r1
    1114:	10 92 1d 04 	sts	0x041D, r1
    1118:	10 92 1e 04 	sts	0x041E, r1
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    111c:	8c ef       	ldi	r24, 0xFC	; 252
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <nrk_activate_task>

00001124 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1124:	90 91 41 01 	lds	r25, 0x0141
    1128:	9f 71       	andi	r25, 0x1F	; 31
    112a:	9f 31       	cpi	r25, 0x1F	; 31
    112c:	d9 f3       	breq	.-10     	; 0x1124 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    112e:	80 93 42 01 	sts	0x0142, r24
    1132:	08 95       	ret

00001134 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 f1 07 	sts	0x07F1, r24
    113a:	08 95       	ret

0000113c <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    113c:	10 92 f1 07 	sts	0x07F1, r1
    1140:	08 95       	ret

00001142 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1142:	80 91 41 01 	lds	r24, 0x0141
    1146:	8f 71       	andi	r24, 0x1F	; 31
    1148:	8f 31       	cpi	r24, 0x1F	; 31
    114a:	d9 f3       	breq	.-10     	; 0x1142 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    114c:	80 91 41 01 	lds	r24, 0x0141
    1150:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1152:	e1 f0       	breq	.+56     	; 0x118c <rf_power_down+0x4a>
    1154:	8f 30       	cpi	r24, 0x0F	; 15
    1156:	d1 f0       	breq	.+52     	; 0x118c <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1158:	80 91 41 01 	lds	r24, 0x0141
    115c:	8f 71       	andi	r24, 0x1F	; 31
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	31 f4       	brne	.+12     	; 0x116e <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1162:	80 91 39 01 	lds	r24, 0x0139
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	80 93 39 01 	sts	0x0139, r24
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    116e:	88 e0       	ldi	r24, 0x08	; 8
    1170:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1174:	80 91 41 01 	lds	r24, 0x0141
    1178:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	d9 f7       	brne	.-10     	; 0x1174 <rf_power_down+0x32>
    117e:	f1 cf       	rjmp	.-30     	; 0x1162 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1180:	8f 30       	cpi	r24, 0x0F	; 15
    1182:	21 f0       	breq	.+8      	; 0x118c <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1184:	80 91 41 01 	lds	r24, 0x0141
    1188:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    118a:	d1 f7       	brne	.-12     	; 0x1180 <rf_power_down+0x3e>
    118c:	08 95       	ret

0000118e <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    118e:	80 91 41 01 	lds	r24, 0x0141
    1192:	8f 71       	andi	r24, 0x1F	; 31
    1194:	8f 31       	cpi	r24, 0x1F	; 31
    1196:	d9 f3       	breq	.-10     	; 0x118e <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1198:	80 91 41 01 	lds	r24, 0x0141
    119c:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    119e:	11 f0       	breq	.+4      	; 0x11a4 <rf_power_up+0x16>
    11a0:	8f 30       	cpi	r24, 0x0F	; 15
    11a2:	51 f4       	brne	.+20     	; 0x11b8 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    11a4:	80 91 39 01 	lds	r24, 0x0139
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    11ae:	80 91 41 01 	lds	r24, 0x0141
    11b2:	8f 71       	andi	r24, 0x1F	; 31
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	d9 f7       	brne	.-10     	; 0x11ae <rf_power_up+0x20>
    11b8:	08 95       	ret

000011ba <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    11ba:	e5 e4       	ldi	r30, 0x45	; 69
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	90 81       	ld	r25, Z
    11c0:	90 7f       	andi	r25, 0xF0	; 240
    11c2:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    11c4:	90 81       	ld	r25, Z
    11c6:	8f 70       	andi	r24, 0x0F	; 15
    11c8:	89 2b       	or	r24, r25
    11ca:	80 83       	st	Z, r24
    11cc:	08 95       	ret

000011ce <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    11ce:	e7 e5       	ldi	r30, 0x57	; 87
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	80 81       	ld	r24, Z
    11d4:	8d 7f       	andi	r24, 0xFD	; 253
    11d6:	80 83       	st	Z, r24
    11d8:	08 95       	ret

000011da <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    11da:	e7 e5       	ldi	r30, 0x57	; 87
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	80 81       	ld	r24, Z
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	80 83       	st	Z, r24
    11e4:	08 95       	ret

000011e6 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    11e6:	ee e6       	ldi	r30, 0x6E	; 110
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7e       	andi	r24, 0xEF	; 239
    11ee:	80 83       	st	Z, r24
    11f0:	08 95       	ret

000011f2 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    11f2:	ee e6       	ldi	r30, 0x6E	; 110
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	80 81       	ld	r24, Z
    11f8:	80 61       	ori	r24, 0x10	; 16
    11fa:	80 83       	st	Z, r24
    11fc:	08 95       	ret

000011fe <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    11fe:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1202:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1206:	90 93 fb 07 	sts	0x07FB, r25
    120a:	80 93 fa 07 	sts	0x07FA, r24
    120e:	08 95       	ret

00001210 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1210:	90 93 f5 07 	sts	0x07F5, r25
    1214:	80 93 f4 07 	sts	0x07F4, r24
	PHY_CC_CCA &= ~(0x1F);
    1218:	e8 e4       	ldi	r30, 0x48	; 72
    121a:	f1 e0       	ldi	r31, 0x01	; 1
    121c:	80 81       	ld	r24, Z
    121e:	80 7e       	andi	r24, 0xE0	; 224
    1220:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1222:	80 81       	ld	r24, Z
    1224:	68 2b       	or	r22, r24
    1226:	60 83       	st	Z, r22
    1228:	08 95       	ret

0000122a <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    122a:	90 93 22 04 	sts	0x0422, r25
    122e:	80 93 21 04 	sts	0x0421, r24
    1232:	08 95       	ret

00001234 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1234:	90 93 20 04 	sts	0x0420, r25
    1238:	80 93 1f 04 	sts	0x041F, r24
    123c:	08 95       	ret

0000123e <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1244:	70 e2       	ldi	r23, 0x20	; 32
    1246:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    124a:	70 ec       	ldi	r23, 0xC0	; 192
    124c:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1250:	60 62       	ori	r22, 0x20	; 32
    1252:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1256:	65 ec       	ldi	r22, 0xC5	; 197
    1258:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    125c:	67 ea       	ldi	r22, 0xA7	; 167
    125e:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1262:	60 e8       	ldi	r22, 0x80	; 128
    1264:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1268:	20 93 60 01 	sts	0x0160, r18
    126c:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1270:	40 93 62 01 	sts	0x0162, r20
    1274:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1278:	e6 e4       	ldi	r30, 0x46	; 70
    127a:	f1 e0       	ldi	r31, 0x01	; 1
    127c:	c0 81       	ld	r28, Z
    127e:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1280:	60 81       	ld	r22, Z
    1282:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1284:	c2 95       	swap	r28
    1286:	c6 95       	lsr	r28
    1288:	c7 70       	andi	r28, 0x07	; 7
    128a:	70 e4       	ldi	r23, 0x40	; 64
    128c:	c7 9f       	mul	r28, r23
    128e:	e0 01       	movw	r28, r0
    1290:	11 24       	eor	r1, r1
    1292:	12 95       	swap	r17
    1294:	16 95       	lsr	r17
    1296:	13 70       	andi	r17, 0x03	; 3
    1298:	1c 2b       	or	r17, r28
    129a:	a2 95       	swap	r26
    129c:	a6 95       	lsr	r26
    129e:	a3 70       	andi	r26, 0x03	; 3
    12a0:	70 e1       	ldi	r23, 0x10	; 16
    12a2:	a7 9f       	mul	r26, r23
    12a4:	d0 01       	movw	r26, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    12aa:	62 95       	swap	r22
    12ac:	66 95       	lsr	r22
    12ae:	63 70       	andi	r22, 0x03	; 3
    12b0:	a4 e0       	ldi	r26, 0x04	; 4
    12b2:	6a 9f       	mul	r22, r26
    12b4:	b0 01       	movw	r22, r0
    12b6:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    12b8:	16 2b       	or	r17, r22
    12ba:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    12be:	60 81       	ld	r22, Z
    12c0:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    12c2:	72 95       	swap	r23
    12c4:	76 95       	lsr	r23
    12c6:	73 70       	andi	r23, 0x03	; 3
    12c8:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    12ca:	62 95       	swap	r22
    12cc:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    12ce:	67 2b       	or	r22, r23
    12d0:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    12d4:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    12d8:	6f ef       	ldi	r22, 0xFF	; 255
    12da:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    12de:	90 93 f5 07 	sts	0x07F5, r25
    12e2:	80 93 f4 07 	sts	0x07F4, r24
	rfSettings.txSeqNumber = 0;
    12e6:	10 92 f6 07 	sts	0x07F6, r1
	rfSettings.ackReceived = 0;
    12ea:	10 92 f7 07 	sts	0x07F7, r1
	rfSettings.panId = panId;
    12ee:	50 93 f9 07 	sts	0x07F9, r21
    12f2:	40 93 f8 07 	sts	0x07F8, r20
	rfSettings.myAddr = myAddr;
    12f6:	30 93 fb 07 	sts	0x07FB, r19
    12fa:	20 93 fa 07 	sts	0x07FA, r18
	rfSettings.receiveOn = 0;
    12fe:	10 92 fc 07 	sts	0x07FC, r1

	rf_ready = 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 16 08 	sts	0x0816, r24
	rx_ready = 0;
    1308:	10 92 35 08 	sts	0x0835, r1
	tx_done = 0;
    130c:	10 92 05 08 	sts	0x0805, r1

	use_glossy = 0;
    1310:	10 92 f1 07 	sts	0x07F1, r1

} // rf_init() 
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	08 95       	ret

0000131c <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    131c:	86 e1       	ldi	r24, 0x16	; 22
    131e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <rf_cmd>

00001322 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1322:	86 e1       	ldi	r24, 0x16	; 22
    1324:	0c 94 92 08 	jmp	0x1124	; 0x1124 <rf_cmd>

00001328 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>
	rx_ready = 0;
    132e:	10 92 35 08 	sts	0x0835, r1
    1332:	08 95       	ret

00001334 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    1334:	3f 92       	push	r3
    1336:	4f 92       	push	r4
    1338:	5f 92       	push	r5
    133a:	6f 92       	push	r6
    133c:	7f 92       	push	r7
    133e:	8f 92       	push	r8
    1340:	9f 92       	push	r9
    1342:	af 92       	push	r10
    1344:	bf 92       	push	r11
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
    1358:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    135a:	80 91 16 08 	lds	r24, 0x0816
    135e:	81 11       	cpse	r24, r1
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	0f c1       	rjmp	.+542    	; 0x1584 <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1368:	80 91 f6 07 	lds	r24, 0x07F6
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 f6 07 	sts	0x07F6, r24
	machead->fcf = fcf;
    1372:	80 91 81 01 	lds	r24, 0x0181
    1376:	80 7e       	andi	r24, 0xE0	; 224
    1378:	81 60       	ori	r24, 0x01	; 1
    137a:	90 fb       	bst	r25, 0
    137c:	85 f9       	bld	r24, 5
    137e:	8f 73       	andi	r24, 0x3F	; 63
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	80 93 81 01 	sts	0x0181, r24
    1386:	88 e8       	ldi	r24, 0x88	; 136
    1388:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    138c:	80 91 f1 07 	lds	r24, 0x07F1
    1390:	88 23       	and	r24, r24
    1392:	61 f0       	breq	.+24     	; 0x13ac <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    139a:	8a ea       	ldi	r24, 0xAA	; 170
    139c:	9a ea       	ldi	r25, 0xAA	; 170
    139e:	90 93 89 01 	sts	0x0189, r25
    13a2:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	10 c0       	rjmp	.+32     	; 0x13cc <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    13ac:	80 91 f6 07 	lds	r24, 0x07F6
    13b0:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    13b4:	20 91 61 01 	lds	r18, 0x0161
    13b8:	80 91 60 01 	lds	r24, 0x0160
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	92 2b       	or	r25, r18
    13c0:	90 93 89 01 	sts	0x0189, r25
    13c4:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	90 93 87 01 	sts	0x0187, r25
    13d0:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    13d4:	20 91 63 01 	lds	r18, 0x0163
    13d8:	80 91 62 01 	lds	r24, 0x0162
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	92 2b       	or	r25, r18
    13e0:	90 93 85 01 	sts	0x0185, r25
    13e4:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    13e8:	4a 81       	ldd	r20, Y+2	; 0x02
    13ea:	55 27       	eor	r21, r21
    13ec:	47 fd       	sbrc	r20, 7
    13ee:	50 95       	com	r21
    13f0:	6b 81       	ldd	r22, Y+3	; 0x03
    13f2:	7c 81       	ldd	r23, Y+4	; 0x04
    13f4:	8a e8       	ldi	r24, 0x8A	; 138
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 4b 2b 	call	0x5696	; 0x5696 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	85 5f       	subi	r24, 0xF5	; 245
    1400:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1404:	80 91 41 01 	lds	r24, 0x0141
    1408:	98 2f       	mov	r25, r24
    140a:	9f 71       	andi	r25, 0x1F	; 31
    140c:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    140e:	8f 70       	andi	r24, 0x0F	; 15
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	98 0f       	add	r25, r24
    1414:	92 30       	cpi	r25, 0x02	; 2
    1416:	b0 f3       	brcs	.-20     	; 0x1404 <rf_tx_packet_repeat+0xd0>
    1418:	9f e1       	ldi	r25, 0x1F	; 31
    141a:	39 16       	cp	r3, r25
    141c:	99 f3       	breq	.-26     	; 0x1404 <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    141e:	98 ef       	ldi	r25, 0xF8	; 248
    1420:	93 0d       	add	r25, r3
    1422:	92 30       	cpi	r25, 0x02	; 2
    1424:	18 f0       	brcs	.+6      	; 0x142c <rf_tx_packet_repeat+0xf8>
    1426:	86 30       	cpi	r24, 0x06	; 6
    1428:	09 f0       	breq	.+2      	; 0x142c <rf_tx_packet_repeat+0xf8>
    142a:	9b cf       	rjmp	.-202    	; 0x1362 <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    142c:	86 e1       	ldi	r24, 0x16	; 22
    142e:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	81 11       	cpse	r24, r1
    1436:	0a c0       	rjmp	.+20     	; 0x144c <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1438:	89 e0       	ldi	r24, 0x09	; 9
    143a:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>
	if(pRTI->ackRequest)
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	88 23       	and	r24, r24
    1442:	91 f0       	breq	.+36     	; 0x1468 <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
    1444:	89 e1       	ldi	r24, 0x19	; 25
    1446:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    144c:	80 91 48 01 	lds	r24, 0x0148
    1450:	80 68       	ori	r24, 0x80	; 128
    1452:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1456:	80 91 41 01 	lds	r24, 0x0141
    145a:	87 ff       	sbrs	r24, 7
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    145e:	80 91 41 01 	lds	r24, 0x0141
    1462:	86 ff       	sbrs	r24, 6
    1464:	7e cf       	rjmp	.-260    	; 0x1362 <rf_tx_packet_repeat+0x2e>
    1466:	e8 cf       	rjmp	.-48     	; 0x1438 <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1468:	61 14       	cp	r6, r1
    146a:	71 04       	cpc	r7, r1
    146c:	99 f1       	breq	.+102    	; 0x14d4 <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
    146e:	8d ef       	ldi	r24, 0xFD	; 253
    1470:	97 e0       	ldi	r25, 0x07	; 7
    1472:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <nrk_time_get>
		target_t.secs = curr_t.secs;
    1476:	80 91 fd 07 	lds	r24, 0x07FD
    147a:	90 91 fe 07 	lds	r25, 0x07FE
    147e:	a0 91 ff 07 	lds	r26, 0x07FF
    1482:	b0 91 00 08 	lds	r27, 0x0800
    1486:	80 93 17 08 	sts	0x0817, r24
    148a:	90 93 18 08 	sts	0x0818, r25
    148e:	a0 93 19 08 	sts	0x0819, r26
    1492:	b0 93 1a 08 	sts	0x081A, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    1496:	d3 01       	movw	r26, r6
    1498:	20 e4       	ldi	r18, 0x40	; 64
    149a:	32 e4       	ldi	r19, 0x42	; 66
    149c:	4f e0       	ldi	r20, 0x0F	; 15
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    14a4:	00 91 01 08 	lds	r16, 0x0801
    14a8:	10 91 02 08 	lds	r17, 0x0802
    14ac:	20 91 03 08 	lds	r18, 0x0803
    14b0:	30 91 04 08 	lds	r19, 0x0804
    14b4:	60 0f       	add	r22, r16
    14b6:	71 1f       	adc	r23, r17
    14b8:	82 1f       	adc	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	60 93 1b 08 	sts	0x081B, r22
    14c0:	70 93 1c 08 	sts	0x081C, r23
    14c4:	80 93 1d 08 	sts	0x081D, r24
    14c8:	90 93 1e 08 	sts	0x081E, r25
		nrk_time_compact_nanos(&target_t);
    14cc:	87 e1       	ldi	r24, 0x17	; 23
    14ce:	98 e0       	ldi	r25, 0x08	; 8
    14d0:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    14d4:	10 92 05 08 	sts	0x0805, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    14de:	41 2c       	mov	r4, r1
    14e0:	51 2c       	mov	r5, r1
    14e2:	80 91 05 08 	lds	r24, 0x0805
    14e6:	81 11       	cpse	r24, r1
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <rf_tx_packet_repeat+0x1c6>
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	48 1a       	sub	r4, r24
    14ee:	58 0a       	sbc	r5, r24
    14f0:	98 ee       	ldi	r25, 0xE8	; 232
    14f2:	49 16       	cp	r4, r25
    14f4:	9d ef       	ldi	r25, 0xFD	; 253
    14f6:	59 06       	cpc	r5, r25
    14f8:	a1 f7       	brne	.-24     	; 0x14e2 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
    14fa:	61 14       	cp	r6, r1
    14fc:	71 04       	cpc	r7, r1
    14fe:	21 f4       	brne	.+8      	; 0x1508 <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1500:	8e 81       	ldd	r24, Y+6	; 0x06
    1502:	81 11       	cpse	r24, r1
    1504:	2d c0       	rjmp	.+90     	; 0x1560 <rf_tx_packet_repeat+0x22c>
    1506:	34 c0       	rjmp	.+104    	; 0x1570 <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    1508:	8d ef       	ldi	r24, 0xFD	; 253
    150a:	97 e0       	ldi	r25, 0x07	; 7
    150c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    1510:	80 90 fd 07 	lds	r8, 0x07FD
    1514:	90 90 fe 07 	lds	r9, 0x07FE
    1518:	a0 90 ff 07 	lds	r10, 0x07FF
    151c:	b0 90 00 08 	lds	r11, 0x0800
    1520:	c0 90 01 08 	lds	r12, 0x0801
    1524:	d0 90 02 08 	lds	r13, 0x0802
    1528:	e0 90 03 08 	lds	r14, 0x0803
    152c:	f0 90 04 08 	lds	r15, 0x0804
    1530:	00 91 17 08 	lds	r16, 0x0817
    1534:	10 91 18 08 	lds	r17, 0x0818
    1538:	20 91 19 08 	lds	r18, 0x0819
    153c:	30 91 1a 08 	lds	r19, 0x081A
    1540:	40 91 1b 08 	lds	r20, 0x081B
    1544:	50 91 1c 08 	lds	r21, 0x081C
    1548:	60 91 1d 08 	lds	r22, 0x081D
    154c:	70 91 1e 08 	lds	r23, 0x081E
    1550:	86 e3       	ldi	r24, 0x36	; 54
    1552:	98 e0       	ldi	r25, 0x08	; 8
    1554:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <nrk_time_sub>
    1558:	8f 3f       	cpi	r24, 0xFF	; 255
    155a:	09 f0       	breq	.+2      	; 0x155e <rf_tx_packet_repeat+0x22a>
    155c:	bb cf       	rjmp	.-138    	; 0x14d4 <rf_tx_packet_repeat+0x1a0>
    155e:	d0 cf       	rjmp	.-96     	; 0x1500 <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1560:	80 91 42 01 	lds	r24, 0x0142
    1564:	82 95       	swap	r24
    1566:	86 95       	lsr	r24
    1568:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    156a:	11 f0       	breq	.+4      	; 0x1570 <rf_tx_packet_repeat+0x23c>
    156c:	cf ef       	ldi	r28, 0xFF	; 255
    156e:	06 c0       	rjmp	.+12     	; 0x157c <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1570:	88 ee       	ldi	r24, 0xE8	; 232
    1572:	48 16       	cp	r4, r24
    1574:	8d ef       	ldi	r24, 0xFD	; 253
    1576:	58 06       	cpc	r5, r24
    1578:	c9 f3       	breq	.-14     	; 0x156c <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    157a:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    157c:	83 2d       	mov	r24, r3
    157e:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1582:	8c 2f       	mov	r24, r28
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	cf 90       	pop	r12
    1594:	bf 90       	pop	r11
    1596:	af 90       	pop	r10
    1598:	9f 90       	pop	r9
    159a:	8f 90       	pop	r8
    159c:	7f 90       	pop	r7
    159e:	6f 90       	pop	r6
    15a0:	5f 90       	pop	r5
    15a2:	4f 90       	pop	r4
    15a4:	3f 90       	pop	r3
    15a6:	08 95       	ret

000015a8 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <rf_tx_packet_repeat>

000015b0 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    15b4:	80 91 16 08 	lds	r24, 0x0816
    15b8:	88 23       	and	r24, r24
    15ba:	21 f1       	breq	.+72     	; 0x1604 <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    15bc:	80 91 41 01 	lds	r24, 0x0141
    15c0:	c8 2f       	mov	r28, r24
    15c2:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    15c4:	8f 70       	andi	r24, 0x0F	; 15
    15c6:	9f ef       	ldi	r25, 0xFF	; 255
    15c8:	98 0f       	add	r25, r24
    15ca:	92 30       	cpi	r25, 0x02	; 2
    15cc:	b8 f3       	brcs	.-18     	; 0x15bc <rf_cca_check+0xc>
    15ce:	cf 31       	cpi	r28, 0x1F	; 31
    15d0:	a9 f3       	breq	.-22     	; 0x15bc <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    15d2:	c8 30       	cpi	r28, 0x08	; 8
    15d4:	11 f0       	breq	.+4      	; 0x15da <rf_cca_check+0x2a>
    15d6:	86 30       	cpi	r24, 0x06	; 6
    15d8:	a9 f4       	brne	.+42     	; 0x1604 <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    15da:	86 e1       	ldi	r24, 0x16	; 22
    15dc:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    15e0:	80 91 48 01 	lds	r24, 0x0148
    15e4:	80 68       	ori	r24, 0x80	; 128
    15e6:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    15ea:	80 91 41 01 	lds	r24, 0x0141
    15ee:	87 ff       	sbrs	r24, 7
    15f0:	fc cf       	rjmp	.-8      	; 0x15ea <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    15f2:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    15f6:	8c 2f       	mov	r24, r28
    15f8:	0e 94 92 08 	call	0x1124	; 0x1124 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    15fc:	d6 fb       	bst	r29, 6
    15fe:	88 27       	eor	r24, r24
    1600:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1604:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    160c:	80 91 16 08 	lds	r24, 0x0816
    1610:	88 23       	and	r24, r24
    1612:	09 f4       	brne	.+2      	; 0x1616 <rf_rx_packet_nonblock+0xa>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
    1616:	80 91 35 08 	lds	r24, 0x0835
    161a:	88 23       	and	r24, r24
    161c:	09 f4       	brne	.+2      	; 0x1620 <rf_rx_packet_nonblock+0x14>
    161e:	98 c0       	rjmp	.+304    	; 0x1750 <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1620:	80 91 7b 01 	lds	r24, 0x017B
    1624:	e0 91 f4 07 	lds	r30, 0x07F4
    1628:	f0 91 f5 07 	lds	r31, 0x07F5
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	24 81       	ldd	r18, Z+4	; 0x04
    1632:	33 27       	eor	r19, r19
    1634:	27 fd       	sbrc	r18, 7
    1636:	30 95       	com	r19
    1638:	28 17       	cp	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	0c f4       	brge	.+2      	; 0x1640 <rf_rx_packet_nonblock+0x34>
    163e:	8a c0       	rjmp	.+276    	; 0x1754 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1640:	e0 91 f4 07 	lds	r30, 0x07F4
    1644:	f0 91 f5 07 	lds	r31, 0x07F5
    1648:	80 91 82 01 	lds	r24, 0x0182
    164c:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    164e:	e0 91 f4 07 	lds	r30, 0x07F4
    1652:	f0 91 f5 07 	lds	r31, 0x07F5
    1656:	80 91 87 01 	lds	r24, 0x0187
    165a:	90 91 88 01 	lds	r25, 0x0188
    165e:	92 83       	std	Z+2, r25	; 0x02
    1660:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1662:	e0 91 f4 07 	lds	r30, 0x07F4
    1666:	f0 91 f5 07 	lds	r31, 0x07F5
    166a:	80 91 7b 01 	lds	r24, 0x017B
    166e:	8b 50       	subi	r24, 0x0B	; 11
    1670:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1672:	a0 91 f4 07 	lds	r26, 0x07F4
    1676:	b0 91 f5 07 	lds	r27, 0x07F5
    167a:	e0 91 f4 07 	lds	r30, 0x07F4
    167e:	f0 91 f5 07 	lds	r31, 0x07F5
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	9c 91       	ld	r25, X
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	89 17       	cp	r24, r25
    168a:	3c f0       	brlt	.+14     	; 0x169a <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    168c:	e0 91 f4 07 	lds	r30, 0x07F4
    1690:	f0 91 f5 07 	lds	r31, 0x07F5
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	87 ff       	sbrs	r24, 7
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    169a:	10 92 35 08 	sts	0x0835, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    169e:	80 91 4c 01 	lds	r24, 0x014C
    16a2:	8f 77       	andi	r24, 0x7F	; 127
    16a4:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    16a8:	80 91 4c 01 	lds	r24, 0x014C
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	80 93 4c 01 	sts	0x014C, r24
    16b2:	50 c0       	rjmp	.+160    	; 0x1754 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    16b4:	a0 91 f4 07 	lds	r26, 0x07F4
    16b8:	b0 91 f5 07 	lds	r27, 0x07F5
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    16bc:	e0 91 f4 07 	lds	r30, 0x07F4
    16c0:	f0 91 f5 07 	lds	r31, 0x07F5
    16c4:	13 96       	adiw	r26, 0x03	; 3
    16c6:	4c 91       	ld	r20, X
    16c8:	55 27       	eor	r21, r21
    16ca:	47 fd       	sbrc	r20, 7
    16cc:	50 95       	com	r21
    16ce:	69 e8       	ldi	r22, 0x89	; 137
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	85 81       	ldd	r24, Z+5	; 0x05
    16d4:	96 81       	ldd	r25, Z+6	; 0x06
    16d6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    16da:	e0 91 f4 07 	lds	r30, 0x07F4
    16de:	f0 91 f5 07 	lds	r31, 0x07F5
    16e2:	80 91 80 01 	lds	r24, 0x0180
    16e6:	85 fb       	bst	r24, 5
    16e8:	88 27       	eor	r24, r24
    16ea:	80 f9       	bld	r24, 0
    16ec:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    16ee:	e0 91 f4 07 	lds	r30, 0x07F4
    16f2:	f0 91 f5 07 	lds	r31, 0x07F5
    16f6:	80 91 47 01 	lds	r24, 0x0147
    16fa:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    16fc:	e0 91 f4 07 	lds	r30, 0x07F4
    1700:	f0 91 f5 07 	lds	r31, 0x07F5
    1704:	80 91 46 01 	lds	r24, 0x0146
    1708:	86 95       	lsr	r24
    170a:	86 95       	lsr	r24
    170c:	86 95       	lsr	r24
    170e:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1710:	e0 91 f4 07 	lds	r30, 0x07F4
    1714:	f0 91 f5 07 	lds	r31, 0x07F5
    1718:	80 91 47 01 	lds	r24, 0x0147
    171c:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    171e:	e0 91 f4 07 	lds	r30, 0x07F4
    1722:	f0 91 f5 07 	lds	r31, 0x07F5
    1726:	a0 91 7b 01 	lds	r26, 0x017B
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	a0 58       	subi	r26, 0x80	; 128
    172e:	be 4f       	sbci	r27, 0xFE	; 254
    1730:	8c 91       	ld	r24, X
    1732:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
    1734:	10 92 35 08 	sts	0x0835, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1738:	80 91 4c 01 	lds	r24, 0x014C
    173c:	8f 77       	andi	r24, 0x7F	; 127
    173e:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1742:	80 91 4c 01 	lds	r24, 0x014C
    1746:	80 68       	ori	r24, 0x80	; 128
    1748:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1754:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1756:	08 95       	ret

00001758 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1758:	1f 92       	push	r1
    175a:	0f 92       	push	r0
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	0f 92       	push	r0
    1760:	11 24       	eor	r1, r1
    1762:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1764:	80 e8       	ldi	r24, 0x80	; 128
    1766:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    176a:	8f 91       	pop	r24
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 05 08 	sts	0x0805, r24
	IRQ_STATUS = (1 << TX_END);
    1788:	80 e4       	ldi	r24, 0x40	; 64
    178a:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    178e:	8f 91       	pop	r24
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	0f 90       	pop	r0
    1796:	1f 90       	pop	r1
    1798:	18 95       	reti

0000179a <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    17ac:	8f 91       	pop	r24
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    17c4:	80 e1       	ldi	r24, 0x10	; 16
    17c6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    17ca:	8f 91       	pop	r24
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	0b b6       	in	r0, 0x3b	; 59
    17e2:	0f 92       	push	r0
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1802:	e0 91 21 04 	lds	r30, 0x0421
    1806:	f0 91 22 04 	lds	r31, 0x0422
    180a:	30 97       	sbiw	r30, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <__vector_59+0x3a>
		rx_start_func();
    180e:	09 95       	icall

	return;
}
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	bf 91       	pop	r27
    1816:	af 91       	pop	r26
    1818:	9f 91       	pop	r25
    181a:	8f 91       	pop	r24
    181c:	7f 91       	pop	r23
    181e:	6f 91       	pop	r22
    1820:	5f 91       	pop	r21
    1822:	4f 91       	pop	r20
    1824:	3f 91       	pop	r19
    1826:	2f 91       	pop	r18
    1828:	0f 90       	pop	r0
    182a:	0b be       	out	0x3b, r0	; 59
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1848:	8f 91       	pop	r24
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1866:	8f 91       	pop	r24
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1872:	e9 e4       	ldi	r30, 0x49	; 73
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	90 81       	ld	r25, Z
    1878:	90 7f       	andi	r25, 0xF0	; 240
    187a:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    187c:	90 81       	ld	r25, Z
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	89 2b       	or	r24, r25
    1882:	80 83       	st	Z, r24
    1884:	08 95       	ret

00001886 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	08 95       	ret

0000188a <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    188a:	08 95       	ret

0000188c <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    188c:	08 95       	ret

0000188e <rf_security_disable>:
}



void rf_security_disable()
{
    188e:	08 95       	ret

00001890 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	08 95       	ret

00001894 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1894:	80 91 ef 07 	lds	r24, 0x07EF
    1898:	90 91 f0 07 	lds	r25, 0x07F0
    189c:	08 95       	ret

0000189e <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	08 95       	ret

000018a2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    18a2:	08 95       	ret

000018a4 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	08 95       	ret

000018a8 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	08 95       	ret

000018ac <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	08 95       	ret

000018b0 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    18b0:	08 95       	ret

000018b2 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    18b2:	08 95       	ret

000018b4 <rf_test_mode>:
}



void rf_test_mode()
{
    18b4:	08 95       	ret

000018b6 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    18b6:	08 95       	ret

000018b8 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    18b8:	08 95       	ret

000018ba <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    18ba:	08 95       	ret

000018bc <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    18bc:	08 95       	ret

000018be <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    18be:	08 95       	ret

000018c0 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    18c0:	e7 e3       	ldi	r30, 0x37	; 55
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	80 81       	ld	r24, Z
    18c6:	83 60       	ori	r24, 0x03	; 3
    18c8:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    18ca:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    18cc:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    18ce:	8d b1       	in	r24, 0x0d	; 13
    18d0:	80 6e       	ori	r24, 0xE0	; 224
    18d2:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    18d4:	8e b1       	in	r24, 0x0e	; 14
    18d6:	80 6e       	ori	r24, 0xE0	; 224
    18d8:	8e b9       	out	0x0e, r24	; 14
    18da:	08 95       	ret

000018dc <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    18dc:	e7 e3       	ldi	r30, 0x37	; 55
    18de:	f1 e0       	ldi	r31, 0x01	; 1
    18e0:	80 81       	ld	r24, Z
    18e2:	83 60       	ori	r24, 0x03	; 3
    18e4:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    18e6:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    18e8:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    18ea:	8d b1       	in	r24, 0x0d	; 13
    18ec:	80 6e       	ori	r24, 0xE0	; 224
    18ee:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    18f0:	8e b1       	in	r24, 0x0e	; 14
    18f2:	80 6e       	ori	r24, 0xE0	; 224
    18f4:	8e b9       	out	0x0e, r24	; 14
    18f6:	08 95       	ret

000018f8 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	27 97       	sbiw	r28, 0x07	; 7
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1918:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    191c:	e0 91 f4 07 	lds	r30, 0x07F4
    1920:	f0 91 f5 07 	lds	r31, 0x07F5
    1924:	c0 80       	ld	r12, Z
    1926:	d3 80       	ldd	r13, Z+3	; 0x03
    1928:	05 81       	ldd	r16, Z+5	; 0x05
    192a:	16 81       	ldd	r17, Z+6	; 0x06
    192c:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    192e:	0e 94 06 0b 	call	0x160c	; 0x160c <rf_rx_packet_nonblock>
	if (err < 1) {
    1932:	18 16       	cp	r1, r24
    1934:	1c f0       	brlt	.+6      	; 0x193c <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1936:	8c e9       	ldi	r24, 0x9C	; 156
    1938:	92 e0       	ldi	r25, 0x02	; 2
    193a:	06 c0       	rjmp	.+12     	; 0x1948 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    193c:	f8 01       	movw	r30, r16
    193e:	f0 80       	ld	r15, Z
	if (ttl == 0) {
    1940:	f1 10       	cpse	r15, r1
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1944:	8b eb       	ldi	r24, 0xBB	; 187
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <puts>
#endif
		nrk_int_enable();
    194c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
		return;
    1950:	32 c0       	rjmp	.+100    	; 0x19b6 <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
    1952:	f5 e0       	ldi	r31, 0x05	; 5
    1954:	ff 12       	cpse	r15, r31
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1960:	c8 01       	movw	r24, r16
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	9f 93       	push	r25
    1966:	8f 93       	push	r24
    1968:	8e 2d       	mov	r24, r14
    196a:	99 27       	eor	r25, r25
    196c:	87 fd       	sbrc	r24, 7
    196e:	90 95       	com	r25
    1970:	9f 93       	push	r25
    1972:	ef 92       	push	r14
    1974:	1f 92       	push	r1
    1976:	ff 92       	push	r15
    1978:	1f 92       	push	r1
    197a:	cf 92       	push	r12
    197c:	8d ed       	ldi	r24, 0xDD	; 221
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1988:	1d 83       	std	Y+5, r17	; 0x05
    198a:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    198c:	fa 94       	dec	r15
    198e:	f8 01       	movw	r30, r16
    1990:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    1992:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1994:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1996:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	9f ef       	ldi	r25, 0xFF	; 255
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    19a0:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <rf_tx_packet>
#endif
	return;
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
}
    19b6:	27 96       	adiw	r28, 0x07	; 7
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	0b b6       	in	r0, 0x3b	; 59
    19e0:	0f 92       	push	r0
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 91 7b 01 	lds	r25, 0x017B
    1a00:	89 17       	cp	r24, r25
    1a02:	10 f4       	brcc	.+4      	; 0x1a08 <__vector_60+0x34>
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	fa cf       	rjmp	.-12     	; 0x19fc <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1a08:	80 91 46 01 	lds	r24, 0x0146
    1a0c:	87 ff       	sbrs	r24, 7
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <__vector_60+0x44>
		rx_ready = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 35 08 	sts	0x0835, r24
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	93 e0       	ldi	r25, 0x03	; 3
    1a1c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1a20:	88 e0       	ldi	r24, 0x08	; 8
    1a22:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1a26:	80 91 46 01 	lds	r24, 0x0146
    1a2a:	87 ff       	sbrs	r24, 7
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1a2e:	80 91 f1 07 	lds	r24, 0x07F1
    1a32:	81 11       	cpse	r24, r1
    1a34:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1a38:	e0 91 1f 04 	lds	r30, 0x041F
    1a3c:	f0 91 20 04 	lds	r31, 0x0420
    1a40:	30 97       	sbiw	r30, 0x00	; 0
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <__vector_60+0x72>
		rx_end_func();
    1a44:	09 95       	icall

	return;
}
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0b be       	out	0x3b, r0	; 59
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1a6c:	e6 e0       	ldi	r30, 0x06	; 6
    1a6e:	f8 e0       	ldi	r31, 0x08	; 8
    1a70:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1a72:	8c 91       	ld	r24, X
    1a74:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    1a76:	8d 91       	ld	r24, X+
    1a78:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1a7c:	88 e0       	ldi	r24, 0x08	; 8
    1a7e:	e6 31       	cpi	r30, 0x16	; 22
    1a80:	f8 07       	cpc	r31, r24
    1a82:	b9 f7       	brne	.-18     	; 0x1a72 <aes_setkey+0x6>
    1a84:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1a86:	10 92 3e 01 	sts	0x013E, r1
    1a8a:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1a8e:	80 e8       	ldi	r24, 0x80	; 128
    1a90:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1a94:	80 91 3d 01 	lds	r24, 0x013D
    1a98:	80 ff       	sbrs	r24, 0
    1a9a:	fc cf       	rjmp	.-8      	; 0x1a94 <aes_setkey+0x28>
    1a9c:	ef e1       	ldi	r30, 0x1F	; 31
    1a9e:	f8 e0       	ldi	r31, 0x08	; 8
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1aa0:	80 91 3f 01 	lds	r24, 0x013F
    1aa4:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1aa6:	88 e0       	ldi	r24, 0x08	; 8
    1aa8:	ef 32       	cpi	r30, 0x2F	; 47
    1aaa:	f8 07       	cpc	r31, r24
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
    1aae:	08 95       	ret

00001ab0 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1ab0:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1ab2:	66 23       	and	r22, r22
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <aes_encrypt+0x8>
    1ab6:	47 c0       	rjmp	.+142    	; 0x1b46 <aes_encrypt+0x96>
    1ab8:	26 2f       	mov	r18, r22
    1aba:	2f 70       	andi	r18, 0x0F	; 15
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <aes_encrypt+0x10>
    1abe:	43 c0       	rjmp	.+134    	; 0x1b46 <aes_encrypt+0x96>
    1ac0:	e6 e0       	ldi	r30, 0x06	; 6
    1ac2:	f8 e0       	ldi	r31, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1ac4:	21 91       	ld	r18, Z+
    1ac6:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1aca:	28 e0       	ldi	r18, 0x08	; 8
    1acc:	e6 31       	cpi	r30, 0x16	; 22
    1ace:	f2 07       	cpc	r31, r18
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <aes_encrypt+0x14>
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1ad6:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1ad8:	20 e1       	ldi	r18, 0x10	; 16
    1ada:	a2 9f       	mul	r26, r18
    1adc:	a0 01       	movw	r20, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	46 17       	cp	r20, r22
    1ae2:	57 07       	cpc	r21, r23
    1ae4:	74 f5       	brge	.+92     	; 0x1b42 <aes_encrypt+0x92>
      if(i==0)
    1ae6:	a1 11       	cpse	r26, r1
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1aea:	10 92 3c 01 	sts	0x013C, r1
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1af0:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	48 0f       	add	r20, r24
    1afa:	59 1f       	adc	r21, r25
    1afc:	fa 01       	movw	r30, r20
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1b02:	e0 81       	ld	r30, Z
    1b04:	e0 93 3e 01 	sts	0x013E, r30
    1b08:	2f 5f       	subi	r18, 0xFF	; 255
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1b0c:	20 31       	cpi	r18, 0x10	; 16
    1b0e:	31 05       	cpc	r19, r1
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1b12:	20 91 3c 01 	lds	r18, 0x013C
    1b16:	20 68       	ori	r18, 0x80	; 128
    1b18:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1b1c:	20 91 3d 01 	lds	r18, 0x013D
    1b20:	20 ff       	sbrs	r18, 0
    1b22:	fc cf       	rjmp	.-8      	; 0x1b1c <aes_encrypt+0x6c>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1b28:	c0 91 3e 01 	lds	r28, 0x013E
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	c0 83       	st	Z, r28
    1b34:	2f 5f       	subi	r18, 0xFF	; 255
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1b38:	20 31       	cpi	r18, 0x10	; 16
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	a9 f7       	brne	.-22     	; 0x1b28 <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1b3e:	af 5f       	subi	r26, 0xFF	; 255
    1b40:	cb cf       	rjmp	.-106    	; 0x1ad8 <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1b54:	61 30       	cpi	r22, 0x01	; 1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <aes_decrypt+0xe>
    1b58:	4f c0       	rjmp	.+158    	; 0x1bf8 <aes_decrypt+0xac>
    1b5a:	26 2f       	mov	r18, r22
    1b5c:	2f 70       	andi	r18, 0x0F	; 15
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <aes_decrypt+0x16>
    1b60:	4b c0       	rjmp	.+150    	; 0x1bf8 <aes_decrypt+0xac>
    1b62:	ef e1       	ldi	r30, 0x1F	; 31
    1b64:	f8 e0       	ldi	r31, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1b66:	21 91       	ld	r18, Z+
    1b68:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1b6c:	28 e0       	ldi	r18, 0x08	; 8
    1b6e:	ef 32       	cpi	r30, 0x2F	; 47
    1b70:	f2 07       	cpc	r31, r18
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1b74:	62 95       	swap	r22
    1b76:	6f 70       	andi	r22, 0x0F	; 15
    1b78:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1b7a:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1b7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1b7e:	d1 f1       	breq	.+116    	; 0x1bf4 <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1b80:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1b84:	20 e1       	ldi	r18, 0x10	; 16
    1b86:	62 02       	muls	r22, r18
    1b88:	a0 01       	movw	r20, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	fc 01       	movw	r30, r24
    1b92:	e4 0f       	add	r30, r20
    1b94:	f5 1f       	adc	r31, r21
    1b96:	df 01       	movw	r26, r30
    1b98:	a2 0f       	add	r26, r18
    1b9a:	b3 1f       	adc	r27, r19
    1b9c:	7c 91       	ld	r23, X
    1b9e:	70 93 3e 01 	sts	0x013E, r23
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1ba6:	20 31       	cpi	r18, 0x10	; 16
    1ba8:	31 05       	cpc	r19, r1
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1bac:	20 91 3c 01 	lds	r18, 0x013C
    1bb0:	20 68       	ori	r18, 0x80	; 128
    1bb2:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1bb6:	20 91 3d 01 	lds	r18, 0x013D
    1bba:	20 ff       	sbrs	r18, 0
    1bbc:	fc cf       	rjmp	.-8      	; 0x1bb6 <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1bbe:	40 51       	subi	r20, 0x10	; 16
    1bc0:	51 09       	sbc	r21, r1
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	48 0f       	add	r20, r24
    1bc8:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1bca:	10 91 3e 01 	lds	r17, 0x013E
    1bce:	df 01       	movw	r26, r30
    1bd0:	a2 0f       	add	r26, r18
    1bd2:	b3 1f       	adc	r27, r19
    1bd4:	1c 93       	st	X, r17
         if(i!=0)
    1bd6:	66 23       	and	r22, r22
    1bd8:	31 f0       	breq	.+12     	; 0x1be6 <aes_decrypt+0x9a>
    1bda:	ea 01       	movw	r28, r20
    1bdc:	c2 0f       	add	r28, r18
    1bde:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
    1be0:	78 81       	ld	r23, Y
    1be2:	71 27       	eor	r23, r17
    1be4:	7c 93       	st	X, r23
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1bea:	20 31       	cpi	r18, 0x10	; 16
    1bec:	31 05       	cpc	r19, r1
    1bee:	69 f7       	brne	.-38     	; 0x1bca <aes_decrypt+0x7e>
    1bf0:	61 50       	subi	r22, 0x01	; 1
    1bf2:	c4 cf       	rjmp	.-120    	; 0x1b7c <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1c04:	90 91 c0 00 	lds	r25, 0x00C0
    1c08:	95 ff       	sbrs	r25, 5
    1c0a:	fc cf       	rjmp	.-8      	; 0x1c04 <putc0>
    1c0c:	90 91 c0 00 	lds	r25, 0x00C0
    1c10:	9f 7d       	andi	r25, 0xDF	; 223
    1c12:	90 93 c0 00 	sts	0x00C0, r25
    1c16:	80 93 c6 00 	sts	0x00C6, r24
    1c1a:	08 95       	ret

00001c1c <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	0b b6       	in	r0, 0x3b	; 59
    1c28:	0f 92       	push	r0
    1c2a:	2f 93       	push	r18
    1c2c:	3f 93       	push	r19
    1c2e:	4f 93       	push	r20
    1c30:	5f 93       	push	r21
    1c32:	6f 93       	push	r22
    1c34:	7f 93       	push	r23
    1c36:	8f 93       	push	r24
    1c38:	9f 93       	push	r25
    1c3a:	af 93       	push	r26
    1c3c:	bf 93       	push	r27
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
char c;
uint8_t sig;
// cli();
DISABLE_UART0_RX_INT();
    1c42:	80 91 c1 00 	lds	r24, 0x00C1
    1c46:	8f 77       	andi	r24, 0x7F	; 127
    1c48:	80 93 c1 00 	sts	0x00C1, r24
   UART0_WAIT_AND_RECEIVE(c);
    1c4c:	80 91 c0 00 	lds	r24, 0x00C0
    1c50:	87 ff       	sbrs	r24, 7
    1c52:	fc cf       	rjmp	.-8      	; 0x1c4c <__vector_25+0x30>
    1c54:	80 91 c0 00 	lds	r24, 0x00C0
    1c58:	8f 77       	andi	r24, 0x7F	; 127
    1c5a:	80 93 c0 00 	sts	0x00C0, r24
    1c5e:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    1c62:	80 91 34 04 	lds	r24, 0x0434
    1c66:	90 91 35 04 	lds	r25, 0x0435
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	ec 5d       	subi	r30, 0xDC	; 220
    1c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c70:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1c72:	01 96       	adiw	r24, 0x01	; 1
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    1c74:	80 31       	cpi	r24, 0x10	; 16
    1c76:	91 05       	cpc	r25, r1
    1c78:	29 f0       	breq	.+10     	; 0x1c84 <__vector_25+0x68>
// cli();
DISABLE_UART0_RX_INT();
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1c7a:	90 93 35 04 	sts	0x0435, r25
    1c7e:	80 93 34 04 	sts	0x0434, r24
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__vector_25+0x70>
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    1c84:	10 92 35 04 	sts	0x0435, r1
    1c88:	10 92 34 04 	sts	0x0434, r1
		   }
   nrk_event_signal(uart_rx_signal);
    1c8c:	80 91 23 04 	lds	r24, 0x0423
    1c90:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    1c94:	80 91 c0 00 	lds	r24, 0x00C0
    1c98:	8f 77       	andi	r24, 0x7F	; 127
    1c9a:	80 93 c0 00 	sts	0x00C0, r24
ENABLE_UART0_RX_INT();
    1c9e:	80 91 c1 00 	lds	r24, 0x00C1
    1ca2:	80 68       	ori	r24, 0x80	; 128
    1ca4:	80 93 c1 00 	sts	0x00C1, r24
// sei();
}
    1ca8:	ff 91       	pop	r31
    1caa:	ef 91       	pop	r30
    1cac:	bf 91       	pop	r27
    1cae:	af 91       	pop	r26
    1cb0:	9f 91       	pop	r25
    1cb2:	8f 91       	pop	r24
    1cb4:	7f 91       	pop	r23
    1cb6:	6f 91       	pop	r22
    1cb8:	5f 91       	pop	r21
    1cba:	4f 91       	pop	r20
    1cbc:	3f 91       	pop	r19
    1cbe:	2f 91       	pop	r18
    1cc0:	0f 90       	pop	r0
    1cc2:	0b be       	out	0x3b, r0	; 59
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1cce:	81 11       	cpse	r24, r1
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1cd2:	20 91 36 04 	lds	r18, 0x0436
    1cd6:	30 91 37 04 	lds	r19, 0x0437
    1cda:	80 91 34 04 	lds	r24, 0x0434
    1cde:	90 91 35 04 	lds	r25, 0x0435
    1ce2:	28 17       	cp	r18, r24
    1ce4:	39 07       	cpc	r19, r25
    1ce6:	41 f4       	brne	.+16     	; 0x1cf8 <nrk_uart_data_ready+0x2a>
if(uart_num==1)
	{
        if( UCSR1A & BM(RXC1) ) return 1;
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	08 95       	ret
if(uart_num==0)
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
        }
if(uart_num==1)
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <nrk_uart_data_ready+0x1a>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1cf0:	80 91 c8 00 	lds	r24, 0x00C8
    1cf4:	87 ff       	sbrs	r24, 7
    1cf6:	f8 cf       	rjmp	.-16     	; 0x1ce8 <nrk_uart_data_ready+0x1a>
uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
	{
        if( UCSR1A & BM(RXC1) ) return 1;
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    1cfa:	08 95       	ret

00001cfc <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1cfc:	80 91 23 04 	lds	r24, 0x0423
    1d00:	8f 3f       	cpi	r24, 0xFF	; 255
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <nrk_uart_rx_signal_get+0xe>
    1d04:	8e e0       	ldi	r24, 0x0E	; 14
    1d06:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
   return uart_rx_signal;
}
    1d0a:	80 91 23 04 	lds	r24, 0x0423
    1d0e:	08 95       	ret

00001d10 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1d14:	fc 01       	movw	r30, r24
    1d16:	24 91       	lpm	r18, Z
    1d18:	ec 01       	movw	r28, r24
    1d1a:	21 96       	adiw	r28, 0x01	; 1
    1d1c:	22 23       	and	r18, r18
    1d1e:	51 f0       	breq	.+20     	; 0x1d34 <nrk_kprintf+0x24>
        putchar(c);
    1d20:	60 91 4d 08 	lds	r22, 0x084D
    1d24:	70 91 4e 08 	lds	r23, 0x084E
    1d28:	82 2f       	mov	r24, r18
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    1d30:	ce 01       	movw	r24, r28
    1d32:	f0 cf       	rjmp	.-32     	; 0x1d14 <nrk_kprintf+0x4>
}
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { v=nrk_event_wait(uart_rx_signal); }
    1d3a:	20 91 36 04 	lds	r18, 0x0436
    1d3e:	30 91 37 04 	lds	r19, 0x0437
    1d42:	80 91 34 04 	lds	r24, 0x0434
    1d46:	90 91 35 04 	lds	r25, 0x0435
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	49 f4       	brne	.+18     	; 0x1d62 <getc0+0x28>
    1d50:	60 91 23 04 	lds	r22, 0x0423
    1d54:	77 27       	eor	r23, r23
    1d56:	67 fd       	sbrc	r22, 7
    1d58:	70 95       	com	r23
    1d5a:	87 2f       	mov	r24, r23
    1d5c:	97 2f       	mov	r25, r23
    1d5e:	0e 94 cf 18 	call	0x319e	; 0x319e <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    1d62:	6f 3f       	cpi	r22, 0xFF	; 255
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <getc0+0x34>
    1d66:	8e e2       	ldi	r24, 0x2E	; 46
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    1d6e:	20 91 36 04 	lds	r18, 0x0436
    1d72:	30 91 37 04 	lds	r19, 0x0437
    1d76:	f9 01       	movw	r30, r18
    1d78:	ec 5d       	subi	r30, 0xDC	; 220
    1d7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d7c:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    1d7e:	2f 5f       	subi	r18, 0xFF	; 255
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    1d82:	20 31       	cpi	r18, 0x10	; 16
    1d84:	31 05       	cpc	r19, r1
    1d86:	28 f4       	brcc	.+10     	; 0x1d92 <getc0+0x58>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    1d88:	30 93 37 04 	sts	0x0437, r19
    1d8c:	20 93 36 04 	sts	0x0436, r18
    1d90:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    1d92:	10 92 37 04 	sts	0x0437, r1
    1d96:	10 92 36 04 	sts	0x0436, r1

   return tmp;
}
    1d9a:	08 95       	ret

00001d9c <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1da0:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1da2:	88 ef       	ldi	r24, 0xF8	; 248
    1da4:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1da6:	80 ef       	ldi	r24, 0xF0	; 240
    1da8:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	8d b9       	out	0x0d, r24	; 13
    1dae:	08 95       	ret

00001db0 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1db0:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <PORT_INIT>

00001db4 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1db4:	8f 3f       	cpi	r24, 0xFF	; 255
    1db6:	09 f4       	brne	.+2      	; 0x1dba <nrk_gpio_set+0x6>
    1db8:	5c c0       	rjmp	.+184    	; 0x1e72 <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    1dba:	48 2f       	mov	r20, r24
    1dbc:	47 70       	andi	r20, 0x07	; 7
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	47 30       	cpi	r20, 0x07	; 7
    1dc2:	51 05       	cpc	r21, r1
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <nrk_gpio_set+0x14>
    1dc6:	55 c0       	rjmp	.+170    	; 0x1e72 <nrk_gpio_set+0xbe>
    1dc8:	fa 01       	movw	r30, r20
    1dca:	e0 57       	subi	r30, 0x70	; 112
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	86 95       	lsr	r24
    1dd0:	86 95       	lsr	r24
    1dd2:	86 95       	lsr	r24
    1dd4:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1dd8:	92 b1       	in	r25, 0x02	; 2
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	08 2e       	mov	r0, r24
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <nrk_gpio_set+0x30>
    1de2:	22 0f       	add	r18, r18
    1de4:	0a 94       	dec	r0
    1de6:	ea f7       	brpl	.-6      	; 0x1de2 <nrk_gpio_set+0x2e>
    1de8:	92 2b       	or	r25, r18
    1dea:	92 b9       	out	0x02, r25	; 2
    1dec:	40 c0       	rjmp	.+128    	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1dee:	95 b1       	in	r25, 0x05	; 5
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	08 2e       	mov	r0, r24
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <nrk_gpio_set+0x46>
    1df8:	22 0f       	add	r18, r18
    1dfa:	0a 94       	dec	r0
    1dfc:	ea f7       	brpl	.-6      	; 0x1df8 <nrk_gpio_set+0x44>
    1dfe:	92 2b       	or	r25, r18
    1e00:	95 b9       	out	0x05, r25	; 5
    1e02:	35 c0       	rjmp	.+106    	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e04:	98 b1       	in	r25, 0x08	; 8
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	08 2e       	mov	r0, r24
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <nrk_gpio_set+0x5c>
    1e0e:	22 0f       	add	r18, r18
    1e10:	0a 94       	dec	r0
    1e12:	ea f7       	brpl	.-6      	; 0x1e0e <nrk_gpio_set+0x5a>
    1e14:	92 2b       	or	r25, r18
    1e16:	98 b9       	out	0x08, r25	; 8
    1e18:	2a c0       	rjmp	.+84     	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e1a:	9b b1       	in	r25, 0x0b	; 11
    1e1c:	21 e0       	ldi	r18, 0x01	; 1
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	08 2e       	mov	r0, r24
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <nrk_gpio_set+0x72>
    1e24:	22 0f       	add	r18, r18
    1e26:	0a 94       	dec	r0
    1e28:	ea f7       	brpl	.-6      	; 0x1e24 <nrk_gpio_set+0x70>
    1e2a:	92 2b       	or	r25, r18
    1e2c:	9b b9       	out	0x0b, r25	; 11
    1e2e:	1f c0       	rjmp	.+62     	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e30:	9e b1       	in	r25, 0x0e	; 14
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	08 2e       	mov	r0, r24
    1e38:	01 c0       	rjmp	.+2      	; 0x1e3c <nrk_gpio_set+0x88>
    1e3a:	22 0f       	add	r18, r18
    1e3c:	0a 94       	dec	r0
    1e3e:	ea f7       	brpl	.-6      	; 0x1e3a <nrk_gpio_set+0x86>
    1e40:	92 2b       	or	r25, r18
    1e42:	9e b9       	out	0x0e, r25	; 14
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e46:	91 b3       	in	r25, 0x11	; 17
    1e48:	21 e0       	ldi	r18, 0x01	; 1
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	08 2e       	mov	r0, r24
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <nrk_gpio_set+0x9e>
    1e50:	22 0f       	add	r18, r18
    1e52:	0a 94       	dec	r0
    1e54:	ea f7       	brpl	.-6      	; 0x1e50 <nrk_gpio_set+0x9c>
    1e56:	92 2b       	or	r25, r18
    1e58:	91 bb       	out	0x11, r25	; 17
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e5c:	94 b3       	in	r25, 0x14	; 20
    1e5e:	21 e0       	ldi	r18, 0x01	; 1
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <nrk_gpio_set+0xb2>
    1e64:	22 0f       	add	r18, r18
    1e66:	8a 95       	dec	r24
    1e68:	ea f7       	brpl	.-6      	; 0x1e64 <nrk_gpio_set+0xb0>
    1e6a:	92 2b       	or	r25, r18
    1e6c:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e70:	08 95       	ret
                default: return -1;
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1e74:	08 95       	ret

00001e76 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <nrk_gpio_clr+0x6>
    1e7a:	57 c0       	rjmp	.+174    	; 0x1f2a <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	47 70       	andi	r20, 0x07	; 7
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	47 30       	cpi	r20, 0x07	; 7
    1e84:	51 05       	cpc	r21, r1
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <nrk_gpio_clr+0x14>
    1e88:	50 c0       	rjmp	.+160    	; 0x1f2a <nrk_gpio_clr+0xb4>
    1e8a:	fa 01       	movw	r30, r20
    1e8c:	e9 56       	subi	r30, 0x69	; 105
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	86 95       	lsr	r24
    1e92:	86 95       	lsr	r24
    1e94:	86 95       	lsr	r24
    1e96:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1e9a:	92 b1       	in	r25, 0x02	; 2
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	08 2e       	mov	r0, r24
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <nrk_gpio_clr+0x30>
    1ea4:	22 0f       	add	r18, r18
    1ea6:	0a 94       	dec	r0
    1ea8:	ea f7       	brpl	.-6      	; 0x1ea4 <nrk_gpio_clr+0x2e>
    1eaa:	20 95       	com	r18
    1eac:	29 23       	and	r18, r25
    1eae:	22 b9       	out	0x02, r18	; 2
    1eb0:	3a c0       	rjmp	.+116    	; 0x1f26 <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1eb2:	95 b1       	in	r25, 0x05	; 5
    1eb4:	21 e0       	ldi	r18, 0x01	; 1
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	08 2e       	mov	r0, r24
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <nrk_gpio_clr+0x48>
    1ebc:	22 0f       	add	r18, r18
    1ebe:	0a 94       	dec	r0
    1ec0:	ea f7       	brpl	.-6      	; 0x1ebc <nrk_gpio_clr+0x46>
    1ec2:	20 95       	com	r18
    1ec4:	29 23       	and	r18, r25
    1ec6:	25 b9       	out	0x05, r18	; 5
    1ec8:	2e c0       	rjmp	.+92     	; 0x1f26 <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1eca:	98 b1       	in	r25, 0x08	; 8
    1ecc:	21 e0       	ldi	r18, 0x01	; 1
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	08 2e       	mov	r0, r24
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <nrk_gpio_clr+0x60>
    1ed4:	22 0f       	add	r18, r18
    1ed6:	0a 94       	dec	r0
    1ed8:	ea f7       	brpl	.-6      	; 0x1ed4 <nrk_gpio_clr+0x5e>
    1eda:	20 95       	com	r18
    1edc:	29 23       	and	r18, r25
    1ede:	28 b9       	out	0x08, r18	; 8
    1ee0:	22 c0       	rjmp	.+68     	; 0x1f26 <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1ee2:	9b b1       	in	r25, 0x0b	; 11
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	08 2e       	mov	r0, r24
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <nrk_gpio_clr+0x78>
    1eec:	22 0f       	add	r18, r18
    1eee:	0a 94       	dec	r0
    1ef0:	ea f7       	brpl	.-6      	; 0x1eec <nrk_gpio_clr+0x76>
    1ef2:	20 95       	com	r18
    1ef4:	29 23       	and	r18, r25
    1ef6:	2b b9       	out	0x0b, r18	; 11
    1ef8:	16 c0       	rjmp	.+44     	; 0x1f26 <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1efa:	9e b1       	in	r25, 0x0e	; 14
    1efc:	21 e0       	ldi	r18, 0x01	; 1
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	08 2e       	mov	r0, r24
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <nrk_gpio_clr+0x90>
    1f04:	22 0f       	add	r18, r18
    1f06:	0a 94       	dec	r0
    1f08:	ea f7       	brpl	.-6      	; 0x1f04 <nrk_gpio_clr+0x8e>
    1f0a:	20 95       	com	r18
    1f0c:	29 23       	and	r18, r25
    1f0e:	2e b9       	out	0x0e, r18	; 14
    1f10:	0a c0       	rjmp	.+20     	; 0x1f26 <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1f12:	91 b3       	in	r25, 0x11	; 17
    1f14:	21 e0       	ldi	r18, 0x01	; 1
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <nrk_gpio_clr+0xa6>
    1f1a:	22 0f       	add	r18, r18
    1f1c:	8a 95       	dec	r24
    1f1e:	ea f7       	brpl	.-6      	; 0x1f1a <nrk_gpio_clr+0xa4>
    1f20:	20 95       	com	r18
    1f22:	29 23       	and	r18, r25
    1f24:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1f28:	08 95       	ret
                default: return -1;
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1f2c:	08 95       	ret

00001f2e <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f30:	21 f1       	breq	.+72     	; 0x1f7a <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    1f32:	48 2f       	mov	r20, r24
    1f34:	47 70       	andi	r20, 0x07	; 7
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	47 30       	cpi	r20, 0x07	; 7
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	f0 f4       	brcc	.+60     	; 0x1f7a <nrk_gpio_get+0x4c>
    1f3e:	fa 01       	movw	r30, r20
    1f40:	e2 56       	subi	r30, 0x62	; 98
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	86 95       	lsr	r24
    1f46:	86 95       	lsr	r24
    1f48:	86 95       	lsr	r24
    1f4a:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1f4e:	20 b1       	in	r18, 0x00	; 0
    1f50:	0b c0       	rjmp	.+22     	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1f52:	23 b1       	in	r18, 0x03	; 3
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1f56:	26 b1       	in	r18, 0x06	; 6
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1f5a:	29 b1       	in	r18, 0x09	; 9
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1f5e:	2c b1       	in	r18, 0x0c	; 12
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1f62:	2f b1       	in	r18, 0x0f	; 15
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1f66:	22 b3       	in	r18, 0x12	; 18
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <nrk_gpio_get+0x42>
    1f6c:	35 95       	asr	r19
    1f6e:	27 95       	ror	r18
    1f70:	8a 95       	dec	r24
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <nrk_gpio_get+0x3e>
    1f74:	82 2f       	mov	r24, r18
    1f76:	81 70       	andi	r24, 0x01	; 1
    1f78:	08 95       	ret
                default: return -1;
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1f7c:	08 95       	ret

00001f7e <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1f7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <nrk_gpio_toggle+0x6>
    1f82:	ef c0       	rjmp	.+478    	; 0x2162 <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    1f84:	48 2f       	mov	r20, r24
    1f86:	47 70       	andi	r20, 0x07	; 7
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	47 30       	cpi	r20, 0x07	; 7
    1f8c:	51 05       	cpc	r21, r1
    1f8e:	08 f0       	brcs	.+2      	; 0x1f92 <nrk_gpio_toggle+0x14>
    1f90:	e8 c0       	rjmp	.+464    	; 0x2162 <nrk_gpio_toggle+0x1e4>
    1f92:	fa 01       	movw	r30, r20
    1f94:	eb 55       	subi	r30, 0x5B	; 91
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	86 95       	lsr	r24
    1f9a:	86 95       	lsr	r24
    1f9c:	86 95       	lsr	r24
    1f9e:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1fa2:	20 b1       	in	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	08 2e       	mov	r0, r24
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <nrk_gpio_toggle+0x30>
    1faa:	35 95       	asr	r19
    1fac:	27 95       	ror	r18
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1fb2:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1fb4:	20 fd       	sbrc	r18, 0
    1fb6:	0a c0       	rjmp	.+20     	; 0x1fcc <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1fb8:	21 e0       	ldi	r18, 0x01	; 1
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <nrk_gpio_toggle+0x44>
    1fc0:	22 0f       	add	r18, r18
    1fc2:	0a 94       	dec	r0
    1fc4:	ea f7       	brpl	.-6      	; 0x1fc0 <nrk_gpio_toggle+0x42>
    1fc6:	92 2b       	or	r25, r18
    1fc8:	92 b9       	out	0x02, r25	; 2
    1fca:	1e c0       	rjmp	.+60     	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1fcc:	21 e0       	ldi	r18, 0x01	; 1
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	08 2e       	mov	r0, r24
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <nrk_gpio_toggle+0x58>
    1fd4:	22 0f       	add	r18, r18
    1fd6:	0a 94       	dec	r0
    1fd8:	ea f7       	brpl	.-6      	; 0x1fd4 <nrk_gpio_toggle+0x56>
    1fda:	20 95       	com	r18
    1fdc:	29 23       	and	r18, r25
    1fde:	22 b9       	out	0x02, r18	; 2
    1fe0:	13 c0       	rjmp	.+38     	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1fe2:	23 b1       	in	r18, 0x03	; 3
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	08 2e       	mov	r0, r24
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <nrk_gpio_toggle+0x70>
    1fea:	35 95       	asr	r19
    1fec:	27 95       	ror	r18
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1ff2:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1ff4:	20 fd       	sbrc	r18, 0
    1ff6:	0a c0       	rjmp	.+20     	; 0x200c <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <nrk_gpio_toggle+0x82>
    1ffe:	22 0f       	add	r18, r18
    2000:	8a 95       	dec	r24
    2002:	ea f7       	brpl	.-6      	; 0x1ffe <nrk_gpio_toggle+0x80>
    2004:	92 2b       	or	r25, r18
    2006:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	08 2e       	mov	r0, r24
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <nrk_gpio_toggle+0x98>
    2014:	22 0f       	add	r18, r18
    2016:	0a 94       	dec	r0
    2018:	ea f7       	brpl	.-6      	; 0x2014 <nrk_gpio_toggle+0x96>
    201a:	20 95       	com	r18
    201c:	29 23       	and	r18, r25
    201e:	25 b9       	out	0x05, r18	; 5
    2020:	f3 cf       	rjmp	.-26     	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2022:	26 b1       	in	r18, 0x06	; 6
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	08 2e       	mov	r0, r24
    2028:	02 c0       	rjmp	.+4      	; 0x202e <nrk_gpio_toggle+0xb0>
    202a:	35 95       	asr	r19
    202c:	27 95       	ror	r18
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2032:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2034:	20 fd       	sbrc	r18, 0
    2036:	0a c0       	rjmp	.+20     	; 0x204c <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2038:	21 e0       	ldi	r18, 0x01	; 1
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	08 2e       	mov	r0, r24
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <nrk_gpio_toggle+0xc4>
    2040:	22 0f       	add	r18, r18
    2042:	0a 94       	dec	r0
    2044:	ea f7       	brpl	.-6      	; 0x2040 <nrk_gpio_toggle+0xc2>
    2046:	92 2b       	or	r25, r18
    2048:	98 b9       	out	0x08, r25	; 8
    204a:	de cf       	rjmp	.-68     	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    204c:	21 e0       	ldi	r18, 0x01	; 1
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	08 2e       	mov	r0, r24
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <nrk_gpio_toggle+0xd8>
    2054:	22 0f       	add	r18, r18
    2056:	0a 94       	dec	r0
    2058:	ea f7       	brpl	.-6      	; 0x2054 <nrk_gpio_toggle+0xd6>
    205a:	20 95       	com	r18
    205c:	29 23       	and	r18, r25
    205e:	28 b9       	out	0x08, r18	; 8
    2060:	d3 cf       	rjmp	.-90     	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2062:	29 b1       	in	r18, 0x09	; 9
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	08 2e       	mov	r0, r24
    2068:	02 c0       	rjmp	.+4      	; 0x206e <nrk_gpio_toggle+0xf0>
    206a:	35 95       	asr	r19
    206c:	27 95       	ror	r18
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2072:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2074:	20 fd       	sbrc	r18, 0
    2076:	0a c0       	rjmp	.+20     	; 0x208c <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	08 2e       	mov	r0, r24
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <nrk_gpio_toggle+0x104>
    2080:	22 0f       	add	r18, r18
    2082:	0a 94       	dec	r0
    2084:	ea f7       	brpl	.-6      	; 0x2080 <nrk_gpio_toggle+0x102>
    2086:	92 2b       	or	r25, r18
    2088:	9b b9       	out	0x0b, r25	; 11
    208a:	be cf       	rjmp	.-132    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    208c:	21 e0       	ldi	r18, 0x01	; 1
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	08 2e       	mov	r0, r24
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <nrk_gpio_toggle+0x118>
    2094:	22 0f       	add	r18, r18
    2096:	0a 94       	dec	r0
    2098:	ea f7       	brpl	.-6      	; 0x2094 <nrk_gpio_toggle+0x116>
    209a:	20 95       	com	r18
    209c:	29 23       	and	r18, r25
    209e:	2b b9       	out	0x0b, r18	; 11
    20a0:	b3 cf       	rjmp	.-154    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    20a2:	2c b1       	in	r18, 0x0c	; 12
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	08 2e       	mov	r0, r24
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <nrk_gpio_toggle+0x130>
    20aa:	35 95       	asr	r19
    20ac:	27 95       	ror	r18
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    20b2:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    20b4:	20 fd       	sbrc	r18, 0
    20b6:	0a c0       	rjmp	.+20     	; 0x20cc <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    20b8:	21 e0       	ldi	r18, 0x01	; 1
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	08 2e       	mov	r0, r24
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <nrk_gpio_toggle+0x144>
    20c0:	22 0f       	add	r18, r18
    20c2:	0a 94       	dec	r0
    20c4:	ea f7       	brpl	.-6      	; 0x20c0 <nrk_gpio_toggle+0x142>
    20c6:	92 2b       	or	r25, r18
    20c8:	9e b9       	out	0x0e, r25	; 14
    20ca:	9e cf       	rjmp	.-196    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    20cc:	21 e0       	ldi	r18, 0x01	; 1
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	08 2e       	mov	r0, r24
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <nrk_gpio_toggle+0x158>
    20d4:	22 0f       	add	r18, r18
    20d6:	0a 94       	dec	r0
    20d8:	ea f7       	brpl	.-6      	; 0x20d4 <nrk_gpio_toggle+0x156>
    20da:	20 95       	com	r18
    20dc:	29 23       	and	r18, r25
    20de:	2e b9       	out	0x0e, r18	; 14
    20e0:	93 cf       	rjmp	.-218    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    20e2:	2f b1       	in	r18, 0x0f	; 15
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	08 2e       	mov	r0, r24
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <nrk_gpio_toggle+0x170>
    20ea:	35 95       	asr	r19
    20ec:	27 95       	ror	r18
    20ee:	0a 94       	dec	r0
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    20f2:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    20f4:	20 fd       	sbrc	r18, 0
    20f6:	0a c0       	rjmp	.+20     	; 0x210c <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    20f8:	21 e0       	ldi	r18, 0x01	; 1
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	08 2e       	mov	r0, r24
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <nrk_gpio_toggle+0x184>
    2100:	22 0f       	add	r18, r18
    2102:	0a 94       	dec	r0
    2104:	ea f7       	brpl	.-6      	; 0x2100 <nrk_gpio_toggle+0x182>
    2106:	92 2b       	or	r25, r18
    2108:	91 bb       	out	0x11, r25	; 17
    210a:	7e cf       	rjmp	.-260    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	08 2e       	mov	r0, r24
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <nrk_gpio_toggle+0x198>
    2114:	22 0f       	add	r18, r18
    2116:	0a 94       	dec	r0
    2118:	ea f7       	brpl	.-6      	; 0x2114 <nrk_gpio_toggle+0x196>
    211a:	20 95       	com	r18
    211c:	29 23       	and	r18, r25
    211e:	21 bb       	out	0x11, r18	; 17
    2120:	73 cf       	rjmp	.-282    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2122:	22 b3       	in	r18, 0x12	; 18
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	08 2e       	mov	r0, r24
    2128:	02 c0       	rjmp	.+4      	; 0x212e <nrk_gpio_toggle+0x1b0>
    212a:	35 95       	asr	r19
    212c:	27 95       	ror	r18
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2132:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2134:	20 fd       	sbrc	r18, 0
    2136:	0a c0       	rjmp	.+20     	; 0x214c <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	08 2e       	mov	r0, r24
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <nrk_gpio_toggle+0x1c4>
    2140:	22 0f       	add	r18, r18
    2142:	0a 94       	dec	r0
    2144:	ea f7       	brpl	.-6      	; 0x2140 <nrk_gpio_toggle+0x1c2>
    2146:	92 2b       	or	r25, r18
    2148:	94 bb       	out	0x14, r25	; 20
    214a:	5e cf       	rjmp	.-324    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	08 2e       	mov	r0, r24
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <nrk_gpio_toggle+0x1d8>
    2154:	22 0f       	add	r18, r18
    2156:	0a 94       	dec	r0
    2158:	ea f7       	brpl	.-6      	; 0x2154 <nrk_gpio_toggle+0x1d6>
    215a:	20 95       	com	r18
    215c:	29 23       	and	r18, r25
    215e:	24 bb       	out	0x14, r18	; 20
    2160:	53 cf       	rjmp	.-346    	; 0x2008 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    2162:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2164:	08 95       	ret

00002166 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2166:	8f 3f       	cpi	r24, 0xFF	; 255
    2168:	09 f4       	brne	.+2      	; 0x216c <nrk_gpio_direction+0x6>
    216a:	be c0       	rjmp	.+380    	; 0x22e8 <nrk_gpio_direction+0x182>
    216c:	48 2f       	mov	r20, r24
    216e:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2170:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2172:	61 11       	cpse	r22, r1
    2174:	60 c0       	rjmp	.+192    	; 0x2236 <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    2176:	47 30       	cpi	r20, 0x07	; 7
    2178:	51 05       	cpc	r21, r1
    217a:	08 f0       	brcs	.+2      	; 0x217e <nrk_gpio_direction+0x18>
    217c:	b5 c0       	rjmp	.+362    	; 0x22e8 <nrk_gpio_direction+0x182>
    217e:	fa 01       	movw	r30, r20
    2180:	e4 55       	subi	r30, 0x54	; 84
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	86 95       	lsr	r24
    2186:	86 95       	lsr	r24
    2188:	86 95       	lsr	r24
    218a:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    218e:	91 b1       	in	r25, 0x01	; 1
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	08 2e       	mov	r0, r24
    2196:	01 c0       	rjmp	.+2      	; 0x219a <nrk_gpio_direction+0x34>
    2198:	22 0f       	add	r18, r18
    219a:	0a 94       	dec	r0
    219c:	ea f7       	brpl	.-6      	; 0x2198 <nrk_gpio_direction+0x32>
    219e:	20 95       	com	r18
    21a0:	29 23       	and	r18, r25
    21a2:	21 b9       	out	0x01, r18	; 1
    21a4:	9f c0       	rjmp	.+318    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    21a6:	94 b1       	in	r25, 0x04	; 4
    21a8:	21 e0       	ldi	r18, 0x01	; 1
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	08 2e       	mov	r0, r24
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <nrk_gpio_direction+0x4c>
    21b0:	22 0f       	add	r18, r18
    21b2:	0a 94       	dec	r0
    21b4:	ea f7       	brpl	.-6      	; 0x21b0 <nrk_gpio_direction+0x4a>
    21b6:	20 95       	com	r18
    21b8:	29 23       	and	r18, r25
    21ba:	24 b9       	out	0x04, r18	; 4
    21bc:	93 c0       	rjmp	.+294    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    21be:	97 b1       	in	r25, 0x07	; 7
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	08 2e       	mov	r0, r24
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <nrk_gpio_direction+0x64>
    21c8:	22 0f       	add	r18, r18
    21ca:	0a 94       	dec	r0
    21cc:	ea f7       	brpl	.-6      	; 0x21c8 <nrk_gpio_direction+0x62>
    21ce:	20 95       	com	r18
    21d0:	29 23       	and	r18, r25
    21d2:	27 b9       	out	0x07, r18	; 7
    21d4:	87 c0       	rjmp	.+270    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    21d6:	9a b1       	in	r25, 0x0a	; 10
    21d8:	21 e0       	ldi	r18, 0x01	; 1
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	08 2e       	mov	r0, r24
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <nrk_gpio_direction+0x7c>
    21e0:	22 0f       	add	r18, r18
    21e2:	0a 94       	dec	r0
    21e4:	ea f7       	brpl	.-6      	; 0x21e0 <nrk_gpio_direction+0x7a>
    21e6:	20 95       	com	r18
    21e8:	29 23       	and	r18, r25
    21ea:	2a b9       	out	0x0a, r18	; 10
    21ec:	7b c0       	rjmp	.+246    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    21ee:	9d b1       	in	r25, 0x0d	; 13
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	08 2e       	mov	r0, r24
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <nrk_gpio_direction+0x94>
    21f8:	22 0f       	add	r18, r18
    21fa:	0a 94       	dec	r0
    21fc:	ea f7       	brpl	.-6      	; 0x21f8 <nrk_gpio_direction+0x92>
    21fe:	20 95       	com	r18
    2200:	29 23       	and	r18, r25
    2202:	2d b9       	out	0x0d, r18	; 13
    2204:	6f c0       	rjmp	.+222    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2206:	90 b3       	in	r25, 0x10	; 16
    2208:	21 e0       	ldi	r18, 0x01	; 1
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	08 2e       	mov	r0, r24
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <nrk_gpio_direction+0xac>
    2210:	22 0f       	add	r18, r18
    2212:	0a 94       	dec	r0
    2214:	ea f7       	brpl	.-6      	; 0x2210 <nrk_gpio_direction+0xaa>
    2216:	20 95       	com	r18
    2218:	29 23       	and	r18, r25
    221a:	20 bb       	out	0x10, r18	; 16
    221c:	63 c0       	rjmp	.+198    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    221e:	93 b3       	in	r25, 0x13	; 19
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	08 2e       	mov	r0, r24
    2226:	01 c0       	rjmp	.+2      	; 0x222a <nrk_gpio_direction+0xc4>
    2228:	22 0f       	add	r18, r18
    222a:	0a 94       	dec	r0
    222c:	ea f7       	brpl	.-6      	; 0x2228 <nrk_gpio_direction+0xc2>
    222e:	20 95       	com	r18
    2230:	29 23       	and	r18, r25
    2232:	23 bb       	out	0x13, r18	; 19
    2234:	57 c0       	rjmp	.+174    	; 0x22e4 <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2236:	47 30       	cpi	r20, 0x07	; 7
    2238:	51 05       	cpc	r21, r1
    223a:	08 f0       	brcs	.+2      	; 0x223e <nrk_gpio_direction+0xd8>
    223c:	55 c0       	rjmp	.+170    	; 0x22e8 <nrk_gpio_direction+0x182>
    223e:	fa 01       	movw	r30, r20
    2240:	ed 54       	subi	r30, 0x4D	; 77
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	86 95       	lsr	r24
    2246:	86 95       	lsr	r24
    2248:	86 95       	lsr	r24
    224a:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    224e:	91 b1       	in	r25, 0x01	; 1
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	08 2e       	mov	r0, r24
    2256:	01 c0       	rjmp	.+2      	; 0x225a <nrk_gpio_direction+0xf4>
    2258:	22 0f       	add	r18, r18
    225a:	0a 94       	dec	r0
    225c:	ea f7       	brpl	.-6      	; 0x2258 <nrk_gpio_direction+0xf2>
    225e:	92 2b       	or	r25, r18
    2260:	91 b9       	out	0x01, r25	; 1
    2262:	40 c0       	rjmp	.+128    	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2264:	94 b1       	in	r25, 0x04	; 4
    2266:	21 e0       	ldi	r18, 0x01	; 1
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	08 2e       	mov	r0, r24
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <nrk_gpio_direction+0x10a>
    226e:	22 0f       	add	r18, r18
    2270:	0a 94       	dec	r0
    2272:	ea f7       	brpl	.-6      	; 0x226e <nrk_gpio_direction+0x108>
    2274:	92 2b       	or	r25, r18
    2276:	94 b9       	out	0x04, r25	; 4
    2278:	35 c0       	rjmp	.+106    	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    227a:	97 b1       	in	r25, 0x07	; 7
    227c:	21 e0       	ldi	r18, 0x01	; 1
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	08 2e       	mov	r0, r24
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <nrk_gpio_direction+0x120>
    2284:	22 0f       	add	r18, r18
    2286:	0a 94       	dec	r0
    2288:	ea f7       	brpl	.-6      	; 0x2284 <nrk_gpio_direction+0x11e>
    228a:	92 2b       	or	r25, r18
    228c:	97 b9       	out	0x07, r25	; 7
    228e:	2a c0       	rjmp	.+84     	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    2290:	9a b1       	in	r25, 0x0a	; 10
    2292:	21 e0       	ldi	r18, 0x01	; 1
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	08 2e       	mov	r0, r24
    2298:	01 c0       	rjmp	.+2      	; 0x229c <nrk_gpio_direction+0x136>
    229a:	22 0f       	add	r18, r18
    229c:	0a 94       	dec	r0
    229e:	ea f7       	brpl	.-6      	; 0x229a <nrk_gpio_direction+0x134>
    22a0:	92 2b       	or	r25, r18
    22a2:	9a b9       	out	0x0a, r25	; 10
    22a4:	1f c0       	rjmp	.+62     	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    22a6:	9d b1       	in	r25, 0x0d	; 13
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	08 2e       	mov	r0, r24
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <nrk_gpio_direction+0x14c>
    22b0:	22 0f       	add	r18, r18
    22b2:	0a 94       	dec	r0
    22b4:	ea f7       	brpl	.-6      	; 0x22b0 <nrk_gpio_direction+0x14a>
    22b6:	92 2b       	or	r25, r18
    22b8:	9d b9       	out	0x0d, r25	; 13
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    22bc:	90 b3       	in	r25, 0x10	; 16
    22be:	21 e0       	ldi	r18, 0x01	; 1
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	08 2e       	mov	r0, r24
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <nrk_gpio_direction+0x162>
    22c6:	22 0f       	add	r18, r18
    22c8:	0a 94       	dec	r0
    22ca:	ea f7       	brpl	.-6      	; 0x22c6 <nrk_gpio_direction+0x160>
    22cc:	92 2b       	or	r25, r18
    22ce:	90 bb       	out	0x10, r25	; 16
    22d0:	09 c0       	rjmp	.+18     	; 0x22e4 <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    22d2:	93 b3       	in	r25, 0x13	; 19
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <nrk_gpio_direction+0x176>
    22da:	22 0f       	add	r18, r18
    22dc:	8a 95       	dec	r24
    22de:	ea f7       	brpl	.-6      	; 0x22da <nrk_gpio_direction+0x174>
    22e0:	92 2b       	or	r25, r18
    22e2:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    22e6:	08 95       	ret
                        default: return -1;
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    22ea:	08 95       	ret

000022ec <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    22ec:	81 11       	cpse	r24, r1
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    22f0:	80 b1       	in	r24, 0x00	; 0
    22f2:	86 95       	lsr	r24
    22f4:	81 70       	andi	r24, 0x01	; 1
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	89 27       	eor	r24, r25
    22fa:	08 95       	ret
	} 
return -1;
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
}
    22fe:	08 95       	ret

00002300 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	11 f4       	brne	.+4      	; 0x2308 <nrk_led_toggle+0x8>
    2304:	83 e2       	ldi	r24, 0x23	; 35
    2306:	0d c0       	rjmp	.+26     	; 0x2322 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	91 05       	cpc	r25, r1
    230c:	11 f4       	brne	.+4      	; 0x2312 <nrk_led_toggle+0x12>
    230e:	8b e2       	ldi	r24, 0x2B	; 43
    2310:	08 c0       	rjmp	.+16     	; 0x2322 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2312:	82 30       	cpi	r24, 0x02	; 2
    2314:	91 05       	cpc	r25, r1
    2316:	11 f4       	brne	.+4      	; 0x231c <nrk_led_toggle+0x1c>
    2318:	83 e3       	ldi	r24, 0x33	; 51
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    231c:	03 97       	sbiw	r24, 0x03	; 3
    231e:	29 f4       	brne	.+10     	; 0x232a <nrk_led_toggle+0x2a>
    2320:	8b e3       	ldi	r24, 0x3B	; 59
    2322:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <nrk_gpio_toggle>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	08 95       	ret
return -1;
    232a:	8f ef       	ldi	r24, 0xFF	; 255
}
    232c:	08 95       	ret

0000232e <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	11 f4       	brne	.+4      	; 0x2336 <nrk_led_clr+0x8>
    2332:	83 e2       	ldi	r24, 0x23	; 35
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	91 05       	cpc	r25, r1
    233a:	11 f4       	brne	.+4      	; 0x2340 <nrk_led_clr+0x12>
    233c:	8b e2       	ldi	r24, 0x2B	; 43
    233e:	08 c0       	rjmp	.+16     	; 0x2350 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	91 05       	cpc	r25, r1
    2344:	11 f4       	brne	.+4      	; 0x234a <nrk_led_clr+0x1c>
    2346:	83 e3       	ldi	r24, 0x33	; 51
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    234a:	03 97       	sbiw	r24, 0x03	; 3
    234c:	29 f4       	brne	.+10     	; 0x2358 <nrk_led_clr+0x2a>
    234e:	8b e3       	ldi	r24, 0x3B	; 59
    2350:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <nrk_gpio_set>
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	08 95       	ret
return -1;
    2358:	8f ef       	ldi	r24, 0xFF	; 255
}
    235a:	08 95       	ret

0000235c <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	11 f4       	brne	.+4      	; 0x2364 <nrk_led_set+0x8>
    2360:	83 e2       	ldi	r24, 0x23	; 35
    2362:	0d c0       	rjmp	.+26     	; 0x237e <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	11 f4       	brne	.+4      	; 0x236e <nrk_led_set+0x12>
    236a:	8b e2       	ldi	r24, 0x2B	; 43
    236c:	08 c0       	rjmp	.+16     	; 0x237e <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	91 05       	cpc	r25, r1
    2372:	11 f4       	brne	.+4      	; 0x2378 <nrk_led_set+0x1c>
    2374:	83 e3       	ldi	r24, 0x33	; 51
    2376:	03 c0       	rjmp	.+6      	; 0x237e <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2378:	03 97       	sbiw	r24, 0x03	; 3
    237a:	29 f4       	brne	.+10     	; 0x2386 <nrk_led_set+0x2a>
    237c:	8b e3       	ldi	r24, 0x3B	; 59
    237e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_gpio_clr>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	08 95       	ret
return -1;
    2386:	8f ef       	ldi	r24, 0xFF	; 255
}
    2388:	08 95       	ret

0000238a <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    238a:	88 23       	and	r24, r24
    238c:	19 f0       	breq	.+6      	; 0x2394 <nrk_gpio_pullups+0xa>
    238e:	85 b7       	in	r24, 0x35	; 53
    2390:	8f 7e       	andi	r24, 0xEF	; 239
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2394:	85 b7       	in	r24, 0x35	; 53
    2396:	80 61       	ori	r24, 0x10	; 16
    2398:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	08 95       	ret

0000239e <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    239e:	90 91 c8 00 	lds	r25, 0x00C8
    23a2:	95 ff       	sbrs	r25, 5
    23a4:	fc cf       	rjmp	.-8      	; 0x239e <putc1>
    23a6:	80 93 ce 00 	sts	0x00CE, r24
    23aa:	08 95       	ret

000023ac <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    23ac:	90 93 c5 00 	sts	0x00C5, r25
    23b0:	80 93 c4 00 	sts	0x00C4, r24
    23b4:	86 e0       	ldi	r24, 0x06	; 6
    23b6:	80 93 c2 00 	sts	0x00C2, r24
    23ba:	e1 ec       	ldi	r30, 0xC1	; 193
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8b 7f       	andi	r24, 0xFB	; 251
    23c2:	80 83       	st	Z, r24
    23c4:	a0 ec       	ldi	r26, 0xC0	; 192
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	8c 91       	ld	r24, X
    23ca:	82 60       	ori	r24, 0x02	; 2
    23cc:	8c 93       	st	X, r24
ENABLE_UART0();
    23ce:	80 81       	ld	r24, Z
    23d0:	88 61       	ori	r24, 0x18	; 24
    23d2:	80 83       	st	Z, r24
    23d4:	08 95       	ret

000023d6 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    23d6:	90 93 cd 00 	sts	0x00CD, r25
    23da:	80 93 cc 00 	sts	0x00CC, r24
    23de:	86 e0       	ldi	r24, 0x06	; 6
    23e0:	80 93 ca 00 	sts	0x00CA, r24
    23e4:	e9 ec       	ldi	r30, 0xC9	; 201
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	8b 7f       	andi	r24, 0xFB	; 251
    23ec:	80 83       	st	Z, r24
    23ee:	a8 ec       	ldi	r26, 0xC8	; 200
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	8c 91       	ld	r24, X
    23f4:	82 60       	ori	r24, 0x02	; 2
    23f6:	8c 93       	st	X, r24
ENABLE_UART1();
    23f8:	80 81       	ld	r24, Z
    23fa:	88 61       	ori	r24, 0x18	; 24
    23fc:	80 83       	st	Z, r24
    23fe:	08 95       	ret

00002400 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2400:	0e 94 d6 11 	call	0x23ac	; 0x23ac <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2404:	6d e9       	ldi	r22, 0x9D	; 157
    2406:	7e e0       	ldi	r23, 0x0E	; 14
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	9e e0       	ldi	r25, 0x0E	; 14
    240c:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <fdevopen>
    2410:	90 93 4e 08 	sts	0x084E, r25
    2414:	80 93 4d 08 	sts	0x084D, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2418:	6d e9       	ldi	r22, 0x9D	; 157
    241a:	7e e0       	ldi	r23, 0x0E	; 14
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	9e e0       	ldi	r25, 0x0E	; 14
    2420:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <fdevopen>
    2424:	90 93 4c 08 	sts	0x084C, r25
    2428:	80 93 4b 08 	sts	0x084B, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    242c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_signal_create>
    2430:	80 93 23 04 	sts	0x0423, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2434:	8f 3f       	cpi	r24, 0xFF	; 255
    2436:	19 f4       	brne	.+6      	; 0x243e <nrk_setup_uart+0x3e>
    2438:	8e e0       	ldi	r24, 0x0E	; 14
    243a:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
   uart_rx_buf_start=0;
    243e:	10 92 37 04 	sts	0x0437, r1
    2442:	10 92 36 04 	sts	0x0436, r1
   uart_rx_buf_end=0;
    2446:	10 92 35 04 	sts	0x0435, r1
    244a:	10 92 34 04 	sts	0x0434, r1
   ENABLE_UART0_RX_INT();
    244e:	80 91 c1 00 	lds	r24, 0x00C1
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	80 93 c1 00 	sts	0x00C1, r24
    2458:	08 95       	ret

0000245a <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    245a:	80 91 c8 00 	lds	r24, 0x00C8
    245e:	87 ff       	sbrs	r24, 7
    2460:	fc cf       	rjmp	.-8      	; 0x245a <getc1>
    2462:	80 91 c8 00 	lds	r24, 0x00C8
    2466:	8f 77       	andi	r24, 0x7F	; 127
    2468:	80 93 c8 00 	sts	0x00C8, r24
    246c:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2470:	08 95       	ret

00002472 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	c9 f7       	brne	.-14     	; 0x2472 <halWait>

} // halWait
    2480:	08 95       	ret

00002482 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2482:	0c 94 a3 2c 	jmp	0x5946	; 0x5946 <__eerd_byte_m128rfa1>

00002486 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2486:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__eewr_byte_m128rfa1>
}
    248a:	08 95       	ret

0000248c <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    24a2:	f8 2e       	mov	r15, r24
    24a4:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    24ae:	e8 2e       	mov	r14, r24
    24b0:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    24ba:	08 2f       	mov	r16, r24
    24bc:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    24c6:	18 2f       	mov	r17, r24
    24c8:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    24d2:	9e 2d       	mov	r25, r14
    24d4:	9f 0d       	add	r25, r15
ct+=buf[2];
    24d6:	90 0f       	add	r25, r16
ct+=buf[3];
    24d8:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    24da:	89 13       	cpse	r24, r25
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <read_eeprom_mac_address+0x56>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    24e2:	8f ef       	ldi	r24, 0xFF	; 255
}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	08 95       	ret

000024f2 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    24f8:	85 e0       	ldi	r24, 0x05	; 5
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    2500:	88 83       	st	Y, r24
return NRK_OK;
}
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    250a:	fc 01       	movw	r30, r24
    250c:	60 81       	ld	r22, Z
    250e:	86 e0       	ldi	r24, 0x06	; 6
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	08 95       	ret

0000251a <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2520:	86 e0       	ldi	r24, 0x06	; 6
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    2528:	88 83       	st	Y, r24
  return NRK_OK;
}
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	08 95       	ret

00002532 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	8c 01       	movw	r16, r24
    253c:	c8 e0       	ldi	r28, 0x08	; 8
    253e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2540:	ce 01       	movw	r24, r28
    2542:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    2546:	f8 01       	movw	r30, r16
    2548:	81 93       	st	Z+, r24
    254a:	8f 01       	movw	r16, r30
    254c:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    254e:	c8 31       	cpi	r28, 0x18	; 24
    2550:	d1 05       	cpc	r29, r1
    2552:	b1 f7       	brne	.-20     	; 0x2540 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	08 95       	ret

00002560 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	8c 01       	movw	r16, r24
    256a:	c8 e0       	ldi	r28, 0x08	; 8
    256c:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    256e:	f8 01       	movw	r30, r16
    2570:	61 91       	ld	r22, Z+
    2572:	8f 01       	movw	r16, r30
    2574:	ce 01       	movw	r24, r28
    2576:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__eewr_byte_m128rfa1>
    257a:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    257c:	c8 31       	cpi	r28, 0x18	; 24
    257e:	d1 05       	cpc	r29, r1
    2580:	b1 f7       	brne	.-20     	; 0x256e <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2594:	87 e0       	ldi	r24, 0x07	; 7
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__eerd_byte_m128rfa1>
    259c:	88 83       	st	Y, r24
  return NRK_OK;
}
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	08 95       	ret

000025a6 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    25a6:	fc 01       	movw	r30, r24
    25a8:	60 81       	ld	r22, Z
    25aa:	87 e0       	ldi	r24, 0x07	; 7
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	08 95       	ret

000025b6 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    25b6:	f8 94       	cli
    25b8:	08 95       	ret

000025ba <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    25ba:	78 94       	sei
    25bc:	08 95       	ret

000025be <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    25be:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    25c2:	ff cf       	rjmp	.-2      	; 0x25c2 <nrk_halt+0x4>

000025c4 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	a3 97       	sbiw	r28, 0x23	; 35
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    25d8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_signal_create>
    25dc:	80 93 70 05 	sts	0x0570, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    25e0:	8f 3f       	cpi	r24, 0xFF	; 255
    25e2:	21 f4       	brne	.+8      	; 0x25ec <nrk_init+0x28>
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	8e e0       	ldi	r24, 0x0E	; 14
    25e8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    25ec:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    25f0:	80 ff       	sbrs	r24, 0
    25f2:	04 c0       	rjmp	.+8      	; 0x25fc <nrk_init+0x38>
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	86 e0       	ldi	r24, 0x06	; 6
    25f8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    25fc:	10 92 73 05 	sts	0x0573, r1
    nrk_cur_task_TCB = NULL;
    2600:	10 92 81 06 	sts	0x0681, r1
    2604:	10 92 80 06 	sts	0x0680, r1
    
    nrk_high_ready_TCB = NULL;
    2608:	10 92 72 05 	sts	0x0572, r1
    260c:	10 92 71 05 	sts	0x0571, r1
    nrk_high_ready_prio = 0; 
    2610:	10 92 3e 07 	sts	0x073E, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2614:	10 92 0a 06 	sts	0x060A, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	80 93 69 05 	sts	0x0569, r24
    nrk_sem_list[i].value=-1;
    261e:	80 93 6b 05 	sts	0x056B, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2622:	80 93 6a 05 	sts	0x056A, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2626:	80 93 6c 05 	sts	0x056C, r24
    nrk_sem_list[i].value=-1;
    262a:	80 93 6e 05 	sts	0x056E, r24
    nrk_sem_list[i].resource_ceiling=-1;
    262e:	80 93 6d 05 	sts	0x056D, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2632:	93 e6       	ldi	r25, 0x63	; 99
    2634:	90 93 45 04 	sts	0x0445, r25
        nrk_task_TCB[i].task_ID = -1; 
    2638:	80 93 43 04 	sts	0x0443, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    263c:	90 93 70 04 	sts	0x0470, r25
        nrk_task_TCB[i].task_ID = -1; 
    2640:	80 93 6e 04 	sts	0x046E, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2644:	90 93 9b 04 	sts	0x049B, r25
        nrk_task_TCB[i].task_ID = -1; 
    2648:	80 93 99 04 	sts	0x0499, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    264c:	90 93 c6 04 	sts	0x04C6, r25
        nrk_task_TCB[i].task_ID = -1; 
    2650:	80 93 c4 04 	sts	0x04C4, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2654:	21 e5       	ldi	r18, 0x51	; 81
    2656:	37 e0       	ldi	r19, 0x07	; 7
    2658:	30 93 50 07 	sts	0x0750, r19
    265c:	20 93 4f 07 	sts	0x074F, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2660:	8c e4       	ldi	r24, 0x4C	; 76
    2662:	97 e0       	ldi	r25, 0x07	; 7
    2664:	90 93 53 07 	sts	0x0753, r25
    2668:	80 93 52 07 	sts	0x0752, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    266c:	46 e5       	ldi	r20, 0x56	; 86
    266e:	57 e0       	ldi	r21, 0x07	; 7
    2670:	50 93 55 07 	sts	0x0755, r21
    2674:	40 93 54 07 	sts	0x0754, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2678:	30 93 58 07 	sts	0x0758, r19
    267c:	20 93 57 07 	sts	0x0757, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2680:	2b e5       	ldi	r18, 0x5B	; 91
    2682:	37 e0       	ldi	r19, 0x07	; 7
    2684:	30 93 5a 07 	sts	0x075A, r19
    2688:	20 93 59 07 	sts	0x0759, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    268c:	50 93 5d 07 	sts	0x075D, r21
    2690:	40 93 5c 07 	sts	0x075C, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2694:	40 e6       	ldi	r20, 0x60	; 96
    2696:	57 e0       	ldi	r21, 0x07	; 7
    2698:	50 93 5f 07 	sts	0x075F, r21
    269c:	40 93 5e 07 	sts	0x075E, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    26a0:	30 93 62 07 	sts	0x0762, r19
    26a4:	20 93 61 07 	sts	0x0761, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    26a8:	10 92 4e 07 	sts	0x074E, r1
    26ac:	10 92 4d 07 	sts	0x074D, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    26b0:	10 92 64 07 	sts	0x0764, r1
    26b4:	10 92 63 07 	sts	0x0763, r1
	_head_node = NULL;
    26b8:	10 92 fd 05 	sts	0x05FD, r1
    26bc:	10 92 fc 05 	sts	0x05FC, r1
	_free_node = &_nrk_readyQ[0];
    26c0:	90 93 39 04 	sts	0x0439, r25
    26c4:	80 93 38 04 	sts	0x0438, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    26c8:	66 ea       	ldi	r22, 0xA6	; 166
    26ca:	70 e2       	ldi	r23, 0x20	; 32
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	0e 94 d5 27 	call	0x4faa	; 0x4faa <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	65 e6       	ldi	r22, 0x65	; 101
    26da:	77 e0       	ldi	r23, 0x07	; 7
    26dc:	ce 01       	movw	r24, r28
    26de:	01 96       	adiw	r24, 0x01	; 1
    26e0:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    26e4:	85 e5       	ldi	r24, 0x55	; 85
    26e6:	80 93 65 07 	sts	0x0765, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    26ea:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    26ec:	1c 86       	std	Y+12, r1	; 0x0c
    26ee:	1d 86       	std	Y+13, r1	; 0x0d
    26f0:	1e 86       	std	Y+14, r1	; 0x0e
    26f2:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    26f4:	18 8a       	std	Y+16, r1	; 0x10
    26f6:	19 8a       	std	Y+17, r1	; 0x11
    26f8:	1a 8a       	std	Y+18, r1	; 0x12
    26fa:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    26fc:	1c 8a       	std	Y+20, r1	; 0x14
    26fe:	1d 8a       	std	Y+21, r1	; 0x15
    2700:	1e 8a       	std	Y+22, r1	; 0x16
    2702:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2704:	18 8e       	std	Y+24, r1	; 0x18
    2706:	19 8e       	std	Y+25, r1	; 0x19
    2708:	1a 8e       	std	Y+26, r1	; 0x1a
    270a:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    270c:	1c 8e       	std	Y+28, r1	; 0x1c
    270e:	1d 8e       	std	Y+29, r1	; 0x1d
    2710:	1e 8e       	std	Y+30, r1	; 0x1e
    2712:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2714:	18 a2       	std	Y+32, r1	; 0x20
    2716:	19 a2       	std	Y+33, r1	; 0x21
    2718:	1a a2       	std	Y+34, r1	; 0x22
    271a:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2720:	92 e0       	ldi	r25, 0x02	; 2
    2722:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2724:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	0e 94 40 1b 	call	0x3680	; 0x3680 <nrk_activate_task>
	
}
    272e:	a3 96       	adiw	r28, 0x23	; 35
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	08 95       	ret

00002740 <nrk_start>:




void nrk_start (void)
{
    2740:	c3 e4       	ldi	r28, 0x43	; 67
    2742:	d4 e0       	ldi	r29, 0x04	; 4
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2744:	f1 2c       	mov	r15, r1
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2746:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    2748:	8f ef       	ldi	r24, 0xFF	; 255
    274a:	d8 12       	cpse	r13, r24
    274c:	21 c0       	rjmp	.+66     	; 0x2790 <nrk_start+0x50>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    274e:	f3 94       	inc	r15
    2750:	ab 96       	adiw	r28, 0x2b	; 43
    2752:	94 e0       	ldi	r25, 0x04	; 4
    2754:	f9 12       	cpse	r15, r25
    2756:	f7 cf       	rjmp	.-18     	; 0x2746 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2758:	0e 94 3d 1a 	call	0x347a	; 0x347a <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    275c:	9b e2       	ldi	r25, 0x2B	; 43
    275e:	89 02       	muls	r24, r25
    2760:	f0 01       	movw	r30, r0
    2762:	11 24       	eor	r1, r1
    2764:	e5 5c       	subi	r30, 0xC5	; 197
    2766:	fb 4f       	sbci	r31, 0xFB	; 251
    2768:	82 85       	ldd	r24, Z+10	; 0x0a
    276a:	80 93 3e 07 	sts	0x073E, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    276e:	f0 93 81 06 	sts	0x0681, r31
    2772:	e0 93 80 06 	sts	0x0680, r30
    2776:	f0 93 72 05 	sts	0x0572, r31
    277a:	e0 93 71 05 	sts	0x0571, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    277e:	80 93 73 05 	sts	0x0573, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2782:	0e 94 5d 28 	call	0x50ba	; 0x50ba <nrk_target_start>
    nrk_stack_pointer_init(); 
    2786:	0e 94 47 28 	call	0x508e	; 0x508e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    278a:	0e 94 61 28 	call	0x50c2	; 0x50c2 <nrk_start_high_ready_task>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <nrk_start+0x78>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    2790:	03 e4       	ldi	r16, 0x43	; 67
    2792:	14 e0       	ldi	r17, 0x04	; 4
    2794:	e1 2c       	mov	r14, r1
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2796:	fe 14       	cp	r15, r14
    2798:	41 f0       	breq	.+16     	; 0x27aa <nrk_start+0x6a>
    279a:	f8 01       	movw	r30, r16
    279c:	80 81       	ld	r24, Z
    279e:	d8 12       	cpse	r13, r24
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <nrk_start+0x6a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    27a2:	6d 2d       	mov	r22, r13
    27a4:	85 e0       	ldi	r24, 0x05	; 5
    27a6:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    27aa:	e3 94       	inc	r14
    27ac:	05 5d       	subi	r16, 0xD5	; 213
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	f4 e0       	ldi	r31, 0x04	; 4
    27b2:	ef 12       	cpse	r14, r31
    27b4:	f0 cf       	rjmp	.-32     	; 0x2796 <nrk_start+0x56>
    27b6:	cb cf       	rjmp	.-106    	; 0x274e <nrk_start+0xe>
    27b8:	ff cf       	rjmp	.-2      	; 0x27b8 <nrk_start+0x78>

000027ba <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	1f 92       	push	r1
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	5c 01       	movw	r10, r24
    27d6:	6b 01       	movw	r12, r22
    27d8:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    27da:	dc 01       	movw	r26, r24
    27dc:	19 96       	adiw	r26, 0x09	; 9
    27de:	8c 91       	ld	r24, X
    27e0:	19 97       	sbiw	r26, 0x09	; 9
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	21 f0       	breq	.+8      	; 0x27ee <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    27e6:	80 91 40 08 	lds	r24, 0x0840
    27ea:	8c 93       	st	X, r24
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    27ee:	f5 01       	movw	r30, r10
    27f0:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    27f2:	80 91 40 08 	lds	r24, 0x0840
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	20 f0       	brcs	.+8      	; 0x2802 <nrk_TCB_init+0x48>
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	87 e0       	ldi	r24, 0x07	; 7
    27fe:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2802:	d5 01       	movw	r26, r10
    2804:	19 96       	adiw	r26, 0x09	; 9
    2806:	8c 91       	ld	r24, X
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	29 f0       	breq	.+10     	; 0x2816 <nrk_TCB_init+0x5c>
    280c:	80 91 40 08 	lds	r24, 0x0840
    2810:	8f 5f       	subi	r24, 0xFF	; 255
    2812:	80 93 40 08 	sts	0x0840, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2816:	80 91 40 08 	lds	r24, 0x0840
    281a:	81 11       	cpse	r24, r1
    281c:	03 c0       	rjmp	.+6      	; 0x2824 <nrk_TCB_init+0x6a>
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	80 93 40 08 	sts	0x0840, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2824:	f5 01       	movw	r30, r10
    2826:	30 81       	ld	r19, Z
    2828:	2b e2       	ldi	r18, 0x2B	; 43
    282a:	32 03       	mulsu	r19, r18
    282c:	f0 01       	movw	r30, r0
    282e:	11 24       	eor	r1, r1
    2830:	e5 5c       	subi	r30, 0xC5	; 197
    2832:	fb 4f       	sbci	r31, 0xFB	; 251
    2834:	d1 82       	std	Z+1, r13	; 0x01
    2836:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2838:	d5 01       	movw	r26, r10
    283a:	18 96       	adiw	r26, 0x08	; 8
    283c:	8c 91       	ld	r24, X
    283e:	18 97       	sbiw	r26, 0x08	; 8
    2840:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2842:	3c 91       	ld	r19, X
    2844:	32 03       	mulsu	r19, r18
    2846:	f0 01       	movw	r30, r0
    2848:	11 24       	eor	r1, r1
    284a:	e5 5c       	subi	r30, 0xC5	; 197
    284c:	fb 4f       	sbci	r31, 0xFB	; 251
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2852:	3c 91       	ld	r19, X
    2854:	32 03       	mulsu	r19, r18
    2856:	f0 01       	movw	r30, r0
    2858:	11 24       	eor	r1, r1
    285a:	e5 5c       	subi	r30, 0xC5	; 197
    285c:	fb 4f       	sbci	r31, 0xFB	; 251
    285e:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2860:	0c 91       	ld	r16, X
    2862:	02 03       	mulsu	r16, r18
    2864:	80 01       	movw	r16, r0
    2866:	11 24       	eor	r1, r1
    2868:	05 5c       	subi	r16, 0xC5	; 197
    286a:	1b 4f       	sbci	r17, 0xFB	; 251
    286c:	f8 01       	movw	r30, r16
    286e:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2870:	c5 01       	movw	r24, r10
    2872:	0b 96       	adiw	r24, 0x0b	; 11
    2874:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_nrk_time_to_ticks_long>
    2878:	d8 01       	movw	r26, r16
    287a:	91 96       	adiw	r26, 0x21	; 33
    287c:	6d 93       	st	X+, r22
    287e:	7d 93       	st	X+, r23
    2880:	8d 93       	st	X+, r24
    2882:	9c 93       	st	X, r25
    2884:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2886:	f5 01       	movw	r30, r10
    2888:	83 85       	ldd	r24, Z+11	; 0x0b
    288a:	94 85       	ldd	r25, Z+12	; 0x0c
    288c:	a5 85       	ldd	r26, Z+13	; 0x0d
    288e:	b6 85       	ldd	r27, Z+14	; 0x0e
    2890:	88 33       	cpi	r24, 0x38	; 56
    2892:	99 48       	sbci	r25, 0x89	; 137
    2894:	a1 44       	sbci	r26, 0x41	; 65
    2896:	b1 05       	cpc	r27, r1
    2898:	28 f0       	brcs	.+10     	; 0x28a4 <nrk_TCB_init+0xea>
    289a:	d5 01       	movw	r26, r10
    289c:	6c 91       	ld	r22, X
    289e:	86 e1       	ldi	r24, 0x16	; 22
    28a0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    28a4:	f5 01       	movw	r30, r10
    28a6:	00 81       	ld	r16, Z
    28a8:	11 27       	eor	r17, r17
    28aa:	07 fd       	sbrc	r16, 7
    28ac:	10 95       	com	r17
    28ae:	c5 01       	movw	r24, r10
    28b0:	4b 96       	adiw	r24, 0x1b	; 27
    28b2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_nrk_time_to_ticks_long>
    28b6:	4b e2       	ldi	r20, 0x2B	; 43
    28b8:	40 9f       	mul	r20, r16
    28ba:	f0 01       	movw	r30, r0
    28bc:	41 9f       	mul	r20, r17
    28be:	f0 0d       	add	r31, r0
    28c0:	11 24       	eor	r1, r1
    28c2:	e5 5c       	subi	r30, 0xC5	; 197
    28c4:	fb 4f       	sbci	r31, 0xFB	; 251
    28c6:	65 8b       	std	Z+21, r22	; 0x15
    28c8:	76 8b       	std	Z+22, r23	; 0x16
    28ca:	87 8b       	std	Z+23, r24	; 0x17
    28cc:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    28ce:	d5 01       	movw	r26, r10
    28d0:	2c 91       	ld	r18, X
    28d2:	24 03       	mulsu	r18, r20
    28d4:	60 01       	movw	r12, r0
    28d6:	11 24       	eor	r1, r1
    28d8:	f6 01       	movw	r30, r12
    28da:	e5 5c       	subi	r30, 0xC5	; 197
    28dc:	fb 4f       	sbci	r31, 0xFB	; 251
    28de:	6f 01       	movw	r12, r30
    28e0:	05 89       	ldd	r16, Z+21	; 0x15
    28e2:	16 89       	ldd	r17, Z+22	; 0x16
    28e4:	27 89       	ldd	r18, Z+23	; 0x17
    28e6:	30 8d       	ldd	r19, Z+24	; 0x18
    28e8:	81 a1       	ldd	r24, Z+33	; 0x21
    28ea:	92 a1       	ldd	r25, Z+34	; 0x22
    28ec:	a3 a1       	ldd	r26, Z+35	; 0x23
    28ee:	b4 a1       	ldd	r27, Z+36	; 0x24
    28f0:	08 0f       	add	r16, r24
    28f2:	19 1f       	adc	r17, r25
    28f4:	2a 1f       	adc	r18, r26
    28f6:	3b 1f       	adc	r19, r27
    28f8:	01 8f       	std	Z+25, r16	; 0x19
    28fa:	12 8f       	std	Z+26, r17	; 0x1a
    28fc:	23 8f       	std	Z+27, r18	; 0x1b
    28fe:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2900:	c5 01       	movw	r24, r10
    2902:	43 96       	adiw	r24, 0x13	; 19
    2904:	49 83       	std	Y+1, r20	; 0x01
    2906:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_nrk_time_to_ticks_long>
    290a:	f6 01       	movw	r30, r12
    290c:	65 a3       	std	Z+37, r22	; 0x25
    290e:	76 a3       	std	Z+38, r23	; 0x26
    2910:	87 a3       	std	Z+39, r24	; 0x27
    2912:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2914:	d5 01       	movw	r26, r10
    2916:	2c 91       	ld	r18, X
    2918:	49 81       	ldd	r20, Y+1	; 0x01
    291a:	24 03       	mulsu	r18, r20
    291c:	f0 01       	movw	r30, r0
    291e:	11 24       	eor	r1, r1
    2920:	e5 5c       	subi	r30, 0xC5	; 197
    2922:	fb 4f       	sbci	r31, 0xFB	; 251
    2924:	85 a1       	ldd	r24, Z+37	; 0x25
    2926:	96 a1       	ldd	r25, Z+38	; 0x26
    2928:	a7 a1       	ldd	r26, Z+39	; 0x27
    292a:	b0 a5       	ldd	r27, Z+40	; 0x28
    292c:	85 8f       	std	Z+29, r24	; 0x1d
    292e:	96 8f       	std	Z+30, r25	; 0x1e
    2930:	a7 8f       	std	Z+31, r26	; 0x1f
    2932:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	92 a7       	std	Z+42, r25	; 0x2a
    293a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    293c:	f3 82       	std	Z+3, r15	; 0x03
    293e:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2944:	0f 90       	pop	r0
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	ff 90       	pop	r15
    2950:	ef 90       	pop	r14
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	bf 90       	pop	r11
    2958:	af 90       	pop	r10
    295a:	08 95       	ret

0000295c <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    295c:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <_nrk_scheduler>

00002960 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2960:	85 e6       	ldi	r24, 0x65	; 101
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	08 95       	ret

00002966 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    2966:	e0 91 80 06 	lds	r30, 0x0680
    296a:	f0 91 81 06 	lds	r31, 0x0681
    296e:	84 87       	std	Z+12, r24	; 0x0c
    2970:	08 95       	ret

00002972 <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2972:	e0 91 80 06 	lds	r30, 0x0680
    2976:	f0 91 81 06 	lds	r31, 0x0681
}
    297a:	84 85       	ldd	r24, Z+12	; 0x0c
    297c:	08 95       	ret

0000297e <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    297e:	20 91 4b 07 	lds	r18, 0x074B
    2982:	22 23       	and	r18, r18
    2984:	41 f0       	breq	.+16     	; 0x2996 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2986:	fb 01       	movw	r30, r22
    2988:	20 83       	st	Z, r18
    *task_id = error_task;
    298a:	20 91 6f 05 	lds	r18, 0x056F
    298e:	fc 01       	movw	r30, r24
    2990:	20 83       	st	Z, r18
    return 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2996:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2998:	08 95       	ret

0000299a <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    299a:	80 91 4b 07 	lds	r24, 0x074B
    299e:	88 23       	and	r24, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <nrk_error_print+0xa>
    29a2:	83 c0       	rjmp	.+262    	; 0x2aaa <nrk_error_print+0x110>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    29a4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    29a8:	8f e6       	ldi	r24, 0x6F	; 111
    29aa:	95 e0       	ldi	r25, 0x05	; 5
    29ac:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
        printf ("%d", error_task);
    29b0:	80 91 6f 05 	lds	r24, 0x056F
    29b4:	1f 92       	push	r1
    29b6:	8f 93       	push	r24
    29b8:	8c e8       	ldi	r24, 0x8C	; 140
    29ba:	92 e0       	ldi	r25, 0x02	; 2
    29bc:	9f 93       	push	r25
    29be:	8f 93       	push	r24
    29c0:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
        nrk_kprintf (PSTR ("): "));
    29c4:	8b e6       	ldi	r24, 0x6B	; 107
    29c6:	95 e0       	ldi	r25, 0x05	; 5
    29c8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	80 91 4b 07 	lds	r24, 0x074B
    29d8:	88 31       	cpi	r24, 0x18	; 24
    29da:	10 f0       	brcs	.+4      	; 0x29e0 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    29dc:	10 92 4b 07 	sts	0x074B, r1
        switch (error_num)
    29e0:	80 91 4b 07 	lds	r24, 0x074B
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	31 97       	sbiw	r30, 0x01	; 1
    29ea:	e6 31       	cpi	r30, 0x16	; 22
    29ec:	f1 05       	cpc	r31, r1
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <nrk_error_print+0x58>
    29f0:	46 c0       	rjmp	.+140    	; 0x2a7e <nrk_error_print+0xe4>
    29f2:	e6 54       	subi	r30, 0x46	; 70
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    29fa:	8f e2       	ldi	r24, 0x2F	; 47
    29fc:	95 e0       	ldi	r25, 0x05	; 5
    29fe:	41 c0       	rjmp	.+130    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2a00:	88 e0       	ldi	r24, 0x08	; 8
    2a02:	95 e0       	ldi	r25, 0x05	; 5
    2a04:	3e c0       	rjmp	.+124    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2a06:	84 ef       	ldi	r24, 0xF4	; 244
    2a08:	94 e0       	ldi	r25, 0x04	; 4
    2a0a:	3b c0       	rjmp	.+118    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2a0c:	8e ed       	ldi	r24, 0xDE	; 222
    2a0e:	94 e0       	ldi	r25, 0x04	; 4
    2a10:	38 c0       	rjmp	.+112    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2a12:	83 ec       	ldi	r24, 0xC3	; 195
    2a14:	94 e0       	ldi	r25, 0x04	; 4
    2a16:	35 c0       	rjmp	.+106    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2a18:	8d ea       	ldi	r24, 0xAD	; 173
    2a1a:	94 e0       	ldi	r25, 0x04	; 4
    2a1c:	32 c0       	rjmp	.+100    	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2a1e:	85 e9       	ldi	r24, 0x95	; 149
    2a20:	94 e0       	ldi	r25, 0x04	; 4
    2a22:	2f c0       	rjmp	.+94     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2a24:	82 e8       	ldi	r24, 0x82	; 130
    2a26:	94 e0       	ldi	r25, 0x04	; 4
    2a28:	2c c0       	rjmp	.+88     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2a2a:	8f e6       	ldi	r24, 0x6F	; 111
    2a2c:	94 e0       	ldi	r25, 0x04	; 4
    2a2e:	29 c0       	rjmp	.+82     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2a30:	81 e5       	ldi	r24, 0x51	; 81
    2a32:	94 e0       	ldi	r25, 0x04	; 4
    2a34:	26 c0       	rjmp	.+76     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2a36:	8c e2       	ldi	r24, 0x2C	; 44
    2a38:	94 e0       	ldi	r25, 0x04	; 4
    2a3a:	23 c0       	rjmp	.+70     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	94 e0       	ldi	r25, 0x04	; 4
    2a40:	20 c0       	rjmp	.+64     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	94 e0       	ldi	r25, 0x04	; 4
    2a46:	1d c0       	rjmp	.+58     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2a48:	86 ef       	ldi	r24, 0xF6	; 246
    2a4a:	93 e0       	ldi	r25, 0x03	; 3
    2a4c:	1a c0       	rjmp	.+52     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2a4e:	82 ee       	ldi	r24, 0xE2	; 226
    2a50:	93 e0       	ldi	r25, 0x03	; 3
    2a52:	17 c0       	rjmp	.+46     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2a54:	81 ed       	ldi	r24, 0xD1	; 209
    2a56:	93 e0       	ldi	r25, 0x03	; 3
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2a5a:	8d eb       	ldi	r24, 0xBD	; 189
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	11 c0       	rjmp	.+34     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2a60:	8d e9       	ldi	r24, 0x9D	; 157
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	0e c0       	rjmp	.+28     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2a66:	85 e8       	ldi	r24, 0x85	; 133
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	0b c0       	rjmp	.+22     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2a6c:	8a e6       	ldi	r24, 0x6A	; 106
    2a6e:	93 e0       	ldi	r25, 0x03	; 3
    2a70:	08 c0       	rjmp	.+16     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2a72:	89 e5       	ldi	r24, 0x59	; 89
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <nrk_error_print+0xe8>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2a78:	8a e4       	ldi	r24, 0x4A	; 74
    2a7a:	93 e0       	ldi	r25, 0x03	; 3
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <nrk_error_print+0xe8>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2a7e:	83 e4       	ldi	r24, 0x43	; 67
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>
        }
        putchar ('\r');
    2a86:	60 91 4d 08 	lds	r22, 0x084D
    2a8a:	70 91 4e 08 	lds	r23, 0x084E
    2a8e:	8d e0       	ldi	r24, 0x0D	; 13
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
        putchar ('\n');
    2a96:	60 91 4d 08 	lds	r22, 0x084D
    2a9a:	70 91 4e 08 	lds	r23, 0x084E
    2a9e:	8a e0       	ldi	r24, 0x0A	; 10
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2aa6:	10 92 4b 07 	sts	0x074B, r1
    return t;
}
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	08 95       	ret

00002aae <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2aae:	80 93 4b 07 	sts	0x074B, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2ab2:	e0 91 80 06 	lds	r30, 0x0680
    2ab6:	f0 91 81 06 	lds	r31, 0x0681
    2aba:	80 85       	ldd	r24, Z+8	; 0x08
    2abc:	80 93 6f 05 	sts	0x056F, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2ac0:	0c 94 cd 14 	jmp	0x299a	; 0x299a <nrk_error_print>

00002ac4 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2ac4:	80 93 4b 07 	sts	0x074B, r24
    error_task = task;
    2ac8:	60 93 6f 05 	sts	0x056F, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2acc:	0c 94 cd 14 	jmp	0x299a	; 0x299a <nrk_error_print>

00002ad0 <pause>:
    }

}

void pause()
{
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	1f 92       	push	r1
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2ada:	19 82       	std	Y+1, r1	; 0x01
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	84 36       	cpi	r24, 0x64	; 100
    2ae0:	40 f4       	brcc	.+16     	; 0x2af2 <pause+0x22>
        nrk_spin_wait_us (2000);
    2ae2:	80 ed       	ldi	r24, 0xD0	; 208
    2ae4:	97 e0       	ldi	r25, 0x07	; 7
    2ae6:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	f5 cf       	rjmp	.-22     	; 0x2adc <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2af2:	0f 90       	pop	r0
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 ae 11 	call	0x235c	; 0x235c <nrk_led_set>
    pause();
    2b02:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
    pause();
    2b06:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
    pause();
    2b0a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
    nrk_led_clr(GREEN_LED);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    pause();
    2b16:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <pause>

00002b1a <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 ae 11 	call	0x235c	; 0x235c <nrk_led_set>
    pause();
    2b22:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
    nrk_led_clr(GREEN_LED);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    pause();
    2b2e:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <pause>

00002b32 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <blink_morse_code_error+0xc>
    2b3e:	1f 92       	push	r1
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2b44:	1f 92       	push	r1
    2b46:	8f 93       	push	r24
    2b48:	8c e8       	ldi	r24, 0x8C	; 140
    2b4a:	92 e0       	ldi	r25, 0x02	; 2
    2b4c:	9f 93       	push	r25
    2b4e:	8f 93       	push	r24
    2b50:	8e 01       	movw	r16, r28
    2b52:	0f 5f       	subi	r16, 0xFF	; 255
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	1f 93       	push	r17
    2b58:	0f 93       	push	r16
    2b5a:	0e 94 16 2c 	call	0x582c	; 0x582c <sprintf>

    for(i=0; i<strlen(str); i++ )
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	f1 2c       	mov	r15, r1
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	01 90       	ld	r0, Z+
    2b70:	00 20       	and	r0, r0
    2b72:	e9 f7       	brne	.-6      	; 0x2b6e <blink_morse_code_error+0x3c>
    2b74:	31 97       	sbiw	r30, 0x01	; 1
    2b76:	e0 1b       	sub	r30, r16
    2b78:	f1 0b       	sbc	r31, r17
    2b7a:	8f 2d       	mov	r24, r15
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	8e 17       	cp	r24, r30
    2b80:	9f 07       	cpc	r25, r31
    2b82:	08 f0       	brcs	.+2      	; 0x2b86 <blink_morse_code_error+0x54>
    2b84:	5c c0       	rjmp	.+184    	; 0x2c3e <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    2b86:	f8 01       	movw	r30, r16
    2b88:	e8 0f       	add	r30, r24
    2b8a:	f9 1f       	adc	r31, r25
    2b8c:	80 81       	ld	r24, Z
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	fc 01       	movw	r30, r24
    2b92:	f0 97       	sbiw	r30, 0x30	; 48
    2b94:	ea 30       	cpi	r30, 0x0A	; 10
    2b96:	f1 05       	cpc	r31, r1
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <blink_morse_code_error+0x6a>
    2b9a:	49 c0       	rjmp	.+146    	; 0x2c2e <blink_morse_code_error+0xfc>
    2b9c:	e0 53       	subi	r30, 0x30	; 48
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__tablejump2__>
        {
        case '0':
            blink_dash();
    2ba4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2baa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dash();
    2bae:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2bb2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2bb6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2bba:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            break;
    2bbe:	37 c0       	rjmp	.+110    	; 0x2c2e <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    2bc0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2bc4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2bc8:	f4 cf       	rjmp	.-24     	; 0x2bb2 <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2bca:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2bce:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2bd2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2bd6:	ef cf       	rjmp	.-34     	; 0x2bb6 <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2bd8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2bdc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2be0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            blink_dot();
    2be4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2be8:	e8 cf       	rjmp	.-48     	; 0x2bba <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2bea:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2bf0:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dot();
    2bf4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2bf8:	04 c0       	rjmp	.+8      	; 0x2c02 <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2bfa:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2bfe:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dot();
    2c02:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2c06:	06 c0       	rjmp	.+12     	; 0x2c14 <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2c08:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2c0c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2c10:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dot();
    2c14:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
    2c18:	08 c0       	rjmp	.+16     	; 0x2c2a <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2c1a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2c1e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2c22:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dash();
    2c26:	0e 94 7d 15 	call	0x2afa	; 0x2afa <blink_dash>
            blink_dot();
    2c2a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <blink_dot>
            break;
        }
        pause();
    2c2e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
        pause();
    2c32:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
        pause();
    2c36:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2c3a:	f3 94       	inc	r15
    2c3c:	97 cf       	rjmp	.-210    	; 0x2b6c <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	08 95       	ret

00002c50 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2c50:	6f 92       	push	r6
    2c52:	7f 92       	push	r7
    2c54:	8f 92       	push	r8
    2c56:	9f 92       	push	r9
    2c58:	af 92       	push	r10
    2c5a:	bf 92       	push	r11
    2c5c:	cf 92       	push	r12
    2c5e:	df 92       	push	r13
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2c6c:	8b e7       	ldi	r24, 0x7B	; 123
    2c6e:	95 e0       	ldi	r25, 0x05	; 5
    2c70:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2c74:	e0 91 80 06 	lds	r30, 0x0680
    2c78:	f0 91 81 06 	lds	r31, 0x0681
    2c7c:	20 85       	ldd	r18, Z+8	; 0x08
    2c7e:	82 2f       	mov	r24, r18
    2c80:	99 27       	eor	r25, r25
    2c82:	87 fd       	sbrc	r24, 7
    2c84:	90 95       	com	r25
    2c86:	9f 93       	push	r25
    2c88:	2f 93       	push	r18
    2c8a:	8f e1       	ldi	r24, 0x1F	; 31
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	9f 93       	push	r25
    2c90:	8f 93       	push	r24
    2c92:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2c96:	e0 91 80 06 	lds	r30, 0x0680
    2c9a:	f0 91 81 06 	lds	r31, 0x0681
    2c9e:	c2 81       	ldd	r28, Z+2	; 0x02
    2ca0:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	83 e5       	ldi	r24, 0x53	; 83
    2ca8:	93 e0       	ldi	r25, 0x03	; 3
    2caa:	9f 93       	push	r25
    2cac:	8f 93       	push	r24
    2cae:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    printf( "canary = %x ",*stkc );
    2cb2:	88 81       	ld	r24, Y
    2cb4:	1f 92       	push	r1
    2cb6:	8f 93       	push	r24
    2cb8:	88 e2       	ldi	r24, 0x28	; 40
    2cba:	93 e0       	ldi	r25, 0x03	; 3
    2cbc:	9f 93       	push	r25
    2cbe:	8f 93       	push	r24
    2cc0:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2cc4:	e0 91 80 06 	lds	r30, 0x0680
    2cc8:	f0 91 81 06 	lds	r31, 0x0681
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2ccc:	81 81       	ldd	r24, Z+1	; 0x01
    2cce:	8f 93       	push	r24
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 93       	push	r24
    2cd4:	85 e3       	ldi	r24, 0x35	; 53
    2cd6:	93 e0       	ldi	r25, 0x03	; 3
    2cd8:	9f 93       	push	r25
    2cda:	8f 93       	push	r24
    2cdc:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2ce0:	80 91 81 06 	lds	r24, 0x0681
    2ce4:	8f 93       	push	r24
    2ce6:	80 91 80 06 	lds	r24, 0x0680
    2cea:	8f 93       	push	r24
    2cec:	8f e3       	ldi	r24, 0x3F	; 63
    2cee:	93 e0       	ldi	r25, 0x03	; 3
    2cf0:	9f 93       	push	r25
    2cf2:	8f 93       	push	r24
    2cf4:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    2cf8:	cb e3       	ldi	r28, 0x3B	; 59
    2cfa:	d4 e0       	ldi	r29, 0x04	; 4
    2cfc:	ed b7       	in	r30, 0x3d	; 61
    2cfe:	fe b7       	in	r31, 0x3e	; 62
    2d00:	74 96       	adiw	r30, 0x14	; 20
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	fe bf       	out	0x3e, r31	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	ed bf       	out	0x3d, r30	; 61
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2d10:	8f e4       	ldi	r24, 0x4F	; 79
    2d12:	68 2e       	mov	r6, r24
    2d14:	83 e0       	ldi	r24, 0x03	; 3
    2d16:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2d18:	98 e2       	ldi	r25, 0x28	; 40
    2d1a:	89 2e       	mov	r8, r25
    2d1c:	93 e0       	ldi	r25, 0x03	; 3
    2d1e:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2d20:	25 e3       	ldi	r18, 0x35	; 53
    2d22:	a2 2e       	mov	r10, r18
    2d24:	23 e0       	ldi	r18, 0x03	; 3
    2d26:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2d28:	3f e3       	ldi	r19, 0x3F	; 63
    2d2a:	c3 2e       	mov	r12, r19
    2d2c:	33 e0       	ldi	r19, 0x03	; 3
    2d2e:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2d30:	ea 80       	ldd	r14, Y+2	; 0x02
    2d32:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2d34:	ff 92       	push	r15
    2d36:	ef 92       	push	r14
    2d38:	1f 93       	push	r17
    2d3a:	0f 93       	push	r16
    2d3c:	7f 92       	push	r7
    2d3e:	6f 92       	push	r6
    2d40:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
        printf( "canary = %x ",*stkc );
    2d44:	f7 01       	movw	r30, r14
    2d46:	80 81       	ld	r24, Z
    2d48:	1f 92       	push	r1
    2d4a:	8f 93       	push	r24
    2d4c:	9f 92       	push	r9
    2d4e:	8f 92       	push	r8
    2d50:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	8f 93       	push	r24
    2d58:	88 81       	ld	r24, Y
    2d5a:	8f 93       	push	r24
    2d5c:	bf 92       	push	r11
    2d5e:	af 92       	push	r10
    2d60:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	df 92       	push	r13
    2d6a:	cf 92       	push	r12
    2d6c:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <printf>
    2d70:	0f 5f       	subi	r16, 0xFF	; 255
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2d76:	ed b7       	in	r30, 0x3d	; 61
    2d78:	fe b7       	in	r31, 0x3e	; 62
    2d7a:	72 96       	adiw	r30, 0x12	; 18
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	fe bf       	out	0x3e, r31	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	ed bf       	out	0x3d, r30	; 61
    2d86:	04 30       	cpi	r16, 0x04	; 4
    2d88:	11 05       	cpc	r17, r1
    2d8a:	91 f6       	brne	.-92     	; 0x2d30 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	7f 90       	pop	r7
    2da6:	6f 90       	pop	r6
    2da8:	08 95       	ret

00002daa <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2dae:	e0 91 80 06 	lds	r30, 0x0680
    2db2:	f0 91 81 06 	lds	r31, 0x0681
    2db6:	c2 81       	ldd	r28, Z+2	; 0x02
    2db8:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2dba:	88 81       	ld	r24, Y
    2dbc:	85 35       	cpi	r24, 0x55	; 85
    2dbe:	39 f0       	breq	.+14     	; 0x2dce <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2dc0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2dca:	85 e5       	ldi	r24, 0x55	; 85
    2dcc:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2dce:	e0 91 80 06 	lds	r30, 0x0680
    2dd2:	f0 91 81 06 	lds	r31, 0x0681
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2dd6:	80 81       	ld	r24, Z
    2dd8:	91 81       	ldd	r25, Z+1	; 0x01
    2dda:	81 15       	cp	r24, r1
    2ddc:	92 44       	sbci	r25, 0x42	; 66
    2dde:	38 f0       	brcs	.+14     	; 0x2dee <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2de0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2de4:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2dea:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <nrk_error_add>




#endif
}
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	08 95       	ret

00002df4 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2df4:	2b e2       	ldi	r18, 0x2B	; 43
    2df6:	82 02       	muls	r24, r18
    2df8:	f0 01       	movw	r30, r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	e5 5c       	subi	r30, 0xC5	; 197
    2dfe:	fb 4f       	sbci	r31, 0xFB	; 251
    2e00:	a2 81       	ldd	r26, Z+2	; 0x02
    2e02:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2e04:	8c 91       	ld	r24, X
    2e06:	85 35       	cpi	r24, 0x55	; 85
    2e08:	19 f0       	breq	.+6      	; 0x2e10 <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    2e0a:	85 e5       	ldi	r24, 0x55	; 85
    2e0c:	8c 93       	st	X, r24
    2e0e:	08 c0       	rjmp	.+16     	; 0x2e20 <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	81 15       	cp	r24, r1
    2e16:	92 44       	sbci	r25, 0x42	; 66
    2e18:	28 f0       	brcs	.+10     	; 0x2e24 <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2e1a:	82 e1       	ldi	r24, 0x12	; 18
    2e1c:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
        return NRK_ERROR;
    2e20:	8f ef       	ldi	r24, 0xFF	; 255
    2e22:	08 95       	ret
    }
#endif
    return NRK_OK;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
}
    2e26:	08 95       	ret

00002e28 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2e2c:	00 91 06 06 	lds	r16, 0x0606
    2e30:	10 91 07 06 	lds	r17, 0x0607
    2e34:	20 91 08 06 	lds	r18, 0x0608
    2e38:	30 91 09 06 	lds	r19, 0x0609
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	b9 01       	movw	r22, r18
    2e42:	a8 01       	movw	r20, r16
    2e44:	08 2e       	mov	r0, r24
    2e46:	04 c0       	rjmp	.+8      	; 0x2e50 <nrk_signal_create+0x28>
    2e48:	76 95       	lsr	r23
    2e4a:	67 95       	ror	r22
    2e4c:	57 95       	ror	r21
    2e4e:	47 95       	ror	r20
    2e50:	0a 94       	dec	r0
    2e52:	d2 f7       	brpl	.-12     	; 0x2e48 <nrk_signal_create+0x20>
    2e54:	40 fd       	sbrc	r20, 0
    2e56:	19 c0       	rjmp	.+50     	; 0x2e8a <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	08 2e       	mov	r0, r24
    2e62:	04 c0       	rjmp	.+8      	; 0x2e6c <nrk_signal_create+0x44>
    2e64:	44 0f       	add	r20, r20
    2e66:	55 1f       	adc	r21, r21
    2e68:	66 1f       	adc	r22, r22
    2e6a:	77 1f       	adc	r23, r23
    2e6c:	0a 94       	dec	r0
    2e6e:	d2 f7       	brpl	.-12     	; 0x2e64 <nrk_signal_create+0x3c>
    2e70:	40 2b       	or	r20, r16
    2e72:	51 2b       	or	r21, r17
    2e74:	62 2b       	or	r22, r18
    2e76:	73 2b       	or	r23, r19
    2e78:	40 93 06 06 	sts	0x0606, r20
    2e7c:	50 93 07 06 	sts	0x0607, r21
    2e80:	60 93 08 06 	sts	0x0608, r22
    2e84:	70 93 09 06 	sts	0x0609, r23
			return i;
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <nrk_signal_create+0x6c>
    2e8a:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2e8c:	80 32       	cpi	r24, 0x20	; 32
    2e8e:	91 05       	cpc	r25, r1
    2e90:	b9 f6       	brne	.-82     	; 0x2e40 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2e92:	8f ef       	ldi	r24, 0xFF	; 255


}
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2e9a:	e0 91 80 06 	lds	r30, 0x0680
    2e9e:	f0 91 81 06 	lds	r31, 0x0681
    2ea2:	65 85       	ldd	r22, Z+13	; 0x0d
    2ea4:	76 85       	ldd	r23, Z+14	; 0x0e
    2ea6:	87 85       	ldd	r24, Z+15	; 0x0f
    2ea8:	90 89       	ldd	r25, Z+16	; 0x10
}
    2eaa:	08 95       	ret

00002eac <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2ec2:	c1 2c       	mov	r12, r1
    2ec4:	d1 2c       	mov	r13, r1
    2ec6:	76 01       	movw	r14, r12
    2ec8:	c3 94       	inc	r12
    2eca:	08 2e       	mov	r0, r24
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <nrk_signal_delete+0x2a>
    2ece:	cc 0c       	add	r12, r12
    2ed0:	dd 1c       	adc	r13, r13
    2ed2:	ee 1c       	adc	r14, r14
    2ed4:	ff 1c       	adc	r15, r15
    2ed6:	0a 94       	dec	r0
    2ed8:	d2 f7       	brpl	.-12     	; 0x2ece <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2eda:	40 91 06 06 	lds	r20, 0x0606
    2ede:	50 91 07 06 	lds	r21, 0x0607
    2ee2:	60 91 08 06 	lds	r22, 0x0608
    2ee6:	70 91 09 06 	lds	r23, 0x0609
    2eea:	4c 21       	and	r20, r12
    2eec:	5d 21       	and	r21, r13
    2eee:	6e 21       	and	r22, r14
    2ef0:	7f 21       	and	r23, r15
    2ef2:	45 2b       	or	r20, r21
    2ef4:	46 2b       	or	r20, r22
    2ef6:	47 2b       	or	r20, r23
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <nrk_signal_delete+0x50>
    2efa:	63 c0       	rjmp	.+198    	; 0x2fc2 <nrk_signal_delete+0x116>

	nrk_int_disable();
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    2f02:	e4 e4       	ldi	r30, 0x44	; 68
    2f04:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f06:	97 01       	movw	r18, r14
    2f08:	86 01       	movw	r16, r12
    2f0a:	00 95       	com	r16
    2f0c:	10 95       	com	r17
    2f0e:	20 95       	com	r18
    2f10:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2f12:	93 e0       	ldi	r25, 0x03	; 3
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	df 01       	movw	r26, r30
    2f18:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2f1a:	4c 91       	ld	r20, X
    2f1c:	4f 3f       	cpi	r20, 0xFF	; 255
    2f1e:	49 f1       	breq	.+82     	; 0x2f72 <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2f20:	44 81       	ldd	r20, Z+4	; 0x04
    2f22:	55 81       	ldd	r21, Z+5	; 0x05
    2f24:	66 81       	ldd	r22, Z+6	; 0x06
    2f26:	77 81       	ldd	r23, Z+7	; 0x07
    2f28:	4c 15       	cp	r20, r12
    2f2a:	5d 05       	cpc	r21, r13
    2f2c:	6e 05       	cpc	r22, r14
    2f2e:	7f 05       	cpc	r23, r15
    2f30:	41 f4       	brne	.+16     	; 0x2f42 <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2f32:	10 86       	std	Z+8, r1	; 0x08
    2f34:	11 86       	std	Z+9, r1	; 0x09
    2f36:	12 86       	std	Z+10, r1	; 0x0a
    2f38:	13 86       	std	Z+11, r1	; 0x0b
    2f3a:	df 01       	movw	r26, r30
    2f3c:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    2f3e:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2f40:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f42:	44 81       	ldd	r20, Z+4	; 0x04
    2f44:	55 81       	ldd	r21, Z+5	; 0x05
    2f46:	66 81       	ldd	r22, Z+6	; 0x06
    2f48:	77 81       	ldd	r23, Z+7	; 0x07
    2f4a:	40 23       	and	r20, r16
    2f4c:	51 23       	and	r21, r17
    2f4e:	62 23       	and	r22, r18
    2f50:	73 23       	and	r23, r19
    2f52:	44 83       	std	Z+4, r20	; 0x04
    2f54:	55 83       	std	Z+5, r21	; 0x05
    2f56:	66 83       	std	Z+6, r22	; 0x06
    2f58:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f5a:	40 85       	ldd	r20, Z+8	; 0x08
    2f5c:	51 85       	ldd	r21, Z+9	; 0x09
    2f5e:	62 85       	ldd	r22, Z+10	; 0x0a
    2f60:	73 85       	ldd	r23, Z+11	; 0x0b
    2f62:	40 23       	and	r20, r16
    2f64:	51 23       	and	r21, r17
    2f66:	62 23       	and	r22, r18
    2f68:	73 23       	and	r23, r19
    2f6a:	40 87       	std	Z+8, r20	; 0x08
    2f6c:	51 87       	std	Z+9, r21	; 0x09
    2f6e:	62 87       	std	Z+10, r22	; 0x0a
    2f70:	73 87       	std	Z+11, r23	; 0x0b
    2f72:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2f74:	44 e0       	ldi	r20, 0x04	; 4
    2f76:	e0 3f       	cpi	r30, 0xF0	; 240
    2f78:	f4 07       	cpc	r31, r20
    2f7a:	69 f6       	brne	.-102    	; 0x2f16 <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2f7c:	4e ef       	ldi	r20, 0xFE	; 254
    2f7e:	5f ef       	ldi	r21, 0xFF	; 255
    2f80:	6f ef       	ldi	r22, 0xFF	; 255
    2f82:	7f ef       	ldi	r23, 0xFF	; 255
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <nrk_signal_delete+0xe2>
    2f86:	44 0f       	add	r20, r20
    2f88:	55 1f       	adc	r21, r21
    2f8a:	66 1f       	adc	r22, r22
    2f8c:	77 1f       	adc	r23, r23
    2f8e:	8a 95       	dec	r24
    2f90:	d2 f7       	brpl	.-12     	; 0x2f86 <nrk_signal_delete+0xda>
    2f92:	80 91 06 06 	lds	r24, 0x0606
    2f96:	90 91 07 06 	lds	r25, 0x0607
    2f9a:	a0 91 08 06 	lds	r26, 0x0608
    2f9e:	b0 91 09 06 	lds	r27, 0x0609
    2fa2:	84 23       	and	r24, r20
    2fa4:	95 23       	and	r25, r21
    2fa6:	a6 23       	and	r26, r22
    2fa8:	b7 23       	and	r27, r23
    2faa:	80 93 06 06 	sts	0x0606, r24
    2fae:	90 93 07 06 	sts	0x0607, r25
    2fb2:	a0 93 08 06 	sts	0x0608, r26
    2fb6:	b0 93 09 06 	sts	0x0609, r27
	nrk_int_enable();
    2fba:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>

	return NRK_OK;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	01 c0       	rjmp	.+2      	; 0x2fc4 <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2fc4:	0f 90       	pop	r0
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	08 95       	ret

00002fd8 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2fdc:	41 e0       	ldi	r20, 0x01	; 1
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <nrk_signal_unregister+0x16>
    2fe6:	44 0f       	add	r20, r20
    2fe8:	55 1f       	adc	r21, r21
    2fea:	66 1f       	adc	r22, r22
    2fec:	77 1f       	adc	r23, r23
    2fee:	8a 95       	dec	r24
    2ff0:	d2 f7       	brpl	.-12     	; 0x2fe6 <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2ff2:	e0 91 80 06 	lds	r30, 0x0680
    2ff6:	f0 91 81 06 	lds	r31, 0x0681
    2ffa:	85 85       	ldd	r24, Z+13	; 0x0d
    2ffc:	96 85       	ldd	r25, Z+14	; 0x0e
    2ffe:	a7 85       	ldd	r26, Z+15	; 0x0f
    3000:	b0 89       	ldd	r27, Z+16	; 0x10
    3002:	8a 01       	movw	r16, r20
    3004:	9b 01       	movw	r18, r22
    3006:	08 23       	and	r16, r24
    3008:	19 23       	and	r17, r25
    300a:	2a 23       	and	r18, r26
    300c:	3b 23       	and	r19, r27
    300e:	01 2b       	or	r16, r17
    3010:	02 2b       	or	r16, r18
    3012:	03 2b       	or	r16, r19
    3014:	d1 f0       	breq	.+52     	; 0x304a <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3016:	40 95       	com	r20
    3018:	50 95       	com	r21
    301a:	60 95       	com	r22
    301c:	70 95       	com	r23
    301e:	84 23       	and	r24, r20
    3020:	95 23       	and	r25, r21
    3022:	a6 23       	and	r26, r22
    3024:	b7 23       	and	r27, r23
    3026:	85 87       	std	Z+13, r24	; 0x0d
    3028:	96 87       	std	Z+14, r25	; 0x0e
    302a:	a7 87       	std	Z+15, r26	; 0x0f
    302c:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    302e:	81 89       	ldd	r24, Z+17	; 0x11
    3030:	92 89       	ldd	r25, Z+18	; 0x12
    3032:	a3 89       	ldd	r26, Z+19	; 0x13
    3034:	b4 89       	ldd	r27, Z+20	; 0x14
    3036:	84 23       	and	r24, r20
    3038:	95 23       	and	r25, r21
    303a:	a6 23       	and	r26, r22
    303c:	b7 23       	and	r27, r23
    303e:	81 8b       	std	Z+17, r24	; 0x11
    3040:	92 8b       	std	Z+18, r25	; 0x12
    3042:	a3 8b       	std	Z+19, r26	; 0x13
    3044:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	01 c0       	rjmp	.+2      	; 0x304c <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    304a:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	08 95       	ret

00003052 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3052:	40 91 06 06 	lds	r20, 0x0606
    3056:	50 91 07 06 	lds	r21, 0x0607
    305a:	60 91 08 06 	lds	r22, 0x0608
    305e:	70 91 09 06 	lds	r23, 0x0609
    3062:	08 2e       	mov	r0, r24
    3064:	04 c0       	rjmp	.+8      	; 0x306e <nrk_signal_register+0x1c>
    3066:	76 95       	lsr	r23
    3068:	67 95       	ror	r22
    306a:	57 95       	ror	r21
    306c:	47 95       	ror	r20
    306e:	0a 94       	dec	r0
    3070:	d2 f7       	brpl	.-12     	; 0x3066 <nrk_signal_register+0x14>
    3072:	40 ff       	sbrs	r20, 0
    3074:	1d c0       	rjmp	.+58     	; 0x30b0 <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3076:	e0 91 80 06 	lds	r30, 0x0680
    307a:	f0 91 81 06 	lds	r31, 0x0681
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <nrk_signal_register+0x3e>
    3088:	44 0f       	add	r20, r20
    308a:	55 1f       	adc	r21, r21
    308c:	66 1f       	adc	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	8a 95       	dec	r24
    3092:	d2 f7       	brpl	.-12     	; 0x3088 <nrk_signal_register+0x36>
    3094:	85 85       	ldd	r24, Z+13	; 0x0d
    3096:	96 85       	ldd	r25, Z+14	; 0x0e
    3098:	a7 85       	ldd	r26, Z+15	; 0x0f
    309a:	b0 89       	ldd	r27, Z+16	; 0x10
    309c:	84 2b       	or	r24, r20
    309e:	95 2b       	or	r25, r21
    30a0:	a6 2b       	or	r26, r22
    30a2:	b7 2b       	or	r27, r23
    30a4:	85 87       	std	Z+13, r24	; 0x0d
    30a6:	96 87       	std	Z+14, r25	; 0x0e
    30a8:	a7 87       	std	Z+15, r26	; 0x0f
    30aa:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	08 95       	ret
	}
            
	return NRK_ERROR;
    30b0:	8f ef       	ldi	r24, 0xFF	; 255
}
    30b2:	08 95       	ret

000030b4 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    30c2:	c1 2c       	mov	r12, r1
    30c4:	d1 2c       	mov	r13, r1
    30c6:	76 01       	movw	r14, r12
    30c8:	c3 94       	inc	r12
    30ca:	04 c0       	rjmp	.+8      	; 0x30d4 <nrk_event_signal+0x20>
    30cc:	cc 0c       	add	r12, r12
    30ce:	dd 1c       	adc	r13, r13
    30d0:	ee 1c       	adc	r14, r14
    30d2:	ff 1c       	adc	r15, r15
    30d4:	8a 95       	dec	r24
    30d6:	d2 f7       	brpl	.-12     	; 0x30cc <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    30d8:	80 91 06 06 	lds	r24, 0x0606
    30dc:	90 91 07 06 	lds	r25, 0x0607
    30e0:	a0 91 08 06 	lds	r26, 0x0608
    30e4:	b0 91 09 06 	lds	r27, 0x0609
    30e8:	8c 21       	and	r24, r12
    30ea:	9d 21       	and	r25, r13
    30ec:	ae 21       	and	r26, r14
    30ee:	bf 21       	and	r27, r15
    30f0:	89 2b       	or	r24, r25
    30f2:	8a 2b       	or	r24, r26
    30f4:	8b 2b       	or	r24, r27
    30f6:	11 f4       	brne	.+4      	; 0x30fc <nrk_event_signal+0x48>
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	44 c0       	rjmp	.+136    	; 0x3184 <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    30fc:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    3100:	e2 e4       	ldi	r30, 0x42	; 66
    3102:	f4 e0       	ldi	r31, 0x04	; 4
    3104:	c4 e4       	ldi	r28, 0x44	; 68
    3106:	d4 e0       	ldi	r29, 0x04	; 4

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3108:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    310a:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    310c:	80 81       	ld	r24, Z
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	b9 f4       	brne	.+46     	; 0x3140 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3112:	82 85       	ldd	r24, Z+10	; 0x0a
    3114:	93 85       	ldd	r25, Z+11	; 0x0b
    3116:	a4 85       	ldd	r26, Z+12	; 0x0c
    3118:	b5 85       	ldd	r27, Z+13	; 0x0d
    311a:	8c 21       	and	r24, r12
    311c:	9d 21       	and	r25, r13
    311e:	ae 21       	and	r26, r14
    3120:	bf 21       	and	r27, r15
    3122:	89 2b       	or	r24, r25
    3124:	8a 2b       	or	r24, r26
    3126:	8b 2b       	or	r24, r27
    3128:	59 f0       	breq	.+22     	; 0x3140 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    312a:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    312c:	16 86       	std	Z+14, r1	; 0x0e
    312e:	17 86       	std	Z+15, r1	; 0x0f
    3130:	10 8a       	std	Z+16, r1	; 0x10
    3132:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3134:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3136:	c2 86       	std	Z+10, r12	; 0x0a
    3138:	d3 86       	std	Z+11, r13	; 0x0b
    313a:	e4 86       	std	Z+12, r14	; 0x0c
    313c:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    313e:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3140:	80 81       	ld	r24, Z
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	a1 f4       	brne	.+40     	; 0x316e <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3146:	82 85       	ldd	r24, Z+10	; 0x0a
    3148:	93 85       	ldd	r25, Z+11	; 0x0b
    314a:	a4 85       	ldd	r26, Z+12	; 0x0c
    314c:	b5 85       	ldd	r27, Z+13	; 0x0d
    314e:	8c 15       	cp	r24, r12
    3150:	9d 05       	cpc	r25, r13
    3152:	ae 05       	cpc	r26, r14
    3154:	bf 05       	cpc	r27, r15
    3156:	59 f4       	brne	.+22     	; 0x316e <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3158:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    315a:	16 86       	std	Z+14, r1	; 0x0e
    315c:	17 86       	std	Z+15, r1	; 0x0f
    315e:	10 8a       	std	Z+16, r1	; 0x10
    3160:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3162:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3164:	12 86       	std	Z+10, r1	; 0x0a
    3166:	13 86       	std	Z+11, r1	; 0x0b
    3168:	14 86       	std	Z+12, r1	; 0x0c
    316a:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    316c:	11 e0       	ldi	r17, 0x01	; 1
    316e:	bb 96       	adiw	r30, 0x2b	; 43
    3170:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3172:	84 e0       	ldi	r24, 0x04	; 4
    3174:	ee 3e       	cpi	r30, 0xEE	; 238
    3176:	f8 07       	cpc	r31, r24
    3178:	49 f6       	brne	.-110    	; 0x310c <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    317a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
	if(event_occured)
    317e:	11 11       	cpse	r17, r1
    3180:	05 c0       	rjmp	.+10     	; 0x318c <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	0e 94 b3 14 	call	0x2966	; 0x2966 <_nrk_errno_set>
	return NRK_ERROR;
    3188:	8f ef       	ldi	r24, 0xFF	; 255
    318a:	01 c0       	rjmp	.+2      	; 0x318e <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    318c:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	1f 91       	pop	r17
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	df 90       	pop	r13
    319a:	cf 90       	pop	r12
    319c:	08 95       	ret

0000319e <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    31a2:	e0 91 80 06 	lds	r30, 0x0680
    31a6:	f0 91 81 06 	lds	r31, 0x0681
    31aa:	05 85       	ldd	r16, Z+13	; 0x0d
    31ac:	16 85       	ldd	r17, Z+14	; 0x0e
    31ae:	27 85       	ldd	r18, Z+15	; 0x0f
    31b0:	30 89       	ldd	r19, Z+16	; 0x10
    31b2:	06 23       	and	r16, r22
    31b4:	17 23       	and	r17, r23
    31b6:	28 23       	and	r18, r24
    31b8:	39 23       	and	r19, r25
    31ba:	01 2b       	or	r16, r17
    31bc:	02 2b       	or	r16, r18
    31be:	03 2b       	or	r16, r19
    31c0:	19 f1       	breq	.+70     	; 0x3208 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    31c2:	61 8b       	std	Z+17, r22	; 0x11
    31c4:	72 8b       	std	Z+18, r23	; 0x12
    31c6:	83 8b       	std	Z+19, r24	; 0x13
    31c8:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    31ca:	21 e0       	ldi	r18, 0x01	; 1
    31cc:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	00 90 70 05 	lds	r0, 0x0570
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <nrk_event_wait+0x42>
    31d8:	b6 95       	lsr	r27
    31da:	a7 95       	ror	r26
    31dc:	97 95       	ror	r25
    31de:	87 95       	ror	r24
    31e0:	0a 94       	dec	r0
    31e2:	d2 f7       	brpl	.-12     	; 0x31d8 <nrk_event_wait+0x3a>
    31e4:	80 ff       	sbrs	r24, 0
    31e6:	03 c0       	rjmp	.+6      	; 0x31ee <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    31e8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <nrk_wait_until_nw>
    31ec:	04 c0       	rjmp	.+8      	; 0x31f6 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    31f6:	e0 91 80 06 	lds	r30, 0x0680
    31fa:	f0 91 81 06 	lds	r31, 0x0681
    31fe:	61 89       	ldd	r22, Z+17	; 0x11
    3200:	72 89       	ldd	r23, Z+18	; 0x12
    3202:	83 89       	ldd	r24, Z+19	; 0x13
    3204:	94 89       	ldd	r25, Z+20	; 0x14
    3206:	03 c0       	rjmp	.+6      	; 0x320e <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	08 95       	ret

00003214 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    3214:	90 91 0a 06 	lds	r25, 0x060A
    3218:	91 11       	cpse	r25, r1
    321a:	1d c0       	rjmp	.+58     	; 0x3256 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    321c:	90 91 69 05 	lds	r25, 0x0569
    3220:	9f 3f       	cpi	r25, 0xFF	; 255
    3222:	31 f0       	breq	.+12     	; 0x3230 <nrk_sem_create+0x1c>
    3224:	90 91 6c 05 	lds	r25, 0x056C
    3228:	9f 3f       	cpi	r25, 0xFF	; 255
    322a:	21 f4       	brne	.+8      	; 0x3234 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    322c:	21 e0       	ldi	r18, 0x01	; 1
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    3234:	22 e0       	ldi	r18, 0x02	; 2
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	f9 01       	movw	r30, r18
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	e7 59       	subi	r30, 0x97	; 151
    3244:	fa 4f       	sbci	r31, 0xFA	; 250
    3246:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3248:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    324a:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	80 93 0a 06 	sts	0x060A, r24
	return	&nrk_sem_list[i];
    3252:	cf 01       	movw	r24, r30
    3254:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    325a:	08 95       	ret

0000325c <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    325c:	25 e0       	ldi	r18, 0x05	; 5
    325e:	89 36       	cpi	r24, 0x69	; 105
    3260:	92 07       	cpc	r25, r18
    3262:	29 f0       	breq	.+10     	; 0x326e <nrk_get_resource_index+0x12>
    3264:	8c 56       	subi	r24, 0x6C	; 108
    3266:	95 40       	sbci	r25, 0x05	; 5
    3268:	21 f4       	brne	.+8      	; 0x3272 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	08 95       	ret
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    3272:	8f ef       	ldi	r24, 0xFF	; 255
}
    3274:	08 95       	ret

00003276 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3276:	0e 94 2e 19 	call	0x325c	; 0x325c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    327a:	8f 3f       	cpi	r24, 0xFF	; 255
    327c:	11 f4       	brne	.+4      	; 0x3282 <nrk_sem_query+0xc>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	02 c0       	rjmp	.+4      	; 0x3286 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	21 f4       	brne	.+8      	; 0x328e <nrk_sem_query+0x18>
    3286:	0e 94 b3 14 	call	0x2966	; 0x2966 <_nrk_errno_set>
    328a:	8f ef       	ldi	r24, 0xFF	; 255
    328c:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    328e:	99 27       	eor	r25, r25
    3290:	87 fd       	sbrc	r24, 7
    3292:	90 95       	com	r25
    3294:	fc 01       	movw	r30, r24
    3296:	ee 0f       	add	r30, r30
    3298:	ff 1f       	adc	r31, r31
    329a:	e8 0f       	add	r30, r24
    329c:	f9 1f       	adc	r31, r25
    329e:	e7 59       	subi	r30, 0x97	; 151
    32a0:	fa 4f       	sbci	r31, 0xFA	; 250
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
}
    32a4:	08 95       	ret

000032a6 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	1f 92       	push	r1
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    32b8:	0e 94 2e 19 	call	0x325c	; 0x325c <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    32bc:	8f 3f       	cpi	r24, 0xFF	; 255
    32be:	11 f4       	brne	.+4      	; 0x32c4 <nrk_sem_pend+0x1e>
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    32c4:	82 30       	cpi	r24, 0x02	; 2
    32c6:	21 f4       	brne	.+8      	; 0x32d0 <nrk_sem_pend+0x2a>
    32c8:	0e 94 b3 14 	call	0x2966	; 0x2966 <_nrk_errno_set>
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	40 c0       	rjmp	.+128    	; 0x3350 <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	e8 2e       	mov	r14, r24
    32da:	ff 24       	eor	r15, r15
    32dc:	e7 fc       	sbrc	r14, 7
    32de:	f0 94       	com	r15
    32e0:	87 01       	movw	r16, r14
    32e2:	00 0f       	add	r16, r16
    32e4:	11 1f       	adc	r17, r17
    32e6:	d8 01       	movw	r26, r16
    32e8:	ae 0d       	add	r26, r14
    32ea:	bf 1d       	adc	r27, r15
    32ec:	a7 59       	subi	r26, 0x97	; 151
    32ee:	ba 4f       	sbci	r27, 0xFA	; 250
    32f0:	12 96       	adiw	r26, 0x02	; 2
    32f2:	9c 91       	ld	r25, X
    32f4:	91 11       	cpse	r25, r1
    32f6:	16 c0       	rjmp	.+44     	; 0x3324 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    32f8:	e0 91 80 06 	lds	r30, 0x0680
    32fc:	f0 91 81 06 	lds	r31, 0x0681
    3300:	97 81       	ldd	r25, Z+7	; 0x07
    3302:	92 60       	ori	r25, 0x02	; 2
    3304:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3306:	99 27       	eor	r25, r25
    3308:	87 fd       	sbrc	r24, 7
    330a:	90 95       	com	r25
    330c:	a9 2f       	mov	r26, r25
    330e:	b9 2f       	mov	r27, r25
    3310:	81 8b       	std	Z+17, r24	; 0x11
    3312:	92 8b       	std	Z+18, r25	; 0x12
    3314:	a3 8b       	std	Z+19, r26	; 0x13
    3316:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3318:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
		nrk_wait_until_ticks(0);
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3324:	f8 01       	movw	r30, r16
    3326:	ee 0d       	add	r30, r14
    3328:	ff 1d       	adc	r31, r15
    332a:	e7 59       	subi	r30, 0x97	; 151
    332c:	fa 4f       	sbci	r31, 0xFA	; 250
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	81 50       	subi	r24, 0x01	; 1
    3332:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3334:	a0 91 80 06 	lds	r26, 0x0680
    3338:	b0 91 81 06 	lds	r27, 0x0681
    333c:	81 81       	ldd	r24, Z+1	; 0x01
    333e:	1b 96       	adiw	r26, 0x0b	; 11
    3340:	8c 93       	st	X, r24
    3342:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	14 96       	adiw	r26, 0x04	; 4
    3348:	8c 93       	st	X, r24
	nrk_int_enable();
    334a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>

	return NRK_OK;
    334e:	81 e0       	ldi	r24, 0x01	; 1
}
    3350:	0f 90       	pop	r0
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	08 95       	ret

00003360 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	1f 92       	push	r1
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3376:	0e 94 2e 19 	call	0x325c	; 0x325c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    337a:	8f 3f       	cpi	r24, 0xFF	; 255
    337c:	11 f4       	brne	.+4      	; 0x3382 <nrk_sem_post+0x22>
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <nrk_sem_post+0x26>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3382:	82 30       	cpi	r24, 0x02	; 2
    3384:	21 f4       	brne	.+8      	; 0x338e <nrk_sem_post+0x2e>
    3386:	0e 94 b3 14 	call	0x2966	; 0x2966 <_nrk_errno_set>
    338a:	8f ef       	ldi	r24, 0xFF	; 255
    338c:	4b c0       	rjmp	.+150    	; 0x3424 <nrk_sem_post+0xc4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    338e:	28 2f       	mov	r18, r24
    3390:	33 27       	eor	r19, r19
    3392:	27 fd       	sbrc	r18, 7
    3394:	30 95       	com	r19
    3396:	89 01       	movw	r16, r18
    3398:	00 0f       	add	r16, r16
    339a:	11 1f       	adc	r17, r17
    339c:	02 0f       	add	r16, r18
    339e:	13 1f       	adc	r17, r19
    33a0:	07 59       	subi	r16, 0x97	; 151
    33a2:	1a 4f       	sbci	r17, 0xFA	; 250
    33a4:	d8 01       	movw	r26, r16
    33a6:	12 96       	adiw	r26, 0x02	; 2
    33a8:	2c 91       	ld	r18, X
    33aa:	12 97       	sbiw	r26, 0x02	; 2
    33ac:	9c 91       	ld	r25, X
    33ae:	29 17       	cp	r18, r25
    33b0:	c4 f5       	brge	.+112    	; 0x3422 <nrk_sem_post+0xc2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>

		nrk_sem_list[id].value++;
    33b8:	f8 01       	movw	r30, r16
    33ba:	92 81       	ldd	r25, Z+2	; 0x02
    33bc:	9f 5f       	subi	r25, 0xFF	; 255
    33be:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    33c0:	e0 91 80 06 	lds	r30, 0x0680
    33c4:	f0 91 81 06 	lds	r31, 0x0681
    33c8:	14 82       	std	Z+4, r1	; 0x04
    33ca:	e2 e4       	ldi	r30, 0x42	; 66
    33cc:	f4 e0       	ldi	r31, 0x04	; 4
    33ce:	04 e4       	ldi	r16, 0x44	; 68
    33d0:	14 e0       	ldi	r17, 0x04	; 4

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	c8 2e       	mov	r12, r24
    33d6:	dd 24       	eor	r13, r13
    33d8:	c7 fc       	sbrc	r12, 7
    33da:	d0 94       	com	r13
    33dc:	ed 2c       	mov	r14, r13
    33de:	fd 2c       	mov	r15, r13
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    33e0:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    33e2:	30 81       	ld	r19, Z
    33e4:	32 30       	cpi	r19, 0x02	; 2
    33e6:	a1 f4       	brne	.+40     	; 0x3410 <nrk_sem_post+0xb0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    33e8:	42 85       	ldd	r20, Z+10	; 0x0a
    33ea:	53 85       	ldd	r21, Z+11	; 0x0b
    33ec:	64 85       	ldd	r22, Z+12	; 0x0c
    33ee:	75 85       	ldd	r23, Z+13	; 0x0d
    33f0:	4c 15       	cp	r20, r12
    33f2:	5d 05       	cpc	r21, r13
    33f4:	6e 05       	cpc	r22, r14
    33f6:	7f 05       	cpc	r23, r15
    33f8:	59 f4       	brne	.+22     	; 0x3410 <nrk_sem_post+0xb0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    33fa:	d8 01       	movw	r26, r16
    33fc:	2c 93       	st	X, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    33fe:	16 86       	std	Z+14, r1	; 0x0e
    3400:	17 86       	std	Z+15, r1	; 0x0f
    3402:	10 8a       	std	Z+16, r1	; 0x10
    3404:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3406:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3408:	12 86       	std	Z+10, r1	; 0x0a
    340a:	13 86       	std	Z+11, r1	; 0x0b
    340c:	14 86       	std	Z+12, r1	; 0x0c
    340e:	15 86       	std	Z+13, r1	; 0x0d
    3410:	bb 96       	adiw	r30, 0x2b	; 43
    3412:	05 5d       	subi	r16, 0xD5	; 213
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3416:	b4 e0       	ldi	r27, 0x04	; 4
    3418:	ee 3e       	cpi	r30, 0xEE	; 238
    341a:	fb 07       	cpc	r31, r27
    341c:	11 f7       	brne	.-60     	; 0x33e2 <nrk_sem_post+0x82>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    341e:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
	}
		
return NRK_OK;
    3422:	81 e0       	ldi	r24, 0x01	; 1
}
    3424:	0f 90       	pop	r0
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	08 95       	ret

00003438 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3438:	0e 94 2e 19 	call	0x325c	; 0x325c <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    343c:	8f 3f       	cpi	r24, 0xFF	; 255
    343e:	11 f4       	brne	.+4      	; 0x3444 <nrk_sem_delete+0xc>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3444:	82 30       	cpi	r24, 0x02	; 2
    3446:	21 f4       	brne	.+8      	; 0x3450 <nrk_sem_delete+0x18>
    3448:	0e 94 b3 14 	call	0x2966	; 0x2966 <_nrk_errno_set>
    344c:	8f ef       	ldi	r24, 0xFF	; 255
    344e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3450:	99 27       	eor	r25, r25
    3452:	87 fd       	sbrc	r24, 7
    3454:	90 95       	com	r25
    3456:	fc 01       	movw	r30, r24
    3458:	ee 0f       	add	r30, r30
    345a:	ff 1f       	adc	r31, r31
    345c:	e8 0f       	add	r30, r24
    345e:	f9 1f       	adc	r31, r25
    3460:	e7 59       	subi	r30, 0x97	; 151
    3462:	fa 4f       	sbci	r31, 0xFA	; 250
    3464:	8f ef       	ldi	r24, 0xFF	; 255
    3466:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3468:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    346a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    346c:	80 91 0a 06 	lds	r24, 0x060A
    3470:	81 50       	subi	r24, 0x01	; 1
    3472:	80 93 0a 06 	sts	0x060A, r24
return NRK_OK;
    3476:	81 e0       	ldi	r24, 0x01	; 1
}
    3478:	08 95       	ret

0000347a <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    347a:	e0 91 fc 05 	lds	r30, 0x05FC
    347e:	f0 91 fd 05 	lds	r31, 0x05FD
}
    3482:	80 81       	ld	r24, Z
    3484:	08 95       	ret

00003486 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3486:	e0 91 fc 05 	lds	r30, 0x05FC
    348a:	f0 91 fd 05 	lds	r31, 0x05FD
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    348e:	30 97       	sbiw	r30, 0x00	; 0
    3490:	21 f0       	breq	.+8      	; 0x349a <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3492:	03 80       	ldd	r0, Z+3	; 0x03
    3494:	f4 81       	ldd	r31, Z+4	; 0x04
    3496:	e0 2d       	mov	r30, r0
    3498:	fa cf       	rjmp	.-12     	; 0x348e <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    349a:	08 95       	ret

0000349c <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    349c:	cf 92       	push	r12
    349e:	df 92       	push	r13
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    34ac:	e0 91 38 04 	lds	r30, 0x0438
    34b0:	f0 91 39 04 	lds	r31, 0x0439
    34b4:	30 97       	sbiw	r30, 0x00	; 0
    34b6:	09 f4       	brne	.+2      	; 0x34ba <nrk_add_to_readyQ+0x1e>
    34b8:	8a c0       	rjmp	.+276    	; 0x35ce <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    34ba:	40 91 fc 05 	lds	r20, 0x05FC
    34be:	50 91 fd 05 	lds	r21, 0x05FD
    CurNode = _free_node;

    if (_head_node != NULL)
    34c2:	41 15       	cp	r20, r1
    34c4:	51 05       	cpc	r21, r1
    34c6:	09 f4       	brne	.+2      	; 0x34ca <nrk_add_to_readyQ+0x2e>
    34c8:	46 c0       	rjmp	.+140    	; 0x3556 <nrk_add_to_readyQ+0xba>
    34ca:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    34cc:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    34ce:	69 2f       	mov	r22, r25
    34d0:	78 2f       	mov	r23, r24
    34d2:	76 03       	mulsu	r23, r22
    34d4:	90 01       	movw	r18, r0
    34d6:	11 24       	eor	r1, r1
    34d8:	25 5c       	subi	r18, 0xC5	; 197
    34da:	3b 4f       	sbci	r19, 0xFB	; 251
    34dc:	89 01       	movw	r16, r18
    34de:	06 5f       	subi	r16, 0xF6	; 246
    34e0:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    34e2:	79 01       	movw	r14, r18
    34e4:	c4 e0       	ldi	r28, 0x04	; 4
    34e6:	ec 0e       	add	r14, r28
    34e8:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    34ea:	25 5f       	subi	r18, 0xF5	; 245
    34ec:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    34ee:	6c 91       	ld	r22, X
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	96 9f       	mul	r25, r22
    34f4:	e0 01       	movw	r28, r0
    34f6:	97 9f       	mul	r25, r23
    34f8:	d0 0d       	add	r29, r0
    34fa:	11 24       	eor	r1, r1
    34fc:	c5 5c       	subi	r28, 0xC5	; 197
    34fe:	db 4f       	sbci	r29, 0xFB	; 251
    3500:	dc 80       	ldd	r13, Y+4	; 0x04
    3502:	dd 20       	and	r13, r13
    3504:	29 f0       	breq	.+10     	; 0x3510 <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3506:	db 84       	ldd	r13, Y+11	; 0x0b
    3508:	e8 01       	movw	r28, r16
    350a:	c8 80       	ld	r12, Y
    350c:	dc 14       	cp	r13, r12
    350e:	28 f1       	brcs	.+74     	; 0x355a <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3510:	e7 01       	movw	r28, r14
    3512:	d8 80       	ld	r13, Y
    3514:	dd 20       	and	r13, r13
    3516:	61 f0       	breq	.+24     	; 0x3530 <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3518:	96 9f       	mul	r25, r22
    351a:	e0 01       	movw	r28, r0
    351c:	97 9f       	mul	r25, r23
    351e:	d0 0d       	add	r29, r0
    3520:	11 24       	eor	r1, r1
    3522:	c5 5c       	subi	r28, 0xC5	; 197
    3524:	db 4f       	sbci	r29, 0xFB	; 251
    3526:	da 84       	ldd	r13, Y+10	; 0x0a
    3528:	e9 01       	movw	r28, r18
    352a:	c8 80       	ld	r12, Y
    352c:	dc 14       	cp	r13, r12
    352e:	a8 f0       	brcs	.+42     	; 0x355a <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3530:	96 9f       	mul	r25, r22
    3532:	e0 01       	movw	r28, r0
    3534:	97 9f       	mul	r25, r23
    3536:	d0 0d       	add	r29, r0
    3538:	11 24       	eor	r1, r1
    353a:	c5 5c       	subi	r28, 0xC5	; 197
    353c:	db 4f       	sbci	r29, 0xFB	; 251
    353e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3540:	e8 01       	movw	r28, r16
    3542:	68 81       	ld	r22, Y
    3544:	76 17       	cp	r23, r22
    3546:	48 f0       	brcs	.+18     	; 0x355a <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3548:	13 96       	adiw	r26, 0x03	; 3
    354a:	0d 90       	ld	r0, X+
    354c:	bc 91       	ld	r27, X
    354e:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3550:	10 97       	sbiw	r26, 0x00	; 0
    3552:	69 f6       	brne	.-102    	; 0x34ee <nrk_add_to_readyQ+0x52>
    3554:	02 c0       	rjmp	.+4      	; 0x355a <nrk_add_to_readyQ+0xbe>
    3556:	a0 e0       	ldi	r26, 0x00	; 0
    3558:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    355a:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    355c:	c3 81       	ldd	r28, Z+3	; 0x03
    355e:	d4 81       	ldd	r29, Z+4	; 0x04
    3560:	d0 93 39 04 	sts	0x0439, r29
    3564:	c0 93 38 04 	sts	0x0438, r28

    if (NextNode == _head_node)
    3568:	a4 17       	cp	r26, r20
    356a:	b5 07       	cpc	r27, r21
    356c:	b1 f4       	brne	.+44     	; 0x359a <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    356e:	10 97       	sbiw	r26, 0x00	; 0
    3570:	49 f0       	breq	.+18     	; 0x3584 <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    3572:	b4 83       	std	Z+4, r27	; 0x04
    3574:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3576:	12 82       	std	Z+2, r1	; 0x02
    3578:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    357a:	12 96       	adiw	r26, 0x02	; 2
    357c:	fc 93       	st	X, r31
    357e:	ee 93       	st	-X, r30
    3580:	11 97       	sbiw	r26, 0x01	; 1
    3582:	06 c0       	rjmp	.+12     	; 0x3590 <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    3584:	14 82       	std	Z+4, r1	; 0x04
    3586:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3588:	12 82       	std	Z+2, r1	; 0x02
    358a:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    358c:	fa 83       	std	Y+2, r31	; 0x02
    358e:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3590:	f0 93 fd 05 	sts	0x05FD, r31
    3594:	e0 93 fc 05 	sts	0x05FC, r30
    3598:	1a c0       	rjmp	.+52     	; 0x35ce <nrk_add_to_readyQ+0x132>
    359a:	11 96       	adiw	r26, 0x01	; 1
    359c:	8d 91       	ld	r24, X+
    359e:	9c 91       	ld	r25, X
    35a0:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    35a2:	ac 17       	cp	r26, r28
    35a4:	bd 07       	cpc	r27, r29
    35a6:	59 f0       	breq	.+22     	; 0x35be <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    35a8:	92 83       	std	Z+2, r25	; 0x02
    35aa:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    35ac:	b4 83       	std	Z+4, r27	; 0x04
    35ae:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    35b0:	11 96       	adiw	r26, 0x01	; 1
    35b2:	cd 91       	ld	r28, X+
    35b4:	dc 91       	ld	r29, X
    35b6:	12 97       	sbiw	r26, 0x02	; 2
    35b8:	fc 83       	std	Y+4, r31	; 0x04
    35ba:	eb 83       	std	Y+3, r30	; 0x03
    35bc:	04 c0       	rjmp	.+8      	; 0x35c6 <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    35be:	14 82       	std	Z+4, r1	; 0x04
    35c0:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    35c2:	92 83       	std	Z+2, r25	; 0x02
    35c4:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    35c6:	12 96       	adiw	r26, 0x02	; 2
    35c8:	fc 93       	st	X, r31
    35ca:	ee 93       	st	-X, r30
    35cc:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	ff 90       	pop	r15
    35d8:	ef 90       	pop	r14
    35da:	df 90       	pop	r13
    35dc:	cf 90       	pop	r12
    35de:	08 95       	ret

000035e0 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    35e4:	e0 91 fc 05 	lds	r30, 0x05FC
    35e8:	f0 91 fd 05 	lds	r31, 0x05FD
    35ec:	30 97       	sbiw	r30, 0x00	; 0
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <nrk_rem_from_readyQ+0x12>
    35f0:	44 c0       	rjmp	.+136    	; 0x367a <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    35f2:	99 27       	eor	r25, r25
    35f4:	87 fd       	sbrc	r24, 7
    35f6:	90 95       	com	r25
    35f8:	20 81       	ld	r18, Z
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	81 f4       	brne	.+32     	; 0x3622 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3602:	a3 81       	ldd	r26, Z+3	; 0x03
    3604:	b4 81       	ldd	r27, Z+4	; 0x04
    3606:	b0 93 fd 05 	sts	0x05FD, r27
    360a:	a0 93 fc 05 	sts	0x05FC, r26
        _head_node->Prev = NULL;
    360e:	12 96       	adiw	r26, 0x02	; 2
    3610:	1c 92       	st	X, r1
    3612:	1e 92       	st	-X, r1
    3614:	11 97       	sbiw	r26, 0x01	; 1
    3616:	18 c0       	rjmp	.+48     	; 0x3648 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3618:	03 80       	ldd	r0, Z+3	; 0x03
    361a:	f4 81       	ldd	r31, Z+4	; 0x04
    361c:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    361e:	30 97       	sbiw	r30, 0x00	; 0
    3620:	61 f1       	breq	.+88     	; 0x367a <nrk_rem_from_readyQ+0x9a>
    3622:	20 81       	ld	r18, Z
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	28 17       	cp	r18, r24
    3628:	39 07       	cpc	r19, r25
    362a:	b1 f7       	brne	.-20     	; 0x3618 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    362c:	c1 81       	ldd	r28, Z+1	; 0x01
    362e:	d2 81       	ldd	r29, Z+2	; 0x02
    3630:	83 81       	ldd	r24, Z+3	; 0x03
    3632:	94 81       	ldd	r25, Z+4	; 0x04
    3634:	9c 83       	std	Y+4, r25	; 0x04
    3636:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3638:	a3 81       	ldd	r26, Z+3	; 0x03
    363a:	b4 81       	ldd	r27, Z+4	; 0x04
    363c:	10 97       	sbiw	r26, 0x00	; 0
    363e:	21 f0       	breq	.+8      	; 0x3648 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3640:	12 96       	adiw	r26, 0x02	; 2
    3642:	dc 93       	st	X, r29
    3644:	ce 93       	st	-X, r28
    3646:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3648:	a0 91 38 04 	lds	r26, 0x0438
    364c:	b0 91 39 04 	lds	r27, 0x0439
    3650:	10 97       	sbiw	r26, 0x00	; 0
    3652:	39 f4       	brne	.+14     	; 0x3662 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3654:	f0 93 39 04 	sts	0x0439, r31
    3658:	e0 93 38 04 	sts	0x0438, r30
        _free_node->Next = NULL;
    365c:	14 82       	std	Z+4, r1	; 0x04
    365e:	13 82       	std	Z+3, r1	; 0x03
    3660:	0a c0       	rjmp	.+20     	; 0x3676 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3662:	b4 83       	std	Z+4, r27	; 0x04
    3664:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    3666:	12 96       	adiw	r26, 0x02	; 2
    3668:	fc 93       	st	X, r31
    366a:	ee 93       	st	-X, r30
    366c:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    366e:	f0 93 39 04 	sts	0x0439, r31
    3672:	e0 93 38 04 	sts	0x0438, r30
    }
    _free_node->Prev = NULL;
    3676:	12 82       	std	Z+2, r1	; 0x02
    3678:	11 82       	std	Z+1, r1	; 0x01
}
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	08 95       	ret

00003680 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    368e:	4b 81       	ldd	r20, Y+3	; 0x03
    3690:	5c 81       	ldd	r21, Y+4	; 0x04
    3692:	69 81       	ldd	r22, Y+1	; 0x01
    3694:	7a 81       	ldd	r23, Y+2	; 0x02
    3696:	8d 81       	ldd	r24, Y+5	; 0x05
    3698:	9e 81       	ldd	r25, Y+6	; 0x06
    369a:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    369e:	2f 81       	ldd	r18, Y+7	; 0x07
    36a0:	22 23       	and	r18, r18
    36a2:	71 f0       	breq	.+28     	; 0x36c0 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    36a4:	4b 81       	ldd	r20, Y+3	; 0x03
    36a6:	5c 81       	ldd	r21, Y+4	; 0x04
    36a8:	e1 2c       	mov	r14, r1
    36aa:	f1 2c       	mov	r15, r1
    36ac:	00 e0       	ldi	r16, 0x00	; 0
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	bc 01       	movw	r22, r24
    36b6:	ce 01       	movw	r24, r28
    36b8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    36bc:	1f 82       	std	Y+7, r1	; 0x07
    36be:	0c c0       	rjmp	.+24     	; 0x36d8 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    36c0:	e8 81       	ld	r30, Y
    36c2:	2b e2       	ldi	r18, 0x2B	; 43
    36c4:	e2 02       	muls	r30, r18
    36c6:	f0 01       	movw	r30, r0
    36c8:	11 24       	eor	r1, r1
    36ca:	e5 5c       	subi	r30, 0xC5	; 197
    36cc:	fb 4f       	sbci	r31, 0xFB	; 251
    36ce:	21 85       	ldd	r18, Z+9	; 0x09
    36d0:	23 30       	cpi	r18, 0x03	; 3
    36d2:	b9 f4       	brne	.+46     	; 0x3702 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    36d8:	e8 81       	ld	r30, Y
    36da:	8b e2       	ldi	r24, 0x2B	; 43
    36dc:	e8 02       	muls	r30, r24
    36de:	f0 01       	movw	r30, r0
    36e0:	11 24       	eor	r1, r1
    36e2:	e5 5c       	subi	r30, 0xC5	; 197
    36e4:	fb 4f       	sbci	r31, 0xFB	; 251
    36e6:	45 89       	ldd	r20, Z+21	; 0x15
    36e8:	56 89       	ldd	r21, Z+22	; 0x16
    36ea:	67 89       	ldd	r22, Z+23	; 0x17
    36ec:	70 8d       	ldd	r23, Z+24	; 0x18
    36ee:	45 2b       	or	r20, r21
    36f0:	46 2b       	or	r20, r22
    36f2:	47 2b       	or	r20, r23
    36f4:	41 f4       	brne	.+16     	; 0x3706 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    36fa:	88 81       	ld	r24, Y
    36fc:	0e 94 4e 1a 	call	0x349c	; 0x349c <nrk_add_to_readyQ>
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3702:	8f ef       	ldi	r24, 0xFF	; 255
    3704:	01 c0       	rjmp	.+2      	; 0x3708 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3706:	81 e0       	ldi	r24, 0x01	; 1
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	08 95       	ret

00003716 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	28 97       	sbiw	r28, 0x08	; 8
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	29 83       	std	Y+1, r18	; 0x01
    372e:	3a 83       	std	Y+2, r19	; 0x02
    3730:	4b 83       	std	Y+3, r20	; 0x03
    3732:	5c 83       	std	Y+4, r21	; 0x04
    3734:	6d 83       	std	Y+5, r22	; 0x05
    3736:	7e 83       	std	Y+6, r23	; 0x06
    3738:	8f 83       	std	Y+7, r24	; 0x07
    373a:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    373c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3740:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    3744:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3746:	ce 01       	movw	r24, r28
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    374e:	63 30       	cpi	r22, 0x03	; 3
    3750:	71 05       	cpc	r23, r1
    3752:	98 f0       	brcs	.+38     	; 0x377a <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3754:	e0 91 80 06 	lds	r30, 0x0680
    3758:	f0 91 81 06 	lds	r31, 0x0681
    375c:	21 2f       	mov	r18, r17
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	26 0f       	add	r18, r22
    3762:	37 1f       	adc	r19, r23
    3764:	c9 01       	movw	r24, r18
    3766:	a0 e0       	ldi	r26, 0x00	; 0
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	85 8b       	std	Z+21, r24	; 0x15
    376c:	96 8b       	std	Z+22, r25	; 0x16
    376e:	a7 8b       	std	Z+23, r26	; 0x17
    3770:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3772:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>

    return NRK_OK;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	01 c0       	rjmp	.+2      	; 0x377c <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    377a:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    377c:	28 96       	adiw	r28, 0x08	; 8
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	08 95       	ret

00003790 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3790:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3794:	e0 91 80 06 	lds	r30, 0x0680
    3798:	f0 91 81 06 	lds	r31, 0x0681
    379c:	85 81       	ldd	r24, Z+5	; 0x05
    379e:	81 11       	cpse	r24, r1
    37a0:	f7 cf       	rjmp	.-18     	; 0x3790 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    37a2:	08 95       	ret

000037a4 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    37a4:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    37a6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    37aa:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    37ae:	e0 91 80 06 	lds	r30, 0x0680
    37b2:	f0 91 81 06 	lds	r31, 0x0681
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	92 a7       	std	Z+42, r25	; 0x2a
    37bc:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    37c2:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    37c6:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    37c8:	88 3f       	cpi	r24, 0xF8	; 248
    37ca:	88 f4       	brcc	.+34     	; 0x37ee <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    37cc:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    37d0:	2c 2f       	mov	r18, r28
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	2f 5f       	subi	r18, 0xFF	; 255
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	48 2f       	mov	r20, r24
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	24 17       	cp	r18, r20
    37de:	35 07       	cpc	r19, r21
    37e0:	34 f4       	brge	.+12     	; 0x37ee <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    37e2:	82 e0       	ldi	r24, 0x02	; 2
    37e4:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    37e6:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    37ea:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    37ee:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    37f2:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	cf 91       	pop	r28
    37fa:	08 95       	ret

000037fc <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    37fc:	e0 91 80 06 	lds	r30, 0x0680
    3800:	f0 91 81 06 	lds	r31, 0x0681
    3804:	80 85       	ldd	r24, Z+8	; 0x08
    3806:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    380a:	e0 91 80 06 	lds	r30, 0x0680
    380e:	f0 91 81 06 	lds	r31, 0x0681
    3812:	84 e0       	ldi	r24, 0x04	; 4
    3814:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3816:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <nrk_wait_until_next_period>
    return NRK_OK;
}
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	08 95       	ret

0000381e <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3824:	0e 94 d5 16 	call	0x2daa	; 0x2daa <nrk_stack_check>

    if (p == 0)
    3828:	20 97       	sbiw	r28, 0x00	; 0
    382a:	11 f4       	brne	.+4      	; 0x3830 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    382c:	c1 e0       	ldi	r28, 0x01	; 1
    382e:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3830:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3834:	e0 91 80 06 	lds	r30, 0x0680
    3838:	f0 91 81 06 	lds	r31, 0x0681
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3840:	d2 a7       	std	Z+42, r29	; 0x2a
    3842:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3844:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    3848:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    384a:	88 3f       	cpi	r24, 0xF8	; 248
    384c:	88 f4       	brcc	.+34     	; 0x3870 <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    384e:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    3852:	2c 2f       	mov	r18, r28
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	2f 5f       	subi	r18, 0xFF	; 255
    3858:	3f 4f       	sbci	r19, 0xFF	; 255
    385a:	48 2f       	mov	r20, r24
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	24 17       	cp	r18, r20
    3860:	35 07       	cpc	r19, r21
    3862:	34 f4       	brge	.+12     	; 0x3870 <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    3864:	82 e0       	ldi	r24, 0x02	; 2
    3866:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3868:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    386c:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3870:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3874:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	08 95       	ret

00003880 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    388c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3890:	e0 91 80 06 	lds	r30, 0x0680
    3894:	f0 91 81 06 	lds	r31, 0x0681
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    389c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    38a0:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    38a2:	e0 91 80 06 	lds	r30, 0x0680
    38a6:	f0 91 81 06 	lds	r31, 0x0681
    38aa:	c8 2f       	mov	r28, r24
    38ac:	d0 e0       	ldi	r29, 0x00	; 0
    38ae:	ae 01       	movw	r20, r28
    38b0:	40 0f       	add	r20, r16
    38b2:	51 1f       	adc	r21, r17
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	45 8b       	std	Z+21, r20	; 0x15
    38ba:	56 8b       	std	Z+22, r21	; 0x16
    38bc:	67 8b       	std	Z+23, r22	; 0x17
    38be:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    38c0:	87 ef       	ldi	r24, 0xF7	; 247
    38c2:	8f 15       	cp	r24, r15
    38c4:	70 f0       	brcs	.+28     	; 0x38e2 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38c6:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    38ca:	21 96       	adiw	r28, 0x01	; 1
    38cc:	28 2f       	mov	r18, r24
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	c2 17       	cp	r28, r18
    38d2:	d3 07       	cpc	r29, r19
    38d4:	34 f4       	brge	.+12     	; 0x38e2 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    38d6:	82 e0       	ldi	r24, 0x02	; 2
    38d8:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    38da:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);
    38de:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    38e2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    38e6:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	df 91       	pop	r29
    38ee:	cf 91       	pop	r28
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	ff 90       	pop	r15
    38f6:	08 95       	ret

000038f8 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    38fe:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3902:	e0 91 80 06 	lds	r30, 0x0680
    3906:	f0 91 81 06 	lds	r31, 0x0681
    390a:	21 e0       	ldi	r18, 0x01	; 1
    390c:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    390e:	ce 01       	movw	r24, r28
    3910:	a0 e0       	ldi	r26, 0x00	; 0
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	85 8b       	std	Z+21, r24	; 0x15
    3916:	96 8b       	std	Z+22, r25	; 0x16
    3918:	a7 8b       	std	Z+23, r26	; 0x17
    391a:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    391c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    3920:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3922:	88 3f       	cpi	r24, 0xF8	; 248
    3924:	88 f4       	brcc	.+34     	; 0x3948 <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3926:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    392a:	2c 2f       	mov	r18, r28
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	2f 5f       	subi	r18, 0xFF	; 255
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	48 2f       	mov	r20, r24
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	24 17       	cp	r18, r20
    3938:	35 07       	cpc	r19, r21
    393a:	34 f4       	brge	.+12     	; 0x3948 <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3940:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);
    3944:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3948:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    394c:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	08 95       	ret

00003958 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3958:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    395a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    395e:	e0 91 80 06 	lds	r30, 0x0680
    3962:	f0 91 81 06 	lds	r31, 0x0681
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    396a:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    396c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    3970:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3972:	88 3f       	cpi	r24, 0xF8	; 248
    3974:	88 f4       	brcc	.+34     	; 0x3998 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3976:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    397a:	2c 2f       	mov	r18, r28
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	2f 5f       	subi	r18, 0xFF	; 255
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
    3982:	48 2f       	mov	r20, r24
    3984:	50 e0       	ldi	r21, 0x00	; 0
    3986:	24 17       	cp	r18, r20
    3988:	35 07       	cpc	r19, r21
    398a:	34 f4       	brge	.+12     	; 0x3998 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3990:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);
    3994:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3998:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    399c:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	cf 91       	pop	r28
    39a4:	08 95       	ret

000039a6 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	28 97       	sbiw	r28, 0x08	; 8
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	29 83       	std	Y+1, r18	; 0x01
    39be:	3a 83       	std	Y+2, r19	; 0x02
    39c0:	4b 83       	std	Y+3, r20	; 0x03
    39c2:	5c 83       	std	Y+4, r21	; 0x04
    39c4:	6d 83       	std	Y+5, r22	; 0x05
    39c6:	7e 83       	std	Y+6, r23	; 0x06
    39c8:	8f 83       	std	Y+7, r24	; 0x07
    39ca:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    39cc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <nrk_stack_check>

    nrk_int_disable ();
    39d0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    39d4:	e0 91 80 06 	lds	r30, 0x0680
    39d8:	f0 91 81 06 	lds	r31, 0x0681
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	92 a7       	std	Z+42, r25	; 0x2a
    39e6:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    39e8:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    39ec:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    39ee:	ce 01       	movw	r24, r28
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    39f6:	e0 91 80 06 	lds	r30, 0x0680
    39fa:	f0 91 81 06 	lds	r31, 0x0681
    39fe:	61 0f       	add	r22, r17
    3a00:	71 1d       	adc	r23, r1
    3a02:	81 1d       	adc	r24, r1
    3a04:	91 1d       	adc	r25, r1
    3a06:	65 8b       	std	Z+21, r22	; 0x15
    3a08:	76 8b       	std	Z+22, r23	; 0x16
    3a0a:	87 8b       	std	Z+23, r24	; 0x17
    3a0c:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3a0e:	18 3f       	cpi	r17, 0xF8	; 248
    3a10:	88 f4       	brcc	.+34     	; 0x3a34 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3a12:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    3a16:	21 2f       	mov	r18, r17
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	2f 5f       	subi	r18, 0xFF	; 255
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	48 2f       	mov	r20, r24
    3a20:	50 e0       	ldi	r21, 0x00	; 0
    3a22:	24 17       	cp	r18, r20
    3a24:	35 07       	cpc	r19, r21
    3a26:	34 f4       	brge	.+12     	; 0x3a34 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    3a2c:	80 93 ea 07 	sts	0x07EA, r24
            _nrk_set_next_wakeup (timer);
    3a30:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3a34:	0e 94 dd 12 	call	0x25ba	; 0x25ba <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3a38:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	28 96       	adiw	r28, 0x08	; 8
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	08 95       	ret

00003a52 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3a52:	8f 92       	push	r8
    3a54:	9f 92       	push	r9
    3a56:	af 92       	push	r10
    3a58:	bf 92       	push	r11
    3a5a:	cf 92       	push	r12
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	60 97       	sbiw	r28, 0x10	; 16
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	29 87       	std	Y+9, r18	; 0x09
    3a7c:	3a 87       	std	Y+10, r19	; 0x0a
    3a7e:	4b 87       	std	Y+11, r20	; 0x0b
    3a80:	5c 87       	std	Y+12, r21	; 0x0c
    3a82:	6d 87       	std	Y+13, r22	; 0x0d
    3a84:	7e 87       	std	Y+14, r23	; 0x0e
    3a86:	8f 87       	std	Y+15, r24	; 0x0f
    3a88:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	01 96       	adiw	r24, 0x01	; 1
    3a8e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3a92:	89 80       	ldd	r8, Y+1	; 0x01
    3a94:	9a 80       	ldd	r9, Y+2	; 0x02
    3a96:	ab 80       	ldd	r10, Y+3	; 0x03
    3a98:	bc 80       	ldd	r11, Y+4	; 0x04
    3a9a:	cd 80       	ldd	r12, Y+5	; 0x05
    3a9c:	de 80       	ldd	r13, Y+6	; 0x06
    3a9e:	ef 80       	ldd	r14, Y+7	; 0x07
    3aa0:	f8 84       	ldd	r15, Y+8	; 0x08
    3aa2:	09 85       	ldd	r16, Y+9	; 0x09
    3aa4:	1a 85       	ldd	r17, Y+10	; 0x0a
    3aa6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3aa8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3aaa:	4d 85       	ldd	r20, Y+13	; 0x0d
    3aac:	5e 85       	ldd	r21, Y+14	; 0x0e
    3aae:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ab0:	78 89       	ldd	r23, Y+16	; 0x10
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	09 96       	adiw	r24, 0x09	; 9
    3ab6:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3aba:	8f 3f       	cpi	r24, 0xFF	; 255
    3abc:	61 f0       	breq	.+24     	; 0x3ad6 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3abe:	29 85       	ldd	r18, Y+9	; 0x09
    3ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ac2:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ac4:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ac6:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ac8:	7e 85       	ldd	r23, Y+14	; 0x0e
    3aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3acc:	98 89       	ldd	r25, Y+16	; 0x10
    3ace:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_wait>

    return NRK_OK;
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3ad6:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3ad8:	60 96       	adiw	r28, 0x10	; 16
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	1f 91       	pop	r17
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	df 90       	pop	r13
    3af2:	cf 90       	pop	r12
    3af4:	bf 90       	pop	r11
    3af6:	af 90       	pop	r10
    3af8:	9f 90       	pop	r9
    3afa:	8f 90       	pop	r8
    3afc:	08 95       	ret

00003afe <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3afe:	e0 91 80 06 	lds	r30, 0x0680
    3b02:	f0 91 81 06 	lds	r31, 0x0681
}
    3b06:	80 85       	ldd	r24, Z+8	; 0x08
    3b08:	08 95       	ret

00003b0a <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3b0a:	cf 92       	push	r12
    3b0c:	df 92       	push	r13
    3b0e:	ef 92       	push	r14
    3b10:	ff 92       	push	r15
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3b18:	1c 82       	std	Y+4, r1	; 0x04
    3b1a:	1d 82       	std	Y+5, r1	; 0x05
    3b1c:	1e 82       	std	Y+6, r1	; 0x06
    3b1e:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3b20:	40 91 fe 05 	lds	r20, 0x05FE
    3b24:	50 91 ff 05 	lds	r21, 0x05FF
    3b28:	60 91 00 06 	lds	r22, 0x0600
    3b2c:	70 91 01 06 	lds	r23, 0x0601
    3b30:	48 83       	st	Y, r20
    3b32:	59 83       	std	Y+1, r21	; 0x01
    3b34:	6a 83       	std	Y+2, r22	; 0x02
    3b36:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3b38:	c0 90 02 06 	lds	r12, 0x0602
    3b3c:	d0 90 03 06 	lds	r13, 0x0603
    3b40:	e0 90 04 06 	lds	r14, 0x0604
    3b44:	f0 90 05 06 	lds	r15, 0x0605
    3b48:	cc 82       	std	Y+4, r12	; 0x04
    3b4a:	dd 82       	std	Y+5, r13	; 0x05
    3b4c:	ee 82       	std	Y+6, r14	; 0x06
    3b4e:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3b50:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    3b54:	a8 2f       	mov	r26, r24
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	23 eb       	ldi	r18, 0xB3	; 179
    3b5a:	36 ee       	ldi	r19, 0xE6	; 230
    3b5c:	4e e0       	ldi	r20, 0x0E	; 14
    3b5e:	50 e0       	ldi	r21, 0x00	; 0
    3b60:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    3b64:	6c 0d       	add	r22, r12
    3b66:	7d 1d       	adc	r23, r13
    3b68:	8e 1d       	adc	r24, r14
    3b6a:	9f 1d       	adc	r25, r15
    3b6c:	6c 83       	std	Y+4, r22	; 0x04
    3b6e:	7d 83       	std	Y+5, r23	; 0x05
    3b70:	8e 83       	std	Y+6, r24	; 0x06
    3b72:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3b74:	4c 81       	ldd	r20, Y+4	; 0x04
    3b76:	5d 81       	ldd	r21, Y+5	; 0x05
    3b78:	6e 81       	ldd	r22, Y+6	; 0x06
    3b7a:	7f 81       	ldd	r23, Y+7	; 0x07
    3b7c:	41 15       	cp	r20, r1
    3b7e:	8a ec       	ldi	r24, 0xCA	; 202
    3b80:	58 07       	cpc	r21, r24
    3b82:	8a e9       	ldi	r24, 0x9A	; 154
    3b84:	68 07       	cpc	r22, r24
    3b86:	8b e3       	ldi	r24, 0x3B	; 59
    3b88:	78 07       	cpc	r23, r24
    3b8a:	a0 f0       	brcs	.+40     	; 0x3bb4 <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3b8c:	5a 5c       	subi	r21, 0xCA	; 202
    3b8e:	6a 49       	sbci	r22, 0x9A	; 154
    3b90:	7b 43       	sbci	r23, 0x3B	; 59
    3b92:	4c 83       	std	Y+4, r20	; 0x04
    3b94:	5d 83       	std	Y+5, r21	; 0x05
    3b96:	6e 83       	std	Y+6, r22	; 0x06
    3b98:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    3b9a:	48 81       	ld	r20, Y
    3b9c:	59 81       	ldd	r21, Y+1	; 0x01
    3b9e:	6a 81       	ldd	r22, Y+2	; 0x02
    3ba0:	7b 81       	ldd	r23, Y+3	; 0x03
    3ba2:	4f 5f       	subi	r20, 0xFF	; 255
    3ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba6:	6f 4f       	sbci	r22, 0xFF	; 255
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	48 83       	st	Y, r20
    3bac:	59 83       	std	Y+1, r21	; 0x01
    3bae:	6a 83       	std	Y+2, r22	; 0x02
    3bb0:	7b 83       	std	Y+3, r23	; 0x03
    3bb2:	e0 cf       	rjmp	.-64     	; 0x3b74 <nrk_time_get+0x6a>
    }

}
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	df 90       	pop	r13
    3bbe:	cf 90       	pop	r12
    3bc0:	08 95       	ret

00003bc2 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3bc2:	8f 92       	push	r8
    3bc4:	9f 92       	push	r9
    3bc6:	af 92       	push	r10
    3bc8:	bf 92       	push	r11
    3bca:	cf 92       	push	r12
    3bcc:	df 92       	push	r13
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	60 97       	sbiw	r28, 0x10	; 16
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	fc 01       	movw	r30, r24
    3bec:	09 83       	std	Y+1, r16	; 0x01
    3bee:	1a 83       	std	Y+2, r17	; 0x02
    3bf0:	2b 83       	std	Y+3, r18	; 0x03
    3bf2:	3c 83       	std	Y+4, r19	; 0x04
    3bf4:	4d 83       	std	Y+5, r20	; 0x05
    3bf6:	5e 83       	std	Y+6, r21	; 0x06
    3bf8:	6f 83       	std	Y+7, r22	; 0x07
    3bfa:	78 87       	std	Y+8, r23	; 0x08
    3bfc:	89 86       	std	Y+9, r8	; 0x09
    3bfe:	9a 86       	std	Y+10, r9	; 0x0a
    3c00:	ab 86       	std	Y+11, r10	; 0x0b
    3c02:	bc 86       	std	Y+12, r11	; 0x0c
    3c04:	cd 86       	std	Y+13, r12	; 0x0d
    3c06:	de 86       	std	Y+14, r13	; 0x0e
    3c08:	ef 86       	std	Y+15, r14	; 0x0f
    3c0a:	f8 8a       	std	Y+16, r15	; 0x10
    3c0c:	89 80       	ldd	r8, Y+1	; 0x01
    3c0e:	9a 80       	ldd	r9, Y+2	; 0x02
    3c10:	ab 80       	ldd	r10, Y+3	; 0x03
    3c12:	bc 80       	ldd	r11, Y+4	; 0x04
    3c14:	0d 81       	ldd	r16, Y+5	; 0x05
    3c16:	1e 81       	ldd	r17, Y+6	; 0x06
    3c18:	2f 81       	ldd	r18, Y+7	; 0x07
    3c1a:	38 85       	ldd	r19, Y+8	; 0x08
    3c1c:	c9 84       	ldd	r12, Y+9	; 0x09
    3c1e:	da 84       	ldd	r13, Y+10	; 0x0a
    3c20:	eb 84       	ldd	r14, Y+11	; 0x0b
    3c22:	fc 84       	ldd	r15, Y+12	; 0x0c
    3c24:	4d 85       	ldd	r20, Y+13	; 0x0d
    3c26:	5e 85       	ldd	r21, Y+14	; 0x0e
    3c28:	6f 85       	ldd	r22, Y+15	; 0x0f
    3c2a:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3c2c:	8c 14       	cp	r8, r12
    3c2e:	9d 04       	cpc	r9, r13
    3c30:	ae 04       	cpc	r10, r14
    3c32:	bf 04       	cpc	r11, r15
    3c34:	08 f4       	brcc	.+2      	; 0x3c38 <nrk_time_sub+0x76>
    3c36:	3f c0       	rjmp	.+126    	; 0x3cb6 <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    3c38:	c8 14       	cp	r12, r8
    3c3a:	d9 04       	cpc	r13, r9
    3c3c:	ea 04       	cpc	r14, r10
    3c3e:	fb 04       	cpc	r15, r11
    3c40:	91 f4       	brne	.+36     	; 0x3c66 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3c42:	04 17       	cp	r16, r20
    3c44:	15 07       	cpc	r17, r21
    3c46:	26 07       	cpc	r18, r22
    3c48:	37 07       	cpc	r19, r23
    3c4a:	a8 f1       	brcs	.+106    	; 0x3cb6 <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3c4c:	04 1b       	sub	r16, r20
    3c4e:	15 0b       	sbc	r17, r21
    3c50:	26 0b       	sbc	r18, r22
    3c52:	37 0b       	sbc	r19, r23
    3c54:	04 83       	std	Z+4, r16	; 0x04
    3c56:	15 83       	std	Z+5, r17	; 0x05
    3c58:	26 83       	std	Z+6, r18	; 0x06
    3c5a:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    3c5c:	10 82       	st	Z, r1
    3c5e:	11 82       	std	Z+1, r1	; 0x01
    3c60:	12 82       	std	Z+2, r1	; 0x02
    3c62:	13 82       	std	Z+3, r1	; 0x03
    3c64:	26 c0       	rjmp	.+76     	; 0x3cb2 <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3c66:	04 17       	cp	r16, r20
    3c68:	15 07       	cpc	r17, r21
    3c6a:	26 07       	cpc	r18, r22
    3c6c:	37 07       	cpc	r19, r23
    3c6e:	88 f4       	brcc	.+34     	; 0x3c92 <nrk_time_sub+0xd0>
{
	high.secs--;
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	88 1a       	sub	r8, r24
    3c74:	91 08       	sbc	r9, r1
    3c76:	a1 08       	sbc	r10, r1
    3c78:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3c7a:	8c 18       	sub	r8, r12
    3c7c:	9d 08       	sbc	r9, r13
    3c7e:	ae 08       	sbc	r10, r14
    3c80:	bf 08       	sbc	r11, r15
    3c82:	80 82       	st	Z, r8
    3c84:	91 82       	std	Z+1, r9	; 0x01
    3c86:	a2 82       	std	Z+2, r10	; 0x02
    3c88:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3c8a:	16 53       	subi	r17, 0x36	; 54
    3c8c:	25 46       	sbci	r18, 0x65	; 101
    3c8e:	34 4c       	sbci	r19, 0xC4	; 196
    3c90:	08 c0       	rjmp	.+16     	; 0x3ca2 <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3c92:	8c 18       	sub	r8, r12
    3c94:	9d 08       	sbc	r9, r13
    3c96:	ae 08       	sbc	r10, r14
    3c98:	bf 08       	sbc	r11, r15
    3c9a:	80 82       	st	Z, r8
    3c9c:	91 82       	std	Z+1, r9	; 0x01
    3c9e:	a2 82       	std	Z+2, r10	; 0x02
    3ca0:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3ca2:	04 1b       	sub	r16, r20
    3ca4:	15 0b       	sbc	r17, r21
    3ca6:	26 0b       	sbc	r18, r22
    3ca8:	37 0b       	sbc	r19, r23
    3caa:	04 83       	std	Z+4, r16	; 0x04
    3cac:	15 83       	std	Z+5, r17	; 0x05
    3cae:	26 83       	std	Z+6, r18	; 0x06
    3cb0:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3cb6:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3cb8:	60 96       	adiw	r28, 0x10	; 16
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	bf 90       	pop	r11
    3cd6:	af 90       	pop	r10
    3cd8:	9f 90       	pop	r9
    3cda:	8f 90       	pop	r8
    3cdc:	08 95       	ret

00003cde <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3cde:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3ce0:	44 81       	ldd	r20, Z+4	; 0x04
    3ce2:	55 81       	ldd	r21, Z+5	; 0x05
    3ce4:	66 81       	ldd	r22, Z+6	; 0x06
    3ce6:	77 81       	ldd	r23, Z+7	; 0x07
    3ce8:	41 15       	cp	r20, r1
    3cea:	8a ec       	ldi	r24, 0xCA	; 202
    3cec:	58 07       	cpc	r21, r24
    3cee:	8a e9       	ldi	r24, 0x9A	; 154
    3cf0:	68 07       	cpc	r22, r24
    3cf2:	8b e3       	ldi	r24, 0x3B	; 59
    3cf4:	78 07       	cpc	r23, r24
    3cf6:	a0 f0       	brcs	.+40     	; 0x3d20 <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3cf8:	5a 5c       	subi	r21, 0xCA	; 202
    3cfa:	6a 49       	sbci	r22, 0x9A	; 154
    3cfc:	7b 43       	sbci	r23, 0x3B	; 59
    3cfe:	44 83       	std	Z+4, r20	; 0x04
    3d00:	55 83       	std	Z+5, r21	; 0x05
    3d02:	66 83       	std	Z+6, r22	; 0x06
    3d04:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3d06:	40 81       	ld	r20, Z
    3d08:	51 81       	ldd	r21, Z+1	; 0x01
    3d0a:	62 81       	ldd	r22, Z+2	; 0x02
    3d0c:	73 81       	ldd	r23, Z+3	; 0x03
    3d0e:	4f 5f       	subi	r20, 0xFF	; 255
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255
    3d12:	6f 4f       	sbci	r22, 0xFF	; 255
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255
    3d16:	40 83       	st	Z, r20
    3d18:	51 83       	std	Z+1, r21	; 0x01
    3d1a:	62 83       	std	Z+2, r22	; 0x02
    3d1c:	73 83       	std	Z+3, r23	; 0x03
    3d1e:	e0 cf       	rjmp	.-64     	; 0x3ce0 <nrk_time_compact_nanos+0x2>
    }
}
    3d20:	08 95       	ret

00003d22 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3d22:	8f 92       	push	r8
    3d24:	9f 92       	push	r9
    3d26:	af 92       	push	r10
    3d28:	bf 92       	push	r11
    3d2a:	cf 92       	push	r12
    3d2c:	df 92       	push	r13
    3d2e:	ef 92       	push	r14
    3d30:	ff 92       	push	r15
    3d32:	0f 93       	push	r16
    3d34:	1f 93       	push	r17
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	60 97       	sbiw	r28, 0x10	; 16
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	de bf       	out	0x3e, r29	; 62
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	cd bf       	out	0x3d, r28	; 61
    3d4a:	09 83       	std	Y+1, r16	; 0x01
    3d4c:	1a 83       	std	Y+2, r17	; 0x02
    3d4e:	2b 83       	std	Y+3, r18	; 0x03
    3d50:	3c 83       	std	Y+4, r19	; 0x04
    3d52:	4d 83       	std	Y+5, r20	; 0x05
    3d54:	5e 83       	std	Y+6, r21	; 0x06
    3d56:	6f 83       	std	Y+7, r22	; 0x07
    3d58:	78 87       	std	Y+8, r23	; 0x08
    3d5a:	89 86       	std	Y+9, r8	; 0x09
    3d5c:	9a 86       	std	Y+10, r9	; 0x0a
    3d5e:	ab 86       	std	Y+11, r10	; 0x0b
    3d60:	bc 86       	std	Y+12, r11	; 0x0c
    3d62:	cd 86       	std	Y+13, r12	; 0x0d
    3d64:	de 86       	std	Y+14, r13	; 0x0e
    3d66:	ef 86       	std	Y+15, r14	; 0x0f
    3d68:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3d6a:	49 85       	ldd	r20, Y+9	; 0x09
    3d6c:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d72:	09 81       	ldd	r16, Y+1	; 0x01
    3d74:	1a 81       	ldd	r17, Y+2	; 0x02
    3d76:	2b 81       	ldd	r18, Y+3	; 0x03
    3d78:	3c 81       	ldd	r19, Y+4	; 0x04
    3d7a:	40 0f       	add	r20, r16
    3d7c:	51 1f       	adc	r21, r17
    3d7e:	62 1f       	adc	r22, r18
    3d80:	73 1f       	adc	r23, r19
    3d82:	fc 01       	movw	r30, r24
    3d84:	40 83       	st	Z, r20
    3d86:	51 83       	std	Z+1, r21	; 0x01
    3d88:	62 83       	std	Z+2, r22	; 0x02
    3d8a:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3d8c:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d8e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d90:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d92:	78 89       	ldd	r23, Y+16	; 0x10
    3d94:	0d 81       	ldd	r16, Y+5	; 0x05
    3d96:	1e 81       	ldd	r17, Y+6	; 0x06
    3d98:	2f 81       	ldd	r18, Y+7	; 0x07
    3d9a:	38 85       	ldd	r19, Y+8	; 0x08
    3d9c:	40 0f       	add	r20, r16
    3d9e:	51 1f       	adc	r21, r17
    3da0:	62 1f       	adc	r22, r18
    3da2:	73 1f       	adc	r23, r19
    3da4:	44 83       	std	Z+4, r20	; 0x04
    3da6:	55 83       	std	Z+5, r21	; 0x05
    3da8:	66 83       	std	Z+6, r22	; 0x06
    3daa:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3dac:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <nrk_time_compact_nanos>
return NRK_OK;
}
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	60 96       	adiw	r28, 0x10	; 16
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	bf 90       	pop	r11
    3dd0:	af 90       	pop	r10
    3dd2:	9f 90       	pop	r9
    3dd4:	8f 90       	pop	r8
    3dd6:	08 95       	ret

00003dd8 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3dd8:	60 93 fe 05 	sts	0x05FE, r22
    3ddc:	70 93 ff 05 	sts	0x05FF, r23
    3de0:	80 93 00 06 	sts	0x0600, r24
    3de4:	90 93 01 06 	sts	0x0601, r25
  nrk_system_time.nano_secs=nano_secs;
    3de8:	20 93 02 06 	sts	0x0602, r18
    3dec:	30 93 03 06 	sts	0x0603, r19
    3df0:	40 93 04 06 	sts	0x0604, r20
    3df4:	50 93 05 06 	sts	0x0605, r21
    3df8:	08 95       	ret

00003dfa <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3dfa:	2f 92       	push	r2
    3dfc:	3f 92       	push	r3
    3dfe:	4f 92       	push	r4
    3e00:	5f 92       	push	r5
    3e02:	6f 92       	push	r6
    3e04:	7f 92       	push	r7
    3e06:	8f 92       	push	r8
    3e08:	9f 92       	push	r9
    3e0a:	af 92       	push	r10
    3e0c:	bf 92       	push	r11
    3e0e:	cf 92       	push	r12
    3e10:	df 92       	push	r13
    3e12:	ef 92       	push	r14
    3e14:	ff 92       	push	r15
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	62 97       	sbiw	r28, 0x12	; 18
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3e2e:	dc 01       	movw	r26, r24
    3e30:	4d 90       	ld	r4, X+
    3e32:	5d 90       	ld	r5, X+
    3e34:	6d 90       	ld	r6, X+
    3e36:	7c 90       	ld	r7, X
    3e38:	13 97       	sbiw	r26, 0x03	; 3
    3e3a:	14 96       	adiw	r26, 0x04	; 4
    3e3c:	6d 91       	ld	r22, X+
    3e3e:	7d 91       	ld	r23, X+
    3e40:	8d 91       	ld	r24, X+
    3e42:	9c 91       	ld	r25, X
    3e44:	17 97       	sbiw	r26, 0x07	; 7
    3e46:	41 14       	cp	r4, r1
    3e48:	51 04       	cpc	r5, r1
    3e4a:	61 04       	cpc	r6, r1
    3e4c:	71 04       	cpc	r7, r1
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <_nrk_time_to_ticks+0x58>
    3e50:	6c c0       	rjmp	.+216    	; 0x3f2a <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3e52:	b2 e4       	ldi	r27, 0x42	; 66
    3e54:	4b 16       	cp	r4, r27
    3e56:	51 04       	cpc	r5, r1
    3e58:	61 04       	cpc	r6, r1
    3e5a:	71 04       	cpc	r7, r1
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <_nrk_time_to_ticks+0x66>
    3e5e:	6d c0       	rjmp	.+218    	; 0x3f3a <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3e60:	7b 01       	movw	r14, r22
    3e62:	8c 01       	movw	r16, r24
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	a9 01       	movw	r20, r18
    3e6a:	69 83       	std	Y+1, r22	; 0x01
    3e6c:	fa 82       	std	Y+2, r15	; 0x02
    3e6e:	0b 83       	std	Y+3, r16	; 0x03
    3e70:	1c 83       	std	Y+4, r17	; 0x04
    3e72:	2d 83       	std	Y+5, r18	; 0x05
    3e74:	3e 83       	std	Y+6, r19	; 0x06
    3e76:	4f 83       	std	Y+7, r20	; 0x07
    3e78:	58 87       	std	Y+8, r21	; 0x08
    3e7a:	a0 e0       	ldi	r26, 0x00	; 0
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	19 8a       	std	Y+17, r1	; 0x11
    3e80:	1a 8a       	std	Y+18, r1	; 0x12
    3e82:	31 2c       	mov	r3, r1
    3e84:	81 2c       	mov	r8, r1
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	e0 e0       	ldi	r30, 0x00	; 0
    3e8a:	91 2c       	mov	r9, r1
    3e8c:	9d 01       	movw	r18, r26
    3e8e:	49 89       	ldd	r20, Y+17	; 0x11
    3e90:	5a 89       	ldd	r21, Y+18	; 0x12
    3e92:	63 2d       	mov	r22, r3
    3e94:	78 2d       	mov	r23, r8
    3e96:	8f 2f       	mov	r24, r31
    3e98:	9e 2f       	mov	r25, r30
    3e9a:	a9 80       	ldd	r10, Y+1	; 0x01
    3e9c:	ba 80       	ldd	r11, Y+2	; 0x02
    3e9e:	cb 80       	ldd	r12, Y+3	; 0x03
    3ea0:	dc 80       	ldd	r13, Y+4	; 0x04
    3ea2:	ed 80       	ldd	r14, Y+5	; 0x05
    3ea4:	fe 80       	ldd	r15, Y+6	; 0x06
    3ea6:	0f 81       	ldd	r16, Y+7	; 0x07
    3ea8:	18 85       	ldd	r17, Y+8	; 0x08
    3eaa:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__adddi3>
    3eae:	22 2e       	mov	r2, r18
    3eb0:	39 87       	std	Y+9, r19	; 0x09
    3eb2:	4a 87       	std	Y+10, r20	; 0x0a
    3eb4:	5b 87       	std	Y+11, r21	; 0x0b
    3eb6:	6c 87       	std	Y+12, r22	; 0x0c
    3eb8:	7d 87       	std	Y+13, r23	; 0x0d
    3eba:	8e 87       	std	Y+14, r24	; 0x0e
    3ebc:	9f 87       	std	Y+15, r25	; 0x0f
    3ebe:	9d 01       	movw	r18, r26
    3ec0:	49 89       	ldd	r20, Y+17	; 0x11
    3ec2:	5a 89       	ldd	r21, Y+18	; 0x12
    3ec4:	63 2d       	mov	r22, r3
    3ec6:	78 2d       	mov	r23, r8
    3ec8:	8f 2f       	mov	r24, r31
    3eca:	9e 2f       	mov	r25, r30
    3ecc:	36 53       	subi	r19, 0x36	; 54
    3ece:	45 46       	sbci	r20, 0x65	; 101
    3ed0:	54 4c       	sbci	r21, 0xC4	; 196
    3ed2:	6f 4f       	sbci	r22, 0xFF	; 255
    3ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eda:	d9 01       	movw	r26, r18
    3edc:	49 8b       	std	Y+17, r20	; 0x11
    3ede:	5a 8b       	std	Y+18, r21	; 0x12
    3ee0:	36 2e       	mov	r3, r22
    3ee2:	87 2e       	mov	r8, r23
    3ee4:	f8 2f       	mov	r31, r24
    3ee6:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3ee8:	49 2d       	mov	r20, r9
    3eea:	50 e0       	ldi	r21, 0x00	; 0
    3eec:	60 e0       	ldi	r22, 0x00	; 0
    3eee:	70 e0       	ldi	r23, 0x00	; 0
    3ef0:	44 15       	cp	r20, r4
    3ef2:	55 05       	cpc	r21, r5
    3ef4:	66 05       	cpc	r22, r6
    3ef6:	77 05       	cpc	r23, r7
    3ef8:	10 f4       	brcc	.+4      	; 0x3efe <_nrk_time_to_ticks+0x104>
    3efa:	93 94       	inc	r9
    3efc:	c7 cf       	rjmp	.-114    	; 0x3e8c <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3efe:	83 eb       	ldi	r24, 0xB3	; 179
    3f00:	a8 2e       	mov	r10, r24
    3f02:	96 ee       	ldi	r25, 0xE6	; 230
    3f04:	b9 2e       	mov	r11, r25
    3f06:	2e e0       	ldi	r18, 0x0E	; 14
    3f08:	c2 2e       	mov	r12, r18
    3f0a:	d1 2c       	mov	r13, r1
    3f0c:	e1 2c       	mov	r14, r1
    3f0e:	f1 2c       	mov	r15, r1
    3f10:	00 e0       	ldi	r16, 0x00	; 0
    3f12:	10 e0       	ldi	r17, 0x00	; 0
    3f14:	22 2d       	mov	r18, r2
    3f16:	39 85       	ldd	r19, Y+9	; 0x09
    3f18:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f1a:	5b 85       	ldd	r21, Y+11	; 0x0b
    3f1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f22:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f24:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__udivdi3>
    3f28:	06 c0       	rjmp	.+12     	; 0x3f36 <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3f2a:	23 eb       	ldi	r18, 0xB3	; 179
    3f2c:	36 ee       	ldi	r19, 0xE6	; 230
    3f2e:	4e e0       	ldi	r20, 0x0E	; 14
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    3f36:	c9 01       	movw	r24, r18
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3f3e:	62 96       	adiw	r28, 0x12	; 18
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	ff 90       	pop	r15
    3f54:	ef 90       	pop	r14
    3f56:	df 90       	pop	r13
    3f58:	cf 90       	pop	r12
    3f5a:	bf 90       	pop	r11
    3f5c:	af 90       	pop	r10
    3f5e:	9f 90       	pop	r9
    3f60:	8f 90       	pop	r8
    3f62:	7f 90       	pop	r7
    3f64:	6f 90       	pop	r6
    3f66:	5f 90       	pop	r5
    3f68:	4f 90       	pop	r4
    3f6a:	3f 90       	pop	r3
    3f6c:	2f 90       	pop	r2
    3f6e:	08 95       	ret

00003f70 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3f70:	cf 92       	push	r12
    3f72:	df 92       	push	r13
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	28 97       	sbiw	r28, 0x08	; 8
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	de bf       	out	0x3e, r29	; 62
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3f8c:	6b 01       	movw	r12, r22
    3f8e:	7c 01       	movw	r14, r24
    3f90:	3a e0       	ldi	r19, 0x0A	; 10
    3f92:	f6 94       	lsr	r15
    3f94:	e7 94       	ror	r14
    3f96:	d7 94       	ror	r13
    3f98:	c7 94       	ror	r12
    3f9a:	3a 95       	dec	r19
    3f9c:	d1 f7       	brne	.-12     	; 0x3f92 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3f9e:	c9 82       	std	Y+1, r12	; 0x01
    3fa0:	da 82       	std	Y+2, r13	; 0x02
    3fa2:	eb 82       	std	Y+3, r14	; 0x03
    3fa4:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3fa6:	9b 01       	movw	r18, r22
    3fa8:	ac 01       	movw	r20, r24
    3faa:	33 70       	andi	r19, 0x03	; 3
    3fac:	44 27       	eor	r20, r20
    3fae:	55 27       	eor	r21, r21
    3fb0:	63 eb       	ldi	r22, 0xB3	; 179
    3fb2:	76 ee       	ldi	r23, 0xE6	; 230
    3fb4:	8e e0       	ldi	r24, 0x0E	; 14
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 0d 2a 	call	0x541a	; 0x541a <__mulsi3>

return t;
    3fbc:	6d 83       	std	Y+5, r22	; 0x05
    3fbe:	7e 83       	std	Y+6, r23	; 0x06
    3fc0:	8f 83       	std	Y+7, r24	; 0x07
    3fc2:	98 87       	std	Y+8, r25	; 0x08
    3fc4:	2c 2d       	mov	r18, r12
    3fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc8:	4b 81       	ldd	r20, Y+3	; 0x03
    3fca:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3fcc:	28 96       	adiw	r28, 0x08	; 8
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	ff 90       	pop	r15
    3fde:	ef 90       	pop	r14
    3fe0:	df 90       	pop	r13
    3fe2:	cf 90       	pop	r12
    3fe4:	08 95       	ret

00003fe6 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	62 97       	sbiw	r28, 0x12	; 18
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    401a:	dc 01       	movw	r26, r24
    401c:	4d 90       	ld	r4, X+
    401e:	5d 90       	ld	r5, X+
    4020:	6d 90       	ld	r6, X+
    4022:	7c 90       	ld	r7, X
    4024:	13 97       	sbiw	r26, 0x03	; 3
    4026:	14 96       	adiw	r26, 0x04	; 4
    4028:	6d 91       	ld	r22, X+
    402a:	7d 91       	ld	r23, X+
    402c:	8d 91       	ld	r24, X+
    402e:	9c 91       	ld	r25, X
    4030:	17 97       	sbiw	r26, 0x07	; 7
    4032:	41 14       	cp	r4, r1
    4034:	51 04       	cpc	r5, r1
    4036:	61 04       	cpc	r6, r1
    4038:	71 04       	cpc	r7, r1
    403a:	09 f4       	brne	.+2      	; 0x403e <_nrk_time_to_ticks_long+0x58>
    403c:	66 c0       	rjmp	.+204    	; 0x410a <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    403e:	7b 01       	movw	r14, r22
    4040:	8c 01       	movw	r16, r24
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	a9 01       	movw	r20, r18
    4048:	69 83       	std	Y+1, r22	; 0x01
    404a:	fa 82       	std	Y+2, r15	; 0x02
    404c:	0b 83       	std	Y+3, r16	; 0x03
    404e:	1c 83       	std	Y+4, r17	; 0x04
    4050:	2d 83       	std	Y+5, r18	; 0x05
    4052:	3e 83       	std	Y+6, r19	; 0x06
    4054:	4f 83       	std	Y+7, r20	; 0x07
    4056:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4058:	a0 e0       	ldi	r26, 0x00	; 0
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	19 8a       	std	Y+17, r1	; 0x11
    405e:	1a 8a       	std	Y+18, r1	; 0x12
    4060:	31 2c       	mov	r3, r1
    4062:	81 2c       	mov	r8, r1
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	e0 e0       	ldi	r30, 0x00	; 0
    4068:	91 2c       	mov	r9, r1
    406a:	9d 01       	movw	r18, r26
    406c:	49 89       	ldd	r20, Y+17	; 0x11
    406e:	5a 89       	ldd	r21, Y+18	; 0x12
    4070:	63 2d       	mov	r22, r3
    4072:	78 2d       	mov	r23, r8
    4074:	8f 2f       	mov	r24, r31
    4076:	9e 2f       	mov	r25, r30
    4078:	a9 80       	ldd	r10, Y+1	; 0x01
    407a:	ba 80       	ldd	r11, Y+2	; 0x02
    407c:	cb 80       	ldd	r12, Y+3	; 0x03
    407e:	dc 80       	ldd	r13, Y+4	; 0x04
    4080:	ed 80       	ldd	r14, Y+5	; 0x05
    4082:	fe 80       	ldd	r15, Y+6	; 0x06
    4084:	0f 81       	ldd	r16, Y+7	; 0x07
    4086:	18 85       	ldd	r17, Y+8	; 0x08
    4088:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__adddi3>
    408c:	22 2e       	mov	r2, r18
    408e:	39 87       	std	Y+9, r19	; 0x09
    4090:	4a 87       	std	Y+10, r20	; 0x0a
    4092:	5b 87       	std	Y+11, r21	; 0x0b
    4094:	6c 87       	std	Y+12, r22	; 0x0c
    4096:	7d 87       	std	Y+13, r23	; 0x0d
    4098:	8e 87       	std	Y+14, r24	; 0x0e
    409a:	9f 87       	std	Y+15, r25	; 0x0f
    409c:	9d 01       	movw	r18, r26
    409e:	49 89       	ldd	r20, Y+17	; 0x11
    40a0:	5a 89       	ldd	r21, Y+18	; 0x12
    40a2:	63 2d       	mov	r22, r3
    40a4:	78 2d       	mov	r23, r8
    40a6:	8f 2f       	mov	r24, r31
    40a8:	9e 2f       	mov	r25, r30
    40aa:	36 53       	subi	r19, 0x36	; 54
    40ac:	45 46       	sbci	r20, 0x65	; 101
    40ae:	54 4c       	sbci	r21, 0xC4	; 196
    40b0:	6f 4f       	sbci	r22, 0xFF	; 255
    40b2:	7f 4f       	sbci	r23, 0xFF	; 255
    40b4:	8f 4f       	sbci	r24, 0xFF	; 255
    40b6:	9f 4f       	sbci	r25, 0xFF	; 255
    40b8:	d9 01       	movw	r26, r18
    40ba:	49 8b       	std	Y+17, r20	; 0x11
    40bc:	5a 8b       	std	Y+18, r21	; 0x12
    40be:	36 2e       	mov	r3, r22
    40c0:	87 2e       	mov	r8, r23
    40c2:	f8 2f       	mov	r31, r24
    40c4:	e9 2f       	mov	r30, r25
    40c6:	49 2d       	mov	r20, r9
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	70 e0       	ldi	r23, 0x00	; 0
    40ce:	44 15       	cp	r20, r4
    40d0:	55 05       	cpc	r21, r5
    40d2:	66 05       	cpc	r22, r6
    40d4:	77 05       	cpc	r23, r7
    40d6:	10 f4       	brcc	.+4      	; 0x40dc <_nrk_time_to_ticks_long+0xf6>
    40d8:	93 94       	inc	r9
    40da:	c7 cf       	rjmp	.-114    	; 0x406a <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    40dc:	43 eb       	ldi	r20, 0xB3	; 179
    40de:	a4 2e       	mov	r10, r20
    40e0:	56 ee       	ldi	r21, 0xE6	; 230
    40e2:	b5 2e       	mov	r11, r21
    40e4:	6e e0       	ldi	r22, 0x0E	; 14
    40e6:	c6 2e       	mov	r12, r22
    40e8:	d1 2c       	mov	r13, r1
    40ea:	e1 2c       	mov	r14, r1
    40ec:	f1 2c       	mov	r15, r1
    40ee:	00 e0       	ldi	r16, 0x00	; 0
    40f0:	10 e0       	ldi	r17, 0x00	; 0
    40f2:	22 2d       	mov	r18, r2
    40f4:	39 85       	ldd	r19, Y+9	; 0x09
    40f6:	4a 85       	ldd	r20, Y+10	; 0x0a
    40f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    40fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    40fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    40fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4100:	9f 85       	ldd	r25, Y+15	; 0x0f
    4102:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__udivdi3>
    4106:	ca 01       	movw	r24, r20
    4108:	07 c0       	rjmp	.+14     	; 0x4118 <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    410a:	23 eb       	ldi	r18, 0xB3	; 179
    410c:	36 ee       	ldi	r19, 0xE6	; 230
    410e:	4e e0       	ldi	r20, 0x0E	; 14
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    4116:	ca 01       	movw	r24, r20
}
return ticks;
}
    4118:	b9 01       	movw	r22, r18
    411a:	62 96       	adiw	r28, 0x12	; 18
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	f8 94       	cli
    4120:	de bf       	out	0x3e, r29	; 62
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	cd bf       	out	0x3d, r28	; 61
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	ff 90       	pop	r15
    4130:	ef 90       	pop	r14
    4132:	df 90       	pop	r13
    4134:	cf 90       	pop	r12
    4136:	bf 90       	pop	r11
    4138:	af 90       	pop	r10
    413a:	9f 90       	pop	r9
    413c:	8f 90       	pop	r8
    413e:	7f 90       	pop	r7
    4140:	6f 90       	pop	r6
    4142:	5f 90       	pop	r5
    4144:	4f 90       	pop	r4
    4146:	3f 90       	pop	r3
    4148:	2f 90       	pop	r2
    414a:	08 95       	ret

0000414c <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    414c:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    414e:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4150:	0e 94 d5 16 	call	0x2daa	; 0x2daa <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4154:	0e 94 bb 24 	call	0x4976	; 0x4976 <_nrk_get_next_wakeup>
    4158:	84 30       	cpi	r24, 0x04	; 4
    415a:	28 f4       	brcc	.+10     	; 0x4166 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    415c:	d0 93 41 08 	sts	0x0841, r29
	    nrk_idle();
    4160:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <nrk_idle>
    4164:	08 c0       	rjmp	.+16     	; 0x4176 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    4166:	8a e0       	ldi	r24, 0x0A	; 10
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    416e:	c0 93 41 08 	sts	0x0841, r28
	    nrk_sleep();
    4172:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4176:	80 91 65 07 	lds	r24, 0x0765
    417a:	85 35       	cpi	r24, 0x55	; 85
    417c:	19 f0       	breq	.+6      	; 0x4184 <nrk_idle_task+0x38>
    417e:	88 e0       	ldi	r24, 0x08	; 8
    4180:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4184:	80 91 7e 41 	lds	r24, 0x417E
    4188:	85 35       	cpi	r24, 0x55	; 85
    418a:	11 f3       	breq	.-60     	; 0x4150 <nrk_idle_task+0x4>
    418c:	88 e0       	ldi	r24, 0x08	; 8
    418e:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
    4192:	de cf       	rjmp	.-68     	; 0x4150 <nrk_idle_task+0x4>

00004194 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4194:	2f 92       	push	r2
    4196:	3f 92       	push	r3
    4198:	4f 92       	push	r4
    419a:	5f 92       	push	r5
    419c:	6f 92       	push	r6
    419e:	7f 92       	push	r7
    41a0:	8f 92       	push	r8
    41a2:	9f 92       	push	r9
    41a4:	af 92       	push	r10
    41a6:	bf 92       	push	r11
    41a8:	cf 92       	push	r12
    41aa:	df 92       	push	r13
    41ac:	ef 92       	push	r14
    41ae:	ff 92       	push	r15
    41b0:	0f 93       	push	r16
    41b2:	1f 93       	push	r17
    41b4:	cf 93       	push	r28
    41b6:	df 93       	push	r29
    41b8:	cd b7       	in	r28, 0x3d	; 61
    41ba:	de b7       	in	r29, 0x3e	; 62
    41bc:	29 97       	sbiw	r28, 0x09	; 9
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    41c8:	0e 94 ef 23 	call	0x47de	; 0x47de <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    41cc:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    41d0:	0e 94 0d 24 	call	0x481a	; 0x481a <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    41d4:	0e 94 15 24 	call	0x482a	; 0x482a <_nrk_high_speed_timer_get>
    41d8:	9f 83       	std	Y+7, r25	; 0x07
    41da:	8e 83       	std	Y+6, r24	; 0x06
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    41dc:	8a ef       	ldi	r24, 0xFA	; 250
    41de:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    41e2:	a0 91 ea 07 	lds	r26, 0x07EA
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	23 eb       	ldi	r18, 0xB3	; 179
    41ea:	36 ee       	ldi	r19, 0xE6	; 230
    41ec:	4e e0       	ldi	r20, 0x0E	; 14
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    41f4:	6b 01       	movw	r12, r22
    41f6:	7c 01       	movw	r14, r24
    41f8:	80 91 02 06 	lds	r24, 0x0602
    41fc:	90 91 03 06 	lds	r25, 0x0603
    4200:	a0 91 04 06 	lds	r26, 0x0604
    4204:	b0 91 05 06 	lds	r27, 0x0605
    4208:	c8 0e       	add	r12, r24
    420a:	d9 1e       	adc	r13, r25
    420c:	ea 1e       	adc	r14, r26
    420e:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4210:	c7 01       	movw	r24, r14
    4212:	b6 01       	movw	r22, r12
    4214:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    4218:	00 91 fe 05 	lds	r16, 0x05FE
    421c:	10 91 ff 05 	lds	r17, 0x05FF
    4220:	20 91 00 06 	lds	r18, 0x0600
    4224:	30 91 01 06 	lds	r19, 0x0601
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4228:	c6 1a       	sub	r12, r22
    422a:	d7 0a       	sbc	r13, r23
    422c:	e8 0a       	sbc	r14, r24
    422e:	f9 0a       	sbc	r15, r25
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4230:	63 eb       	ldi	r22, 0xB3	; 179
    4232:	46 2e       	mov	r4, r22
    4234:	66 ee       	ldi	r22, 0xE6	; 230
    4236:	56 2e       	mov	r5, r22
    4238:	6e e0       	ldi	r22, 0x0E	; 14
    423a:	66 2e       	mov	r6, r22
    423c:	71 2c       	mov	r7, r1
    423e:	48 01       	movw	r8, r16
    4240:	59 01       	movw	r10, r18
    4242:	8f ef       	ldi	r24, 0xFF	; 255
    4244:	88 1a       	sub	r8, r24
    4246:	98 0a       	sbc	r9, r24
    4248:	a8 0a       	sbc	r10, r24
    424a:	b8 0a       	sbc	r11, r24
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    424c:	c1 14       	cp	r12, r1
    424e:	9a ec       	ldi	r25, 0xCA	; 202
    4250:	d9 06       	cpc	r13, r25
    4252:	9a e9       	ldi	r25, 0x9A	; 154
    4254:	e9 06       	cpc	r14, r25
    4256:	9b e3       	ldi	r25, 0x3B	; 59
    4258:	f9 06       	cpc	r15, r25
    425a:	98 f0       	brcs	.+38     	; 0x4282 <__stack+0x83>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    425c:	2a ec       	ldi	r18, 0xCA	; 202
    425e:	d2 1a       	sub	r13, r18
    4260:	2a e9       	ldi	r18, 0x9A	; 154
    4262:	e2 0a       	sbc	r14, r18
    4264:	2b e3       	ldi	r18, 0x3B	; 59
    4266:	f2 0a       	sbc	r15, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4268:	c7 01       	movw	r24, r14
    426a:	b6 01       	movw	r22, r12
    426c:	a3 01       	movw	r20, r6
    426e:	92 01       	movw	r18, r4
    4270:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    4274:	c6 1a       	sub	r12, r22
    4276:	d7 0a       	sbc	r13, r23
    4278:	e8 0a       	sbc	r14, r24
    427a:	f9 0a       	sbc	r15, r25
    427c:	95 01       	movw	r18, r10
    427e:	84 01       	movw	r16, r8
    4280:	de cf       	rjmp	.-68     	; 0x423e <__stack+0x3f>
    4282:	00 93 fe 05 	sts	0x05FE, r16
    4286:	10 93 ff 05 	sts	0x05FF, r17
    428a:	20 93 00 06 	sts	0x0600, r18
    428e:	30 93 01 06 	sts	0x0601, r19
    4292:	c0 92 02 06 	sts	0x0602, r12
    4296:	d0 92 03 06 	sts	0x0603, r13
    429a:	e0 92 04 06 	sts	0x0604, r14
    429e:	f0 92 05 06 	sts	0x0605, r15
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    42a2:	e0 91 80 06 	lds	r30, 0x0680
    42a6:	f0 91 81 06 	lds	r31, 0x0681
    42aa:	85 81       	ldd	r24, Z+5	; 0x05
    42ac:	88 23       	and	r24, r24
    42ae:	39 f1       	breq	.+78     	; 0x42fe <__stack+0xff>
    42b0:	81 85       	ldd	r24, Z+9	; 0x09
    42b2:	84 30       	cpi	r24, 0x04	; 4
    42b4:	21 f1       	breq	.+72     	; 0x42fe <__stack+0xff>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    42b6:	87 81       	ldd	r24, Z+7	; 0x07
    42b8:	82 30       	cpi	r24, 0x02	; 2
    42ba:	29 f0       	breq	.+10     	; 0x42c6 <__stack+0xc7>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    42bc:	88 23       	and	r24, r24
    42be:	41 f0       	breq	.+16     	; 0x42d0 <__stack+0xd1>
    42c0:	86 81       	ldd	r24, Z+6	; 0x06
    42c2:	81 11       	cpse	r24, r1
    42c4:	02 c0       	rjmp	.+4      	; 0x42ca <__stack+0xcb>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    42c6:	85 e0       	ldi	r24, 0x05	; 5
    42c8:	01 c0       	rjmp	.+2      	; 0x42cc <__stack+0xcd>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    42ca:	83 e0       	ldi	r24, 0x03	; 3
    42cc:	81 87       	std	Z+9, r24	; 0x09
    42ce:	14 c0       	rjmp	.+40     	; 0x42f8 <__stack+0xf9>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    42d4:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    42d6:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    42d8:	85 89       	ldd	r24, Z+21	; 0x15
    42da:	96 89       	ldd	r25, Z+22	; 0x16
    42dc:	a7 89       	ldd	r26, Z+23	; 0x17
    42de:	b0 8d       	ldd	r27, Z+24	; 0x18
    42e0:	89 2b       	or	r24, r25
    42e2:	8a 2b       	or	r24, r26
    42e4:	8b 2b       	or	r24, r27
    42e6:	41 f4       	brne	.+16     	; 0x42f8 <__stack+0xf9>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    42e8:	81 8d       	ldd	r24, Z+25	; 0x19
    42ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    42ec:	a3 8d       	ldd	r26, Z+27	; 0x1b
    42ee:	b4 8d       	ldd	r27, Z+28	; 0x1c
    42f0:	85 8b       	std	Z+21, r24	; 0x15
    42f2:	96 8b       	std	Z+22, r25	; 0x16
    42f4:	a7 8b       	std	Z+23, r26	; 0x17
    42f6:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    42f8:	80 85       	ldd	r24, Z+8	; 0x08
    42fa:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    42fe:	e0 91 80 06 	lds	r30, 0x0680
    4302:	f0 91 81 06 	lds	r31, 0x0681
    4306:	85 a1       	ldd	r24, Z+37	; 0x25
    4308:	96 a1       	ldd	r25, Z+38	; 0x26
    430a:	a7 a1       	ldd	r26, Z+39	; 0x27
    430c:	b0 a5       	ldd	r27, Z+40	; 0x28
    430e:	89 2b       	or	r24, r25
    4310:	8a 2b       	or	r24, r26
    4312:	8b 2b       	or	r24, r27
    4314:	09 f4       	brne	.+2      	; 0x4318 <__stack+0x119>
    4316:	44 c0       	rjmp	.+136    	; 0x43a0 <__stack+0x1a1>
    4318:	20 85       	ldd	r18, Z+8	; 0x08
    431a:	22 23       	and	r18, r18
    431c:	09 f4       	brne	.+2      	; 0x4320 <__stack+0x121>
    431e:	40 c0       	rjmp	.+128    	; 0x43a0 <__stack+0x1a1>
    4320:	81 85       	ldd	r24, Z+9	; 0x09
    4322:	84 30       	cpi	r24, 0x04	; 4
    4324:	e9 f1       	breq	.+122    	; 0x43a0 <__stack+0x1a1>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4326:	45 8d       	ldd	r20, Z+29	; 0x1d
    4328:	56 8d       	ldd	r21, Z+30	; 0x1e
    432a:	67 8d       	ldd	r22, Z+31	; 0x1f
    432c:	70 a1       	ldd	r23, Z+32	; 0x20
    432e:	80 91 ea 07 	lds	r24, 0x07EA
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	a0 e0       	ldi	r26, 0x00	; 0
    4336:	b0 e0       	ldi	r27, 0x00	; 0
    4338:	48 17       	cp	r20, r24
    433a:	59 07       	cpc	r21, r25
    433c:	6a 07       	cpc	r22, r26
    433e:	7b 07       	cpc	r23, r27
    4340:	68 f4       	brcc	.+26     	; 0x435c <__stack+0x15d>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4342:	62 2f       	mov	r22, r18
    4344:	82 e0       	ldi	r24, 0x02	; 2
    4346:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    434a:	e0 91 80 06 	lds	r30, 0x0680
    434e:	f0 91 81 06 	lds	r31, 0x0681
    4352:	15 8e       	std	Z+29, r1	; 0x1d
    4354:	16 8e       	std	Z+30, r1	; 0x1e
    4356:	17 8e       	std	Z+31, r1	; 0x1f
    4358:	10 a2       	std	Z+32, r1	; 0x20
    435a:	08 c0       	rjmp	.+16     	; 0x436c <__stack+0x16d>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    435c:	48 1b       	sub	r20, r24
    435e:	59 0b       	sbc	r21, r25
    4360:	6a 0b       	sbc	r22, r26
    4362:	7b 0b       	sbc	r23, r27
    4364:	45 8f       	std	Z+29, r20	; 0x1d
    4366:	56 8f       	std	Z+30, r21	; 0x1e
    4368:	67 8f       	std	Z+31, r22	; 0x1f
    436a:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    436c:	e0 91 80 06 	lds	r30, 0x0680
    4370:	f0 91 81 06 	lds	r31, 0x0681
    4374:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4376:	45 8d       	ldd	r20, Z+29	; 0x1d
    4378:	56 8d       	ldd	r21, Z+30	; 0x1e
    437a:	67 8d       	ldd	r22, Z+31	; 0x1f
    437c:	70 a1       	ldd	r23, Z+32	; 0x20
    437e:	45 2b       	or	r20, r21
    4380:	46 2b       	or	r20, r22
    4382:	47 2b       	or	r20, r23
    4384:	69 f4       	brne	.+26     	; 0x43a0 <__stack+0x1a1>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4386:	61 2f       	mov	r22, r17
    4388:	83 e0       	ldi	r24, 0x03	; 3
    438a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    438e:	e0 91 80 06 	lds	r30, 0x0680
    4392:	f0 91 81 06 	lds	r31, 0x0681
    4396:	83 e0       	ldi	r24, 0x03	; 3
    4398:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    439a:	81 2f       	mov	r24, r17
    439c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <nrk_rem_from_readyQ>
    43a0:	03 e4       	ldi	r16, 0x43	; 67
    43a2:	14 e0       	ldi	r17, 0x04	; 4
    43a4:	34 e4       	ldi	r19, 0x44	; 68
    43a6:	23 2e       	mov	r2, r19
    43a8:	34 e0       	ldi	r19, 0x04	; 4
    43aa:	33 2e       	mov	r3, r19
    43ac:	40 e5       	ldi	r20, 0x50	; 80
    43ae:	a4 2e       	mov	r10, r20
    43b0:	44 e0       	ldi	r20, 0x04	; 4
    43b2:	b4 2e       	mov	r11, r20
    43b4:	a2 e4       	ldi	r26, 0x42	; 66
    43b6:	b4 e0       	ldi	r27, 0x04	; 4
    43b8:	ba 83       	std	Y+2, r27	; 0x02
    43ba:	a9 83       	std	Y+1, r26	; 0x01
    43bc:	e1 e4       	ldi	r30, 0x41	; 65
    43be:	f4 e0       	ldi	r31, 0x04	; 4
    43c0:	fc 83       	std	Y+4, r31	; 0x04
    43c2:	eb 83       	std	Y+3, r30	; 0x03
    43c4:	50 e4       	ldi	r21, 0x40	; 64
    43c6:	85 2e       	mov	r8, r21
    43c8:	54 e0       	ldi	r21, 0x04	; 4
    43ca:	95 2e       	mov	r9, r21
    43cc:	20 e6       	ldi	r18, 0x60	; 96
    43ce:	3a ee       	ldi	r19, 0xEA	; 234
    43d0:	39 87       	std	Y+9, r19	; 0x09
    43d2:	28 87       	std	Y+8, r18	; 0x08
    43d4:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    43d6:	d8 01       	movw	r26, r16
    43d8:	8c 91       	ld	r24, X
    43da:	8f 3f       	cpi	r24, 0xFF	; 255
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <__stack+0x1e1>
    43de:	2a c1       	rjmp	.+596    	; 0x4634 <__stack+0x435>
        nrk_task_TCB[task_ID].suspend_flag=0;
    43e0:	f4 01       	movw	r30, r8
    43e2:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    43e4:	8c 91       	ld	r24, X
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <__stack+0x1ed>
    43ea:	6a c0       	rjmp	.+212    	; 0x44c0 <__stack+0x2c1>
    43ec:	d1 01       	movw	r26, r2
    43ee:	8c 91       	ld	r24, X
    43f0:	84 30       	cpi	r24, 0x04	; 4
    43f2:	09 f4       	brne	.+2      	; 0x43f6 <__stack+0x1f7>
    43f4:	65 c0       	rjmp	.+202    	; 0x44c0 <__stack+0x2c1>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    43f6:	f5 01       	movw	r30, r10
    43f8:	c0 80       	ld	r12, Z
    43fa:	d1 80       	ldd	r13, Z+1	; 0x01
    43fc:	e2 80       	ldd	r14, Z+2	; 0x02
    43fe:	f3 80       	ldd	r15, Z+3	; 0x03
    4400:	60 91 ea 07 	lds	r22, 0x07EA
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	c6 16       	cp	r12, r22
    440c:	d7 06       	cpc	r13, r23
    440e:	e8 06       	cpc	r14, r24
    4410:	f9 06       	cpc	r15, r25
    4412:	48 f0       	brcs	.+18     	; 0x4426 <__stack+0x227>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4414:	c6 1a       	sub	r12, r22
    4416:	d7 0a       	sbc	r13, r23
    4418:	e8 0a       	sbc	r14, r24
    441a:	f9 0a       	sbc	r15, r25
    441c:	c0 82       	st	Z, r12
    441e:	d1 82       	std	Z+1, r13	; 0x01
    4420:	e2 82       	std	Z+2, r14	; 0x02
    4422:	f3 82       	std	Z+3, r15	; 0x03
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <__stack+0x231>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4426:	f5 01       	movw	r30, r10
    4428:	10 82       	st	Z, r1
    442a:	11 82       	std	Z+1, r1	; 0x01
    442c:	12 82       	std	Z+2, r1	; 0x02
    442e:	13 82       	std	Z+3, r1	; 0x03
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4430:	d8 01       	movw	r26, r16
    4432:	51 96       	adiw	r26, 0x11	; 17
    4434:	cd 90       	ld	r12, X+
    4436:	dd 90       	ld	r13, X+
    4438:	ed 90       	ld	r14, X+
    443a:	fc 90       	ld	r15, X
    443c:	54 97       	sbiw	r26, 0x14	; 20
    443e:	c6 16       	cp	r12, r22
    4440:	d7 06       	cpc	r13, r23
    4442:	e8 06       	cpc	r14, r24
    4444:	f9 06       	cpc	r15, r25
    4446:	50 f0       	brcs	.+20     	; 0x445c <__stack+0x25d>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4448:	c6 1a       	sub	r12, r22
    444a:	d7 0a       	sbc	r13, r23
    444c:	e8 0a       	sbc	r14, r24
    444e:	f9 0a       	sbc	r15, r25
    4450:	f8 01       	movw	r30, r16
    4452:	c1 8a       	std	Z+17, r12	; 0x11
    4454:	d2 8a       	std	Z+18, r13	; 0x12
    4456:	e3 8a       	std	Z+19, r14	; 0x13
    4458:	f4 8a       	std	Z+20, r15	; 0x14
    445a:	21 c0       	rjmp	.+66     	; 0x449e <__stack+0x29f>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    445c:	d8 01       	movw	r26, r16
    445e:	59 96       	adiw	r26, 0x19	; 25
    4460:	2d 91       	ld	r18, X+
    4462:	3d 91       	ld	r19, X+
    4464:	4d 91       	ld	r20, X+
    4466:	5c 91       	ld	r21, X
    4468:	5c 97       	sbiw	r26, 0x1c	; 28
    446a:	62 17       	cp	r22, r18
    446c:	73 07       	cpc	r23, r19
    446e:	84 07       	cpc	r24, r20
    4470:	95 07       	cpc	r25, r21
    4472:	60 f4       	brcc	.+24     	; 0x448c <__stack+0x28d>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4474:	69 01       	movw	r12, r18
    4476:	7a 01       	movw	r14, r20
    4478:	c6 1a       	sub	r12, r22
    447a:	d7 0a       	sbc	r13, r23
    447c:	e8 0a       	sbc	r14, r24
    447e:	f9 0a       	sbc	r15, r25
    4480:	f8 01       	movw	r30, r16
    4482:	c1 8a       	std	Z+17, r12	; 0x11
    4484:	d2 8a       	std	Z+18, r13	; 0x12
    4486:	e3 8a       	std	Z+19, r14	; 0x13
    4488:	f4 8a       	std	Z+20, r15	; 0x14
    448a:	09 c0       	rjmp	.+18     	; 0x449e <__stack+0x29f>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    448c:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    4490:	d8 01       	movw	r26, r16
    4492:	51 96       	adiw	r26, 0x11	; 17
    4494:	6d 93       	st	X+, r22
    4496:	7d 93       	st	X+, r23
    4498:	8d 93       	st	X+, r24
    449a:	9c 93       	st	X, r25
    449c:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    449e:	f8 01       	movw	r30, r16
    44a0:	81 89       	ldd	r24, Z+17	; 0x11
    44a2:	92 89       	ldd	r25, Z+18	; 0x12
    44a4:	a3 89       	ldd	r26, Z+19	; 0x13
    44a6:	b4 89       	ldd	r27, Z+20	; 0x14
    44a8:	89 2b       	or	r24, r25
    44aa:	8a 2b       	or	r24, r26
    44ac:	8b 2b       	or	r24, r27
    44ae:	41 f4       	brne	.+16     	; 0x44c0 <__stack+0x2c1>
    44b0:	81 8d       	ldd	r24, Z+25	; 0x19
    44b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    44b4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    44b6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    44b8:	81 8b       	std	Z+17, r24	; 0x11
    44ba:	92 8b       	std	Z+18, r25	; 0x12
    44bc:	a3 8b       	std	Z+19, r26	; 0x13
    44be:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    44c0:	d1 01       	movw	r26, r2
    44c2:	8c 91       	ld	r24, X
    44c4:	83 30       	cpi	r24, 0x03	; 3
    44c6:	09 f0       	breq	.+2      	; 0x44ca <__stack+0x2cb>
    44c8:	b5 c0       	rjmp	.+362    	; 0x4634 <__stack+0x435>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    44ca:	f5 01       	movw	r30, r10
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	a2 81       	ldd	r26, Z+2	; 0x02
    44d2:	b3 81       	ldd	r27, Z+3	; 0x03
    44d4:	89 2b       	or	r24, r25
    44d6:	8a 2b       	or	r24, r26
    44d8:	8b 2b       	or	r24, r27
    44da:	09 f0       	breq	.+2      	; 0x44de <__stack+0x2df>
    44dc:	96 c0       	rjmp	.+300    	; 0x460a <__stack+0x40b>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    44de:	a9 81       	ldd	r26, Y+1	; 0x01
    44e0:	ba 81       	ldd	r27, Y+2	; 0x02
    44e2:	8c 91       	ld	r24, X
    44e4:	88 23       	and	r24, r24
    44e6:	b9 f0       	breq	.+46     	; 0x4516 <__stack+0x317>
    44e8:	eb 81       	ldd	r30, Y+3	; 0x03
    44ea:	fc 81       	ldd	r31, Y+4	; 0x04
    44ec:	80 81       	ld	r24, Z
    44ee:	88 23       	and	r24, r24
    44f0:	91 f0       	breq	.+36     	; 0x4516 <__stack+0x317>
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	a0 e0       	ldi	r26, 0x00	; 0
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	00 90 70 05 	lds	r0, 0x0570
    44fe:	04 c0       	rjmp	.+8      	; 0x4508 <__stack+0x309>
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	aa 1f       	adc	r26, r26
    4506:	bb 1f       	adc	r27, r27
    4508:	0a 94       	dec	r0
    450a:	d2 f7       	brpl	.-12     	; 0x4500 <__stack+0x301>
    450c:	f8 01       	movw	r30, r16
    450e:	81 87       	std	Z+9, r24	; 0x09
    4510:	92 87       	std	Z+10, r25	; 0x0a
    4512:	a3 87       	std	Z+11, r26	; 0x0b
    4514:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4516:	a9 81       	ldd	r26, Y+1	; 0x01
    4518:	ba 81       	ldd	r27, Y+2	; 0x02
    451a:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    451c:	eb 81       	ldd	r30, Y+3	; 0x03
    451e:	fc 81       	ldd	r31, Y+4	; 0x04
    4520:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    4522:	d4 01       	movw	r26, r8
    4524:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    4526:	f5 01       	movw	r30, r10
    4528:	84 89       	ldd	r24, Z+20	; 0x14
    452a:	95 89       	ldd	r25, Z+21	; 0x15
    452c:	d8 01       	movw	r26, r16
    452e:	5d 96       	adiw	r26, 0x1d	; 29
    4530:	4d 91       	ld	r20, X+
    4532:	5d 91       	ld	r21, X+
    4534:	6d 91       	ld	r22, X+
    4536:	7c 91       	ld	r23, X
    4538:	90 97       	sbiw	r26, 0x20	; 32
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    453a:	f8 01       	movw	r30, r16
    453c:	45 8b       	std	Z+21, r20	; 0x15
    453e:	56 8b       	std	Z+22, r21	; 0x16
    4540:	67 8b       	std	Z+23, r22	; 0x17
    4542:	70 8f       	std	Z+24, r23	; 0x18
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	29 f5       	brne	.+74     	; 0x4592 <__stack+0x393>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4548:	e2 e0       	ldi	r30, 0x02	; 2
    454a:	d1 01       	movw	r26, r2
    454c:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    454e:	f8 01       	movw	r30, r16
    4550:	81 89       	ldd	r24, Z+17	; 0x11
    4552:	92 89       	ldd	r25, Z+18	; 0x12
    4554:	a3 89       	ldd	r26, Z+19	; 0x13
    4556:	b4 89       	ldd	r27, Z+20	; 0x14
    4558:	f5 01       	movw	r30, r10
    455a:	80 83       	st	Z, r24
    455c:	91 83       	std	Z+1, r25	; 0x01
    455e:	a2 83       	std	Z+2, r26	; 0x02
    4560:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4562:	f8 01       	movw	r30, r16
    4564:	81 8d       	ldd	r24, Z+25	; 0x19
    4566:	92 8d       	ldd	r25, Z+26	; 0x1a
    4568:	a3 8d       	ldd	r26, Z+27	; 0x1b
    456a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    456c:	89 2b       	or	r24, r25
    456e:	8a 2b       	or	r24, r26
    4570:	8b 2b       	or	r24, r27
    4572:	59 f4       	brne	.+22     	; 0x458a <__stack+0x38b>
    4574:	2a ef       	ldi	r18, 0xFA	; 250
    4576:	c2 2e       	mov	r12, r18
    4578:	d1 2c       	mov	r13, r1
    457a:	e1 2c       	mov	r14, r1
    457c:	f1 2c       	mov	r15, r1
    457e:	d5 01       	movw	r26, r10
    4580:	cd 92       	st	X+, r12
    4582:	dd 92       	st	X+, r13
    4584:	ed 92       	st	X+, r14
    4586:	fc 92       	st	X, r15
    4588:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	0e 94 4e 1a 	call	0x349c	; 0x349c <nrk_add_to_readyQ>
    4590:	3c c0       	rjmp	.+120    	; 0x460a <__stack+0x40b>
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4592:	d5 01       	movw	r26, r10
    4594:	54 96       	adiw	r26, 0x14	; 20
    4596:	4d 90       	ld	r4, X+
    4598:	5c 90       	ld	r5, X
    459a:	55 97       	sbiw	r26, 0x15	; 21
    459c:	b1 e0       	ldi	r27, 0x01	; 1
    459e:	4b 1a       	sub	r4, r27
    45a0:	51 08       	sbc	r5, r1
    45a2:	61 2c       	mov	r6, r1
    45a4:	71 2c       	mov	r7, r1
    45a6:	61 8d       	ldd	r22, Z+25	; 0x19
    45a8:	72 8d       	ldd	r23, Z+26	; 0x1a
    45aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    45ac:	94 8d       	ldd	r25, Z+28	; 0x1c
    45ae:	a3 01       	movw	r20, r6
    45b0:	92 01       	movw	r18, r4
    45b2:	0e 94 0d 2a 	call	0x541a	; 0x541a <__mulsi3>
    45b6:	f5 01       	movw	r30, r10
    45b8:	60 83       	st	Z, r22
    45ba:	71 83       	std	Z+1, r23	; 0x01
    45bc:	82 83       	std	Z+2, r24	; 0x02
    45be:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    45c0:	d8 01       	movw	r26, r16
    45c2:	59 96       	adiw	r26, 0x19	; 25
    45c4:	cd 90       	ld	r12, X+
    45c6:	dd 90       	ld	r13, X+
    45c8:	ed 90       	ld	r14, X+
    45ca:	fc 90       	ld	r15, X
    45cc:	5c 97       	sbiw	r26, 0x1c	; 28
    45ce:	c7 01       	movw	r24, r14
    45d0:	b6 01       	movw	r22, r12
    45d2:	0e 94 0d 2a 	call	0x541a	; 0x541a <__mulsi3>
    45d6:	f8 01       	movw	r30, r16
    45d8:	61 8b       	std	Z+17, r22	; 0x11
    45da:	72 8b       	std	Z+18, r23	; 0x12
    45dc:	83 8b       	std	Z+19, r24	; 0x13
    45de:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    45e0:	cd 28       	or	r12, r13
    45e2:	ce 28       	or	r12, r14
    45e4:	cf 28       	or	r12, r15
    45e6:	59 f4       	brne	.+22     	; 0x45fe <__stack+0x3ff>
    45e8:	9a ef       	ldi	r25, 0xFA	; 250
    45ea:	c9 2e       	mov	r12, r25
    45ec:	d1 2c       	mov	r13, r1
    45ee:	e1 2c       	mov	r14, r1
    45f0:	f1 2c       	mov	r15, r1
    45f2:	d5 01       	movw	r26, r10
    45f4:	cd 92       	st	X+, r12
    45f6:	dd 92       	st	X+, r13
    45f8:	ed 92       	st	X+, r14
    45fa:	fc 92       	st	X, r15
    45fc:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    45fe:	cc 24       	eor	r12, r12
    4600:	c3 94       	inc	r12
    4602:	d1 2c       	mov	r13, r1
    4604:	f5 01       	movw	r30, r10
    4606:	d5 8a       	std	Z+21, r13	; 0x15
    4608:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    460a:	f5 01       	movw	r30, r10
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	a2 81       	ldd	r26, Z+2	; 0x02
    4612:	b3 81       	ldd	r27, Z+3	; 0x03
    4614:	00 97       	sbiw	r24, 0x00	; 0
    4616:	a1 05       	cpc	r26, r1
    4618:	b1 05       	cpc	r27, r1
    461a:	61 f0       	breq	.+24     	; 0x4634 <__stack+0x435>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    461c:	c8 84       	ldd	r12, Y+8	; 0x08
    461e:	d9 84       	ldd	r13, Y+9	; 0x09
    4620:	a6 01       	movw	r20, r12
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4626:	84 17       	cp	r24, r20
    4628:	95 07       	cpc	r25, r21
    462a:	a6 07       	cpc	r26, r22
    462c:	b7 07       	cpc	r27, r23
    462e:	10 f4       	brcc	.+4      	; 0x4634 <__stack+0x435>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4630:	99 87       	std	Y+9, r25	; 0x09
    4632:	88 87       	std	Y+8, r24	; 0x08
    4634:	2d 81       	ldd	r18, Y+5	; 0x05
    4636:	2f 5f       	subi	r18, 0xFF	; 255
    4638:	2d 83       	std	Y+5, r18	; 0x05
    463a:	05 5d       	subi	r16, 0xD5	; 213
    463c:	1f 4f       	sbci	r17, 0xFF	; 255
    463e:	3b e2       	ldi	r19, 0x2B	; 43
    4640:	23 0e       	add	r2, r19
    4642:	31 1c       	adc	r3, r1
    4644:	8b e2       	ldi	r24, 0x2B	; 43
    4646:	a8 0e       	add	r10, r24
    4648:	b1 1c       	adc	r11, r1
    464a:	a9 81       	ldd	r26, Y+1	; 0x01
    464c:	ba 81       	ldd	r27, Y+2	; 0x02
    464e:	9b 96       	adiw	r26, 0x2b	; 43
    4650:	ba 83       	std	Y+2, r27	; 0x02
    4652:	a9 83       	std	Y+1, r26	; 0x01
    4654:	eb 81       	ldd	r30, Y+3	; 0x03
    4656:	fc 81       	ldd	r31, Y+4	; 0x04
    4658:	bb 96       	adiw	r30, 0x2b	; 43
    465a:	fc 83       	std	Y+4, r31	; 0x04
    465c:	eb 83       	std	Y+3, r30	; 0x03
    465e:	fb e2       	ldi	r31, 0x2B	; 43
    4660:	8f 0e       	add	r8, r31
    4662:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4664:	24 30       	cpi	r18, 0x04	; 4
    4666:	09 f0       	breq	.+2      	; 0x466a <__stack+0x46b>
    4668:	b6 ce       	rjmp	.-660    	; 0x43d6 <__stack+0x1d7>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    466a:	0e 94 3d 1a 	call	0x347a	; 0x347a <nrk_get_high_ready_task_ID>
    466e:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4670:	2b e2       	ldi	r18, 0x2B	; 43
    4672:	82 02       	muls	r24, r18
    4674:	f0 01       	movw	r30, r0
    4676:	11 24       	eor	r1, r1
    4678:	e5 5c       	subi	r30, 0xC5	; 197
    467a:	fb 4f       	sbci	r31, 0xFB	; 251
    467c:	82 85       	ldd	r24, Z+10	; 0x0a
    467e:	80 93 3e 07 	sts	0x073E, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4682:	f0 93 72 05 	sts	0x0572, r31
    4686:	e0 93 71 05 	sts	0x0571, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    468a:	ff 20       	and	r15, r15
    468c:	21 f1       	breq	.+72     	; 0x46d6 <__stack+0x4d7>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    468e:	45 a1       	ldd	r20, Z+37	; 0x25
    4690:	56 a1       	ldd	r21, Z+38	; 0x26
    4692:	67 a1       	ldd	r22, Z+39	; 0x27
    4694:	70 a5       	ldd	r23, Z+40	; 0x28
    4696:	45 2b       	or	r20, r21
    4698:	46 2b       	or	r20, r22
    469a:	47 2b       	or	r20, r23
    469c:	b1 f0       	breq	.+44     	; 0x46ca <__stack+0x4cb>
    469e:	45 8d       	ldd	r20, Z+29	; 0x1d
    46a0:	56 8d       	ldd	r21, Z+30	; 0x1e
    46a2:	67 8d       	ldd	r22, Z+31	; 0x1f
    46a4:	70 a1       	ldd	r23, Z+32	; 0x20
    46a6:	4a 3f       	cpi	r20, 0xFA	; 250
    46a8:	51 05       	cpc	r21, r1
    46aa:	61 05       	cpc	r22, r1
    46ac:	71 05       	cpc	r23, r1
    46ae:	68 f4       	brcc	.+26     	; 0x46ca <__stack+0x4cb>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    46b0:	c8 84       	ldd	r12, Y+8	; 0x08
    46b2:	d9 84       	ldd	r13, Y+9	; 0x09
    46b4:	86 01       	movw	r16, r12
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 17       	cp	r20, r16
    46bc:	51 07       	cpc	r21, r17
    46be:	62 07       	cpc	r22, r18
    46c0:	73 07       	cpc	r23, r19
    46c2:	48 f5       	brcc	.+82     	; 0x4716 <__stack+0x517>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    46c4:	59 87       	std	Y+9, r21	; 0x09
    46c6:	48 87       	std	Y+8, r20	; 0x08
    46c8:	26 c0       	rjmp	.+76     	; 0x4716 <__stack+0x517>
    46ca:	28 85       	ldd	r18, Y+8	; 0x08
    46cc:	39 85       	ldd	r19, Y+9	; 0x09
    46ce:	2b 3f       	cpi	r18, 0xFB	; 251
    46d0:	31 05       	cpc	r19, r1
    46d2:	08 f1       	brcs	.+66     	; 0x4716 <__stack+0x517>
    46d4:	19 c0       	rjmp	.+50     	; 0x4708 <__stack+0x509>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    46d6:	28 85       	ldd	r18, Y+8	; 0x08
    46d8:	39 85       	ldd	r19, Y+9	; 0x09
    46da:	24 30       	cpi	r18, 0x04	; 4
    46dc:	31 05       	cpc	r19, r1
    46de:	d8 f0       	brcs	.+54     	; 0x4716 <__stack+0x517>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    46e0:	23 50       	subi	r18, 0x03	; 3
    46e2:	31 09       	sbc	r19, r1
    46e4:	2a 3f       	cpi	r18, 0xFA	; 250
    46e6:	31 05       	cpc	r19, r1
    46e8:	50 f4       	brcc	.+20     	; 0x46fe <__stack+0x4ff>
    46ea:	39 87       	std	Y+9, r19	; 0x09
    46ec:	28 87       	std	Y+8, r18	; 0x08
    46ee:	22 30       	cpi	r18, 0x02	; 2
    46f0:	31 05       	cpc	r19, r1
    46f2:	88 f4       	brcc	.+34     	; 0x4716 <__stack+0x517>
    46f4:	a2 e0       	ldi	r26, 0x02	; 2
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	b9 87       	std	Y+9, r27	; 0x09
    46fa:	a8 87       	std	Y+8, r26	; 0x08
    46fc:	0c c0       	rjmp	.+24     	; 0x4716 <__stack+0x517>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    46fe:	28 85       	ldd	r18, Y+8	; 0x08
    4700:	39 85       	ldd	r19, Y+9	; 0x09
    4702:	2d 3f       	cpi	r18, 0xFD	; 253
    4704:	31 05       	cpc	r19, r1
    4706:	19 f0       	breq	.+6      	; 0x470e <__stack+0x50f>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4708:	aa ef       	ldi	r26, 0xFA	; 250
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	f5 cf       	rjmp	.-22     	; 0x46f8 <__stack+0x4f9>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    470e:	27 ef       	ldi	r18, 0xF7	; 247
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	39 87       	std	Y+9, r19	; 0x09
    4714:	28 87       	std	Y+8, r18	; 0x08
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4716:	80 93 73 05 	sts	0x0573, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    471a:	f0 93 81 06 	sts	0x0681, r31
    471e:	e0 93 80 06 	sts	0x0680, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4722:	38 85       	ldd	r19, Y+8	; 0x08
    4724:	30 93 ea 07 	sts	0x07EA, r19

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4728:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    472c:	28 2f       	mov	r18, r24
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	2f 5f       	subi	r18, 0xFF	; 255
    4732:	3f 4f       	sbci	r19, 0xFF	; 255
    4734:	c8 84       	ldd	r12, Y+8	; 0x08
    4736:	d9 84       	ldd	r13, Y+9	; 0x09
    4738:	2c 15       	cp	r18, r12
    473a:	3d 05       	cpc	r19, r13
    473c:	58 f0       	brcs	.+22     	; 0x4754 <__stack+0x555>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    473e:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_nrk_os_timer_get>
    4742:	c8 2e       	mov	r12, r24
    4744:	d1 2c       	mov	r13, r1
    4746:	96 01       	movw	r18, r12
    4748:	2e 5f       	subi	r18, 0xFE	; 254
    474a:	3f 4f       	sbci	r19, 0xFF	; 255
    474c:	39 87       	std	Y+9, r19	; 0x09
    474e:	28 87       	std	Y+8, r18	; 0x08
        _nrk_prev_timer_val=next_wake;
    4750:	20 93 ea 07 	sts	0x07EA, r18
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4754:	f1 10       	cpse	r15, r1
    4756:	10 92 41 08 	sts	0x0841, r1

    _nrk_set_next_wakeup(next_wake);
    475a:	88 85       	ldd	r24, Y+8	; 0x08
    475c:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4760:	6c ed       	ldi	r22, 0xDC	; 220
    4762:	75 e0       	ldi	r23, 0x05	; 5
    4764:	8e 81       	ldd	r24, Y+6	; 0x06
    4766:	9f 81       	ldd	r25, Y+7	; 0x07
    4768:	0e 94 27 24 	call	0x484e	; 0x484e <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    476c:	0e 94 56 28 	call	0x50ac	; 0x50ac <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    4770:	29 96       	adiw	r28, 0x09	; 9
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	f8 94       	cli
    4776:	de bf       	out	0x3e, r29	; 62
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	cd bf       	out	0x3d, r28	; 61
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	1f 91       	pop	r17
    4782:	0f 91       	pop	r16
    4784:	ff 90       	pop	r15
    4786:	ef 90       	pop	r14
    4788:	df 90       	pop	r13
    478a:	cf 90       	pop	r12
    478c:	bf 90       	pop	r11
    478e:	af 90       	pop	r10
    4790:	9f 90       	pop	r9
    4792:	8f 90       	pop	r8
    4794:	7f 90       	pop	r7
    4796:	6f 90       	pop	r6
    4798:	5f 90       	pop	r5
    479a:	4f 90       	pop	r4
    479c:	3f 90       	pop	r3
    479e:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    47a0:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <nrk_start_high_ready_task>

000047a4 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	89 f7       	brne	.-30     	; 0x47a4 <nrk_spin_wait_us>

}
    47c2:	08 95       	ret

000047c4 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    47c4:	10 92 21 01 	sts	0x0121, r1
    47c8:	08 95       	ret

000047ca <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    47ca:	89 e0       	ldi	r24, 0x09	; 9
    47cc:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    47d0:	8d e8       	ldi	r24, 0x8D	; 141
    47d2:	9c e3       	ldi	r25, 0x3C	; 60
    47d4:	90 93 29 01 	sts	0x0129, r25
    47d8:	80 93 28 01 	sts	0x0128, r24
    47dc:	08 95       	ret

000047de <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    47de:	10 92 25 01 	sts	0x0125, r1
    47e2:	10 92 24 01 	sts	0x0124, r1
    47e6:	08 95       	ret

000047e8 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	00 d0       	rcall	.+0      	; 0x47ee <_nrk_precision_os_timer_get+0x6>
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    47f2:	80 91 24 01 	lds	r24, 0x0124
    47f6:	90 91 25 01 	lds	r25, 0x0125
    47fa:	9a 83       	std	Y+2, r25	; 0x02
    47fc:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	df 91       	pop	r29
    4808:	cf 91       	pop	r28
    480a:	08 95       	ret

0000480c <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    480c:	10 92 81 00 	sts	0x0081, r1
    4810:	08 95       	ret

00004812 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	80 93 81 00 	sts	0x0081, r24
    4818:	08 95       	ret

0000481a <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    481a:	83 b5       	in	r24, 0x23	; 35
    481c:	81 60       	ori	r24, 0x01	; 1
    481e:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4820:	10 92 85 00 	sts	0x0085, r1
    4824:	10 92 84 00 	sts	0x0084, r1
    4828:	08 95       	ret

0000482a <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	00 d0       	rcall	.+0      	; 0x4830 <_nrk_high_speed_timer_get+0x6>
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4834:	80 91 84 00 	lds	r24, 0x0084
    4838:	90 91 85 00 	lds	r25, 0x0085
    483c:	9a 83       	std	Y+2, r25	; 0x02
    483e:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4844:	0f 90       	pop	r0
    4846:	0f 90       	pop	r0
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	08 95       	ret

0000484e <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    484e:	cf 92       	push	r12
    4850:	df 92       	push	r13
    4852:	ef 92       	push	r14
    4854:	ff 92       	push	r15
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    485a:	ec 01       	movw	r28, r24
    485c:	cc 0f       	add	r28, r28
    485e:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4860:	c9 37       	cpi	r28, 0x79	; 121
    4862:	8f ef       	ldi	r24, 0xFF	; 255
    4864:	d8 07       	cpc	r29, r24
    4866:	10 f0       	brcs	.+4      	; 0x486c <nrk_high_speed_timer_wait+0x1e>
    4868:	c0 e0       	ldi	r28, 0x00	; 0
    486a:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    486c:	6b 01       	movw	r12, r22
    486e:	e1 2c       	mov	r14, r1
    4870:	f1 2c       	mov	r15, r1
    4872:	cc 0e       	add	r12, r28
    4874:	dd 1e       	adc	r13, r29
    4876:	e1 1c       	adc	r14, r1
    4878:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	c8 16       	cp	r12, r24
    487e:	d1 04       	cpc	r13, r1
    4880:	e8 06       	cpc	r14, r24
    4882:	f1 04       	cpc	r15, r1
    4884:	40 f0       	brcs	.+16     	; 0x4896 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	e8 1a       	sub	r14, r24
    488a:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    488c:	0e 94 15 24 	call	0x482a	; 0x482a <_nrk_high_speed_timer_get>
    4890:	c8 17       	cp	r28, r24
    4892:	d9 07       	cpc	r29, r25
    4894:	d8 f3       	brcs	.-10     	; 0x488c <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4896:	0e 94 15 24 	call	0x482a	; 0x482a <_nrk_high_speed_timer_get>
    489a:	8c 15       	cp	r24, r12
    489c:	9d 05       	cpc	r25, r13
    489e:	d8 f3       	brcs	.-10     	; 0x4896 <nrk_high_speed_timer_wait+0x48>
}
    48a0:	df 91       	pop	r29
    48a2:	cf 91       	pop	r28
    48a4:	ff 90       	pop	r15
    48a6:	ef 90       	pop	r14
    48a8:	df 90       	pop	r13
    48aa:	cf 90       	pop	r12
    48ac:	08 95       	ret

000048ae <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    48ae:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    48b2:	e0 e7       	ldi	r30, 0x70	; 112
    48b4:	f0 e0       	ldi	r31, 0x00	; 0
    48b6:	80 81       	ld	r24, Z
    48b8:	8d 7f       	andi	r24, 0xFD	; 253
    48ba:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    48bc:	80 81       	ld	r24, Z
    48be:	8e 7f       	andi	r24, 0xFE	; 254
    48c0:	80 83       	st	Z, r24
    48c2:	08 95       	ret

000048c4 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    48c4:	80 93 b2 00 	sts	0x00B2, r24
    48c8:	08 95       	ret

000048ca <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    48ca:	e0 e7       	ldi	r30, 0x70	; 112
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	80 81       	ld	r24, Z
    48d0:	83 60       	ori	r24, 0x03	; 3
    48d2:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    48d4:	83 e0       	ldi	r24, 0x03	; 3
    48d6:	80 93 b1 00 	sts	0x00B1, r24
    48da:	08 95       	ret

000048dc <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    48dc:	83 b5       	in	r24, 0x23	; 35
    48de:	82 60       	ori	r24, 0x02	; 2
    48e0:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    48e2:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    48e6:	10 92 e8 07 	sts	0x07E8, r1
    _nrk_prev_timer_val=0;
    48ea:	10 92 ea 07 	sts	0x07EA, r1
    48ee:	08 95       	ret

000048f0 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    48f4:	8e ef       	ldi	r24, 0xFE	; 254
    48f6:	80 93 ea 07 	sts	0x07EA, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    48fa:	80 e2       	ldi	r24, 0x20	; 32
    48fc:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4900:	80 91 ea 07 	lds	r24, 0x07EA
    4904:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4908:	83 e0       	ldi	r24, 0x03	; 3
    490a:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    490c:	92 e0       	ldi	r25, 0x02	; 2
    490e:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4912:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4916:	93 b5       	in	r25, 0x23	; 35
    4918:	92 60       	ori	r25, 0x02	; 2
    491a:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    491c:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    491e:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4920:	83 b5       	in	r24, 0x23	; 35
    4922:	82 60       	ori	r24, 0x02	; 2
    4924:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4926:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4930:	10 92 85 00 	sts	0x0085, r1
    4934:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4938:	83 b5       	in	r24, 0x23	; 35
    493a:	82 60       	ori	r24, 0x02	; 2
    493c:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    493e:	83 b5       	in	r24, 0x23	; 35
    4940:	81 60       	ori	r24, 0x01	; 1
    4942:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4944:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4948:	c4 e2       	ldi	r28, 0x24	; 36
    494a:	d1 e0       	ldi	r29, 0x01	; 1
    494c:	19 82       	std	Y+1, r1	; 0x01
    494e:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4950:	83 b5       	in	r24, 0x23	; 35
    4952:	82 60       	ori	r24, 0x02	; 2
    4954:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4956:	83 b5       	in	r24, 0x23	; 35
    4958:	81 60       	ori	r24, 0x01	; 1
    495a:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    495c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4960:	19 82       	std	Y+1, r1	; 0x01
    4962:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    4964:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4968:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    496c:	10 92 e8 07 	sts	0x07E8, r1
}
    4970:	df 91       	pop	r29
    4972:	cf 91       	pop	r28
    4974:	08 95       	ret

00004976 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4976:	80 91 b3 00 	lds	r24, 0x00B3
}
    497a:	8f 5f       	subi	r24, 0xFF	; 255
    497c:	08 95       	ret

0000497e <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    497e:	81 50       	subi	r24, 0x01	; 1
    4980:	80 93 b3 00 	sts	0x00B3, r24
    4984:	08 95       	ret

00004986 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4986:	81 11       	cpse	r24, r1
    4988:	02 c0       	rjmp	.+4      	; 0x498e <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    498a:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    498e:	8f ef       	ldi	r24, 0xFF	; 255
    4990:	08 95       	ret

00004992 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4992:	81 11       	cpse	r24, r1
    4994:	06 c0       	rjmp	.+12     	; 0x49a2 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4996:	10 92 95 00 	sts	0x0095, r1
    499a:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    499e:	81 e0       	ldi	r24, 0x01	; 1
    49a0:	08 95       	ret
	}
return NRK_ERROR;
    49a2:	8f ef       	ldi	r24, 0xFF	; 255
}
    49a4:	08 95       	ret

000049a6 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    49a6:	81 11       	cpse	r24, r1
    49a8:	05 c0       	rjmp	.+10     	; 0x49b4 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    49aa:	80 91 94 00 	lds	r24, 0x0094
    49ae:	90 91 95 00 	lds	r25, 0x0095
    49b2:	08 95       	ret
	}
return 0;
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0

}
    49b8:	08 95       	ret

000049ba <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    49ba:	81 11       	cpse	r24, r1
    49bc:	05 c0       	rjmp	.+10     	; 0x49c8 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    49be:	82 e0       	ldi	r24, 0x02	; 2
    49c0:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	08 95       	ret
	}
return NRK_ERROR;
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
}
    49ca:	08 95       	ret

000049cc <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    49cc:	81 11       	cpse	r24, r1
    49ce:	35 c0       	rjmp	.+106    	; 0x4a3a <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    49d0:	cb 01       	movw	r24, r22
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	05 97       	sbiw	r24, 0x05	; 5
    49d6:	10 f4       	brcc	.+4      	; 0x49dc <nrk_timer_int_configure+0x10>
    49d8:	60 93 e9 07 	sts	0x07E9, r22
	TCCR3A = 0;  
    49dc:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    49e0:	88 e0       	ldi	r24, 0x08	; 8
    49e2:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    49e6:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    49ea:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    49ee:	30 93 e7 07 	sts	0x07E7, r19
    49f2:	20 93 e6 07 	sts	0x07E6, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    49f6:	80 91 e9 07 	lds	r24, 0x07E9
    49fa:	81 30       	cpi	r24, 0x01	; 1
    49fc:	21 f4       	brne	.+8      	; 0x4a06 <nrk_timer_int_configure+0x3a>
    49fe:	80 91 91 00 	lds	r24, 0x0091
    4a02:	81 60       	ori	r24, 0x01	; 1
    4a04:	11 c0       	rjmp	.+34     	; 0x4a28 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4a06:	82 30       	cpi	r24, 0x02	; 2
    4a08:	21 f4       	brne	.+8      	; 0x4a12 <nrk_timer_int_configure+0x46>
    4a0a:	80 91 91 00 	lds	r24, 0x0091
    4a0e:	82 60       	ori	r24, 0x02	; 2
    4a10:	0b c0       	rjmp	.+22     	; 0x4a28 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4a12:	83 30       	cpi	r24, 0x03	; 3
    4a14:	21 f4       	brne	.+8      	; 0x4a1e <nrk_timer_int_configure+0x52>
    4a16:	80 91 91 00 	lds	r24, 0x0091
    4a1a:	83 60       	ori	r24, 0x03	; 3
    4a1c:	05 c0       	rjmp	.+10     	; 0x4a28 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4a1e:	84 30       	cpi	r24, 0x04	; 4
    4a20:	31 f4       	brne	.+12     	; 0x4a2e <nrk_timer_int_configure+0x62>
    4a22:	80 91 91 00 	lds	r24, 0x0091
    4a26:	84 60       	ori	r24, 0x04	; 4
    4a28:	80 93 91 00 	sts	0x0091, r24
    4a2c:	08 c0       	rjmp	.+16     	; 0x4a3e <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4a2e:	85 30       	cpi	r24, 0x05	; 5
    4a30:	31 f4       	brne	.+12     	; 0x4a3e <nrk_timer_int_configure+0x72>
    4a32:	80 91 91 00 	lds	r24, 0x0091
    4a36:	85 60       	ori	r24, 0x05	; 5
    4a38:	f7 cf       	rjmp	.-18     	; 0x4a28 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4a3a:	8f ef       	ldi	r24, 0xFF	; 255
    4a3c:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4a40:	08 95       	ret

00004a42 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4a42:	80 91 b2 00 	lds	r24, 0x00B2
}
    4a46:	08 95       	ret

00004a48 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4a48:	1f 92       	push	r1
    4a4a:	0f 92       	push	r0
    4a4c:	0f b6       	in	r0, 0x3f	; 63
    4a4e:	0f 92       	push	r0
    4a50:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4a52:	60 e0       	ldi	r22, 0x00	; 0
    4a54:	8a e0       	ldi	r24, 0x0A	; 10
    4a56:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
    4a5a:	ff cf       	rjmp	.-2      	; 0x4a5a <__vector_default+0x12>

00004a5c <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4a5c:	0f 92       	push	r0
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	0f 92       	push	r0
    4a62:	1f 92       	push	r1
    4a64:	2f 92       	push	r2
    4a66:	3f 92       	push	r3
    4a68:	4f 92       	push	r4
    4a6a:	5f 92       	push	r5
    4a6c:	6f 92       	push	r6
    4a6e:	7f 92       	push	r7
    4a70:	8f 92       	push	r8
    4a72:	9f 92       	push	r9
    4a74:	af 92       	push	r10
    4a76:	bf 92       	push	r11
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	0f 93       	push	r16
    4a82:	1f 93       	push	r17
    4a84:	2f 93       	push	r18
    4a86:	3f 93       	push	r19
    4a88:	4f 93       	push	r20
    4a8a:	5f 93       	push	r21
    4a8c:	6f 93       	push	r22
    4a8e:	7f 93       	push	r23
    4a90:	8f 93       	push	r24
    4a92:	9f 93       	push	r25
    4a94:	af 93       	push	r26
    4a96:	bf 93       	push	r27
    4a98:	cf 93       	push	r28
    4a9a:	df 93       	push	r29
    4a9c:	ef 93       	push	r30
    4a9e:	ff 93       	push	r31
    4aa0:	a0 91 80 06 	lds	r26, 0x0680
    4aa4:	b0 91 81 06 	lds	r27, 0x0681
    4aa8:	0d b6       	in	r0, 0x3d	; 61
    4aaa:	0d 92       	st	X+, r0
    4aac:	0e b6       	in	r0, 0x3e	; 62
    4aae:	0d 92       	st	X+, r0
    4ab0:	1f 92       	push	r1
    4ab2:	a0 91 82 06 	lds	r26, 0x0682
    4ab6:	b0 91 83 06 	lds	r27, 0x0683
    4aba:	1e 90       	ld	r1, -X
    4abc:	be bf       	out	0x3e, r27	; 62
    4abe:	ad bf       	out	0x3d, r26	; 61
    4ac0:	08 95       	ret

00004ac2 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4ac2:	1f 92       	push	r1
    4ac4:	0f 92       	push	r0
    4ac6:	0f b6       	in	r0, 0x3f	; 63
    4ac8:	0f 92       	push	r0
    4aca:	11 24       	eor	r1, r1
    4acc:	0b b6       	in	r0, 0x3b	; 59
    4ace:	0f 92       	push	r0
    4ad0:	2f 93       	push	r18
    4ad2:	3f 93       	push	r19
    4ad4:	4f 93       	push	r20
    4ad6:	5f 93       	push	r21
    4ad8:	6f 93       	push	r22
    4ada:	7f 93       	push	r23
    4adc:	8f 93       	push	r24
    4ade:	9f 93       	push	r25
    4ae0:	af 93       	push	r26
    4ae2:	bf 93       	push	r27
    4ae4:	ef 93       	push	r30
    4ae6:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4ae8:	e0 91 e6 07 	lds	r30, 0x07E6
    4aec:	f0 91 e7 07 	lds	r31, 0x07E7
    4af0:	30 97       	sbiw	r30, 0x00	; 0
    4af2:	11 f0       	breq	.+4      	; 0x4af8 <__vector_32+0x36>
    4af4:	09 95       	icall
    4af6:	04 c0       	rjmp	.+8      	; 0x4b00 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4af8:	60 e0       	ldi	r22, 0x00	; 0
    4afa:	8a e0       	ldi	r24, 0x0A	; 10
    4afc:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
	return;  	
}
    4b00:	ff 91       	pop	r31
    4b02:	ef 91       	pop	r30
    4b04:	bf 91       	pop	r27
    4b06:	af 91       	pop	r26
    4b08:	9f 91       	pop	r25
    4b0a:	8f 91       	pop	r24
    4b0c:	7f 91       	pop	r23
    4b0e:	6f 91       	pop	r22
    4b10:	5f 91       	pop	r21
    4b12:	4f 91       	pop	r20
    4b14:	3f 91       	pop	r19
    4b16:	2f 91       	pop	r18
    4b18:	0f 90       	pop	r0
    4b1a:	0b be       	out	0x3b, r0	; 59
    4b1c:	0f 90       	pop	r0
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	0f 90       	pop	r0
    4b22:	1f 90       	pop	r1
    4b24:	18 95       	reti

00004b26 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4b26:	1f 92       	push	r1
    4b28:	0f 92       	push	r0
    4b2a:	0f b6       	in	r0, 0x3f	; 63
    4b2c:	0f 92       	push	r0
    4b2e:	11 24       	eor	r1, r1

	return;  	
} 
    4b30:	0f 90       	pop	r0
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	0f 90       	pop	r0
    4b36:	1f 90       	pop	r1
    4b38:	18 95       	reti

00004b3a <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4b3a:	04 b6       	in	r0, 0x34	; 52
    4b3c:	03 fc       	sbrc	r0, 3
    4b3e:	02 c0       	rjmp	.+4      	; 0x4b44 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	01 c0       	rjmp	.+2      	; 0x4b46 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4b44:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4b46:	04 b6       	in	r0, 0x34	; 52
    4b48:	02 fe       	sbrs	r0, 2
    4b4a:	06 c0       	rjmp	.+12     	; 0x4b58 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4b4c:	94 b7       	in	r25, 0x34	; 52
    4b4e:	9b 7f       	andi	r25, 0xFB	; 251
    4b50:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4b52:	04 b6       	in	r0, 0x34	; 52
    4b54:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4b56:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4b58:	04 b6       	in	r0, 0x34	; 52
    4b5a:	01 fe       	sbrs	r0, 1
    4b5c:	05 c0       	rjmp	.+10     	; 0x4b68 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4b5e:	94 b7       	in	r25, 0x34	; 52
    4b60:	9d 7f       	andi	r25, 0xFD	; 253
    4b62:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4b64:	82 60       	ori	r24, 0x02	; 2
    4b66:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4b68:	81 11       	cpse	r24, r1
    4b6a:	0c c0       	rjmp	.+24     	; 0x4b84 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4b6c:	04 b6       	in	r0, 0x34	; 52
    4b6e:	00 fe       	sbrs	r0, 0
    4b70:	04 c0       	rjmp	.+8      	; 0x4b7a <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4b72:	94 b7       	in	r25, 0x34	; 52
    4b74:	9e 7f       	andi	r25, 0xFE	; 254
    4b76:	94 bf       	out	0x34, r25	; 52
    4b78:	01 c0       	rjmp	.+2      	; 0x4b7c <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4b7c:	90 91 b0 00 	lds	r25, 0x00B0
    4b80:	91 11       	cpse	r25, r1
    4b82:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    4b84:	08 95       	ret

00004b86 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4b86:	81 11       	cpse	r24, r1
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <nrk_ext_int_enable+0x8>
    4b8a:	e8 9a       	sbi	0x1d, 0	; 29
    4b8c:	39 c0       	rjmp	.+114    	; 0x4c00 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4b8e:	81 30       	cpi	r24, 0x01	; 1
    4b90:	11 f4       	brne	.+4      	; 0x4b96 <nrk_ext_int_enable+0x10>
    4b92:	e9 9a       	sbi	0x1d, 1	; 29
    4b94:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4b96:	82 30       	cpi	r24, 0x02	; 2
    4b98:	11 f4       	brne	.+4      	; 0x4b9e <nrk_ext_int_enable+0x18>
    4b9a:	ea 9a       	sbi	0x1d, 2	; 29
    4b9c:	31 c0       	rjmp	.+98     	; 0x4c00 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4b9e:	83 30       	cpi	r24, 0x03	; 3
    4ba0:	21 f4       	brne	.+8      	; 0x4baa <nrk_ext_int_enable+0x24>
    4ba2:	80 91 6b 00 	lds	r24, 0x006B
    4ba6:	81 60       	ori	r24, 0x01	; 1
    4ba8:	29 c0       	rjmp	.+82     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4baa:	84 30       	cpi	r24, 0x04	; 4
    4bac:	21 f4       	brne	.+8      	; 0x4bb6 <nrk_ext_int_enable+0x30>
    4bae:	80 91 6b 00 	lds	r24, 0x006B
    4bb2:	82 60       	ori	r24, 0x02	; 2
    4bb4:	23 c0       	rjmp	.+70     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4bb6:	85 30       	cpi	r24, 0x05	; 5
    4bb8:	21 f4       	brne	.+8      	; 0x4bc2 <nrk_ext_int_enable+0x3c>
    4bba:	80 91 6b 00 	lds	r24, 0x006B
    4bbe:	84 60       	ori	r24, 0x04	; 4
    4bc0:	1d c0       	rjmp	.+58     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4bc2:	86 30       	cpi	r24, 0x06	; 6
    4bc4:	21 f4       	brne	.+8      	; 0x4bce <nrk_ext_int_enable+0x48>
    4bc6:	80 91 6b 00 	lds	r24, 0x006B
    4bca:	88 60       	ori	r24, 0x08	; 8
    4bcc:	17 c0       	rjmp	.+46     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4bce:	87 30       	cpi	r24, 0x07	; 7
    4bd0:	21 f4       	brne	.+8      	; 0x4bda <nrk_ext_int_enable+0x54>
    4bd2:	80 91 6b 00 	lds	r24, 0x006B
    4bd6:	80 61       	ori	r24, 0x10	; 16
    4bd8:	11 c0       	rjmp	.+34     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4bda:	88 30       	cpi	r24, 0x08	; 8
    4bdc:	21 f4       	brne	.+8      	; 0x4be6 <nrk_ext_int_enable+0x60>
    4bde:	80 91 6b 00 	lds	r24, 0x006B
    4be2:	80 62       	ori	r24, 0x20	; 32
    4be4:	0b c0       	rjmp	.+22     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4be6:	89 30       	cpi	r24, 0x09	; 9
    4be8:	21 f4       	brne	.+8      	; 0x4bf2 <nrk_ext_int_enable+0x6c>
    4bea:	80 91 6b 00 	lds	r24, 0x006B
    4bee:	80 64       	ori	r24, 0x40	; 64
    4bf0:	05 c0       	rjmp	.+10     	; 0x4bfc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4bf2:	8a 30       	cpi	r24, 0x0A	; 10
    4bf4:	39 f4       	brne	.+14     	; 0x4c04 <nrk_ext_int_enable+0x7e>
    4bf6:	80 91 6b 00 	lds	r24, 0x006B
    4bfa:	80 68       	ori	r24, 0x80	; 128
    4bfc:	80 93 6b 00 	sts	0x006B, r24
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	08 95       	ret
return NRK_ERROR;
    4c04:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c06:	08 95       	ret

00004c08 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4c08:	81 11       	cpse	r24, r1
    4c0a:	02 c0       	rjmp	.+4      	; 0x4c10 <nrk_ext_int_disable+0x8>
    4c0c:	e8 98       	cbi	0x1d, 0	; 29
    4c0e:	39 c0       	rjmp	.+114    	; 0x4c82 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	11 f4       	brne	.+4      	; 0x4c18 <nrk_ext_int_disable+0x10>
    4c14:	e9 98       	cbi	0x1d, 1	; 29
    4c16:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4c18:	82 30       	cpi	r24, 0x02	; 2
    4c1a:	11 f4       	brne	.+4      	; 0x4c20 <nrk_ext_int_disable+0x18>
    4c1c:	e9 98       	cbi	0x1d, 1	; 29
    4c1e:	31 c0       	rjmp	.+98     	; 0x4c82 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4c20:	83 30       	cpi	r24, 0x03	; 3
    4c22:	21 f4       	brne	.+8      	; 0x4c2c <nrk_ext_int_disable+0x24>
    4c24:	80 91 6b 00 	lds	r24, 0x006B
    4c28:	8e 7f       	andi	r24, 0xFE	; 254
    4c2a:	29 c0       	rjmp	.+82     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4c2c:	84 30       	cpi	r24, 0x04	; 4
    4c2e:	21 f4       	brne	.+8      	; 0x4c38 <nrk_ext_int_disable+0x30>
    4c30:	80 91 6b 00 	lds	r24, 0x006B
    4c34:	8d 7f       	andi	r24, 0xFD	; 253
    4c36:	23 c0       	rjmp	.+70     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4c38:	85 30       	cpi	r24, 0x05	; 5
    4c3a:	21 f4       	brne	.+8      	; 0x4c44 <nrk_ext_int_disable+0x3c>
    4c3c:	80 91 6b 00 	lds	r24, 0x006B
    4c40:	8b 7f       	andi	r24, 0xFB	; 251
    4c42:	1d c0       	rjmp	.+58     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4c44:	86 30       	cpi	r24, 0x06	; 6
    4c46:	21 f4       	brne	.+8      	; 0x4c50 <nrk_ext_int_disable+0x48>
    4c48:	80 91 6b 00 	lds	r24, 0x006B
    4c4c:	87 7f       	andi	r24, 0xF7	; 247
    4c4e:	17 c0       	rjmp	.+46     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4c50:	87 30       	cpi	r24, 0x07	; 7
    4c52:	21 f4       	brne	.+8      	; 0x4c5c <nrk_ext_int_disable+0x54>
    4c54:	80 91 6b 00 	lds	r24, 0x006B
    4c58:	8f 7e       	andi	r24, 0xEF	; 239
    4c5a:	11 c0       	rjmp	.+34     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4c5c:	88 30       	cpi	r24, 0x08	; 8
    4c5e:	21 f4       	brne	.+8      	; 0x4c68 <nrk_ext_int_disable+0x60>
    4c60:	80 91 6b 00 	lds	r24, 0x006B
    4c64:	8f 7d       	andi	r24, 0xDF	; 223
    4c66:	0b c0       	rjmp	.+22     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4c68:	89 30       	cpi	r24, 0x09	; 9
    4c6a:	21 f4       	brne	.+8      	; 0x4c74 <nrk_ext_int_disable+0x6c>
    4c6c:	80 91 6b 00 	lds	r24, 0x006B
    4c70:	8f 7b       	andi	r24, 0xBF	; 191
    4c72:	05 c0       	rjmp	.+10     	; 0x4c7e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4c74:	8a 30       	cpi	r24, 0x0A	; 10
    4c76:	39 f4       	brne	.+14     	; 0x4c86 <nrk_ext_int_disable+0x7e>
    4c78:	80 91 6b 00 	lds	r24, 0x006B
    4c7c:	8f 77       	andi	r24, 0x7F	; 127
    4c7e:	80 93 6b 00 	sts	0x006B, r24
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	08 95       	ret
return NRK_ERROR;
    4c86:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c88:	08 95       	ret

00004c8a <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4c8a:	81 11       	cpse	r24, r1
    4c8c:	26 c0       	rjmp	.+76     	; 0x4cda <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4c8e:	50 93 46 08 	sts	0x0846, r21
    4c92:	40 93 45 08 	sts	0x0845, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4c96:	61 11       	cpse	r22, r1
    4c98:	04 c0       	rjmp	.+8      	; 0x4ca2 <nrk_ext_int_configure+0x18>
    4c9a:	80 91 69 00 	lds	r24, 0x0069
    4c9e:	8c 7f       	andi	r24, 0xFC	; 252
    4ca0:	3d c0       	rjmp	.+122    	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4ca2:	61 30       	cpi	r22, 0x01	; 1
    4ca4:	49 f4       	brne	.+18     	; 0x4cb8 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4ca6:	80 91 69 00 	lds	r24, 0x0069
    4caa:	8d 7f       	andi	r24, 0xFD	; 253
    4cac:	80 93 69 00 	sts	0x0069, r24
    4cb0:	80 91 69 00 	lds	r24, 0x0069
    4cb4:	81 60       	ori	r24, 0x01	; 1
    4cb6:	32 c0       	rjmp	.+100    	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4cb8:	62 30       	cpi	r22, 0x02	; 2
    4cba:	49 f4       	brne	.+18     	; 0x4cce <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4cbc:	80 91 69 00 	lds	r24, 0x0069
    4cc0:	82 60       	ori	r24, 0x02	; 2
    4cc2:	80 93 69 00 	sts	0x0069, r24
    4cc6:	80 91 69 00 	lds	r24, 0x0069
    4cca:	8e 7f       	andi	r24, 0xFE	; 254
    4ccc:	27 c0       	rjmp	.+78     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4cce:	63 30       	cpi	r22, 0x03	; 3
    4cd0:	39 f5       	brne	.+78     	; 0x4d20 <nrk_ext_int_configure+0x96>
    4cd2:	80 91 69 00 	lds	r24, 0x0069
    4cd6:	83 60       	ori	r24, 0x03	; 3
    4cd8:	21 c0       	rjmp	.+66     	; 0x4d1c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4cda:	81 30       	cpi	r24, 0x01	; 1
    4cdc:	49 f5       	brne	.+82     	; 0x4d30 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4cde:	50 93 44 08 	sts	0x0844, r21
    4ce2:	40 93 43 08 	sts	0x0843, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4ce6:	61 11       	cpse	r22, r1
    4ce8:	04 c0       	rjmp	.+8      	; 0x4cf2 <nrk_ext_int_configure+0x68>
    4cea:	80 91 69 00 	lds	r24, 0x0069
    4cee:	83 7f       	andi	r24, 0xF3	; 243
    4cf0:	15 c0       	rjmp	.+42     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4cf2:	61 30       	cpi	r22, 0x01	; 1
    4cf4:	49 f4       	brne	.+18     	; 0x4d08 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4cf6:	80 91 69 00 	lds	r24, 0x0069
    4cfa:	87 7f       	andi	r24, 0xF7	; 247
    4cfc:	80 93 69 00 	sts	0x0069, r24
    4d00:	80 91 69 00 	lds	r24, 0x0069
    4d04:	84 60       	ori	r24, 0x04	; 4
    4d06:	0a c0       	rjmp	.+20     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4d08:	62 30       	cpi	r22, 0x02	; 2
    4d0a:	61 f4       	brne	.+24     	; 0x4d24 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4d0c:	80 91 69 00 	lds	r24, 0x0069
    4d10:	88 60       	ori	r24, 0x08	; 8
    4d12:	80 93 69 00 	sts	0x0069, r24
    4d16:	80 91 69 00 	lds	r24, 0x0069
    4d1a:	8b 7f       	andi	r24, 0xFB	; 251
    4d1c:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4d24:	63 30       	cpi	r22, 0x03	; 3
    4d26:	e1 f7       	brne	.-8      	; 0x4d20 <nrk_ext_int_configure+0x96>
    4d28:	80 91 69 00 	lds	r24, 0x0069
    4d2c:	8c 60       	ori	r24, 0x0C	; 12
    4d2e:	f6 cf       	rjmp	.-20     	; 0x4d1c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4d30:	82 30       	cpi	r24, 0x02	; 2
    4d32:	31 f5       	brne	.+76     	; 0x4d80 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    4d34:	50 93 48 08 	sts	0x0848, r21
    4d38:	40 93 47 08 	sts	0x0847, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4d3c:	61 11       	cpse	r22, r1
    4d3e:	04 c0       	rjmp	.+8      	; 0x4d48 <nrk_ext_int_configure+0xbe>
    4d40:	80 91 69 00 	lds	r24, 0x0069
    4d44:	8f 7c       	andi	r24, 0xCF	; 207
    4d46:	ea cf       	rjmp	.-44     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4d48:	61 30       	cpi	r22, 0x01	; 1
    4d4a:	49 f4       	brne	.+18     	; 0x4d5e <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4d4c:	80 91 69 00 	lds	r24, 0x0069
    4d50:	8f 7d       	andi	r24, 0xDF	; 223
    4d52:	80 93 69 00 	sts	0x0069, r24
    4d56:	80 91 69 00 	lds	r24, 0x0069
    4d5a:	80 61       	ori	r24, 0x10	; 16
    4d5c:	df cf       	rjmp	.-66     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4d5e:	62 30       	cpi	r22, 0x02	; 2
    4d60:	49 f4       	brne	.+18     	; 0x4d74 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4d62:	80 91 69 00 	lds	r24, 0x0069
    4d66:	80 62       	ori	r24, 0x20	; 32
    4d68:	80 93 69 00 	sts	0x0069, r24
    4d6c:	80 91 69 00 	lds	r24, 0x0069
    4d70:	8f 7e       	andi	r24, 0xEF	; 239
    4d72:	d4 cf       	rjmp	.-88     	; 0x4d1c <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4d74:	63 30       	cpi	r22, 0x03	; 3
    4d76:	a1 f6       	brne	.-88     	; 0x4d20 <nrk_ext_int_configure+0x96>
    4d78:	80 91 69 00 	lds	r24, 0x0069
    4d7c:	80 63       	ori	r24, 0x30	; 48
    4d7e:	ce cf       	rjmp	.-100    	; 0x4d1c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4d80:	83 50       	subi	r24, 0x03	; 3
    4d82:	88 30       	cpi	r24, 0x08	; 8
    4d84:	50 f4       	brcc	.+20     	; 0x4d9a <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4d86:	80 91 68 00 	lds	r24, 0x0068
    4d8a:	81 60       	ori	r24, 0x01	; 1
    4d8c:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4d90:	50 93 4a 08 	sts	0x084A, r21
    4d94:	40 93 49 08 	sts	0x0849, r20
    4d98:	c3 cf       	rjmp	.-122    	; 0x4d20 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    4d9a:	8f ef       	ldi	r24, 0xFF	; 255
}
    4d9c:	08 95       	ret

00004d9e <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4d9e:	1f 92       	push	r1
    4da0:	0f 92       	push	r0
    4da2:	0f b6       	in	r0, 0x3f	; 63
    4da4:	0f 92       	push	r0
    4da6:	11 24       	eor	r1, r1
    4da8:	0b b6       	in	r0, 0x3b	; 59
    4daa:	0f 92       	push	r0
    4dac:	2f 93       	push	r18
    4dae:	3f 93       	push	r19
    4db0:	4f 93       	push	r20
    4db2:	5f 93       	push	r21
    4db4:	6f 93       	push	r22
    4db6:	7f 93       	push	r23
    4db8:	8f 93       	push	r24
    4dba:	9f 93       	push	r25
    4dbc:	af 93       	push	r26
    4dbe:	bf 93       	push	r27
    4dc0:	ef 93       	push	r30
    4dc2:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4dc4:	e0 91 49 08 	lds	r30, 0x0849
    4dc8:	f0 91 4a 08 	lds	r31, 0x084A
    4dcc:	30 97       	sbiw	r30, 0x00	; 0
    4dce:	11 f0       	breq	.+4      	; 0x4dd4 <__vector_9+0x36>
    4dd0:	09 95       	icall
    4dd2:	04 c0       	rjmp	.+8      	; 0x4ddc <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4dd4:	60 e0       	ldi	r22, 0x00	; 0
    4dd6:	8a e0       	ldi	r24, 0x0A	; 10
    4dd8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
	return;  	
}
    4ddc:	ff 91       	pop	r31
    4dde:	ef 91       	pop	r30
    4de0:	bf 91       	pop	r27
    4de2:	af 91       	pop	r26
    4de4:	9f 91       	pop	r25
    4de6:	8f 91       	pop	r24
    4de8:	7f 91       	pop	r23
    4dea:	6f 91       	pop	r22
    4dec:	5f 91       	pop	r21
    4dee:	4f 91       	pop	r20
    4df0:	3f 91       	pop	r19
    4df2:	2f 91       	pop	r18
    4df4:	0f 90       	pop	r0
    4df6:	0b be       	out	0x3b, r0	; 59
    4df8:	0f 90       	pop	r0
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	0f 90       	pop	r0
    4dfe:	1f 90       	pop	r1
    4e00:	18 95       	reti

00004e02 <__vector_1>:


SIGNAL(INT0_vect) {
    4e02:	1f 92       	push	r1
    4e04:	0f 92       	push	r0
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	0f 92       	push	r0
    4e0a:	11 24       	eor	r1, r1
    4e0c:	0b b6       	in	r0, 0x3b	; 59
    4e0e:	0f 92       	push	r0
    4e10:	2f 93       	push	r18
    4e12:	3f 93       	push	r19
    4e14:	4f 93       	push	r20
    4e16:	5f 93       	push	r21
    4e18:	6f 93       	push	r22
    4e1a:	7f 93       	push	r23
    4e1c:	8f 93       	push	r24
    4e1e:	9f 93       	push	r25
    4e20:	af 93       	push	r26
    4e22:	bf 93       	push	r27
    4e24:	ef 93       	push	r30
    4e26:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4e28:	e0 91 45 08 	lds	r30, 0x0845
    4e2c:	f0 91 46 08 	lds	r31, 0x0846
    4e30:	30 97       	sbiw	r30, 0x00	; 0
    4e32:	11 f0       	breq	.+4      	; 0x4e38 <__vector_1+0x36>
    4e34:	09 95       	icall
    4e36:	04 c0       	rjmp	.+8      	; 0x4e40 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4e38:	60 e0       	ldi	r22, 0x00	; 0
    4e3a:	8a e0       	ldi	r24, 0x0A	; 10
    4e3c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
	return;  	
}
    4e40:	ff 91       	pop	r31
    4e42:	ef 91       	pop	r30
    4e44:	bf 91       	pop	r27
    4e46:	af 91       	pop	r26
    4e48:	9f 91       	pop	r25
    4e4a:	8f 91       	pop	r24
    4e4c:	7f 91       	pop	r23
    4e4e:	6f 91       	pop	r22
    4e50:	5f 91       	pop	r21
    4e52:	4f 91       	pop	r20
    4e54:	3f 91       	pop	r19
    4e56:	2f 91       	pop	r18
    4e58:	0f 90       	pop	r0
    4e5a:	0b be       	out	0x3b, r0	; 59
    4e5c:	0f 90       	pop	r0
    4e5e:	0f be       	out	0x3f, r0	; 63
    4e60:	0f 90       	pop	r0
    4e62:	1f 90       	pop	r1
    4e64:	18 95       	reti

00004e66 <__vector_2>:

SIGNAL(INT1_vect) {
    4e66:	1f 92       	push	r1
    4e68:	0f 92       	push	r0
    4e6a:	0f b6       	in	r0, 0x3f	; 63
    4e6c:	0f 92       	push	r0
    4e6e:	11 24       	eor	r1, r1
    4e70:	0b b6       	in	r0, 0x3b	; 59
    4e72:	0f 92       	push	r0
    4e74:	2f 93       	push	r18
    4e76:	3f 93       	push	r19
    4e78:	4f 93       	push	r20
    4e7a:	5f 93       	push	r21
    4e7c:	6f 93       	push	r22
    4e7e:	7f 93       	push	r23
    4e80:	8f 93       	push	r24
    4e82:	9f 93       	push	r25
    4e84:	af 93       	push	r26
    4e86:	bf 93       	push	r27
    4e88:	ef 93       	push	r30
    4e8a:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4e8c:	e0 91 43 08 	lds	r30, 0x0843
    4e90:	f0 91 44 08 	lds	r31, 0x0844
    4e94:	30 97       	sbiw	r30, 0x00	; 0
    4e96:	11 f0       	breq	.+4      	; 0x4e9c <__vector_2+0x36>
    4e98:	09 95       	icall
    4e9a:	04 c0       	rjmp	.+8      	; 0x4ea4 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4e9c:	60 e0       	ldi	r22, 0x00	; 0
    4e9e:	8a e0       	ldi	r24, 0x0A	; 10
    4ea0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
	return;  	
}
    4ea4:	ff 91       	pop	r31
    4ea6:	ef 91       	pop	r30
    4ea8:	bf 91       	pop	r27
    4eaa:	af 91       	pop	r26
    4eac:	9f 91       	pop	r25
    4eae:	8f 91       	pop	r24
    4eb0:	7f 91       	pop	r23
    4eb2:	6f 91       	pop	r22
    4eb4:	5f 91       	pop	r21
    4eb6:	4f 91       	pop	r20
    4eb8:	3f 91       	pop	r19
    4eba:	2f 91       	pop	r18
    4ebc:	0f 90       	pop	r0
    4ebe:	0b be       	out	0x3b, r0	; 59
    4ec0:	0f 90       	pop	r0
    4ec2:	0f be       	out	0x3f, r0	; 63
    4ec4:	0f 90       	pop	r0
    4ec6:	1f 90       	pop	r1
    4ec8:	18 95       	reti

00004eca <__vector_3>:

SIGNAL(INT2_vect) {
    4eca:	1f 92       	push	r1
    4ecc:	0f 92       	push	r0
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	0f 92       	push	r0
    4ed2:	11 24       	eor	r1, r1
    4ed4:	0b b6       	in	r0, 0x3b	; 59
    4ed6:	0f 92       	push	r0
    4ed8:	2f 93       	push	r18
    4eda:	3f 93       	push	r19
    4edc:	4f 93       	push	r20
    4ede:	5f 93       	push	r21
    4ee0:	6f 93       	push	r22
    4ee2:	7f 93       	push	r23
    4ee4:	8f 93       	push	r24
    4ee6:	9f 93       	push	r25
    4ee8:	af 93       	push	r26
    4eea:	bf 93       	push	r27
    4eec:	ef 93       	push	r30
    4eee:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4ef0:	e0 91 47 08 	lds	r30, 0x0847
    4ef4:	f0 91 48 08 	lds	r31, 0x0848
    4ef8:	30 97       	sbiw	r30, 0x00	; 0
    4efa:	11 f0       	breq	.+4      	; 0x4f00 <__vector_3+0x36>
    4efc:	09 95       	icall
    4efe:	04 c0       	rjmp	.+8      	; 0x4f08 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4f00:	60 e0       	ldi	r22, 0x00	; 0
    4f02:	8a e0       	ldi	r24, 0x0A	; 10
    4f04:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <nrk_kernel_error_add>
	return;  	
}
    4f08:	ff 91       	pop	r31
    4f0a:	ef 91       	pop	r30
    4f0c:	bf 91       	pop	r27
    4f0e:	af 91       	pop	r26
    4f10:	9f 91       	pop	r25
    4f12:	8f 91       	pop	r24
    4f14:	7f 91       	pop	r23
    4f16:	6f 91       	pop	r22
    4f18:	5f 91       	pop	r21
    4f1a:	4f 91       	pop	r20
    4f1c:	3f 91       	pop	r19
    4f1e:	2f 91       	pop	r18
    4f20:	0f 90       	pop	r0
    4f22:	0b be       	out	0x3b, r0	; 59
    4f24:	0f 90       	pop	r0
    4f26:	0f be       	out	0x3f, r0	; 63
    4f28:	0f 90       	pop	r0
    4f2a:	1f 90       	pop	r1
    4f2c:	18 95       	reti

00004f2e <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4f2e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f32:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4f34:	84 b7       	in	r24, 0x34	; 52
    4f36:	87 7f       	andi	r24, 0xF7	; 247
    4f38:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4f3a:	e0 e6       	ldi	r30, 0x60	; 96
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	80 81       	ld	r24, Z
    4f40:	88 61       	ori	r24, 0x18	; 24
    4f42:	80 83       	st	Z, r24
WDTCSR = 0;
    4f44:	10 82       	st	Z, r1
nrk_int_enable();
    4f46:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <nrk_int_enable>

00004f4a <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4f4a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f4e:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4f50:	84 b7       	in	r24, 0x34	; 52
    4f52:	87 7f       	andi	r24, 0xF7	; 247
    4f54:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4f56:	e0 e6       	ldi	r30, 0x60	; 96
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	80 81       	ld	r24, Z
    4f5c:	88 61       	ori	r24, 0x18	; 24
    4f5e:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4f60:	8d e0       	ldi	r24, 0x0D	; 13
    4f62:	80 83       	st	Z, r24
nrk_int_enable();
    4f64:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <nrk_int_enable>

00004f68 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4f68:	04 b6       	in	r0, 0x34	; 52
    4f6a:	03 fc       	sbrc	r0, 3
    4f6c:	02 c0       	rjmp	.+4      	; 0x4f72 <nrk_watchdog_check+0xa>
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	08 95       	ret
return NRK_ERROR;
    4f72:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f74:	08 95       	ret

00004f76 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f76:	a8 95       	wdr
    4f78:	08 95       	ret

00004f7a <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    4f7a:	08 95       	ret

00004f7c <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4f7c:	83 b7       	in	r24, 0x33	; 51
    4f7e:	81 7f       	andi	r24, 0xF1	; 241
    4f80:	86 60       	ori	r24, 0x06	; 6
    4f82:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4f84:	83 b7       	in	r24, 0x33	; 51
    4f86:	81 60       	ori	r24, 0x01	; 1
    4f88:	83 bf       	out	0x33, r24	; 51
    4f8a:	88 95       	sleep
    4f8c:	83 b7       	in	r24, 0x33	; 51
    4f8e:	8e 7f       	andi	r24, 0xFE	; 254
    4f90:	83 bf       	out	0x33, r24	; 51
    4f92:	08 95       	ret

00004f94 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4f94:	83 b7       	in	r24, 0x33	; 51
    4f96:	81 7f       	andi	r24, 0xF1	; 241
    4f98:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4f9a:	83 b7       	in	r24, 0x33	; 51
    4f9c:	81 60       	ori	r24, 0x01	; 1
    4f9e:	83 bf       	out	0x33, r24	; 51
    4fa0:	88 95       	sleep
    4fa2:	83 b7       	in	r24, 0x33	; 51
    4fa4:	8e 7f       	andi	r24, 0xFE	; 254
    4fa6:	83 bf       	out	0x33, r24	; 51
    4fa8:	08 95       	ret

00004faa <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4faa:	fc 01       	movw	r30, r24
    4fac:	76 83       	std	Z+6, r23	; 0x06
    4fae:	65 83       	std	Z+5, r22	; 0x05
    4fb0:	08 95       	ret

00004fb2 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4fb2:	ef 92       	push	r14
    4fb4:	ff 92       	push	r15
    4fb6:	0f 93       	push	r16
    4fb8:	1f 93       	push	r17
    4fba:	cf 93       	push	r28
    4fbc:	df 93       	push	r29
    4fbe:	ec 01       	movw	r28, r24
    4fc0:	8b 01       	movw	r16, r22
    4fc2:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4fc4:	40 32       	cpi	r20, 0x20	; 32
    4fc6:	51 05       	cpc	r21, r1
    4fc8:	18 f4       	brcc	.+6      	; 0x4fd0 <nrk_task_set_stk+0x1e>
    4fca:	81 e1       	ldi	r24, 0x11	; 17
    4fcc:	0e 94 57 15 	call	0x2aae	; 0x2aae <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4fd0:	a7 01       	movw	r20, r14
    4fd2:	41 50       	subi	r20, 0x01	; 1
    4fd4:	51 09       	sbc	r21, r1
    4fd6:	40 0f       	add	r20, r16
    4fd8:	51 1f       	adc	r21, r17
    4fda:	5a 83       	std	Y+2, r21	; 0x02
    4fdc:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    4fde:	1c 83       	std	Y+4, r17	; 0x04
    4fe0:	0b 83       	std	Y+3, r16	; 0x03

}
    4fe2:	df 91       	pop	r29
    4fe4:	cf 91       	pop	r28
    4fe6:	1f 91       	pop	r17
    4fe8:	0f 91       	pop	r16
    4fea:	ff 90       	pop	r15
    4fec:	ef 90       	pop	r14
    4fee:	08 95       	ret

00004ff0 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4ff0:	25 e5       	ldi	r18, 0x55	; 85
    4ff2:	fa 01       	movw	r30, r20
    4ff4:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4ff6:	fb 01       	movw	r30, r22
    4ff8:	32 97       	sbiw	r30, 0x02	; 2
    4ffa:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4ffc:	fb 01       	movw	r30, r22
    4ffe:	31 97       	sbiw	r30, 0x01	; 1
    5000:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5002:	fb 01       	movw	r30, r22
    5004:	34 97       	sbiw	r30, 0x04	; 4
    5006:	11 82       	std	Z+1, r1	; 0x01
    5008:	10 82       	st	Z, r1
    *(--stk) = 0;       
    500a:	fb 01       	movw	r30, r22
    500c:	36 97       	sbiw	r30, 0x06	; 6
    500e:	11 82       	std	Z+1, r1	; 0x01
    5010:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5012:	fb 01       	movw	r30, r22
    5014:	38 97       	sbiw	r30, 0x08	; 8
    5016:	11 82       	std	Z+1, r1	; 0x01
    5018:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    501a:	fb 01       	movw	r30, r22
    501c:	3a 97       	sbiw	r30, 0x0a	; 10
    501e:	11 82       	std	Z+1, r1	; 0x01
    5020:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5022:	fb 01       	movw	r30, r22
    5024:	3c 97       	sbiw	r30, 0x0c	; 12
    5026:	11 82       	std	Z+1, r1	; 0x01
    5028:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    502a:	fb 01       	movw	r30, r22
    502c:	3e 97       	sbiw	r30, 0x0e	; 14
    502e:	11 82       	std	Z+1, r1	; 0x01
    5030:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5032:	fb 01       	movw	r30, r22
    5034:	70 97       	sbiw	r30, 0x10	; 16
    5036:	11 82       	std	Z+1, r1	; 0x01
    5038:	10 82       	st	Z, r1
    *(--stk) = 0; 
    503a:	fb 01       	movw	r30, r22
    503c:	72 97       	sbiw	r30, 0x12	; 18
    503e:	11 82       	std	Z+1, r1	; 0x01
    5040:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5042:	fb 01       	movw	r30, r22
    5044:	74 97       	sbiw	r30, 0x14	; 20
    5046:	11 82       	std	Z+1, r1	; 0x01
    5048:	10 82       	st	Z, r1
    *(--stk) = 0; 
    504a:	fb 01       	movw	r30, r22
    504c:	76 97       	sbiw	r30, 0x16	; 22
    504e:	11 82       	std	Z+1, r1	; 0x01
    5050:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5052:	fb 01       	movw	r30, r22
    5054:	78 97       	sbiw	r30, 0x18	; 24
    5056:	11 82       	std	Z+1, r1	; 0x01
    5058:	10 82       	st	Z, r1
    *(--stk) = 0; 
    505a:	fb 01       	movw	r30, r22
    505c:	7a 97       	sbiw	r30, 0x1a	; 26
    505e:	11 82       	std	Z+1, r1	; 0x01
    5060:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5062:	fb 01       	movw	r30, r22
    5064:	7c 97       	sbiw	r30, 0x1c	; 28
    5066:	11 82       	std	Z+1, r1	; 0x01
    5068:	10 82       	st	Z, r1
    *(--stk) = 0; 
    506a:	fb 01       	movw	r30, r22
    506c:	7e 97       	sbiw	r30, 0x1e	; 30
    506e:	11 82       	std	Z+1, r1	; 0x01
    5070:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5072:	fb 01       	movw	r30, r22
    5074:	b0 97       	sbiw	r30, 0x20	; 32
    5076:	11 82       	std	Z+1, r1	; 0x01
    5078:	10 82       	st	Z, r1
    *(--stk) = 0; 
    507a:	fb 01       	movw	r30, r22
    507c:	b2 97       	sbiw	r30, 0x22	; 34
    507e:	11 82       	std	Z+1, r1	; 0x01
    5080:	10 82       	st	Z, r1
    *(--stk) = 0;
    5082:	cb 01       	movw	r24, r22
    5084:	84 97       	sbiw	r24, 0x24	; 36
    5086:	fc 01       	movw	r30, r24
    5088:	11 82       	std	Z+1, r1	; 0x01
    508a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    508c:	08 95       	ret

0000508e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    508e:	85 e5       	ldi	r24, 0x55	; 85
    5090:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5094:	ee ef       	ldi	r30, 0xFE	; 254
    5096:	f1 e4       	ldi	r31, 0x41	; 65
    5098:	f0 93 83 06 	sts	0x0683, r31
    509c:	e0 93 82 06 	sts	0x0682, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    50a0:	8e ea       	ldi	r24, 0xAE	; 174
    50a2:	94 e1       	ldi	r25, 0x14	; 20
    50a4:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    50a6:	80 93 ff 41 	sts	0x41FF, r24
    50aa:	08 95       	ret

000050ac <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    50ac:	8e ea       	ldi	r24, 0xAE	; 174
    50ae:	94 e1       	ldi	r25, 0x14	; 20
    50b0:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    50b4:	80 93 ff 41 	sts	0x41FF, r24
    50b8:	08 95       	ret

000050ba <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    50ba:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_nrk_setup_timer>
  nrk_int_enable();  
    50be:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <nrk_int_enable>

000050c2 <nrk_start_high_ready_task>:
    50c2:	a0 91 71 05 	lds	r26, 0x0571
    50c6:	b0 91 72 05 	lds	r27, 0x0572
    50ca:	cd 91       	ld	r28, X+
    50cc:	cd bf       	out	0x3d, r28	; 61
    50ce:	dd 91       	ld	r29, X+
    50d0:	de bf       	out	0x3e, r29	; 62
    50d2:	ff 91       	pop	r31
    50d4:	ef 91       	pop	r30
    50d6:	df 91       	pop	r29
    50d8:	cf 91       	pop	r28
    50da:	bf 91       	pop	r27
    50dc:	af 91       	pop	r26
    50de:	9f 91       	pop	r25
    50e0:	8f 91       	pop	r24
    50e2:	7f 91       	pop	r23
    50e4:	6f 91       	pop	r22
    50e6:	5f 91       	pop	r21
    50e8:	4f 91       	pop	r20
    50ea:	3f 91       	pop	r19
    50ec:	2f 91       	pop	r18
    50ee:	1f 91       	pop	r17
    50f0:	0f 91       	pop	r16
    50f2:	ff 90       	pop	r15
    50f4:	ef 90       	pop	r14
    50f6:	df 90       	pop	r13
    50f8:	cf 90       	pop	r12
    50fa:	bf 90       	pop	r11
    50fc:	af 90       	pop	r10
    50fe:	9f 90       	pop	r9
    5100:	8f 90       	pop	r8
    5102:	7f 90       	pop	r7
    5104:	6f 90       	pop	r6
    5106:	5f 90       	pop	r5
    5108:	4f 90       	pop	r4
    510a:	3f 90       	pop	r3
    510c:	2f 90       	pop	r2
    510e:	1f 90       	pop	r1
    5110:	0f 90       	pop	r0
    5112:	0f be       	out	0x3f, r0	; 63
    5114:	0f 90       	pop	r0
    5116:	18 95       	reti

00005118 <main>:
    5118:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <nrk_setup_ports>
    511c:	80 e1       	ldi	r24, 0x10	; 16
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	0e 94 00 12 	call	0x2400	; 0x2400 <nrk_setup_uart>
    5124:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <nrk_init>
    5128:	80 e0       	ldi	r24, 0x00	; 0
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    5138:	82 e0       	ldi	r24, 0x02	; 2
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    5140:	83 e0       	ldi	r24, 0x03	; 3
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	0e 94 97 11 	call	0x232e	; 0x232e <nrk_led_clr>
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	a9 01       	movw	r20, r18
    514e:	60 e0       	ldi	r22, 0x00	; 0
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	cb 01       	movw	r24, r22
    5154:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <nrk_time_set>
    5158:	0e 94 42 08 	call	0x1084	; 0x1084 <bmac_task_config>
    515c:	0e 94 3a 04 	call	0x874	; 0x874 <nrk_create_taskset>
    5160:	0e 94 a0 13 	call	0x2740	; 0x2740 <nrk_start>
    5164:	80 e0       	ldi	r24, 0x00	; 0
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	08 95       	ret

0000516a <vfprintf>:
    516a:	6f 92       	push	r6
    516c:	7f 92       	push	r7
    516e:	9f 92       	push	r9
    5170:	af 92       	push	r10
    5172:	bf 92       	push	r11
    5174:	cf 92       	push	r12
    5176:	df 92       	push	r13
    5178:	ef 92       	push	r14
    517a:	ff 92       	push	r15
    517c:	0f 93       	push	r16
    517e:	1f 93       	push	r17
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
    5188:	2c 97       	sbiw	r28, 0x0c	; 12
    518a:	0f b6       	in	r0, 0x3f	; 63
    518c:	f8 94       	cli
    518e:	de bf       	out	0x3e, r29	; 62
    5190:	0f be       	out	0x3f, r0	; 63
    5192:	cd bf       	out	0x3d, r28	; 61
    5194:	8c 01       	movw	r16, r24
    5196:	7b 01       	movw	r14, r22
    5198:	3a 01       	movw	r6, r20
    519a:	fc 01       	movw	r30, r24
    519c:	17 82       	std	Z+7, r1	; 0x07
    519e:	16 82       	std	Z+6, r1	; 0x06
    51a0:	83 81       	ldd	r24, Z+3	; 0x03
    51a2:	81 ff       	sbrs	r24, 1
    51a4:	19 c1       	rjmp	.+562    	; 0x53d8 <vfprintf+0x26e>
    51a6:	ce 01       	movw	r24, r28
    51a8:	01 96       	adiw	r24, 0x01	; 1
    51aa:	5c 01       	movw	r10, r24
    51ac:	f8 01       	movw	r30, r16
    51ae:	d3 80       	ldd	r13, Z+3	; 0x03
    51b0:	f7 01       	movw	r30, r14
    51b2:	d3 fc       	sbrc	r13, 3
    51b4:	25 91       	lpm	r18, Z+
    51b6:	d3 fe       	sbrs	r13, 3
    51b8:	21 91       	ld	r18, Z+
    51ba:	7f 01       	movw	r14, r30
    51bc:	22 23       	and	r18, r18
    51be:	09 f4       	brne	.+2      	; 0x51c2 <vfprintf+0x58>
    51c0:	07 c1       	rjmp	.+526    	; 0x53d0 <vfprintf+0x266>
    51c2:	25 32       	cpi	r18, 0x25	; 37
    51c4:	49 f4       	brne	.+18     	; 0x51d8 <vfprintf+0x6e>
    51c6:	d3 fc       	sbrc	r13, 3
    51c8:	25 91       	lpm	r18, Z+
    51ca:	d3 fe       	sbrs	r13, 3
    51cc:	21 91       	ld	r18, Z+
    51ce:	7f 01       	movw	r14, r30
    51d0:	25 32       	cpi	r18, 0x25	; 37
    51d2:	11 f0       	breq	.+4      	; 0x51d8 <vfprintf+0x6e>
    51d4:	91 2c       	mov	r9, r1
    51d6:	1b c0       	rjmp	.+54     	; 0x520e <vfprintf+0xa4>
    51d8:	b8 01       	movw	r22, r16
    51da:	82 2f       	mov	r24, r18
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    51e2:	63 01       	movw	r12, r6
    51e4:	36 01       	movw	r6, r12
    51e6:	e2 cf       	rjmp	.-60     	; 0x51ac <vfprintf+0x42>
    51e8:	22 23       	and	r18, r18
    51ea:	09 f4       	brne	.+2      	; 0x51ee <vfprintf+0x84>
    51ec:	f1 c0       	rjmp	.+482    	; 0x53d0 <vfprintf+0x266>
    51ee:	62 2f       	mov	r22, r18
    51f0:	70 e0       	ldi	r23, 0x00	; 0
    51f2:	81 e9       	ldi	r24, 0x91	; 145
    51f4:	95 e0       	ldi	r25, 0x05	; 5
    51f6:	2c 87       	std	Y+12, r18	; 0x0c
    51f8:	0e 94 40 2b 	call	0x5680	; 0x5680 <strchr_P>
    51fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    51fe:	89 2b       	or	r24, r25
    5200:	49 f0       	breq	.+18     	; 0x5214 <vfprintf+0xaa>
    5202:	f7 01       	movw	r30, r14
    5204:	d3 fc       	sbrc	r13, 3
    5206:	25 91       	lpm	r18, Z+
    5208:	d3 fe       	sbrs	r13, 3
    520a:	21 91       	ld	r18, Z+
    520c:	7f 01       	movw	r14, r30
    520e:	97 fe       	sbrs	r9, 7
    5210:	eb cf       	rjmp	.-42     	; 0x51e8 <vfprintf+0x7e>
    5212:	0c c0       	rjmp	.+24     	; 0x522c <vfprintf+0xc2>
    5214:	23 32       	cpi	r18, 0x23	; 35
    5216:	21 f4       	brne	.+8      	; 0x5220 <vfprintf+0xb6>
    5218:	f9 2d       	mov	r31, r9
    521a:	f0 61       	ori	r31, 0x10	; 16
    521c:	9f 2e       	mov	r9, r31
    521e:	f1 cf       	rjmp	.-30     	; 0x5202 <vfprintf+0x98>
    5220:	2c 36       	cpi	r18, 0x6C	; 108
    5222:	39 f4       	brne	.+14     	; 0x5232 <vfprintf+0xc8>
    5224:	29 2d       	mov	r18, r9
    5226:	20 68       	ori	r18, 0x80	; 128
    5228:	92 2e       	mov	r9, r18
    522a:	eb cf       	rjmp	.-42     	; 0x5202 <vfprintf+0x98>
    522c:	22 23       	and	r18, r18
    522e:	09 f4       	brne	.+2      	; 0x5232 <vfprintf+0xc8>
    5230:	cf c0       	rjmp	.+414    	; 0x53d0 <vfprintf+0x266>
    5232:	62 2f       	mov	r22, r18
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	8a e8       	ldi	r24, 0x8A	; 138
    5238:	95 e0       	ldi	r25, 0x05	; 5
    523a:	2c 87       	std	Y+12, r18	; 0x0c
    523c:	0e 94 40 2b 	call	0x5680	; 0x5680 <strchr_P>
    5240:	2c 85       	ldd	r18, Y+12	; 0x0c
    5242:	89 2b       	or	r24, r25
    5244:	41 f0       	breq	.+16     	; 0x5256 <vfprintf+0xec>
    5246:	63 01       	movw	r12, r6
    5248:	f4 e0       	ldi	r31, 0x04	; 4
    524a:	cf 0e       	add	r12, r31
    524c:	d1 1c       	adc	r13, r1
    524e:	b8 01       	movw	r22, r16
    5250:	8f e3       	ldi	r24, 0x3F	; 63
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	12 c0       	rjmp	.+36     	; 0x527a <vfprintf+0x110>
    5256:	23 36       	cpi	r18, 0x63	; 99
    5258:	41 f0       	breq	.+16     	; 0x526a <vfprintf+0x100>
    525a:	23 37       	cpi	r18, 0x73	; 115
    525c:	89 f0       	breq	.+34     	; 0x5280 <vfprintf+0x116>
    525e:	23 35       	cpi	r18, 0x53	; 83
    5260:	21 f5       	brne	.+72     	; 0x52aa <vfprintf+0x140>
    5262:	f9 2d       	mov	r31, r9
    5264:	f1 60       	ori	r31, 0x01	; 1
    5266:	9f 2e       	mov	r9, r31
    5268:	0b c0       	rjmp	.+22     	; 0x5280 <vfprintf+0x116>
    526a:	63 01       	movw	r12, r6
    526c:	22 e0       	ldi	r18, 0x02	; 2
    526e:	c2 0e       	add	r12, r18
    5270:	d1 1c       	adc	r13, r1
    5272:	b8 01       	movw	r22, r16
    5274:	f3 01       	movw	r30, r6
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    527e:	b2 cf       	rjmp	.-156    	; 0x51e4 <vfprintf+0x7a>
    5280:	63 01       	movw	r12, r6
    5282:	22 e0       	ldi	r18, 0x02	; 2
    5284:	c2 0e       	add	r12, r18
    5286:	d1 1c       	adc	r13, r1
    5288:	f3 01       	movw	r30, r6
    528a:	60 80       	ld	r6, Z
    528c:	71 80       	ldd	r7, Z+1	; 0x01
    528e:	f3 01       	movw	r30, r6
    5290:	90 fc       	sbrc	r9, 0
    5292:	85 91       	lpm	r24, Z+
    5294:	90 fe       	sbrs	r9, 0
    5296:	81 91       	ld	r24, Z+
    5298:	3f 01       	movw	r6, r30
    529a:	88 23       	and	r24, r24
    529c:	09 f4       	brne	.+2      	; 0x52a0 <vfprintf+0x136>
    529e:	a2 cf       	rjmp	.-188    	; 0x51e4 <vfprintf+0x7a>
    52a0:	b8 01       	movw	r22, r16
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    52a8:	f2 cf       	rjmp	.-28     	; 0x528e <vfprintf+0x124>
    52aa:	24 36       	cpi	r18, 0x64	; 100
    52ac:	11 f0       	breq	.+4      	; 0x52b2 <vfprintf+0x148>
    52ae:	29 36       	cpi	r18, 0x69	; 105
    52b0:	39 f5       	brne	.+78     	; 0x5300 <vfprintf+0x196>
    52b2:	63 01       	movw	r12, r6
    52b4:	97 fe       	sbrs	r9, 7
    52b6:	09 c0       	rjmp	.+18     	; 0x52ca <vfprintf+0x160>
    52b8:	f4 e0       	ldi	r31, 0x04	; 4
    52ba:	cf 0e       	add	r12, r31
    52bc:	d1 1c       	adc	r13, r1
    52be:	f3 01       	movw	r30, r6
    52c0:	60 81       	ld	r22, Z
    52c2:	71 81       	ldd	r23, Z+1	; 0x01
    52c4:	82 81       	ldd	r24, Z+2	; 0x02
    52c6:	93 81       	ldd	r25, Z+3	; 0x03
    52c8:	0a c0       	rjmp	.+20     	; 0x52de <vfprintf+0x174>
    52ca:	f2 e0       	ldi	r31, 0x02	; 2
    52cc:	cf 0e       	add	r12, r31
    52ce:	d1 1c       	adc	r13, r1
    52d0:	f3 01       	movw	r30, r6
    52d2:	60 81       	ld	r22, Z
    52d4:	71 81       	ldd	r23, Z+1	; 0x01
    52d6:	88 27       	eor	r24, r24
    52d8:	77 fd       	sbrc	r23, 7
    52da:	80 95       	com	r24
    52dc:	98 2f       	mov	r25, r24
    52de:	f9 2d       	mov	r31, r9
    52e0:	ff 7e       	andi	r31, 0xEF	; 239
    52e2:	9f 2e       	mov	r9, r31
    52e4:	97 ff       	sbrs	r25, 7
    52e6:	09 c0       	rjmp	.+18     	; 0x52fa <vfprintf+0x190>
    52e8:	90 95       	com	r25
    52ea:	80 95       	com	r24
    52ec:	70 95       	com	r23
    52ee:	61 95       	neg	r22
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	8f 4f       	sbci	r24, 0xFF	; 255
    52f4:	9f 4f       	sbci	r25, 0xFF	; 255
    52f6:	f0 64       	ori	r31, 0x40	; 64
    52f8:	9f 2e       	mov	r9, r31
    52fa:	2a e0       	ldi	r18, 0x0A	; 10
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	38 c0       	rjmp	.+112    	; 0x5370 <vfprintf+0x206>
    5300:	20 37       	cpi	r18, 0x70	; 112
    5302:	a1 f0       	breq	.+40     	; 0x532c <vfprintf+0x1c2>
    5304:	40 f4       	brcc	.+16     	; 0x5316 <vfprintf+0x1ac>
    5306:	28 35       	cpi	r18, 0x58	; 88
    5308:	d1 f0       	breq	.+52     	; 0x533e <vfprintf+0x1d4>
    530a:	2f 36       	cpi	r18, 0x6F	; 111
    530c:	09 f0       	breq	.+2      	; 0x5310 <vfprintf+0x1a6>
    530e:	60 c0       	rjmp	.+192    	; 0x53d0 <vfprintf+0x266>
    5310:	28 e0       	ldi	r18, 0x08	; 8
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	19 c0       	rjmp	.+50     	; 0x5348 <vfprintf+0x1de>
    5316:	25 37       	cpi	r18, 0x75	; 117
    5318:	19 f0       	breq	.+6      	; 0x5320 <vfprintf+0x1b6>
    531a:	28 37       	cpi	r18, 0x78	; 120
    531c:	51 f0       	breq	.+20     	; 0x5332 <vfprintf+0x1c8>
    531e:	58 c0       	rjmp	.+176    	; 0x53d0 <vfprintf+0x266>
    5320:	29 2d       	mov	r18, r9
    5322:	2f 7e       	andi	r18, 0xEF	; 239
    5324:	92 2e       	mov	r9, r18
    5326:	2a e0       	ldi	r18, 0x0A	; 10
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	0e c0       	rjmp	.+28     	; 0x5348 <vfprintf+0x1de>
    532c:	89 2d       	mov	r24, r9
    532e:	80 61       	ori	r24, 0x10	; 16
    5330:	98 2e       	mov	r9, r24
    5332:	99 2d       	mov	r25, r9
    5334:	94 62       	ori	r25, 0x24	; 36
    5336:	99 2e       	mov	r9, r25
    5338:	20 e1       	ldi	r18, 0x10	; 16
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	05 c0       	rjmp	.+10     	; 0x5348 <vfprintf+0x1de>
    533e:	e9 2d       	mov	r30, r9
    5340:	e4 60       	ori	r30, 0x04	; 4
    5342:	9e 2e       	mov	r9, r30
    5344:	20 e1       	ldi	r18, 0x10	; 16
    5346:	32 e0       	ldi	r19, 0x02	; 2
    5348:	63 01       	movw	r12, r6
    534a:	97 fe       	sbrs	r9, 7
    534c:	09 c0       	rjmp	.+18     	; 0x5360 <vfprintf+0x1f6>
    534e:	f4 e0       	ldi	r31, 0x04	; 4
    5350:	cf 0e       	add	r12, r31
    5352:	d1 1c       	adc	r13, r1
    5354:	f3 01       	movw	r30, r6
    5356:	60 81       	ld	r22, Z
    5358:	71 81       	ldd	r23, Z+1	; 0x01
    535a:	82 81       	ldd	r24, Z+2	; 0x02
    535c:	93 81       	ldd	r25, Z+3	; 0x03
    535e:	08 c0       	rjmp	.+16     	; 0x5370 <vfprintf+0x206>
    5360:	f2 e0       	ldi	r31, 0x02	; 2
    5362:	cf 0e       	add	r12, r31
    5364:	d1 1c       	adc	r13, r1
    5366:	f3 01       	movw	r30, r6
    5368:	60 81       	ld	r22, Z
    536a:	71 81       	ldd	r23, Z+1	; 0x01
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	a5 01       	movw	r20, r10
    5372:	0e 94 45 2c 	call	0x588a	; 0x588a <__ultoa_invert>
    5376:	78 2e       	mov	r7, r24
    5378:	7a 18       	sub	r7, r10
    537a:	96 fe       	sbrs	r9, 6
    537c:	05 c0       	rjmp	.+10     	; 0x5388 <vfprintf+0x21e>
    537e:	b8 01       	movw	r22, r16
    5380:	8d e2       	ldi	r24, 0x2D	; 45
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    5388:	94 fe       	sbrs	r9, 4
    538a:	16 c0       	rjmp	.+44     	; 0x53b8 <vfprintf+0x24e>
    538c:	fe 01       	movw	r30, r28
    538e:	e7 0d       	add	r30, r7
    5390:	f1 1d       	adc	r31, r1
    5392:	80 81       	ld	r24, Z
    5394:	80 33       	cpi	r24, 0x30	; 48
    5396:	81 f0       	breq	.+32     	; 0x53b8 <vfprintf+0x24e>
    5398:	b8 01       	movw	r22, r16
    539a:	80 e3       	ldi	r24, 0x30	; 48
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    53a2:	92 fe       	sbrs	r9, 2
    53a4:	09 c0       	rjmp	.+18     	; 0x53b8 <vfprintf+0x24e>
    53a6:	29 2d       	mov	r18, r9
    53a8:	20 72       	andi	r18, 0x20	; 32
    53aa:	82 2f       	mov	r24, r18
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	b8 01       	movw	r22, r16
    53b0:	88 5a       	subi	r24, 0xA8	; 168
    53b2:	9f 4f       	sbci	r25, 0xFF	; 255
    53b4:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    53b8:	7a 94       	dec	r7
    53ba:	f5 01       	movw	r30, r10
    53bc:	e7 0d       	add	r30, r7
    53be:	f1 1d       	adc	r31, r1
    53c0:	80 81       	ld	r24, Z
    53c2:	b8 01       	movw	r22, r16
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	0e 94 9f 2b 	call	0x573e	; 0x573e <fputc>
    53ca:	71 10       	cpse	r7, r1
    53cc:	f5 cf       	rjmp	.-22     	; 0x53b8 <vfprintf+0x24e>
    53ce:	0a cf       	rjmp	.-492    	; 0x51e4 <vfprintf+0x7a>
    53d0:	f8 01       	movw	r30, r16
    53d2:	86 81       	ldd	r24, Z+6	; 0x06
    53d4:	97 81       	ldd	r25, Z+7	; 0x07
    53d6:	02 c0       	rjmp	.+4      	; 0x53dc <vfprintf+0x272>
    53d8:	8f ef       	ldi	r24, 0xFF	; 255
    53da:	9f ef       	ldi	r25, 0xFF	; 255
    53dc:	2c 96       	adiw	r28, 0x0c	; 12
    53de:	0f b6       	in	r0, 0x3f	; 63
    53e0:	f8 94       	cli
    53e2:	de bf       	out	0x3e, r29	; 62
    53e4:	0f be       	out	0x3f, r0	; 63
    53e6:	cd bf       	out	0x3d, r28	; 61
    53e8:	df 91       	pop	r29
    53ea:	cf 91       	pop	r28
    53ec:	1f 91       	pop	r17
    53ee:	0f 91       	pop	r16
    53f0:	ff 90       	pop	r15
    53f2:	ef 90       	pop	r14
    53f4:	df 90       	pop	r13
    53f6:	cf 90       	pop	r12
    53f8:	bf 90       	pop	r11
    53fa:	af 90       	pop	r10
    53fc:	9f 90       	pop	r9
    53fe:	7f 90       	pop	r7
    5400:	6f 90       	pop	r6
    5402:	08 95       	ret

00005404 <__muluhisi3>:
    5404:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__umulhisi3>
    5408:	a5 9f       	mul	r26, r21
    540a:	90 0d       	add	r25, r0
    540c:	b4 9f       	mul	r27, r20
    540e:	90 0d       	add	r25, r0
    5410:	a4 9f       	mul	r26, r20
    5412:	80 0d       	add	r24, r0
    5414:	91 1d       	adc	r25, r1
    5416:	11 24       	eor	r1, r1
    5418:	08 95       	ret

0000541a <__mulsi3>:
    541a:	db 01       	movw	r26, r22
    541c:	8f 93       	push	r24
    541e:	9f 93       	push	r25
    5420:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    5424:	bf 91       	pop	r27
    5426:	af 91       	pop	r26
    5428:	a2 9f       	mul	r26, r18
    542a:	80 0d       	add	r24, r0
    542c:	91 1d       	adc	r25, r1
    542e:	a3 9f       	mul	r26, r19
    5430:	90 0d       	add	r25, r0
    5432:	b2 9f       	mul	r27, r18
    5434:	90 0d       	add	r25, r0
    5436:	11 24       	eor	r1, r1
    5438:	08 95       	ret

0000543a <__udivmodhi4>:
    543a:	aa 1b       	sub	r26, r26
    543c:	bb 1b       	sub	r27, r27
    543e:	51 e1       	ldi	r21, 0x11	; 17
    5440:	07 c0       	rjmp	.+14     	; 0x5450 <__udivmodhi4_ep>

00005442 <__udivmodhi4_loop>:
    5442:	aa 1f       	adc	r26, r26
    5444:	bb 1f       	adc	r27, r27
    5446:	a6 17       	cp	r26, r22
    5448:	b7 07       	cpc	r27, r23
    544a:	10 f0       	brcs	.+4      	; 0x5450 <__udivmodhi4_ep>
    544c:	a6 1b       	sub	r26, r22
    544e:	b7 0b       	sbc	r27, r23

00005450 <__udivmodhi4_ep>:
    5450:	88 1f       	adc	r24, r24
    5452:	99 1f       	adc	r25, r25
    5454:	5a 95       	dec	r21
    5456:	a9 f7       	brne	.-22     	; 0x5442 <__udivmodhi4_loop>
    5458:	80 95       	com	r24
    545a:	90 95       	com	r25
    545c:	bc 01       	movw	r22, r24
    545e:	cd 01       	movw	r24, r26
    5460:	08 95       	ret

00005462 <__divmodhi4>:
    5462:	97 fb       	bst	r25, 7
    5464:	07 2e       	mov	r0, r23
    5466:	16 f4       	brtc	.+4      	; 0x546c <__divmodhi4+0xa>
    5468:	00 94       	com	r0
    546a:	07 d0       	rcall	.+14     	; 0x547a <__divmodhi4_neg1>
    546c:	77 fd       	sbrc	r23, 7
    546e:	09 d0       	rcall	.+18     	; 0x5482 <__divmodhi4_neg2>
    5470:	0e 94 1d 2a 	call	0x543a	; 0x543a <__udivmodhi4>
    5474:	07 fc       	sbrc	r0, 7
    5476:	05 d0       	rcall	.+10     	; 0x5482 <__divmodhi4_neg2>
    5478:	3e f4       	brtc	.+14     	; 0x5488 <__divmodhi4_exit>

0000547a <__divmodhi4_neg1>:
    547a:	90 95       	com	r25
    547c:	81 95       	neg	r24
    547e:	9f 4f       	sbci	r25, 0xFF	; 255
    5480:	08 95       	ret

00005482 <__divmodhi4_neg2>:
    5482:	70 95       	com	r23
    5484:	61 95       	neg	r22
    5486:	7f 4f       	sbci	r23, 0xFF	; 255

00005488 <__divmodhi4_exit>:
    5488:	08 95       	ret

0000548a <__udivmodsi4>:
    548a:	a1 e2       	ldi	r26, 0x21	; 33
    548c:	1a 2e       	mov	r1, r26
    548e:	aa 1b       	sub	r26, r26
    5490:	bb 1b       	sub	r27, r27
    5492:	fd 01       	movw	r30, r26
    5494:	0d c0       	rjmp	.+26     	; 0x54b0 <__udivmodsi4_ep>

00005496 <__udivmodsi4_loop>:
    5496:	aa 1f       	adc	r26, r26
    5498:	bb 1f       	adc	r27, r27
    549a:	ee 1f       	adc	r30, r30
    549c:	ff 1f       	adc	r31, r31
    549e:	a2 17       	cp	r26, r18
    54a0:	b3 07       	cpc	r27, r19
    54a2:	e4 07       	cpc	r30, r20
    54a4:	f5 07       	cpc	r31, r21
    54a6:	20 f0       	brcs	.+8      	; 0x54b0 <__udivmodsi4_ep>
    54a8:	a2 1b       	sub	r26, r18
    54aa:	b3 0b       	sbc	r27, r19
    54ac:	e4 0b       	sbc	r30, r20
    54ae:	f5 0b       	sbc	r31, r21

000054b0 <__udivmodsi4_ep>:
    54b0:	66 1f       	adc	r22, r22
    54b2:	77 1f       	adc	r23, r23
    54b4:	88 1f       	adc	r24, r24
    54b6:	99 1f       	adc	r25, r25
    54b8:	1a 94       	dec	r1
    54ba:	69 f7       	brne	.-38     	; 0x5496 <__udivmodsi4_loop>
    54bc:	60 95       	com	r22
    54be:	70 95       	com	r23
    54c0:	80 95       	com	r24
    54c2:	90 95       	com	r25
    54c4:	9b 01       	movw	r18, r22
    54c6:	ac 01       	movw	r20, r24
    54c8:	bd 01       	movw	r22, r26
    54ca:	cf 01       	movw	r24, r30
    54cc:	08 95       	ret

000054ce <__umoddi3>:
    54ce:	68 94       	set
    54d0:	01 c0       	rjmp	.+2      	; 0x54d4 <__udivdi3_umoddi3>

000054d2 <__udivdi3>:
    54d2:	e8 94       	clt

000054d4 <__udivdi3_umoddi3>:
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	cf 93       	push	r28
    54da:	df 93       	push	r29
    54dc:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__udivmod64>
    54e0:	df 91       	pop	r29
    54e2:	cf 91       	pop	r28
    54e4:	9f 90       	pop	r9
    54e6:	8f 90       	pop	r8
    54e8:	08 95       	ret

000054ea <__udivmod64>:
    54ea:	88 24       	eor	r8, r8
    54ec:	99 24       	eor	r9, r9
    54ee:	f4 01       	movw	r30, r8
    54f0:	e4 01       	movw	r28, r8
    54f2:	b0 e4       	ldi	r27, 0x40	; 64
    54f4:	9f 93       	push	r25
    54f6:	aa 27       	eor	r26, r26
    54f8:	9a 15       	cp	r25, r10
    54fa:	8b 04       	cpc	r8, r11
    54fc:	9c 04       	cpc	r9, r12
    54fe:	ed 05       	cpc	r30, r13
    5500:	fe 05       	cpc	r31, r14
    5502:	cf 05       	cpc	r28, r15
    5504:	d0 07       	cpc	r29, r16
    5506:	a1 07       	cpc	r26, r17
    5508:	98 f4       	brcc	.+38     	; 0x5530 <__udivmod64+0x46>
    550a:	ad 2f       	mov	r26, r29
    550c:	dc 2f       	mov	r29, r28
    550e:	cf 2f       	mov	r28, r31
    5510:	fe 2f       	mov	r31, r30
    5512:	e9 2d       	mov	r30, r9
    5514:	98 2c       	mov	r9, r8
    5516:	89 2e       	mov	r8, r25
    5518:	98 2f       	mov	r25, r24
    551a:	87 2f       	mov	r24, r23
    551c:	76 2f       	mov	r23, r22
    551e:	65 2f       	mov	r22, r21
    5520:	54 2f       	mov	r21, r20
    5522:	43 2f       	mov	r20, r19
    5524:	32 2f       	mov	r19, r18
    5526:	22 27       	eor	r18, r18
    5528:	b8 50       	subi	r27, 0x08	; 8
    552a:	31 f7       	brne	.-52     	; 0x54f8 <__udivmod64+0xe>
    552c:	bf 91       	pop	r27
    552e:	27 c0       	rjmp	.+78     	; 0x557e <__udivmod64+0x94>
    5530:	1b 2e       	mov	r1, r27
    5532:	bf 91       	pop	r27
    5534:	bb 27       	eor	r27, r27
    5536:	22 0f       	add	r18, r18
    5538:	33 1f       	adc	r19, r19
    553a:	44 1f       	adc	r20, r20
    553c:	55 1f       	adc	r21, r21
    553e:	66 1f       	adc	r22, r22
    5540:	77 1f       	adc	r23, r23
    5542:	88 1f       	adc	r24, r24
    5544:	99 1f       	adc	r25, r25
    5546:	88 1c       	adc	r8, r8
    5548:	99 1c       	adc	r9, r9
    554a:	ee 1f       	adc	r30, r30
    554c:	ff 1f       	adc	r31, r31
    554e:	cc 1f       	adc	r28, r28
    5550:	dd 1f       	adc	r29, r29
    5552:	aa 1f       	adc	r26, r26
    5554:	bb 1f       	adc	r27, r27
    5556:	8a 14       	cp	r8, r10
    5558:	9b 04       	cpc	r9, r11
    555a:	ec 05       	cpc	r30, r12
    555c:	fd 05       	cpc	r31, r13
    555e:	ce 05       	cpc	r28, r14
    5560:	df 05       	cpc	r29, r15
    5562:	a0 07       	cpc	r26, r16
    5564:	b1 07       	cpc	r27, r17
    5566:	48 f0       	brcs	.+18     	; 0x557a <__udivmod64+0x90>
    5568:	8a 18       	sub	r8, r10
    556a:	9b 08       	sbc	r9, r11
    556c:	ec 09       	sbc	r30, r12
    556e:	fd 09       	sbc	r31, r13
    5570:	ce 09       	sbc	r28, r14
    5572:	df 09       	sbc	r29, r15
    5574:	a0 0b       	sbc	r26, r16
    5576:	b1 0b       	sbc	r27, r17
    5578:	21 60       	ori	r18, 0x01	; 1
    557a:	1a 94       	dec	r1
    557c:	e1 f6       	brne	.-72     	; 0x5536 <__udivmod64+0x4c>
    557e:	2e f4       	brtc	.+10     	; 0x558a <__udivmod64+0xa0>
    5580:	94 01       	movw	r18, r8
    5582:	af 01       	movw	r20, r30
    5584:	be 01       	movw	r22, r28
    5586:	cd 01       	movw	r24, r26
    5588:	00 0c       	add	r0, r0
    558a:	08 95       	ret

0000558c <__tablejump2__>:
    558c:	ee 0f       	add	r30, r30
    558e:	ff 1f       	adc	r31, r31

00005590 <__tablejump__>:
    5590:	05 90       	lpm	r0, Z+
    5592:	f4 91       	lpm	r31, Z
    5594:	e0 2d       	mov	r30, r0
    5596:	09 94       	ijmp

00005598 <__adddi3>:
    5598:	2a 0d       	add	r18, r10
    559a:	3b 1d       	adc	r19, r11
    559c:	4c 1d       	adc	r20, r12
    559e:	5d 1d       	adc	r21, r13
    55a0:	6e 1d       	adc	r22, r14
    55a2:	7f 1d       	adc	r23, r15
    55a4:	80 1f       	adc	r24, r16
    55a6:	91 1f       	adc	r25, r17
    55a8:	08 95       	ret

000055aa <__umulhisi3>:
    55aa:	a2 9f       	mul	r26, r18
    55ac:	b0 01       	movw	r22, r0
    55ae:	b3 9f       	mul	r27, r19
    55b0:	c0 01       	movw	r24, r0
    55b2:	a3 9f       	mul	r26, r19
    55b4:	70 0d       	add	r23, r0
    55b6:	81 1d       	adc	r24, r1
    55b8:	11 24       	eor	r1, r1
    55ba:	91 1d       	adc	r25, r1
    55bc:	b2 9f       	mul	r27, r18
    55be:	70 0d       	add	r23, r0
    55c0:	81 1d       	adc	r24, r1
    55c2:	11 24       	eor	r1, r1
    55c4:	91 1d       	adc	r25, r1
    55c6:	08 95       	ret

000055c8 <do_rand>:
    55c8:	8f 92       	push	r8
    55ca:	9f 92       	push	r9
    55cc:	af 92       	push	r10
    55ce:	bf 92       	push	r11
    55d0:	cf 92       	push	r12
    55d2:	df 92       	push	r13
    55d4:	ef 92       	push	r14
    55d6:	ff 92       	push	r15
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	ec 01       	movw	r28, r24
    55de:	68 81       	ld	r22, Y
    55e0:	79 81       	ldd	r23, Y+1	; 0x01
    55e2:	8a 81       	ldd	r24, Y+2	; 0x02
    55e4:	9b 81       	ldd	r25, Y+3	; 0x03
    55e6:	61 15       	cp	r22, r1
    55e8:	71 05       	cpc	r23, r1
    55ea:	81 05       	cpc	r24, r1
    55ec:	91 05       	cpc	r25, r1
    55ee:	21 f4       	brne	.+8      	; 0x55f8 <do_rand+0x30>
    55f0:	64 e2       	ldi	r22, 0x24	; 36
    55f2:	79 ed       	ldi	r23, 0xD9	; 217
    55f4:	8b e5       	ldi	r24, 0x5B	; 91
    55f6:	97 e0       	ldi	r25, 0x07	; 7
    55f8:	2d e1       	ldi	r18, 0x1D	; 29
    55fa:	33 ef       	ldi	r19, 0xF3	; 243
    55fc:	41 e0       	ldi	r20, 0x01	; 1
    55fe:	50 e0       	ldi	r21, 0x00	; 0
    5600:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__divmodsi4>
    5604:	49 01       	movw	r8, r18
    5606:	5a 01       	movw	r10, r20
    5608:	9b 01       	movw	r18, r22
    560a:	ac 01       	movw	r20, r24
    560c:	a7 ea       	ldi	r26, 0xA7	; 167
    560e:	b1 e4       	ldi	r27, 0x41	; 65
    5610:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    5614:	6b 01       	movw	r12, r22
    5616:	7c 01       	movw	r14, r24
    5618:	ac ee       	ldi	r26, 0xEC	; 236
    561a:	b4 ef       	ldi	r27, 0xF4	; 244
    561c:	a5 01       	movw	r20, r10
    561e:	94 01       	movw	r18, r8
    5620:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <__mulohisi3>
    5624:	c6 0e       	add	r12, r22
    5626:	d7 1e       	adc	r13, r23
    5628:	e8 1e       	adc	r14, r24
    562a:	f9 1e       	adc	r15, r25
    562c:	f7 fe       	sbrs	r15, 7
    562e:	06 c0       	rjmp	.+12     	; 0x563c <do_rand+0x74>
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	c8 1a       	sub	r12, r24
    5634:	d1 08       	sbc	r13, r1
    5636:	e1 08       	sbc	r14, r1
    5638:	80 e8       	ldi	r24, 0x80	; 128
    563a:	f8 0a       	sbc	r15, r24
    563c:	c8 82       	st	Y, r12
    563e:	d9 82       	std	Y+1, r13	; 0x01
    5640:	ea 82       	std	Y+2, r14	; 0x02
    5642:	fb 82       	std	Y+3, r15	; 0x03
    5644:	c6 01       	movw	r24, r12
    5646:	9f 77       	andi	r25, 0x7F	; 127
    5648:	df 91       	pop	r29
    564a:	cf 91       	pop	r28
    564c:	ff 90       	pop	r15
    564e:	ef 90       	pop	r14
    5650:	df 90       	pop	r13
    5652:	cf 90       	pop	r12
    5654:	bf 90       	pop	r11
    5656:	af 90       	pop	r10
    5658:	9f 90       	pop	r9
    565a:	8f 90       	pop	r8
    565c:	08 95       	ret

0000565e <rand_r>:
    565e:	0c 94 e4 2a 	jmp	0x55c8	; 0x55c8 <do_rand>

00005662 <rand>:
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	92 e0       	ldi	r25, 0x02	; 2
    5666:	0c 94 e4 2a 	jmp	0x55c8	; 0x55c8 <do_rand>

0000566a <srand>:
    566a:	a0 e0       	ldi	r26, 0x00	; 0
    566c:	b0 e0       	ldi	r27, 0x00	; 0
    566e:	80 93 00 02 	sts	0x0200, r24
    5672:	90 93 01 02 	sts	0x0201, r25
    5676:	a0 93 02 02 	sts	0x0202, r26
    567a:	b0 93 03 02 	sts	0x0203, r27
    567e:	08 95       	ret

00005680 <strchr_P>:
    5680:	fc 01       	movw	r30, r24
    5682:	05 90       	lpm	r0, Z+
    5684:	06 16       	cp	r0, r22
    5686:	21 f0       	breq	.+8      	; 0x5690 <strchr_P+0x10>
    5688:	00 20       	and	r0, r0
    568a:	d9 f7       	brne	.-10     	; 0x5682 <strchr_P+0x2>
    568c:	c0 01       	movw	r24, r0
    568e:	08 95       	ret
    5690:	31 97       	sbiw	r30, 0x01	; 1
    5692:	cf 01       	movw	r24, r30
    5694:	08 95       	ret

00005696 <memcpy>:
    5696:	fb 01       	movw	r30, r22
    5698:	dc 01       	movw	r26, r24
    569a:	02 c0       	rjmp	.+4      	; 0x56a0 <memcpy+0xa>
    569c:	01 90       	ld	r0, Z+
    569e:	0d 92       	st	X+, r0
    56a0:	41 50       	subi	r20, 0x01	; 1
    56a2:	50 40       	sbci	r21, 0x00	; 0
    56a4:	d8 f7       	brcc	.-10     	; 0x569c <memcpy+0x6>
    56a6:	08 95       	ret

000056a8 <fdevopen>:
    56a8:	0f 93       	push	r16
    56aa:	1f 93       	push	r17
    56ac:	cf 93       	push	r28
    56ae:	df 93       	push	r29
    56b0:	ec 01       	movw	r28, r24
    56b2:	8b 01       	movw	r16, r22
    56b4:	00 97       	sbiw	r24, 0x00	; 0
    56b6:	31 f4       	brne	.+12     	; 0x56c4 <fdevopen+0x1c>
    56b8:	61 15       	cp	r22, r1
    56ba:	71 05       	cpc	r23, r1
    56bc:	19 f4       	brne	.+6      	; 0x56c4 <fdevopen+0x1c>
    56be:	80 e0       	ldi	r24, 0x00	; 0
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	38 c0       	rjmp	.+112    	; 0x5734 <fdevopen+0x8c>
    56c4:	6e e0       	ldi	r22, 0x0E	; 14
    56c6:	70 e0       	ldi	r23, 0x00	; 0
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	0e 94 b9 2c 	call	0x5972	; 0x5972 <calloc>
    56d0:	fc 01       	movw	r30, r24
    56d2:	00 97       	sbiw	r24, 0x00	; 0
    56d4:	a1 f3       	breq	.-24     	; 0x56be <fdevopen+0x16>
    56d6:	80 e8       	ldi	r24, 0x80	; 128
    56d8:	83 83       	std	Z+3, r24	; 0x03
    56da:	01 15       	cp	r16, r1
    56dc:	11 05       	cpc	r17, r1
    56de:	71 f0       	breq	.+28     	; 0x56fc <fdevopen+0x54>
    56e0:	13 87       	std	Z+11, r17	; 0x0b
    56e2:	02 87       	std	Z+10, r16	; 0x0a
    56e4:	81 e8       	ldi	r24, 0x81	; 129
    56e6:	83 83       	std	Z+3, r24	; 0x03
    56e8:	80 91 4b 08 	lds	r24, 0x084B
    56ec:	90 91 4c 08 	lds	r25, 0x084C
    56f0:	89 2b       	or	r24, r25
    56f2:	21 f4       	brne	.+8      	; 0x56fc <fdevopen+0x54>
    56f4:	f0 93 4c 08 	sts	0x084C, r31
    56f8:	e0 93 4b 08 	sts	0x084B, r30
    56fc:	20 97       	sbiw	r28, 0x00	; 0
    56fe:	c9 f0       	breq	.+50     	; 0x5732 <fdevopen+0x8a>
    5700:	d1 87       	std	Z+9, r29	; 0x09
    5702:	c0 87       	std	Z+8, r28	; 0x08
    5704:	83 81       	ldd	r24, Z+3	; 0x03
    5706:	82 60       	ori	r24, 0x02	; 2
    5708:	83 83       	std	Z+3, r24	; 0x03
    570a:	80 91 4d 08 	lds	r24, 0x084D
    570e:	90 91 4e 08 	lds	r25, 0x084E
    5712:	89 2b       	or	r24, r25
    5714:	71 f4       	brne	.+28     	; 0x5732 <fdevopen+0x8a>
    5716:	f0 93 4e 08 	sts	0x084E, r31
    571a:	e0 93 4d 08 	sts	0x084D, r30
    571e:	80 91 4f 08 	lds	r24, 0x084F
    5722:	90 91 50 08 	lds	r25, 0x0850
    5726:	89 2b       	or	r24, r25
    5728:	21 f4       	brne	.+8      	; 0x5732 <fdevopen+0x8a>
    572a:	f0 93 50 08 	sts	0x0850, r31
    572e:	e0 93 4f 08 	sts	0x084F, r30
    5732:	cf 01       	movw	r24, r30
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	1f 91       	pop	r17
    573a:	0f 91       	pop	r16
    573c:	08 95       	ret

0000573e <fputc>:
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	18 2f       	mov	r17, r24
    5748:	09 2f       	mov	r16, r25
    574a:	eb 01       	movw	r28, r22
    574c:	8b 81       	ldd	r24, Y+3	; 0x03
    574e:	81 fd       	sbrc	r24, 1
    5750:	03 c0       	rjmp	.+6      	; 0x5758 <fputc+0x1a>
    5752:	8f ef       	ldi	r24, 0xFF	; 255
    5754:	9f ef       	ldi	r25, 0xFF	; 255
    5756:	20 c0       	rjmp	.+64     	; 0x5798 <fputc+0x5a>
    5758:	82 ff       	sbrs	r24, 2
    575a:	10 c0       	rjmp	.+32     	; 0x577c <fputc+0x3e>
    575c:	4e 81       	ldd	r20, Y+6	; 0x06
    575e:	5f 81       	ldd	r21, Y+7	; 0x07
    5760:	2c 81       	ldd	r18, Y+4	; 0x04
    5762:	3d 81       	ldd	r19, Y+5	; 0x05
    5764:	42 17       	cp	r20, r18
    5766:	53 07       	cpc	r21, r19
    5768:	7c f4       	brge	.+30     	; 0x5788 <fputc+0x4a>
    576a:	e8 81       	ld	r30, Y
    576c:	f9 81       	ldd	r31, Y+1	; 0x01
    576e:	9f 01       	movw	r18, r30
    5770:	2f 5f       	subi	r18, 0xFF	; 255
    5772:	3f 4f       	sbci	r19, 0xFF	; 255
    5774:	39 83       	std	Y+1, r19	; 0x01
    5776:	28 83       	st	Y, r18
    5778:	10 83       	st	Z, r17
    577a:	06 c0       	rjmp	.+12     	; 0x5788 <fputc+0x4a>
    577c:	e8 85       	ldd	r30, Y+8	; 0x08
    577e:	f9 85       	ldd	r31, Y+9	; 0x09
    5780:	81 2f       	mov	r24, r17
    5782:	09 95       	icall
    5784:	89 2b       	or	r24, r25
    5786:	29 f7       	brne	.-54     	; 0x5752 <fputc+0x14>
    5788:	2e 81       	ldd	r18, Y+6	; 0x06
    578a:	3f 81       	ldd	r19, Y+7	; 0x07
    578c:	2f 5f       	subi	r18, 0xFF	; 255
    578e:	3f 4f       	sbci	r19, 0xFF	; 255
    5790:	3f 83       	std	Y+7, r19	; 0x07
    5792:	2e 83       	std	Y+6, r18	; 0x06
    5794:	81 2f       	mov	r24, r17
    5796:	90 2f       	mov	r25, r16
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	1f 91       	pop	r17
    579e:	0f 91       	pop	r16
    57a0:	08 95       	ret

000057a2 <printf>:
    57a2:	cf 93       	push	r28
    57a4:	df 93       	push	r29
    57a6:	cd b7       	in	r28, 0x3d	; 61
    57a8:	de b7       	in	r29, 0x3e	; 62
    57aa:	fe 01       	movw	r30, r28
    57ac:	35 96       	adiw	r30, 0x05	; 5
    57ae:	61 91       	ld	r22, Z+
    57b0:	71 91       	ld	r23, Z+
    57b2:	af 01       	movw	r20, r30
    57b4:	80 91 4d 08 	lds	r24, 0x084D
    57b8:	90 91 4e 08 	lds	r25, 0x084E
    57bc:	0e 94 b5 28 	call	0x516a	; 0x516a <vfprintf>
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	08 95       	ret

000057c6 <putchar>:
    57c6:	60 91 4d 08 	lds	r22, 0x084D
    57ca:	70 91 4e 08 	lds	r23, 0x084E
    57ce:	0c 94 9f 2b 	jmp	0x573e	; 0x573e <fputc>

000057d2 <puts>:
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	e0 91 4d 08 	lds	r30, 0x084D
    57de:	f0 91 4e 08 	lds	r31, 0x084E
    57e2:	23 81       	ldd	r18, Z+3	; 0x03
    57e4:	21 ff       	sbrs	r18, 1
    57e6:	1b c0       	rjmp	.+54     	; 0x581e <puts+0x4c>
    57e8:	ec 01       	movw	r28, r24
    57ea:	00 e0       	ldi	r16, 0x00	; 0
    57ec:	10 e0       	ldi	r17, 0x00	; 0
    57ee:	89 91       	ld	r24, Y+
    57f0:	60 91 4d 08 	lds	r22, 0x084D
    57f4:	70 91 4e 08 	lds	r23, 0x084E
    57f8:	db 01       	movw	r26, r22
    57fa:	18 96       	adiw	r26, 0x08	; 8
    57fc:	ed 91       	ld	r30, X+
    57fe:	fc 91       	ld	r31, X
    5800:	19 97       	sbiw	r26, 0x09	; 9
    5802:	88 23       	and	r24, r24
    5804:	31 f0       	breq	.+12     	; 0x5812 <puts+0x40>
    5806:	09 95       	icall
    5808:	89 2b       	or	r24, r25
    580a:	89 f3       	breq	.-30     	; 0x57ee <puts+0x1c>
    580c:	0f ef       	ldi	r16, 0xFF	; 255
    580e:	1f ef       	ldi	r17, 0xFF	; 255
    5810:	ee cf       	rjmp	.-36     	; 0x57ee <puts+0x1c>
    5812:	8a e0       	ldi	r24, 0x0A	; 10
    5814:	09 95       	icall
    5816:	89 2b       	or	r24, r25
    5818:	11 f4       	brne	.+4      	; 0x581e <puts+0x4c>
    581a:	c8 01       	movw	r24, r16
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <puts+0x50>
    581e:	8f ef       	ldi	r24, 0xFF	; 255
    5820:	9f ef       	ldi	r25, 0xFF	; 255
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	1f 91       	pop	r17
    5828:	0f 91       	pop	r16
    582a:	08 95       	ret

0000582c <sprintf>:
    582c:	0f 93       	push	r16
    582e:	1f 93       	push	r17
    5830:	cf 93       	push	r28
    5832:	df 93       	push	r29
    5834:	cd b7       	in	r28, 0x3d	; 61
    5836:	de b7       	in	r29, 0x3e	; 62
    5838:	2e 97       	sbiw	r28, 0x0e	; 14
    583a:	0f b6       	in	r0, 0x3f	; 63
    583c:	f8 94       	cli
    583e:	de bf       	out	0x3e, r29	; 62
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	cd bf       	out	0x3d, r28	; 61
    5844:	0d 89       	ldd	r16, Y+21	; 0x15
    5846:	1e 89       	ldd	r17, Y+22	; 0x16
    5848:	86 e0       	ldi	r24, 0x06	; 6
    584a:	8c 83       	std	Y+4, r24	; 0x04
    584c:	1a 83       	std	Y+2, r17	; 0x02
    584e:	09 83       	std	Y+1, r16	; 0x01
    5850:	8f ef       	ldi	r24, 0xFF	; 255
    5852:	9f e7       	ldi	r25, 0x7F	; 127
    5854:	9e 83       	std	Y+6, r25	; 0x06
    5856:	8d 83       	std	Y+5, r24	; 0x05
    5858:	ae 01       	movw	r20, r28
    585a:	47 5e       	subi	r20, 0xE7	; 231
    585c:	5f 4f       	sbci	r21, 0xFF	; 255
    585e:	6f 89       	ldd	r22, Y+23	; 0x17
    5860:	78 8d       	ldd	r23, Y+24	; 0x18
    5862:	ce 01       	movw	r24, r28
    5864:	01 96       	adiw	r24, 0x01	; 1
    5866:	0e 94 b5 28 	call	0x516a	; 0x516a <vfprintf>
    586a:	ef 81       	ldd	r30, Y+7	; 0x07
    586c:	f8 85       	ldd	r31, Y+8	; 0x08
    586e:	e0 0f       	add	r30, r16
    5870:	f1 1f       	adc	r31, r17
    5872:	10 82       	st	Z, r1
    5874:	2e 96       	adiw	r28, 0x0e	; 14
    5876:	0f b6       	in	r0, 0x3f	; 63
    5878:	f8 94       	cli
    587a:	de bf       	out	0x3e, r29	; 62
    587c:	0f be       	out	0x3f, r0	; 63
    587e:	cd bf       	out	0x3d, r28	; 61
    5880:	df 91       	pop	r29
    5882:	cf 91       	pop	r28
    5884:	1f 91       	pop	r17
    5886:	0f 91       	pop	r16
    5888:	08 95       	ret

0000588a <__ultoa_invert>:
    588a:	fa 01       	movw	r30, r20
    588c:	aa 27       	eor	r26, r26
    588e:	28 30       	cpi	r18, 0x08	; 8
    5890:	51 f1       	breq	.+84     	; 0x58e6 <__ultoa_invert+0x5c>
    5892:	20 31       	cpi	r18, 0x10	; 16
    5894:	81 f1       	breq	.+96     	; 0x58f6 <__ultoa_invert+0x6c>
    5896:	e8 94       	clt
    5898:	6f 93       	push	r22
    589a:	6e 7f       	andi	r22, 0xFE	; 254
    589c:	6e 5f       	subi	r22, 0xFE	; 254
    589e:	7f 4f       	sbci	r23, 0xFF	; 255
    58a0:	8f 4f       	sbci	r24, 0xFF	; 255
    58a2:	9f 4f       	sbci	r25, 0xFF	; 255
    58a4:	af 4f       	sbci	r26, 0xFF	; 255
    58a6:	b1 e0       	ldi	r27, 0x01	; 1
    58a8:	3e d0       	rcall	.+124    	; 0x5926 <__ultoa_invert+0x9c>
    58aa:	b4 e0       	ldi	r27, 0x04	; 4
    58ac:	3c d0       	rcall	.+120    	; 0x5926 <__ultoa_invert+0x9c>
    58ae:	67 0f       	add	r22, r23
    58b0:	78 1f       	adc	r23, r24
    58b2:	89 1f       	adc	r24, r25
    58b4:	9a 1f       	adc	r25, r26
    58b6:	a1 1d       	adc	r26, r1
    58b8:	68 0f       	add	r22, r24
    58ba:	79 1f       	adc	r23, r25
    58bc:	8a 1f       	adc	r24, r26
    58be:	91 1d       	adc	r25, r1
    58c0:	a1 1d       	adc	r26, r1
    58c2:	6a 0f       	add	r22, r26
    58c4:	71 1d       	adc	r23, r1
    58c6:	81 1d       	adc	r24, r1
    58c8:	91 1d       	adc	r25, r1
    58ca:	a1 1d       	adc	r26, r1
    58cc:	20 d0       	rcall	.+64     	; 0x590e <__ultoa_invert+0x84>
    58ce:	09 f4       	brne	.+2      	; 0x58d2 <__ultoa_invert+0x48>
    58d0:	68 94       	set
    58d2:	3f 91       	pop	r19
    58d4:	2a e0       	ldi	r18, 0x0A	; 10
    58d6:	26 9f       	mul	r18, r22
    58d8:	11 24       	eor	r1, r1
    58da:	30 19       	sub	r19, r0
    58dc:	30 5d       	subi	r19, 0xD0	; 208
    58de:	31 93       	st	Z+, r19
    58e0:	de f6       	brtc	.-74     	; 0x5898 <__ultoa_invert+0xe>
    58e2:	cf 01       	movw	r24, r30
    58e4:	08 95       	ret
    58e6:	46 2f       	mov	r20, r22
    58e8:	47 70       	andi	r20, 0x07	; 7
    58ea:	40 5d       	subi	r20, 0xD0	; 208
    58ec:	41 93       	st	Z+, r20
    58ee:	b3 e0       	ldi	r27, 0x03	; 3
    58f0:	0f d0       	rcall	.+30     	; 0x5910 <__ultoa_invert+0x86>
    58f2:	c9 f7       	brne	.-14     	; 0x58e6 <__ultoa_invert+0x5c>
    58f4:	f6 cf       	rjmp	.-20     	; 0x58e2 <__ultoa_invert+0x58>
    58f6:	46 2f       	mov	r20, r22
    58f8:	4f 70       	andi	r20, 0x0F	; 15
    58fa:	40 5d       	subi	r20, 0xD0	; 208
    58fc:	4a 33       	cpi	r20, 0x3A	; 58
    58fe:	18 f0       	brcs	.+6      	; 0x5906 <__ultoa_invert+0x7c>
    5900:	49 5d       	subi	r20, 0xD9	; 217
    5902:	31 fd       	sbrc	r19, 1
    5904:	40 52       	subi	r20, 0x20	; 32
    5906:	41 93       	st	Z+, r20
    5908:	02 d0       	rcall	.+4      	; 0x590e <__ultoa_invert+0x84>
    590a:	a9 f7       	brne	.-22     	; 0x58f6 <__ultoa_invert+0x6c>
    590c:	ea cf       	rjmp	.-44     	; 0x58e2 <__ultoa_invert+0x58>
    590e:	b4 e0       	ldi	r27, 0x04	; 4
    5910:	a6 95       	lsr	r26
    5912:	97 95       	ror	r25
    5914:	87 95       	ror	r24
    5916:	77 95       	ror	r23
    5918:	67 95       	ror	r22
    591a:	ba 95       	dec	r27
    591c:	c9 f7       	brne	.-14     	; 0x5910 <__ultoa_invert+0x86>
    591e:	00 97       	sbiw	r24, 0x00	; 0
    5920:	61 05       	cpc	r22, r1
    5922:	71 05       	cpc	r23, r1
    5924:	08 95       	ret
    5926:	9b 01       	movw	r18, r22
    5928:	ac 01       	movw	r20, r24
    592a:	0a 2e       	mov	r0, r26
    592c:	06 94       	lsr	r0
    592e:	57 95       	ror	r21
    5930:	47 95       	ror	r20
    5932:	37 95       	ror	r19
    5934:	27 95       	ror	r18
    5936:	ba 95       	dec	r27
    5938:	c9 f7       	brne	.-14     	; 0x592c <__ultoa_invert+0xa2>
    593a:	62 0f       	add	r22, r18
    593c:	73 1f       	adc	r23, r19
    593e:	84 1f       	adc	r24, r20
    5940:	95 1f       	adc	r25, r21
    5942:	a0 1d       	adc	r26, r0
    5944:	08 95       	ret

00005946 <__eerd_byte_m128rfa1>:
    5946:	f9 99       	sbic	0x1f, 1	; 31
    5948:	fe cf       	rjmp	.-4      	; 0x5946 <__eerd_byte_m128rfa1>
    594a:	92 bd       	out	0x22, r25	; 34
    594c:	81 bd       	out	0x21, r24	; 33
    594e:	f8 9a       	sbi	0x1f, 0	; 31
    5950:	99 27       	eor	r25, r25
    5952:	80 b5       	in	r24, 0x20	; 32
    5954:	08 95       	ret

00005956 <__eewr_byte_m128rfa1>:
    5956:	26 2f       	mov	r18, r22

00005958 <__eewr_r18_m128rfa1>:
    5958:	f9 99       	sbic	0x1f, 1	; 31
    595a:	fe cf       	rjmp	.-4      	; 0x5958 <__eewr_r18_m128rfa1>
    595c:	1f ba       	out	0x1f, r1	; 31
    595e:	92 bd       	out	0x22, r25	; 34
    5960:	81 bd       	out	0x21, r24	; 33
    5962:	20 bd       	out	0x20, r18	; 32
    5964:	0f b6       	in	r0, 0x3f	; 63
    5966:	f8 94       	cli
    5968:	fa 9a       	sbi	0x1f, 2	; 31
    596a:	f9 9a       	sbi	0x1f, 1	; 31
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	01 96       	adiw	r24, 0x01	; 1
    5970:	08 95       	ret

00005972 <calloc>:
    5972:	0f 93       	push	r16
    5974:	1f 93       	push	r17
    5976:	cf 93       	push	r28
    5978:	df 93       	push	r29
    597a:	86 9f       	mul	r24, r22
    597c:	80 01       	movw	r16, r0
    597e:	87 9f       	mul	r24, r23
    5980:	10 0d       	add	r17, r0
    5982:	96 9f       	mul	r25, r22
    5984:	10 0d       	add	r17, r0
    5986:	11 24       	eor	r1, r1
    5988:	c8 01       	movw	r24, r16
    598a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <malloc>
    598e:	ec 01       	movw	r28, r24
    5990:	00 97       	sbiw	r24, 0x00	; 0
    5992:	29 f0       	breq	.+10     	; 0x599e <calloc+0x2c>
    5994:	a8 01       	movw	r20, r16
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <memset>
    599e:	ce 01       	movw	r24, r28
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	1f 91       	pop	r17
    59a6:	0f 91       	pop	r16
    59a8:	08 95       	ret

000059aa <malloc>:
    59aa:	cf 93       	push	r28
    59ac:	df 93       	push	r29
    59ae:	82 30       	cpi	r24, 0x02	; 2
    59b0:	91 05       	cpc	r25, r1
    59b2:	10 f4       	brcc	.+4      	; 0x59b8 <malloc+0xe>
    59b4:	82 e0       	ldi	r24, 0x02	; 2
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	e0 91 53 08 	lds	r30, 0x0853
    59bc:	f0 91 54 08 	lds	r31, 0x0854
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	a0 e0       	ldi	r26, 0x00	; 0
    59c6:	b0 e0       	ldi	r27, 0x00	; 0
    59c8:	30 97       	sbiw	r30, 0x00	; 0
    59ca:	39 f1       	breq	.+78     	; 0x5a1a <malloc+0x70>
    59cc:	40 81       	ld	r20, Z
    59ce:	51 81       	ldd	r21, Z+1	; 0x01
    59d0:	48 17       	cp	r20, r24
    59d2:	59 07       	cpc	r21, r25
    59d4:	b8 f0       	brcs	.+46     	; 0x5a04 <malloc+0x5a>
    59d6:	48 17       	cp	r20, r24
    59d8:	59 07       	cpc	r21, r25
    59da:	71 f4       	brne	.+28     	; 0x59f8 <malloc+0x4e>
    59dc:	82 81       	ldd	r24, Z+2	; 0x02
    59de:	93 81       	ldd	r25, Z+3	; 0x03
    59e0:	10 97       	sbiw	r26, 0x00	; 0
    59e2:	29 f0       	breq	.+10     	; 0x59ee <malloc+0x44>
    59e4:	13 96       	adiw	r26, 0x03	; 3
    59e6:	9c 93       	st	X, r25
    59e8:	8e 93       	st	-X, r24
    59ea:	12 97       	sbiw	r26, 0x02	; 2
    59ec:	2c c0       	rjmp	.+88     	; 0x5a46 <malloc+0x9c>
    59ee:	90 93 54 08 	sts	0x0854, r25
    59f2:	80 93 53 08 	sts	0x0853, r24
    59f6:	27 c0       	rjmp	.+78     	; 0x5a46 <malloc+0x9c>
    59f8:	21 15       	cp	r18, r1
    59fa:	31 05       	cpc	r19, r1
    59fc:	31 f0       	breq	.+12     	; 0x5a0a <malloc+0x60>
    59fe:	42 17       	cp	r20, r18
    5a00:	53 07       	cpc	r21, r19
    5a02:	18 f0       	brcs	.+6      	; 0x5a0a <malloc+0x60>
    5a04:	a9 01       	movw	r20, r18
    5a06:	db 01       	movw	r26, r22
    5a08:	01 c0       	rjmp	.+2      	; 0x5a0c <malloc+0x62>
    5a0a:	ef 01       	movw	r28, r30
    5a0c:	9a 01       	movw	r18, r20
    5a0e:	bd 01       	movw	r22, r26
    5a10:	df 01       	movw	r26, r30
    5a12:	02 80       	ldd	r0, Z+2	; 0x02
    5a14:	f3 81       	ldd	r31, Z+3	; 0x03
    5a16:	e0 2d       	mov	r30, r0
    5a18:	d7 cf       	rjmp	.-82     	; 0x59c8 <malloc+0x1e>
    5a1a:	21 15       	cp	r18, r1
    5a1c:	31 05       	cpc	r19, r1
    5a1e:	f9 f0       	breq	.+62     	; 0x5a5e <malloc+0xb4>
    5a20:	28 1b       	sub	r18, r24
    5a22:	39 0b       	sbc	r19, r25
    5a24:	24 30       	cpi	r18, 0x04	; 4
    5a26:	31 05       	cpc	r19, r1
    5a28:	80 f4       	brcc	.+32     	; 0x5a4a <malloc+0xa0>
    5a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a2e:	61 15       	cp	r22, r1
    5a30:	71 05       	cpc	r23, r1
    5a32:	21 f0       	breq	.+8      	; 0x5a3c <malloc+0x92>
    5a34:	fb 01       	movw	r30, r22
    5a36:	93 83       	std	Z+3, r25	; 0x03
    5a38:	82 83       	std	Z+2, r24	; 0x02
    5a3a:	04 c0       	rjmp	.+8      	; 0x5a44 <malloc+0x9a>
    5a3c:	90 93 54 08 	sts	0x0854, r25
    5a40:	80 93 53 08 	sts	0x0853, r24
    5a44:	fe 01       	movw	r30, r28
    5a46:	32 96       	adiw	r30, 0x02	; 2
    5a48:	44 c0       	rjmp	.+136    	; 0x5ad2 <malloc+0x128>
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	e2 0f       	add	r30, r18
    5a4e:	f3 1f       	adc	r31, r19
    5a50:	81 93       	st	Z+, r24
    5a52:	91 93       	st	Z+, r25
    5a54:	22 50       	subi	r18, 0x02	; 2
    5a56:	31 09       	sbc	r19, r1
    5a58:	39 83       	std	Y+1, r19	; 0x01
    5a5a:	28 83       	st	Y, r18
    5a5c:	3a c0       	rjmp	.+116    	; 0x5ad2 <malloc+0x128>
    5a5e:	20 91 51 08 	lds	r18, 0x0851
    5a62:	30 91 52 08 	lds	r19, 0x0852
    5a66:	23 2b       	or	r18, r19
    5a68:	41 f4       	brne	.+16     	; 0x5a7a <malloc+0xd0>
    5a6a:	20 91 06 02 	lds	r18, 0x0206
    5a6e:	30 91 07 02 	lds	r19, 0x0207
    5a72:	30 93 52 08 	sts	0x0852, r19
    5a76:	20 93 51 08 	sts	0x0851, r18
    5a7a:	20 91 04 02 	lds	r18, 0x0204
    5a7e:	30 91 05 02 	lds	r19, 0x0205
    5a82:	21 15       	cp	r18, r1
    5a84:	31 05       	cpc	r19, r1
    5a86:	41 f4       	brne	.+16     	; 0x5a98 <malloc+0xee>
    5a88:	2d b7       	in	r18, 0x3d	; 61
    5a8a:	3e b7       	in	r19, 0x3e	; 62
    5a8c:	40 91 08 02 	lds	r20, 0x0208
    5a90:	50 91 09 02 	lds	r21, 0x0209
    5a94:	24 1b       	sub	r18, r20
    5a96:	35 0b       	sbc	r19, r21
    5a98:	e0 91 51 08 	lds	r30, 0x0851
    5a9c:	f0 91 52 08 	lds	r31, 0x0852
    5aa0:	e2 17       	cp	r30, r18
    5aa2:	f3 07       	cpc	r31, r19
    5aa4:	a0 f4       	brcc	.+40     	; 0x5ace <malloc+0x124>
    5aa6:	2e 1b       	sub	r18, r30
    5aa8:	3f 0b       	sbc	r19, r31
    5aaa:	28 17       	cp	r18, r24
    5aac:	39 07       	cpc	r19, r25
    5aae:	78 f0       	brcs	.+30     	; 0x5ace <malloc+0x124>
    5ab0:	ac 01       	movw	r20, r24
    5ab2:	4e 5f       	subi	r20, 0xFE	; 254
    5ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ab6:	24 17       	cp	r18, r20
    5ab8:	35 07       	cpc	r19, r21
    5aba:	48 f0       	brcs	.+18     	; 0x5ace <malloc+0x124>
    5abc:	4e 0f       	add	r20, r30
    5abe:	5f 1f       	adc	r21, r31
    5ac0:	50 93 52 08 	sts	0x0852, r21
    5ac4:	40 93 51 08 	sts	0x0851, r20
    5ac8:	81 93       	st	Z+, r24
    5aca:	91 93       	st	Z+, r25
    5acc:	02 c0       	rjmp	.+4      	; 0x5ad2 <malloc+0x128>
    5ace:	e0 e0       	ldi	r30, 0x00	; 0
    5ad0:	f0 e0       	ldi	r31, 0x00	; 0
    5ad2:	cf 01       	movw	r24, r30
    5ad4:	df 91       	pop	r29
    5ad6:	cf 91       	pop	r28
    5ad8:	08 95       	ret

00005ada <free>:
    5ada:	cf 93       	push	r28
    5adc:	df 93       	push	r29
    5ade:	00 97       	sbiw	r24, 0x00	; 0
    5ae0:	09 f4       	brne	.+2      	; 0x5ae4 <free+0xa>
    5ae2:	87 c0       	rjmp	.+270    	; 0x5bf2 <free+0x118>
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	32 97       	sbiw	r30, 0x02	; 2
    5ae8:	13 82       	std	Z+3, r1	; 0x03
    5aea:	12 82       	std	Z+2, r1	; 0x02
    5aec:	c0 91 53 08 	lds	r28, 0x0853
    5af0:	d0 91 54 08 	lds	r29, 0x0854
    5af4:	20 97       	sbiw	r28, 0x00	; 0
    5af6:	81 f4       	brne	.+32     	; 0x5b18 <free+0x3e>
    5af8:	20 81       	ld	r18, Z
    5afa:	31 81       	ldd	r19, Z+1	; 0x01
    5afc:	28 0f       	add	r18, r24
    5afe:	39 1f       	adc	r19, r25
    5b00:	80 91 51 08 	lds	r24, 0x0851
    5b04:	90 91 52 08 	lds	r25, 0x0852
    5b08:	82 17       	cp	r24, r18
    5b0a:	93 07       	cpc	r25, r19
    5b0c:	79 f5       	brne	.+94     	; 0x5b6c <free+0x92>
    5b0e:	f0 93 52 08 	sts	0x0852, r31
    5b12:	e0 93 51 08 	sts	0x0851, r30
    5b16:	6d c0       	rjmp	.+218    	; 0x5bf2 <free+0x118>
    5b18:	de 01       	movw	r26, r28
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	ae 17       	cp	r26, r30
    5b20:	bf 07       	cpc	r27, r31
    5b22:	50 f4       	brcc	.+20     	; 0x5b38 <free+0x5e>
    5b24:	12 96       	adiw	r26, 0x02	; 2
    5b26:	4d 91       	ld	r20, X+
    5b28:	5c 91       	ld	r21, X
    5b2a:	13 97       	sbiw	r26, 0x03	; 3
    5b2c:	9d 01       	movw	r18, r26
    5b2e:	41 15       	cp	r20, r1
    5b30:	51 05       	cpc	r21, r1
    5b32:	09 f1       	breq	.+66     	; 0x5b76 <free+0x9c>
    5b34:	da 01       	movw	r26, r20
    5b36:	f3 cf       	rjmp	.-26     	; 0x5b1e <free+0x44>
    5b38:	b3 83       	std	Z+3, r27	; 0x03
    5b3a:	a2 83       	std	Z+2, r26	; 0x02
    5b3c:	40 81       	ld	r20, Z
    5b3e:	51 81       	ldd	r21, Z+1	; 0x01
    5b40:	84 0f       	add	r24, r20
    5b42:	95 1f       	adc	r25, r21
    5b44:	8a 17       	cp	r24, r26
    5b46:	9b 07       	cpc	r25, r27
    5b48:	71 f4       	brne	.+28     	; 0x5b66 <free+0x8c>
    5b4a:	8d 91       	ld	r24, X+
    5b4c:	9c 91       	ld	r25, X
    5b4e:	11 97       	sbiw	r26, 0x01	; 1
    5b50:	84 0f       	add	r24, r20
    5b52:	95 1f       	adc	r25, r21
    5b54:	02 96       	adiw	r24, 0x02	; 2
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	80 83       	st	Z, r24
    5b5a:	12 96       	adiw	r26, 0x02	; 2
    5b5c:	8d 91       	ld	r24, X+
    5b5e:	9c 91       	ld	r25, X
    5b60:	13 97       	sbiw	r26, 0x03	; 3
    5b62:	93 83       	std	Z+3, r25	; 0x03
    5b64:	82 83       	std	Z+2, r24	; 0x02
    5b66:	21 15       	cp	r18, r1
    5b68:	31 05       	cpc	r19, r1
    5b6a:	29 f4       	brne	.+10     	; 0x5b76 <free+0x9c>
    5b6c:	f0 93 54 08 	sts	0x0854, r31
    5b70:	e0 93 53 08 	sts	0x0853, r30
    5b74:	3e c0       	rjmp	.+124    	; 0x5bf2 <free+0x118>
    5b76:	d9 01       	movw	r26, r18
    5b78:	13 96       	adiw	r26, 0x03	; 3
    5b7a:	fc 93       	st	X, r31
    5b7c:	ee 93       	st	-X, r30
    5b7e:	12 97       	sbiw	r26, 0x02	; 2
    5b80:	4d 91       	ld	r20, X+
    5b82:	5d 91       	ld	r21, X+
    5b84:	a4 0f       	add	r26, r20
    5b86:	b5 1f       	adc	r27, r21
    5b88:	ea 17       	cp	r30, r26
    5b8a:	fb 07       	cpc	r31, r27
    5b8c:	79 f4       	brne	.+30     	; 0x5bac <free+0xd2>
    5b8e:	80 81       	ld	r24, Z
    5b90:	91 81       	ldd	r25, Z+1	; 0x01
    5b92:	84 0f       	add	r24, r20
    5b94:	95 1f       	adc	r25, r21
    5b96:	02 96       	adiw	r24, 0x02	; 2
    5b98:	d9 01       	movw	r26, r18
    5b9a:	11 96       	adiw	r26, 0x01	; 1
    5b9c:	9c 93       	st	X, r25
    5b9e:	8e 93       	st	-X, r24
    5ba0:	82 81       	ldd	r24, Z+2	; 0x02
    5ba2:	93 81       	ldd	r25, Z+3	; 0x03
    5ba4:	13 96       	adiw	r26, 0x03	; 3
    5ba6:	9c 93       	st	X, r25
    5ba8:	8e 93       	st	-X, r24
    5baa:	12 97       	sbiw	r26, 0x02	; 2
    5bac:	e0 e0       	ldi	r30, 0x00	; 0
    5bae:	f0 e0       	ldi	r31, 0x00	; 0
    5bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5bb4:	00 97       	sbiw	r24, 0x00	; 0
    5bb6:	19 f0       	breq	.+6      	; 0x5bbe <free+0xe4>
    5bb8:	fe 01       	movw	r30, r28
    5bba:	ec 01       	movw	r28, r24
    5bbc:	f9 cf       	rjmp	.-14     	; 0x5bb0 <free+0xd6>
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	02 96       	adiw	r24, 0x02	; 2
    5bc2:	28 81       	ld	r18, Y
    5bc4:	39 81       	ldd	r19, Y+1	; 0x01
    5bc6:	82 0f       	add	r24, r18
    5bc8:	93 1f       	adc	r25, r19
    5bca:	20 91 51 08 	lds	r18, 0x0851
    5bce:	30 91 52 08 	lds	r19, 0x0852
    5bd2:	28 17       	cp	r18, r24
    5bd4:	39 07       	cpc	r19, r25
    5bd6:	69 f4       	brne	.+26     	; 0x5bf2 <free+0x118>
    5bd8:	30 97       	sbiw	r30, 0x00	; 0
    5bda:	29 f4       	brne	.+10     	; 0x5be6 <free+0x10c>
    5bdc:	10 92 54 08 	sts	0x0854, r1
    5be0:	10 92 53 08 	sts	0x0853, r1
    5be4:	02 c0       	rjmp	.+4      	; 0x5bea <free+0x110>
    5be6:	13 82       	std	Z+3, r1	; 0x03
    5be8:	12 82       	std	Z+2, r1	; 0x02
    5bea:	d0 93 52 08 	sts	0x0852, r29
    5bee:	c0 93 51 08 	sts	0x0851, r28
    5bf2:	df 91       	pop	r29
    5bf4:	cf 91       	pop	r28
    5bf6:	08 95       	ret

00005bf8 <memset>:
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	01 c0       	rjmp	.+2      	; 0x5bfe <memset+0x6>
    5bfc:	6d 93       	st	X+, r22
    5bfe:	41 50       	subi	r20, 0x01	; 1
    5c00:	50 40       	sbci	r21, 0x00	; 0
    5c02:	e0 f7       	brcc	.-8      	; 0x5bfc <memset+0x4>
    5c04:	08 95       	ret

00005c06 <__mulshisi3>:
    5c06:	b7 ff       	sbrs	r27, 7
    5c08:	0c 94 02 2a 	jmp	0x5404	; 0x5404 <__muluhisi3>

00005c0c <__mulohisi3>:
    5c0c:	0e 94 02 2a 	call	0x5404	; 0x5404 <__muluhisi3>
    5c10:	82 1b       	sub	r24, r18
    5c12:	93 0b       	sbc	r25, r19
    5c14:	08 95       	ret

00005c16 <__divmodsi4>:
    5c16:	05 2e       	mov	r0, r21
    5c18:	97 fb       	bst	r25, 7
    5c1a:	1e f4       	brtc	.+6      	; 0x5c22 <__divmodsi4+0xc>
    5c1c:	00 94       	com	r0
    5c1e:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__negsi2>
    5c22:	57 fd       	sbrc	r21, 7
    5c24:	07 d0       	rcall	.+14     	; 0x5c34 <__divmodsi4_neg2>
    5c26:	0e 94 45 2a 	call	0x548a	; 0x548a <__udivmodsi4>
    5c2a:	07 fc       	sbrc	r0, 7
    5c2c:	03 d0       	rcall	.+6      	; 0x5c34 <__divmodsi4_neg2>
    5c2e:	4e f4       	brtc	.+18     	; 0x5c42 <__divmodsi4_exit>
    5c30:	0c 94 22 2e 	jmp	0x5c44	; 0x5c44 <__negsi2>

00005c34 <__divmodsi4_neg2>:
    5c34:	50 95       	com	r21
    5c36:	40 95       	com	r20
    5c38:	30 95       	com	r19
    5c3a:	21 95       	neg	r18
    5c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3e:	4f 4f       	sbci	r20, 0xFF	; 255
    5c40:	5f 4f       	sbci	r21, 0xFF	; 255

00005c42 <__divmodsi4_exit>:
    5c42:	08 95       	ret

00005c44 <__negsi2>:
    5c44:	90 95       	com	r25
    5c46:	80 95       	com	r24
    5c48:	70 95       	com	r23
    5c4a:	61 95       	neg	r22
    5c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c50:	9f 4f       	sbci	r25, 0xFF	; 255
    5c52:	08 95       	ret

00005c54 <_exit>:
    5c54:	f8 94       	cli

00005c56 <__stop_program>:
    5c56:	ff cf       	rjmp	.-2      	; 0x5c56 <__stop_program>
