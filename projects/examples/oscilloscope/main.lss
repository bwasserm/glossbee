
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800200  0000520a  0000529e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000520a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000221  00800358  00800358  000053f6  2**0
                  ALLOC
  3 .stab         00012c00  00000000  00000000  000053f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000918a  00000000  00000000  00017ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00021182  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__ctors_end>
       4:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <__vector_1>
       8:	0c 94 af 22 	jmp	0x455e	; 0x455e <__vector_2>
       c:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__vector_3>
      10:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      14:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      18:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      1c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      20:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      24:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__vector_9>
      28:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      30:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      34:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__vector_13>
      38:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      3c:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__vector_13>
      40:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      44:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      48:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      4c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      50:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      54:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      58:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      5c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      60:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      64:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      68:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      6c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      70:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      74:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      78:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      7c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      80:	0c 94 dd 20 	jmp	0x41ba	; 0x41ba <__vector_32>
      84:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      88:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      8c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      90:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      94:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      98:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      9c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      a0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      a4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      a8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      ac:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      b0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      b4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      b8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      bc:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      c0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      c4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      c8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      cc:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      d0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      d4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      d8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      dc:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      e0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      e4:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_57>
      e8:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_58>
      ec:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_59>
      f0:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_60>
      f4:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_61>
      f8:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_62>
      fc:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_63>
     100:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__vector_64>
     104:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     108:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     10c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     110:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     114:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     118:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     11c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
     120:	61 09       	sbc	r22, r1
     122:	6c 09       	sbc	r22, r12
     124:	77 09       	sbc	r23, r7
     126:	82 09       	sbc	r24, r2
     128:	8d 09       	sbc	r24, r13
     12a:	98 09       	sbc	r25, r8
     12c:	a3 09       	sbc	r26, r3
     12e:	c2 09       	sbc	r28, r2
     130:	ce 09       	sbc	r28, r14
     132:	da 09       	sbc	r29, r10
     134:	e6 09       	sbc	r30, r6
     136:	f2 09       	sbc	r31, r2
     138:	fe 09       	sbc	r31, r14
     13a:	fe 09       	sbc	r31, r14
     13c:	1c 0a       	sbc	r1, r28
     13e:	1e 0a       	sbc	r1, r30
     140:	20 0a       	sbc	r2, r16
     142:	22 0a       	sbc	r2, r18
     144:	24 0a       	sbc	r2, r20
     146:	26 0a       	sbc	r2, r22
     148:	28 0a       	sbc	r2, r24
     14a:	46 0a       	sbc	r4, r22
     14c:	66 0a       	sbc	r6, r22
     14e:	86 0a       	sbc	r8, r22
     150:	a6 0a       	sbc	r10, r22
     152:	c6 0a       	sbc	r12, r22
     154:	e6 0a       	sbc	r14, r22
     156:	06 0b       	sbc	r16, r22
     158:	3c 0b       	sbc	r19, r28
     15a:	48 0b       	sbc	r20, r24
     15c:	54 0b       	sbc	r21, r20
     15e:	60 0b       	sbc	r22, r16
     160:	6c 0b       	sbc	r22, r28
     162:	78 0b       	sbc	r23, r24
     164:	84 0b       	sbc	r24, r20
     166:	9c 0b       	sbc	r25, r28
     168:	a7 0b       	sbc	r26, r23
     16a:	b2 0b       	sbc	r27, r18
     16c:	bd 0b       	sbc	r27, r29
     16e:	c8 0b       	sbc	r28, r24
     170:	d3 0b       	sbc	r29, r19
     172:	de 0b       	sbc	r29, r30
     174:	6b 0f       	add	r22, r27
     176:	6e 0f       	add	r22, r30
     178:	79 0f       	add	r23, r25
     17a:	7e 0f       	add	r23, r30
     17c:	85 0f       	add	r24, r21
     17e:	8e 0f       	add	r24, r30
     180:	91 0f       	add	r25, r17
     182:	96 0f       	add	r25, r22
     184:	9d 0f       	add	r25, r29
     186:	a6 0f       	add	r26, r22
     188:	fd 0f       	add	r31, r29
     18a:	03 10       	cpse	r0, r3
     18c:	06 10       	cpse	r0, r6
     18e:	09 10       	cpse	r0, r9
     190:	0c 10       	cpse	r0, r12
     192:	0f 10       	cpse	r0, r15
     194:	15 10       	cpse	r1, r5
     196:	12 10       	cpse	r1, r2
     198:	18 10       	cpse	r1, r8
     19a:	1b 10       	cpse	r1, r11
     19c:	1e 10       	cpse	r1, r14
     19e:	27 10       	cpse	r2, r7
     1a0:	2a 10       	cpse	r2, r10
     1a2:	2d 10       	cpse	r2, r13
     1a4:	30 10       	cpse	r3, r0
     1a6:	24 10       	cpse	r2, r4
     1a8:	fa 0f       	add	r31, r26
     1aa:	00 10       	cpse	r0, r0
     1ac:	33 10       	cpse	r3, r3
     1ae:	36 10       	cpse	r3, r6
     1b0:	21 10       	cpse	r2, r1
     1b2:	f7 0f       	add	r31, r23

000001b4 <__c.3284>:
     1b4:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     1c4:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

000001d3 <__c.3276>:
     1d3:	46 61 69 6c 65 64 20 74 6f 20 72 65 61 64 20 41     Failed to read A
     1e3:	44 43 0d 0a 00                                      DC...

000001e8 <__c.3274>:
     1e8:	46 61 69 6c 65 64 20 74 6f 20 73 65 74 20 41 44     Failed to set AD
     1f8:	43 20 73 74 61 74 75 73 0d 0a 00                    C status...

00000203 <__c.3272>:
     203:	46 61 69 6c 65 64 20 74 6f 20 6f 70 65 6e 20 41     Failed to open A
     213:	44 43 20 64 72 69 76 65 72 0d 0a 00                 DC driver...

0000021f <__c.3307>:
     21f:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000226 <__c.3304>:
     226:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000235 <__c.3301>:
     235:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000246 <__c.3298>:
     246:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     256:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000261 <__c.3295>:
     261:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     271:	20 53 69 67 6e 61 6c 00                              Signal.

00000279 <__c.3292>:
     279:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     289:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000299 <__c.3289>:
     299:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     2a9:	72 6f 72 00                                         ror.

000002ad <__c.3286>:
     2ad:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000002be <__c.3283>:
     2be:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     2ce:	61 72 74 00                                         art.

000002d2 <__c.3280>:
     2d2:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000002e1 <__c.3277>:
     2e1:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     2f1:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002fc <__c.3274>:
     2fc:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000308 <__c.3271>:
     308:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     318:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     328:	20 6f 6b 3f 00                                       ok?.

0000032d <__c.3268>:
     32d:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     33d:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000034b <__c.3265>:
     34b:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     35b:	72 74 00                                            rt.

0000035e <__c.3262>:
     35e:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     36e:	49 44 00                                            ID.

00000371 <__c.3259>:
     371:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     381:	20 57 61 6b 65 75 70 00                              Wakeup.

00000389 <__c.3256>:
     389:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     399:	6c 61 74 65 64 00                                   lated.

0000039f <__c.3253>:
     39f:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     3af:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000003ba <__c.3250>:
     3ba:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     3ca:	69 6e 74 65 72 00                                   inter.

000003d0 <__c.3247>:
     3d0:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     3e0:	6c 6f 77 00                                         low.

000003e4 <__c.3244>:
     3e4:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     3f4:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     404:	6e 6f 75 67 68 21 00                                nough!.

0000040b <__c.3240>:
     40b:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     41b:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     42b:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     43b:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000447 <__c.3237>:
     447:	29 3a 20 00                                         ): .

0000044b <__c.3235>:
     44b:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000457 <__c.3172>:
     457:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000466 <__c.2103>:
     466:	45 46 47 65 66 67 00                                EFGefg.

0000046d <__c.2097>:
     46d:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

0000047e <__ctors_end>:
     47e:	11 24       	eor	r1, r1
     480:	1f be       	out	0x3f, r1	; 63
     482:	cf ef       	ldi	r28, 0xFF	; 255
     484:	d1 e4       	ldi	r29, 0x41	; 65
     486:	de bf       	out	0x3e, r29	; 62
     488:	cd bf       	out	0x3d, r28	; 61

0000048a <__do_copy_data>:
     48a:	13 e0       	ldi	r17, 0x03	; 3
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	b2 e0       	ldi	r27, 0x02	; 2
     490:	ea e0       	ldi	r30, 0x0A	; 10
     492:	f2 e5       	ldi	r31, 0x52	; 82
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	0b bf       	out	0x3b, r16	; 59
     498:	02 c0       	rjmp	.+4      	; 0x49e <__do_copy_data+0x14>
     49a:	07 90       	elpm	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	a8 35       	cpi	r26, 0x58	; 88
     4a0:	b1 07       	cpc	r27, r17
     4a2:	d9 f7       	brne	.-10     	; 0x49a <__do_copy_data+0x10>

000004a4 <__do_clear_bss>:
     4a4:	15 e0       	ldi	r17, 0x05	; 5
     4a6:	a8 e5       	ldi	r26, 0x58	; 88
     4a8:	b3 e0       	ldi	r27, 0x03	; 3
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <.do_clear_bss_start>

000004ac <.do_clear_bss_loop>:
     4ac:	1d 92       	st	X+, r1

000004ae <.do_clear_bss_start>:
     4ae:	a9 37       	cpi	r26, 0x79	; 121
     4b0:	b1 07       	cpc	r27, r17
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <.do_clear_bss_loop>
     4b4:	0e 94 08 24 	call	0x4810	; 0x4810 <main>
     4b8:	0c 94 03 29 	jmp	0x5206	; 0x5206 <_exit>

000004bc <__bad_interrupt>:
     4bc:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__vector_default>

000004c0 <Task1>:
  return 0;
}


void Task1()
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	60 97       	sbiw	r28, 0x10	; 16
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
uint16_t cnt;
int8_t fd,val,chan;
uint16_t buf[8];
uint16_t i, val100;

printf( "My node's address is %d\r\n",NODE_ADDR );
     4d4:	1f 92       	push	r1
     4d6:	1f 92       	push	r1
     4d8:	87 e5       	ldi	r24, 0x57	; 87
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4e4:	0e 94 08 18 	call	0x3010	; 0x3010 <nrk_get_pid>
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	81 e7       	ldi	r24, 0x71	; 113
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>

  // Open ADC device as read 
	
  fd=nrk_open(ADC_DEV_MANAGER,READ);
     4f8:	65 e0       	ldi	r22, 0x05	; 5
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <nrk_open>
     500:	b8 2e       	mov	r11, r24
  if(fd==NRK_ERROR) nrk_kprintf( PSTR("Failed to open ADC driver\r\n"));
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	89 13       	cpse	r24, r25
     510:	04 c0       	rjmp	.+8      	; 0x51a <Task1+0x5a>
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>

  cnt=0;
  chan=0;

	i = 0;
	DDRF = (1 << 3);
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	80 bb       	out	0x10, r24	; 16
		val=nrk_set_status(fd,ADC_CHAN,0);
		if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to set ADC status\r\n" ));
		val=nrk_read(fd,&buf[0],2);
		if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));

		val100 = (buf[0]*63)/358;
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	a8 2e       	mov	r10, r24
     522:	96 e6       	ldi	r25, 0x66	; 102
     524:	c9 2e       	mov	r12, r25
     526:	dd 24       	eor	r13, r13
     528:	d3 94       	inc	r13
		//printf("chan:%d=%d | %d.%d\r\n",chan,val100, val100/100, val100%100);
		printf("%d\r\n", val100);
     52a:	2c e6       	ldi	r18, 0x6C	; 108
     52c:	e2 2e       	mov	r14, r18
     52e:	22 e0       	ldi	r18, 0x02	; 2
     530:	f2 2e       	mov	r15, r18
	DDRF = (1 << 3);
  while(1) {
		//if((++i%16) == 0)
		//	PORTF ^= (1 << 3);
	  
		val=nrk_set_status(fd,ADC_CHAN,0);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8b 2d       	mov	r24, r11
     538:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_set_status>
		if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to set ADC status\r\n" ));
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	21 f4       	brne	.+8      	; 0x548 <Task1+0x88>
     540:	88 ee       	ldi	r24, 0xE8	; 232
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>
		val=nrk_read(fd,&buf[0],2);
     548:	42 e0       	ldi	r20, 0x02	; 2
     54a:	be 01       	movw	r22, r28
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	8b 2d       	mov	r24, r11
     552:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <nrk_read>
		if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));
     556:	8f 3f       	cpi	r24, 0xFF	; 255
     558:	21 f4       	brne	.+8      	; 0x562 <Task1+0xa2>
     55a:	83 ed       	ldi	r24, 0xD3	; 211
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>

		val100 = (buf[0]*63)/358;
     562:	49 81       	ldd	r20, Y+1	; 0x01
     564:	5a 81       	ldd	r21, Y+2	; 0x02
     566:	a4 9e       	mul	r10, r20
     568:	c0 01       	movw	r24, r0
     56a:	a5 9e       	mul	r10, r21
     56c:	90 0d       	add	r25, r0
     56e:	11 24       	eor	r1, r1
     570:	b6 01       	movw	r22, r12
     572:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
     576:	8b 01       	movw	r16, r22
		//printf("chan:%d=%d | %d.%d\r\n",chan,val100, val100/100, val100%100);
		printf("%d\r\n", val100);
     578:	1f 93       	push	r17
     57a:	6f 93       	push	r22
     57c:	ff 92       	push	r15
     57e:	ef 92       	push	r14
     580:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
		if(val100 > 90)
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
			nrk_led_set(GREEN_LED);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
		if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));

		val100 = (buf[0]*63)/358;
		//printf("chan:%d=%d | %d.%d\r\n",chan,val100, val100/100, val100%100);
		printf("%d\r\n", val100);
		if(val100 > 90)
     590:	0b 35       	cpi	r16, 0x5B	; 91
     592:	11 05       	cpc	r17, r1
     594:	18 f0       	brcs	.+6      	; 0x59c <Task1+0xdc>
			nrk_led_set(GREEN_LED);
     596:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <Task1+0xe0>
		else
			nrk_led_clr(GREEN_LED);
     59c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>

		nrk_wait_until_next_period();
     5a0:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <nrk_wait_until_next_period>
		cnt++;
	}
     5a4:	c6 cf       	rjmp	.-116    	; 0x532 <Task1+0x72>

000005a6 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     5a6:	80 e6       	ldi	r24, 0x60	; 96
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	90 93 66 03 	sts	0x0366, r25
     5ae:	80 93 65 03 	sts	0x0365, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     5b2:	40 e8       	ldi	r20, 0x80	; 128
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	67 e8       	ldi	r22, 0x87	; 135
     5b8:	73 e0       	ldi	r23, 0x03	; 3
     5ba:	80 e6       	ldi	r24, 0x60	; 96
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	0e 94 55 23 	call	0x46aa	; 0x46aa <nrk_task_set_stk>
  TaskOne.prio = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 68 03 	sts	0x0368, r24
  TaskOne.FirstActivation = TRUE;
     5c8:	80 93 67 03 	sts	0x0367, r24
  TaskOne.Type = BASIC_TASK;
     5cc:	80 93 69 03 	sts	0x0369, r24
  TaskOne.SchType = PREEMPTIVE;
     5d0:	80 93 6a 03 	sts	0x036A, r24
  TaskOne.period.secs = 0;
     5d4:	10 92 6b 03 	sts	0x036B, r1
     5d8:	10 92 6c 03 	sts	0x036C, r1
     5dc:	10 92 6d 03 	sts	0x036D, r1
     5e0:	10 92 6e 03 	sts	0x036E, r1
  TaskOne.period.nano_secs = 20*NANOS_PER_MS;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	9d e2       	ldi	r25, 0x2D	; 45
     5e8:	a1 e3       	ldi	r26, 0x31	; 49
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	80 93 6f 03 	sts	0x036F, r24
     5f0:	90 93 70 03 	sts	0x0370, r25
     5f4:	a0 93 71 03 	sts	0x0371, r26
     5f8:	b0 93 72 03 	sts	0x0372, r27
  TaskOne.cpu_reserve.secs = 0;
     5fc:	10 92 73 03 	sts	0x0373, r1
     600:	10 92 74 03 	sts	0x0374, r1
     604:	10 92 75 03 	sts	0x0375, r1
     608:	10 92 76 03 	sts	0x0376, r1
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	90 ef       	ldi	r25, 0xF0	; 240
     610:	aa ef       	ldi	r26, 0xFA	; 250
     612:	b2 e0       	ldi	r27, 0x02	; 2
     614:	80 93 77 03 	sts	0x0377, r24
     618:	90 93 78 03 	sts	0x0378, r25
     61c:	a0 93 79 03 	sts	0x0379, r26
     620:	b0 93 7a 03 	sts	0x037A, r27
  TaskOne.offset.secs = 0;
     624:	10 92 7b 03 	sts	0x037B, r1
     628:	10 92 7c 03 	sts	0x037C, r1
     62c:	10 92 7d 03 	sts	0x037D, r1
     630:	10 92 7e 03 	sts	0x037E, r1
  TaskOne.offset.nano_secs= 0;
     634:	10 92 7f 03 	sts	0x037F, r1
     638:	10 92 80 03 	sts	0x0380, r1
     63c:	10 92 81 03 	sts	0x0381, r1
     640:	10 92 82 03 	sts	0x0382, r1
  nrk_activate_task (&TaskOne);
     644:	80 e6       	ldi	r24, 0x60	; 96
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <nrk_activate_task>

0000064c <nrk_register_drivers>:
//     #define NRK_MAX_DRIVER_CNT  
//     in nrk_cfg.h
// Make sure to add: 
//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/adc_driver.c
//     in makefile
val=nrk_register_driver( &dev_manager_adc,ADC_DEV_MANAGER);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	89 e5       	ldi	r24, 0x59	; 89
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <nrk_register_driver>
if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     656:	8f 3f       	cpi	r24, 0xFF	; 255
     658:	21 f4       	brne	.+8      	; 0x662 <nrk_register_drivers+0x16>
     65a:	84 eb       	ldi	r24, 0xB4	; 180
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0c 94 2e 09 	jmp	0x125c	; 0x125c <nrk_kprintf>
     662:	08 95       	ret

00000664 <init_adc>:
}

void init_adc()
{
// Initialize values here
  ADC_INIT ();
     664:	aa e7       	ldi	r26, 0x7A	; 122
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	8c 93       	st	X, r24
     66c:	ec e7       	ldi	r30, 0x7C	; 124
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 e4       	ldi	r24, 0x40	; 64
     672:	80 83       	st	Z, r24
  ADC_ENABLE ();
     674:	8c 91       	ld	r24, X
     676:	80 68       	ori	r24, 0x80	; 128
     678:	8c 93       	st	X, r24
  channel=0;
     67a:	10 92 8c 04 	sts	0x048C, r1
  ADC_SET_CHANNEL (0);
     67e:	80 81       	ld	r24, Z
     680:	80 7e       	andi	r24, 0xE0	; 224
     682:	80 83       	st	Z, r24
     684:	08 95       	ret

00000686 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
     686:	84 ef       	ldi	r24, 0xF4	; 244
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <nrk_spin_wait_us>

0000068e <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
     68e:	80 91 7a 00 	lds	r24, 0x007A
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 93 7a 00 	sts	0x007A, r24
     698:	80 91 7a 00 	lds	r24, 0x007A
     69c:	84 ff       	sbrs	r24, 4
     69e:	fc cf       	rjmp	.-8      	; 0x698 <get_adc_val+0xa>
	delay();
     6a0:	0e 94 43 03 	call	0x686	; 0x686 <delay>
	ADC_GET_SAMPLE_10(adc_val);
     6a4:	80 91 78 00 	lds	r24, 0x0078
     6a8:	20 91 79 00 	lds	r18, 0x0079
     6ac:	90 e0       	ldi	r25, 0x00	; 0
	return adc_val;
}
     6ae:	92 2b       	or	r25, r18
     6b0:	08 95       	ret

000006b2 <dev_manager_adc>:
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint8_t dev_manager_adc(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ea 01       	movw	r28, r20
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;
uint16_t val;

     switch(action)
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	89 f1       	breq	.+98     	; 0x71e <dev_manager_adc+0x6c>
     6bc:	28 f4       	brcc	.+10     	; 0x6c8 <dev_manager_adc+0x16>
     6be:	88 23       	and	r24, r24
     6c0:	71 f0       	breq	.+28     	; 0x6de <dev_manager_adc+0x2c>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	79 f0       	breq	.+30     	; 0x6e4 <dev_manager_adc+0x32>
     6c6:	25 c0       	rjmp	.+74     	; 0x712 <dev_manager_adc+0x60>
     6c8:	84 30       	cpi	r24, 0x04	; 4
     6ca:	c1 f0       	breq	.+48     	; 0x6fc <dev_manager_adc+0x4a>
     6cc:	90 f0       	brcs	.+36     	; 0x6f2 <dev_manager_adc+0x40>
     6ce:	85 30       	cpi	r24, 0x05	; 5
     6d0:	01 f5       	brne	.+64     	; 0x712 <dev_manager_adc+0x60>
		
	    

             case READ:
			      /* Conversion to 8-bit value*/
			      val=get_adc_val();
     6d2:	0e 94 47 03 	call	0x68e	; 0x68e <get_adc_val>
			      buffer[count]=val & 0xFF;
     6d6:	88 83       	st	Y, r24
			      count++;
			      buffer[count]=(val>>8)  & 0xFF;
     6d8:	99 83       	std	Y+1, r25	; 0x01
			      count++;
                      return count;
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	23 c0       	rjmp	.+70     	; 0x724 <dev_manager_adc+0x72>
uint16_t val;

     switch(action)
     {
            case INIT: 
	     		init_adc();  
     6de:	0e 94 32 03 	call	0x664	; 0x664 <init_adc>
     6e2:	1d c0       	rjmp	.+58     	; 0x71e <dev_manager_adc+0x6c>
		      return 1;
	     
	    case OPEN:   
		    if(opt&READ_FLAG)
     6e4:	60 fd       	sbrc	r22, 0
     6e6:	1b c0       	rjmp	.+54     	; 0x71e <dev_manager_adc+0x6c>
		    {
		   	return NRK_OK; 
		    }
		    if(opt&WRITE_FLAG)
     6e8:	61 fd       	sbrc	r22, 1
     6ea:	1b c0       	rjmp	.+54     	; 0x722 <dev_manager_adc+0x70>
		    {
		   	return NRK_ERROR; 
		    }
		    if(opt&APPEND_FLAG)
     6ec:	62 fd       	sbrc	r22, 2
     6ee:	19 c0       	rjmp	.+50     	; 0x722 <dev_manager_adc+0x70>
     6f0:	16 c0       	rjmp	.+44     	; 0x71e <dev_manager_adc+0x6c>
             case CLOSE:
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==ADC_CHAN) return channel;
     6f2:	61 30       	cpi	r22, 0x01	; 1
     6f4:	b1 f4       	brne	.+44     	; 0x722 <dev_manager_adc+0x70>
     6f6:	80 91 8c 04 	lds	r24, 0x048C
     6fa:	14 c0       	rjmp	.+40     	; 0x724 <dev_manager_adc+0x72>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==ADC_CHAN) 
     6fc:	61 30       	cpi	r22, 0x01	; 1
     6fe:	89 f4       	brne	.+34     	; 0x722 <dev_manager_adc+0x70>
			{
				channel=value;
     700:	20 93 8c 04 	sts	0x048C, r18
				ADC_SET_CHANNEL (channel);
     704:	80 91 7c 00 	lds	r24, 0x007C
     708:	80 7e       	andi	r24, 0xE0	; 224
     70a:	82 2b       	or	r24, r18
     70c:	80 93 7c 00 	sts	0x007C, r24
     710:	06 c0       	rjmp	.+12     	; 0x71e <dev_manager_adc+0x6c>
				return NRK_OK;
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8c e0       	ldi	r24, 0x0C	; 12
     716:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
		 return 0;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	03 c0       	rjmp	.+6      	; 0x724 <dev_manager_adc+0x72>
		      return 1;
	     
	    case OPEN:   
		    if(opt&READ_FLAG)
		    {
		   	return NRK_OK; 
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	01 c0       	rjmp	.+2      	; 0x724 <dev_manager_adc+0x72>
		    }
		    if(opt&WRITE_FLAG)
		    {
		   	return NRK_ERROR; 
     722:	8f ef       	ldi	r24, 0xFF	; 255
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     72a:	90 91 41 01 	lds	r25, 0x0141
     72e:	9f 71       	andi	r25, 0x1F	; 31
     730:	9f 31       	cpi	r25, 0x1F	; 31
     732:	d9 f3       	breq	.-10     	; 0x72a <rf_cmd>
		continue;
	TRX_STATE = cmd;
     734:	80 93 42 01 	sts	0x0142, r24
     738:	08 95       	ret

0000073a <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 93 04 	sts	0x0493, r24
     740:	08 95       	ret

00000742 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     742:	10 92 93 04 	sts	0x0493, r1
     746:	08 95       	ret

00000748 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     748:	80 91 41 01 	lds	r24, 0x0141
     74c:	8f 71       	andi	r24, 0x1F	; 31
     74e:	8f 31       	cpi	r24, 0x1F	; 31
     750:	d9 f3       	breq	.-10     	; 0x748 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     752:	80 91 41 01 	lds	r24, 0x0141
     756:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     758:	e1 f0       	breq	.+56     	; 0x792 <rf_power_down+0x4a>
     75a:	8f 30       	cpi	r24, 0x0F	; 15
     75c:	d1 f0       	breq	.+52     	; 0x792 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     75e:	80 91 41 01 	lds	r24, 0x0141
     762:	8f 71       	andi	r24, 0x1F	; 31
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	31 f4       	brne	.+12     	; 0x774 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     768:	80 91 39 01 	lds	r24, 0x0139
     76c:	82 60       	ori	r24, 0x02	; 2
     76e:	80 93 39 01 	sts	0x0139, r24
     772:	0b c0       	rjmp	.+22     	; 0x78a <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     77a:	80 91 41 01 	lds	r24, 0x0141
     77e:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     780:	88 30       	cpi	r24, 0x08	; 8
     782:	d9 f7       	brne	.-10     	; 0x77a <rf_power_down+0x32>
     784:	f1 cf       	rjmp	.-30     	; 0x768 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     786:	8f 30       	cpi	r24, 0x0F	; 15
     788:	21 f0       	breq	.+8      	; 0x792 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     78a:	80 91 41 01 	lds	r24, 0x0141
     78e:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     790:	d1 f7       	brne	.-12     	; 0x786 <rf_power_down+0x3e>
     792:	08 95       	ret

00000794 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     794:	80 91 41 01 	lds	r24, 0x0141
     798:	8f 71       	andi	r24, 0x1F	; 31
     79a:	8f 31       	cpi	r24, 0x1F	; 31
     79c:	d9 f3       	breq	.-10     	; 0x794 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     79e:	80 91 41 01 	lds	r24, 0x0141
     7a2:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     7a4:	11 f0       	breq	.+4      	; 0x7aa <rf_power_up+0x16>
     7a6:	8f 30       	cpi	r24, 0x0F	; 15
     7a8:	51 f4       	brne	.+20     	; 0x7be <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     7aa:	80 91 39 01 	lds	r24, 0x0139
     7ae:	8d 7f       	andi	r24, 0xFD	; 253
     7b0:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     7b4:	80 91 41 01 	lds	r24, 0x0141
     7b8:	8f 71       	andi	r24, 0x1F	; 31
     7ba:	88 30       	cpi	r24, 0x08	; 8
     7bc:	d9 f7       	brne	.-10     	; 0x7b4 <rf_power_up+0x20>
     7be:	08 95       	ret

000007c0 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     7c0:	e5 e4       	ldi	r30, 0x45	; 69
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	90 81       	ld	r25, Z
     7c6:	90 7f       	andi	r25, 0xF0	; 240
     7c8:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     7ca:	90 81       	ld	r25, Z
     7cc:	8f 70       	andi	r24, 0x0F	; 15
     7ce:	89 2b       	or	r24, r25
     7d0:	80 83       	st	Z, r24
     7d2:	08 95       	ret

000007d4 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     7d4:	e7 e5       	ldi	r30, 0x57	; 87
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	80 81       	ld	r24, Z
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	80 83       	st	Z, r24
     7de:	08 95       	ret

000007e0 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     7e0:	e7 e5       	ldi	r30, 0x57	; 87
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	80 81       	ld	r24, Z
     7e6:	82 60       	ori	r24, 0x02	; 2
     7e8:	80 83       	st	Z, r24
     7ea:	08 95       	ret

000007ec <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     7ec:	ee e6       	ldi	r30, 0x6E	; 110
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	80 81       	ld	r24, Z
     7f2:	8f 7e       	andi	r24, 0xEF	; 239
     7f4:	80 83       	st	Z, r24
     7f6:	08 95       	ret

000007f8 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     7f8:	ee e6       	ldi	r30, 0x6E	; 110
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	80 81       	ld	r24, Z
     7fe:	80 61       	ori	r24, 0x10	; 16
     800:	80 83       	st	Z, r24
     802:	08 95       	ret

00000804 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     804:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     808:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     80c:	90 93 9d 04 	sts	0x049D, r25
     810:	80 93 9c 04 	sts	0x049C, r24
     814:	08 95       	ret

00000816 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     816:	90 93 97 04 	sts	0x0497, r25
     81a:	80 93 96 04 	sts	0x0496, r24
	PHY_CC_CCA &= ~(0x1F);
     81e:	e8 e4       	ldi	r30, 0x48	; 72
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	80 81       	ld	r24, Z
     824:	80 7e       	andi	r24, 0xE0	; 224
     826:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     828:	80 81       	ld	r24, Z
     82a:	68 2b       	or	r22, r24
     82c:	60 83       	st	Z, r22
     82e:	08 95       	ret

00000830 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     830:	90 93 5b 03 	sts	0x035B, r25
     834:	80 93 5a 03 	sts	0x035A, r24
     838:	08 95       	ret

0000083a <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     83a:	90 93 59 03 	sts	0x0359, r25
     83e:	80 93 58 03 	sts	0x0358, r24
     842:	08 95       	ret

00000844 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     84a:	70 e2       	ldi	r23, 0x20	; 32
     84c:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     850:	70 ec       	ldi	r23, 0xC0	; 192
     852:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     856:	60 62       	ori	r22, 0x20	; 32
     858:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     85c:	65 ec       	ldi	r22, 0xC5	; 197
     85e:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     862:	67 ea       	ldi	r22, 0xA7	; 167
     864:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     868:	60 e8       	ldi	r22, 0x80	; 128
     86a:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     86e:	20 93 60 01 	sts	0x0160, r18
     872:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     876:	40 93 62 01 	sts	0x0162, r20
     87a:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     87e:	e6 e4       	ldi	r30, 0x46	; 70
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	c0 81       	ld	r28, Z
     884:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     886:	60 81       	ld	r22, Z
     888:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     88a:	c2 95       	swap	r28
     88c:	c6 95       	lsr	r28
     88e:	c7 70       	andi	r28, 0x07	; 7
     890:	70 e4       	ldi	r23, 0x40	; 64
     892:	c7 9f       	mul	r28, r23
     894:	e0 01       	movw	r28, r0
     896:	11 24       	eor	r1, r1
     898:	12 95       	swap	r17
     89a:	16 95       	lsr	r17
     89c:	13 70       	andi	r17, 0x03	; 3
     89e:	1c 2b       	or	r17, r28
     8a0:	a2 95       	swap	r26
     8a2:	a6 95       	lsr	r26
     8a4:	a3 70       	andi	r26, 0x03	; 3
     8a6:	70 e1       	ldi	r23, 0x10	; 16
     8a8:	a7 9f       	mul	r26, r23
     8aa:	d0 01       	movw	r26, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     8b0:	62 95       	swap	r22
     8b2:	66 95       	lsr	r22
     8b4:	63 70       	andi	r22, 0x03	; 3
     8b6:	a4 e0       	ldi	r26, 0x04	; 4
     8b8:	6a 9f       	mul	r22, r26
     8ba:	b0 01       	movw	r22, r0
     8bc:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     8be:	16 2b       	or	r17, r22
     8c0:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     8c4:	60 81       	ld	r22, Z
     8c6:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     8c8:	72 95       	swap	r23
     8ca:	76 95       	lsr	r23
     8cc:	73 70       	andi	r23, 0x03	; 3
     8ce:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     8d0:	62 95       	swap	r22
     8d2:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     8d4:	67 2b       	or	r22, r23
     8d6:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     8da:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     8de:	6f ef       	ldi	r22, 0xFF	; 255
     8e0:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     8e4:	90 93 97 04 	sts	0x0497, r25
     8e8:	80 93 96 04 	sts	0x0496, r24
	rfSettings.txSeqNumber = 0;
     8ec:	10 92 98 04 	sts	0x0498, r1
	rfSettings.ackReceived = 0;
     8f0:	10 92 99 04 	sts	0x0499, r1
	rfSettings.panId = panId;
     8f4:	50 93 9b 04 	sts	0x049B, r21
     8f8:	40 93 9a 04 	sts	0x049A, r20
	rfSettings.myAddr = myAddr;
     8fc:	30 93 9d 04 	sts	0x049D, r19
     900:	20 93 9c 04 	sts	0x049C, r18
	rfSettings.receiveOn = 0;
     904:	10 92 9e 04 	sts	0x049E, r1

	rf_ready = 1;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 b8 04 	sts	0x04B8, r24
	rx_ready = 0;
     90e:	10 92 d7 04 	sts	0x04D7, r1
	tx_done = 0;
     912:	10 92 a7 04 	sts	0x04A7, r1

	use_glossy = 0;
     916:	10 92 93 04 	sts	0x0493, r1

} // rf_init() 
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	08 95       	ret

00000922 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     922:	86 e1       	ldi	r24, 0x16	; 22
     924:	0c 94 95 03 	jmp	0x72a	; 0x72a <rf_cmd>

00000928 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     928:	86 e1       	ldi	r24, 0x16	; 22
     92a:	0c 94 95 03 	jmp	0x72a	; 0x72a <rf_cmd>

0000092e <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     92e:	88 e0       	ldi	r24, 0x08	; 8
     930:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>
	rx_ready = 0;
     934:	10 92 d7 04 	sts	0x04D7, r1
     938:	08 95       	ret

0000093a <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     93a:	3f 92       	push	r3
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     960:	80 91 b8 04 	lds	r24, 0x04B8
     964:	81 11       	cpse	r24, r1
     966:	02 c0       	rjmp	.+4      	; 0x96c <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	0f c1       	rjmp	.+542    	; 0xb8a <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     96c:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     96e:	80 91 98 04 	lds	r24, 0x0498
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 93 98 04 	sts	0x0498, r24
	machead->fcf = fcf;
     978:	80 91 81 01 	lds	r24, 0x0181
     97c:	80 7e       	andi	r24, 0xE0	; 224
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	90 fb       	bst	r25, 0
     982:	85 f9       	bld	r24, 5
     984:	8f 73       	andi	r24, 0x3F	; 63
     986:	80 64       	ori	r24, 0x40	; 64
     988:	80 93 81 01 	sts	0x0181, r24
     98c:	88 e8       	ldi	r24, 0x88	; 136
     98e:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     992:	80 91 93 04 	lds	r24, 0x0493
     996:	88 23       	and	r24, r24
     998:	61 f0       	breq	.+24     	; 0x9b2 <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     9a0:	8a ea       	ldi	r24, 0xAA	; 170
     9a2:	9a ea       	ldi	r25, 0xAA	; 170
     9a4:	90 93 89 01 	sts	0x0189, r25
     9a8:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
     9b0:	10 c0       	rjmp	.+32     	; 0x9d2 <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     9b2:	80 91 98 04 	lds	r24, 0x0498
     9b6:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     9ba:	20 91 61 01 	lds	r18, 0x0161
     9be:	80 91 60 01 	lds	r24, 0x0160
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	92 2b       	or	r25, r18
     9c6:	90 93 89 01 	sts	0x0189, r25
     9ca:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     9ce:	88 81       	ld	r24, Y
     9d0:	99 81       	ldd	r25, Y+1	; 0x01
     9d2:	90 93 87 01 	sts	0x0187, r25
     9d6:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     9da:	20 91 63 01 	lds	r18, 0x0163
     9de:	80 91 62 01 	lds	r24, 0x0162
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	92 2b       	or	r25, r18
     9e6:	90 93 85 01 	sts	0x0185, r25
     9ea:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     9ee:	4a 81       	ldd	r20, Y+2	; 0x02
     9f0:	55 27       	eor	r21, r21
     9f2:	47 fd       	sbrc	r20, 7
     9f4:	50 95       	com	r21
     9f6:	6b 81       	ldd	r22, Y+3	; 0x03
     9f8:	7c 81       	ldd	r23, Y+4	; 0x04
     9fa:	8a e8       	ldi	r24, 0x8A	; 138
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	85 5f       	subi	r24, 0xF5	; 245
     a06:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     a0a:	80 91 41 01 	lds	r24, 0x0141
     a0e:	98 2f       	mov	r25, r24
     a10:	9f 71       	andi	r25, 0x1F	; 31
     a12:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     a14:	8f 70       	andi	r24, 0x0F	; 15
     a16:	9f ef       	ldi	r25, 0xFF	; 255
     a18:	98 0f       	add	r25, r24
     a1a:	92 30       	cpi	r25, 0x02	; 2
     a1c:	b0 f3       	brcs	.-20     	; 0xa0a <rf_tx_packet_repeat+0xd0>
     a1e:	9f e1       	ldi	r25, 0x1F	; 31
     a20:	39 16       	cp	r3, r25
     a22:	99 f3       	breq	.-26     	; 0xa0a <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     a24:	98 ef       	ldi	r25, 0xF8	; 248
     a26:	93 0d       	add	r25, r3
     a28:	92 30       	cpi	r25, 0x02	; 2
     a2a:	18 f0       	brcs	.+6      	; 0xa32 <rf_tx_packet_repeat+0xf8>
     a2c:	86 30       	cpi	r24, 0x06	; 6
     a2e:	09 f0       	breq	.+2      	; 0xa32 <rf_tx_packet_repeat+0xf8>
     a30:	9b cf       	rjmp	.-202    	; 0x968 <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     a32:	86 e1       	ldi	r24, 0x16	; 22
     a34:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	81 11       	cpse	r24, r1
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>
	if(pRTI->ackRequest)
     a44:	8e 81       	ldd	r24, Y+6	; 0x06
     a46:	88 23       	and	r24, r24
     a48:	91 f0       	breq	.+36     	; 0xa6e <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
     a4a:	89 e1       	ldi	r24, 0x19	; 25
     a4c:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>
     a50:	0e c0       	rjmp	.+28     	; 0xa6e <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     a52:	80 91 48 01 	lds	r24, 0x0148
     a56:	80 68       	ori	r24, 0x80	; 128
     a58:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     a5c:	80 91 41 01 	lds	r24, 0x0141
     a60:	87 ff       	sbrs	r24, 7
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     a64:	80 91 41 01 	lds	r24, 0x0141
     a68:	86 ff       	sbrs	r24, 6
     a6a:	7e cf       	rjmp	.-260    	; 0x968 <rf_tx_packet_repeat+0x2e>
     a6c:	e8 cf       	rjmp	.-48     	; 0xa3e <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
     a6e:	61 14       	cp	r6, r1
     a70:	71 04       	cpc	r7, r1
     a72:	99 f1       	breq	.+102    	; 0xada <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
     a74:	8f e9       	ldi	r24, 0x9F	; 159
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	0e 94 0e 18 	call	0x301c	; 0x301c <nrk_time_get>
		target_t.secs = curr_t.secs;
     a7c:	80 91 9f 04 	lds	r24, 0x049F
     a80:	90 91 a0 04 	lds	r25, 0x04A0
     a84:	a0 91 a1 04 	lds	r26, 0x04A1
     a88:	b0 91 a2 04 	lds	r27, 0x04A2
     a8c:	80 93 b9 04 	sts	0x04B9, r24
     a90:	90 93 ba 04 	sts	0x04BA, r25
     a94:	a0 93 bb 04 	sts	0x04BB, r26
     a98:	b0 93 bc 04 	sts	0x04BC, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     a9c:	d3 01       	movw	r26, r6
     a9e:	20 e4       	ldi	r18, 0x40	; 64
     aa0:	32 e4       	ldi	r19, 0x42	; 66
     aa2:	4f e0       	ldi	r20, 0x0F	; 15
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <__muluhisi3>
     aaa:	00 91 a3 04 	lds	r16, 0x04A3
     aae:	10 91 a4 04 	lds	r17, 0x04A4
     ab2:	20 91 a5 04 	lds	r18, 0x04A5
     ab6:	30 91 a6 04 	lds	r19, 0x04A6
     aba:	60 0f       	add	r22, r16
     abc:	71 1f       	adc	r23, r17
     abe:	82 1f       	adc	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	60 93 bd 04 	sts	0x04BD, r22
     ac6:	70 93 be 04 	sts	0x04BE, r23
     aca:	80 93 bf 04 	sts	0x04BF, r24
     ace:	90 93 c0 04 	sts	0x04C0, r25
		nrk_time_compact_nanos(&target_t);
     ad2:	89 eb       	ldi	r24, 0xB9	; 185
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     ada:	10 92 a7 04 	sts	0x04A7, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     ae4:	41 2c       	mov	r4, r1
     ae6:	51 2c       	mov	r5, r1
     ae8:	80 91 a7 04 	lds	r24, 0x04A7
     aec:	81 11       	cpse	r24, r1
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <rf_tx_packet_repeat+0x1c6>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	48 1a       	sub	r4, r24
     af4:	58 0a       	sbc	r5, r24
     af6:	98 ee       	ldi	r25, 0xE8	; 232
     af8:	49 16       	cp	r4, r25
     afa:	9d ef       	ldi	r25, 0xFD	; 253
     afc:	59 06       	cpc	r5, r25
     afe:	a1 f7       	brne	.-24     	; 0xae8 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     b00:	61 14       	cp	r6, r1
     b02:	71 04       	cpc	r7, r1
     b04:	21 f4       	brne	.+8      	; 0xb0e <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     b06:	8e 81       	ldd	r24, Y+6	; 0x06
     b08:	81 11       	cpse	r24, r1
     b0a:	2d c0       	rjmp	.+90     	; 0xb66 <rf_tx_packet_repeat+0x22c>
     b0c:	34 c0       	rjmp	.+104    	; 0xb76 <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
     b0e:	8f e9       	ldi	r24, 0x9F	; 159
     b10:	94 e0       	ldi	r25, 0x04	; 4
     b12:	0e 94 0e 18 	call	0x301c	; 0x301c <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     b16:	80 90 9f 04 	lds	r8, 0x049F
     b1a:	90 90 a0 04 	lds	r9, 0x04A0
     b1e:	a0 90 a1 04 	lds	r10, 0x04A1
     b22:	b0 90 a2 04 	lds	r11, 0x04A2
     b26:	c0 90 a3 04 	lds	r12, 0x04A3
     b2a:	d0 90 a4 04 	lds	r13, 0x04A4
     b2e:	e0 90 a5 04 	lds	r14, 0x04A5
     b32:	f0 90 a6 04 	lds	r15, 0x04A6
     b36:	00 91 b9 04 	lds	r16, 0x04B9
     b3a:	10 91 ba 04 	lds	r17, 0x04BA
     b3e:	20 91 bb 04 	lds	r18, 0x04BB
     b42:	30 91 bc 04 	lds	r19, 0x04BC
     b46:	40 91 bd 04 	lds	r20, 0x04BD
     b4a:	50 91 be 04 	lds	r21, 0x04BE
     b4e:	60 91 bf 04 	lds	r22, 0x04BF
     b52:	70 91 c0 04 	lds	r23, 0x04C0
     b56:	88 ed       	ldi	r24, 0xD8	; 216
     b58:	94 e0       	ldi	r25, 0x04	; 4
     b5a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <nrk_time_sub>
     b5e:	8f 3f       	cpi	r24, 0xFF	; 255
     b60:	09 f0       	breq	.+2      	; 0xb64 <rf_tx_packet_repeat+0x22a>
     b62:	bb cf       	rjmp	.-138    	; 0xada <rf_tx_packet_repeat+0x1a0>
     b64:	d0 cf       	rjmp	.-96     	; 0xb06 <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     b66:	80 91 42 01 	lds	r24, 0x0142
     b6a:	82 95       	swap	r24
     b6c:	86 95       	lsr	r24
     b6e:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     b70:	11 f0       	breq	.+4      	; 0xb76 <rf_tx_packet_repeat+0x23c>
     b72:	cf ef       	ldi	r28, 0xFF	; 255
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     b76:	88 ee       	ldi	r24, 0xE8	; 232
     b78:	48 16       	cp	r4, r24
     b7a:	8d ef       	ldi	r24, 0xFD	; 253
     b7c:	58 06       	cpc	r5, r24
     b7e:	c9 f3       	breq	.-14     	; 0xb72 <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     b80:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     b82:	83 2d       	mov	r24, r3
     b84:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     b88:	8c 2f       	mov	r24, r28
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	08 95       	ret

00000bae <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	0c 94 9d 04 	jmp	0x93a	; 0x93a <rf_tx_packet_repeat>

00000bb6 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     bba:	80 91 b8 04 	lds	r24, 0x04B8
     bbe:	88 23       	and	r24, r24
     bc0:	21 f1       	breq	.+72     	; 0xc0a <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     bc2:	80 91 41 01 	lds	r24, 0x0141
     bc6:	c8 2f       	mov	r28, r24
     bc8:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
     bce:	98 0f       	add	r25, r24
     bd0:	92 30       	cpi	r25, 0x02	; 2
     bd2:	b8 f3       	brcs	.-18     	; 0xbc2 <rf_cca_check+0xc>
     bd4:	cf 31       	cpi	r28, 0x1F	; 31
     bd6:	a9 f3       	breq	.-22     	; 0xbc2 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     bd8:	c8 30       	cpi	r28, 0x08	; 8
     bda:	11 f0       	breq	.+4      	; 0xbe0 <rf_cca_check+0x2a>
     bdc:	86 30       	cpi	r24, 0x06	; 6
     bde:	a9 f4       	brne	.+42     	; 0xc0a <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     be0:	86 e1       	ldi	r24, 0x16	; 22
     be2:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     be6:	80 91 48 01 	lds	r24, 0x0148
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     bf0:	80 91 41 01 	lds	r24, 0x0141
     bf4:	87 ff       	sbrs	r24, 7
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     bf8:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     bfc:	8c 2f       	mov	r24, r28
     bfe:	0e 94 95 03 	call	0x72a	; 0x72a <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     c02:	d6 fb       	bst	r29, 6
     c04:	88 27       	eor	r24, r24
     c06:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     c12:	80 91 b8 04 	lds	r24, 0x04B8
     c16:	88 23       	and	r24, r24
     c18:	09 f4       	brne	.+2      	; 0xc1c <rf_rx_packet_nonblock+0xa>
     c1a:	9f c0       	rjmp	.+318    	; 0xd5a <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
     c1c:	80 91 d7 04 	lds	r24, 0x04D7
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <rf_rx_packet_nonblock+0x14>
     c24:	98 c0       	rjmp	.+304    	; 0xd56 <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     c26:	80 91 7b 01 	lds	r24, 0x017B
     c2a:	e0 91 96 04 	lds	r30, 0x0496
     c2e:	f0 91 97 04 	lds	r31, 0x0497
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 97       	sbiw	r24, 0x02	; 2
     c36:	24 81       	ldd	r18, Z+4	; 0x04
     c38:	33 27       	eor	r19, r19
     c3a:	27 fd       	sbrc	r18, 7
     c3c:	30 95       	com	r19
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	0c f4       	brge	.+2      	; 0xc46 <rf_rx_packet_nonblock+0x34>
     c44:	8a c0       	rjmp	.+276    	; 0xd5a <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     c46:	e0 91 96 04 	lds	r30, 0x0496
     c4a:	f0 91 97 04 	lds	r31, 0x0497
     c4e:	80 91 82 01 	lds	r24, 0x0182
     c52:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     c54:	e0 91 96 04 	lds	r30, 0x0496
     c58:	f0 91 97 04 	lds	r31, 0x0497
     c5c:	80 91 87 01 	lds	r24, 0x0187
     c60:	90 91 88 01 	lds	r25, 0x0188
     c64:	92 83       	std	Z+2, r25	; 0x02
     c66:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     c68:	e0 91 96 04 	lds	r30, 0x0496
     c6c:	f0 91 97 04 	lds	r31, 0x0497
     c70:	80 91 7b 01 	lds	r24, 0x017B
     c74:	8b 50       	subi	r24, 0x0B	; 11
     c76:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     c78:	a0 91 96 04 	lds	r26, 0x0496
     c7c:	b0 91 97 04 	lds	r27, 0x0497
     c80:	e0 91 96 04 	lds	r30, 0x0496
     c84:	f0 91 97 04 	lds	r31, 0x0497
     c88:	13 96       	adiw	r26, 0x03	; 3
     c8a:	9c 91       	ld	r25, X
     c8c:	84 81       	ldd	r24, Z+4	; 0x04
     c8e:	89 17       	cp	r24, r25
     c90:	3c f0       	brlt	.+14     	; 0xca0 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     c92:	e0 91 96 04 	lds	r30, 0x0496
     c96:	f0 91 97 04 	lds	r31, 0x0497
     c9a:	83 81       	ldd	r24, Z+3	; 0x03
     c9c:	87 ff       	sbrs	r24, 7
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     ca0:	10 92 d7 04 	sts	0x04D7, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     ca4:	80 91 4c 01 	lds	r24, 0x014C
     ca8:	8f 77       	andi	r24, 0x7F	; 127
     caa:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     cae:	80 91 4c 01 	lds	r24, 0x014C
     cb2:	80 68       	ori	r24, 0x80	; 128
     cb4:	80 93 4c 01 	sts	0x014C, r24
     cb8:	50 c0       	rjmp	.+160    	; 0xd5a <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     cba:	a0 91 96 04 	lds	r26, 0x0496
     cbe:	b0 91 97 04 	lds	r27, 0x0497
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     cc2:	e0 91 96 04 	lds	r30, 0x0496
     cc6:	f0 91 97 04 	lds	r31, 0x0497
     cca:	13 96       	adiw	r26, 0x03	; 3
     ccc:	4c 91       	ld	r20, X
     cce:	55 27       	eor	r21, r21
     cd0:	47 fd       	sbrc	r20, 7
     cd2:	50 95       	com	r21
     cd4:	69 e8       	ldi	r22, 0x89	; 137
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	85 81       	ldd	r24, Z+5	; 0x05
     cda:	96 81       	ldd	r25, Z+6	; 0x06
     cdc:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     ce0:	e0 91 96 04 	lds	r30, 0x0496
     ce4:	f0 91 97 04 	lds	r31, 0x0497
     ce8:	80 91 80 01 	lds	r24, 0x0180
     cec:	85 fb       	bst	r24, 5
     cee:	88 27       	eor	r24, r24
     cf0:	80 f9       	bld	r24, 0
     cf2:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     cf4:	e0 91 96 04 	lds	r30, 0x0496
     cf8:	f0 91 97 04 	lds	r31, 0x0497
     cfc:	80 91 47 01 	lds	r24, 0x0147
     d00:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     d02:	e0 91 96 04 	lds	r30, 0x0496
     d06:	f0 91 97 04 	lds	r31, 0x0497
     d0a:	80 91 46 01 	lds	r24, 0x0146
     d0e:	86 95       	lsr	r24
     d10:	86 95       	lsr	r24
     d12:	86 95       	lsr	r24
     d14:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     d16:	e0 91 96 04 	lds	r30, 0x0496
     d1a:	f0 91 97 04 	lds	r31, 0x0497
     d1e:	80 91 47 01 	lds	r24, 0x0147
     d22:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     d24:	e0 91 96 04 	lds	r30, 0x0496
     d28:	f0 91 97 04 	lds	r31, 0x0497
     d2c:	a0 91 7b 01 	lds	r26, 0x017B
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	a0 58       	subi	r26, 0x80	; 128
     d34:	be 4f       	sbci	r27, 0xFE	; 254
     d36:	8c 91       	ld	r24, X
     d38:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
     d3a:	10 92 d7 04 	sts	0x04D7, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     d3e:	80 91 4c 01 	lds	r24, 0x014C
     d42:	8f 77       	andi	r24, 0x7F	; 127
     d44:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     d48:	80 91 4c 01 	lds	r24, 0x014C
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     d5c:	08 95       	ret

00000d5e <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d70:	8f 91       	pop	r24
     d72:	0f 90       	pop	r0
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	0f 90       	pop	r0
     d78:	1f 90       	pop	r1
     d7a:	18 95       	reti

00000d7c <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 a7 04 	sts	0x04A7, r24
	IRQ_STATUS = (1 << TX_END);
     d8e:	80 e4       	ldi	r24, 0x40	; 64
     d90:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     d94:	8f 91       	pop	r24
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     dac:	80 e2       	ldi	r24, 0x20	; 32
     dae:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     db2:	8f 91       	pop	r24
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     dca:	80 e1       	ldi	r24, 0x10	; 16
     dcc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	0b b6       	in	r0, 0x3b	; 59
     de8:	0f 92       	push	r0
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     e08:	e0 91 5a 03 	lds	r30, 0x035A
     e0c:	f0 91 5b 03 	lds	r31, 0x035B
     e10:	30 97       	sbiw	r30, 0x00	; 0
     e12:	09 f0       	breq	.+2      	; 0xe16 <__vector_59+0x3a>
		rx_start_func();
     e14:	09 95       	icall

	return;
}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0b be       	out	0x3b, r0	; 59
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     e4e:	8f 91       	pop	r24
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     e6c:	8f 91       	pop	r24
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     e78:	e9 e4       	ldi	r30, 0x49	; 73
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	90 81       	ld	r25, Z
     e7e:	90 7f       	andi	r25, 0xF0	; 240
     e80:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     e82:	90 81       	ld	r25, Z
     e84:	8f 70       	andi	r24, 0x0F	; 15
     e86:	89 2b       	or	r24, r25
     e88:	80 83       	st	Z, r24
     e8a:	08 95       	ret

00000e8c <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     e90:	08 95       	ret

00000e92 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     e92:	08 95       	ret

00000e94 <rf_security_disable>:
}



void rf_security_disable()
{
     e94:	08 95       	ret

00000e96 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	08 95       	ret

00000e9a <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     e9a:	80 91 91 04 	lds	r24, 0x0491
     e9e:	90 91 92 04 	lds	r25, 0x0492
     ea2:	08 95       	ret

00000ea4 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
     ea8:	08 95       	ret

00000eaa <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret

00000eae <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret

00000eb2 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	08 95       	ret

00000eb6 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     eb6:	08 95       	ret

00000eb8 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     eb8:	08 95       	ret

00000eba <rf_test_mode>:
}



void rf_test_mode()
{
     eba:	08 95       	ret

00000ebc <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     ebc:	08 95       	ret

00000ebe <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     ebe:	08 95       	ret

00000ec0 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     ec0:	08 95       	ret

00000ec2 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     ec2:	08 95       	ret

00000ec4 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     ec4:	08 95       	ret

00000ec6 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
     ec6:	e7 e3       	ldi	r30, 0x37	; 55
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	80 81       	ld	r24, Z
     ecc:	83 60       	ori	r24, 0x03	; 3
     ece:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     ed0:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
     ed2:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     ed4:	8d b1       	in	r24, 0x0d	; 13
     ed6:	80 6e       	ori	r24, 0xE0	; 224
     ed8:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     eda:	8e b1       	in	r24, 0x0e	; 14
     edc:	80 6e       	ori	r24, 0xE0	; 224
     ede:	8e b9       	out	0x0e, r24	; 14
     ee0:	08 95       	ret

00000ee2 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
     ee2:	e7 e3       	ldi	r30, 0x37	; 55
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	80 81       	ld	r24, Z
     ee8:	83 60       	ori	r24, 0x03	; 3
     eea:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     eec:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
     eee:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     ef0:	8d b1       	in	r24, 0x0d	; 13
     ef2:	80 6e       	ori	r24, 0xE0	; 224
     ef4:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     ef6:	8e b1       	in	r24, 0x0e	; 14
     ef8:	80 6e       	ori	r24, 0xE0	; 224
     efa:	8e b9       	out	0x0e, r24	; 14
     efc:	08 95       	ret

00000efe <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	27 97       	sbiw	r28, 0x07	; 7
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     f1e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     f22:	e0 91 96 04 	lds	r30, 0x0496
     f26:	f0 91 97 04 	lds	r31, 0x0497
     f2a:	c0 80       	ld	r12, Z
     f2c:	d3 80       	ldd	r13, Z+3	; 0x03
     f2e:	05 81       	ldd	r16, Z+5	; 0x05
     f30:	16 81       	ldd	r17, Z+6	; 0x06
     f32:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     f34:	0e 94 09 06 	call	0xc12	; 0xc12 <rf_rx_packet_nonblock>
	if (err < 1) {
     f38:	18 16       	cp	r1, r24
     f3a:	1c f0       	brlt	.+6      	; 0xf42 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     f3c:	80 e9       	ldi	r24, 0x90	; 144
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     f42:	f8 01       	movw	r30, r16
     f44:	f0 80       	ld	r15, Z
	if (ttl == 0) {
     f46:	f1 10       	cpse	r15, r1
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     f4a:	8f ea       	ldi	r24, 0xAF	; 175
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <puts>
#endif
		nrk_int_enable();
     f52:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
		return;
     f56:	32 c0       	rjmp	.+100    	; 0xfbc <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
     f58:	f5 e0       	ldi	r31, 0x05	; 5
     f5a:	ff 12       	cpse	r15, r31
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     f66:	c8 01       	movw	r24, r16
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	9f 93       	push	r25
     f6c:	8f 93       	push	r24
     f6e:	8e 2d       	mov	r24, r14
     f70:	99 27       	eor	r25, r25
     f72:	87 fd       	sbrc	r24, 7
     f74:	90 95       	com	r25
     f76:	9f 93       	push	r25
     f78:	ef 92       	push	r14
     f7a:	1f 92       	push	r1
     f7c:	ff 92       	push	r15
     f7e:	1f 92       	push	r1
     f80:	cf 92       	push	r12
     f82:	81 ed       	ldi	r24, 0xD1	; 209
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	9f 93       	push	r25
     f88:	8f 93       	push	r24
     f8a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     f8e:	1d 83       	std	Y+5, r17	; 0x05
     f90:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     f92:	fa 94       	dec	r15
     f94:	f8 01       	movw	r30, r16
     f96:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
     f98:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     f9a:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     f9c:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     fa6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 d7 05 	call	0xbae	; 0xbae <rf_tx_packet>
#endif
	return;
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
}
     fbc:	27 96       	adiw	r28, 0x07	; 7
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	08 95       	ret

00000fda <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	0b b6       	in	r0, 0x3b	; 59
     fe6:	0f 92       	push	r0
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 91 7b 01 	lds	r25, 0x017B
    1006:	89 17       	cp	r24, r25
    1008:	10 f4       	brcc	.+4      	; 0x100e <__vector_60+0x34>
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	fa cf       	rjmp	.-12     	; 0x1002 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    100e:	80 91 46 01 	lds	r24, 0x0146
    1012:	87 ff       	sbrs	r24, 7
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__vector_60+0x44>
		rx_ready = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 d7 04 	sts	0x04D7, r24
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    101e:	8a ef       	ldi	r24, 0xFA	; 250
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    102c:	80 91 46 01 	lds	r24, 0x0146
    1030:	87 ff       	sbrs	r24, 7
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1034:	80 91 93 04 	lds	r24, 0x0493
    1038:	81 11       	cpse	r24, r1
    103a:	0e 94 7f 07 	call	0xefe	; 0xefe <rf_glossy_interrupt>
	}

	if(rx_end_func)
    103e:	e0 91 58 03 	lds	r30, 0x0358
    1042:	f0 91 59 03 	lds	r31, 0x0359
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_60+0x72>
		rx_end_func();
    104a:	09 95       	icall

	return;
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1072:	e8 ea       	ldi	r30, 0xA8	; 168
    1074:	f4 e0       	ldi	r31, 0x04	; 4
    1076:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1078:	8c 91       	ld	r24, X
    107a:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    107c:	8d 91       	ld	r24, X+
    107e:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	e8 3b       	cpi	r30, 0xB8	; 184
    1086:	f8 07       	cpc	r31, r24
    1088:	b9 f7       	brne	.-18     	; 0x1078 <aes_setkey+0x6>
    108a:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    108c:	10 92 3e 01 	sts	0x013E, r1
    1090:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1092:	e1 f7       	brne	.-8      	; 0x108c <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1094:	80 e8       	ldi	r24, 0x80	; 128
    1096:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    109a:	80 91 3d 01 	lds	r24, 0x013D
    109e:	80 ff       	sbrs	r24, 0
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <aes_setkey+0x28>
    10a2:	e1 ec       	ldi	r30, 0xC1	; 193
    10a4:	f4 e0       	ldi	r31, 0x04	; 4
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    10a6:	80 91 3f 01 	lds	r24, 0x013F
    10aa:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	e1 3d       	cpi	r30, 0xD1	; 209
    10b0:	f8 07       	cpc	r31, r24
    10b2:	c9 f7       	brne	.-14     	; 0x10a6 <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
    10b4:	08 95       	ret

000010b6 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    10b6:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
    10b8:	66 23       	and	r22, r22
    10ba:	09 f4       	brne	.+2      	; 0x10be <aes_encrypt+0x8>
    10bc:	47 c0       	rjmp	.+142    	; 0x114c <aes_encrypt+0x96>
    10be:	26 2f       	mov	r18, r22
    10c0:	2f 70       	andi	r18, 0x0F	; 15
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <aes_encrypt+0x10>
    10c4:	43 c0       	rjmp	.+134    	; 0x114c <aes_encrypt+0x96>
    10c6:	e8 ea       	ldi	r30, 0xA8	; 168
    10c8:	f4 e0       	ldi	r31, 0x04	; 4
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    10ca:	21 91       	ld	r18, Z+
    10cc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    10d0:	24 e0       	ldi	r18, 0x04	; 4
    10d2:	e8 3b       	cpi	r30, 0xB8	; 184
    10d4:	f2 07       	cpc	r31, r18
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <aes_encrypt+0x14>
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    10da:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    10dc:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    10de:	20 e1       	ldi	r18, 0x10	; 16
    10e0:	a2 9f       	mul	r26, r18
    10e2:	a0 01       	movw	r20, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	46 17       	cp	r20, r22
    10e8:	57 07       	cpc	r21, r23
    10ea:	74 f5       	brge	.+92     	; 0x1148 <aes_encrypt+0x92>
      if(i==0)
    10ec:	a1 11       	cpse	r26, r1
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    10f0:	10 92 3c 01 	sts	0x013C, r1
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    10f6:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	48 0f       	add	r20, r24
    1100:	59 1f       	adc	r21, r25
    1102:	fa 01       	movw	r30, r20
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1108:	e0 81       	ld	r30, Z
    110a:	e0 93 3e 01 	sts	0x013E, r30
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1112:	20 31       	cpi	r18, 0x10	; 16
    1114:	31 05       	cpc	r19, r1
    1116:	a9 f7       	brne	.-22     	; 0x1102 <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1118:	20 91 3c 01 	lds	r18, 0x013C
    111c:	20 68       	ori	r18, 0x80	; 128
    111e:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1122:	20 91 3d 01 	lds	r18, 0x013D
    1126:	20 ff       	sbrs	r18, 0
    1128:	fc cf       	rjmp	.-8      	; 0x1122 <aes_encrypt+0x6c>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    112e:	c0 91 3e 01 	lds	r28, 0x013E
    1132:	fa 01       	movw	r30, r20
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	c0 83       	st	Z, r28
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    113e:	20 31       	cpi	r18, 0x10	; 16
    1140:	31 05       	cpc	r19, r1
    1142:	a9 f7       	brne	.-22     	; 0x112e <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1144:	af 5f       	subi	r26, 0xFF	; 255
    1146:	cb cf       	rjmp	.-106    	; 0x10de <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	01 c0       	rjmp	.+2      	; 0x114e <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    115a:	61 30       	cpi	r22, 0x01	; 1
    115c:	09 f4       	brne	.+2      	; 0x1160 <aes_decrypt+0xe>
    115e:	4f c0       	rjmp	.+158    	; 0x11fe <aes_decrypt+0xac>
    1160:	26 2f       	mov	r18, r22
    1162:	2f 70       	andi	r18, 0x0F	; 15
    1164:	09 f0       	breq	.+2      	; 0x1168 <aes_decrypt+0x16>
    1166:	4b c0       	rjmp	.+150    	; 0x11fe <aes_decrypt+0xac>
    1168:	e1 ec       	ldi	r30, 0xC1	; 193
    116a:	f4 e0       	ldi	r31, 0x04	; 4
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    116c:	21 91       	ld	r18, Z+
    116e:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1172:	24 e0       	ldi	r18, 0x04	; 4
    1174:	e1 3d       	cpi	r30, 0xD1	; 209
    1176:	f2 07       	cpc	r31, r18
    1178:	c9 f7       	brne	.-14     	; 0x116c <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    117a:	62 95       	swap	r22
    117c:	6f 70       	andi	r22, 0x0F	; 15
    117e:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1180:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1182:	6f 3f       	cpi	r22, 0xFF	; 255
    1184:	d1 f1       	breq	.+116    	; 0x11fa <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1186:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    118a:	20 e1       	ldi	r18, 0x10	; 16
    118c:	62 02       	muls	r22, r18
    118e:	a0 01       	movw	r20, r0
    1190:	11 24       	eor	r1, r1
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	fc 01       	movw	r30, r24
    1198:	e4 0f       	add	r30, r20
    119a:	f5 1f       	adc	r31, r21
    119c:	df 01       	movw	r26, r30
    119e:	a2 0f       	add	r26, r18
    11a0:	b3 1f       	adc	r27, r19
    11a2:	7c 91       	ld	r23, X
    11a4:	70 93 3e 01 	sts	0x013E, r23
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    11ac:	20 31       	cpi	r18, 0x10	; 16
    11ae:	31 05       	cpc	r19, r1
    11b0:	a9 f7       	brne	.-22     	; 0x119c <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    11b2:	20 91 3c 01 	lds	r18, 0x013C
    11b6:	20 68       	ori	r18, 0x80	; 128
    11b8:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    11bc:	20 91 3d 01 	lds	r18, 0x013D
    11c0:	20 ff       	sbrs	r18, 0
    11c2:	fc cf       	rjmp	.-8      	; 0x11bc <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    11c4:	40 51       	subi	r20, 0x10	; 16
    11c6:	51 09       	sbc	r21, r1
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	48 0f       	add	r20, r24
    11ce:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    11d0:	10 91 3e 01 	lds	r17, 0x013E
    11d4:	df 01       	movw	r26, r30
    11d6:	a2 0f       	add	r26, r18
    11d8:	b3 1f       	adc	r27, r19
    11da:	1c 93       	st	X, r17
         if(i!=0)
    11dc:	66 23       	and	r22, r22
    11de:	31 f0       	breq	.+12     	; 0x11ec <aes_decrypt+0x9a>
    11e0:	ea 01       	movw	r28, r20
    11e2:	c2 0f       	add	r28, r18
    11e4:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
    11e6:	78 81       	ld	r23, Y
    11e8:	71 27       	eor	r23, r17
    11ea:	7c 93       	st	X, r23
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    11f0:	20 31       	cpi	r18, 0x10	; 16
    11f2:	31 05       	cpc	r19, r1
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <aes_decrypt+0x7e>
    11f6:	61 50       	subi	r22, 0x01	; 1
    11f8:	c4 cf       	rjmp	.-120    	; 0x1182 <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    120a:	80 91 c0 00 	lds	r24, 0x00C0
    120e:	87 ff       	sbrs	r24, 7
    1210:	fc cf       	rjmp	.-8      	; 0x120a <getc0>
    1212:	80 91 c0 00 	lds	r24, 0x00C0
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	80 93 c0 00 	sts	0x00C0, r24
    121c:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1220:	08 95       	ret

00001222 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1222:	90 91 c0 00 	lds	r25, 0x00C0
    1226:	95 ff       	sbrs	r25, 5
    1228:	fc cf       	rjmp	.-8      	; 0x1222 <putc0>
    122a:	90 91 c0 00 	lds	r25, 0x00C0
    122e:	9f 7d       	andi	r25, 0xDF	; 223
    1230:	90 93 c0 00 	sts	0x00C0, r25
    1234:	80 93 c6 00 	sts	0x00C6, r24
    1238:	08 95       	ret

0000123a <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	08 95       	ret

0000123e <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	31 f4       	brne	.+12     	; 0x124e <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1242:	80 91 c8 00 	lds	r24, 0x00C8
    1246:	87 fd       	sbrc	r24, 7
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <nrk_uart_data_ready+0x1a>
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
        }
if(uart_num==0)
    124e:	81 11       	cpse	r24, r1
    1250:	fc cf       	rjmp	.-8      	; 0x124a <nrk_uart_data_ready+0xc>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1252:	80 91 c0 00 	lds	r24, 0x00C0
    1256:	f7 cf       	rjmp	.-18     	; 0x1246 <nrk_uart_data_ready+0x8>

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
    125a:	08 95       	ret

0000125c <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1260:	fc 01       	movw	r30, r24
    1262:	24 91       	lpm	r18, Z
    1264:	ec 01       	movw	r28, r24
    1266:	21 96       	adiw	r28, 0x01	; 1
    1268:	22 23       	and	r18, r18
    126a:	51 f0       	breq	.+20     	; 0x1280 <nrk_kprintf+0x24>
        putchar(c);
    126c:	60 91 71 05 	lds	r22, 0x0571
    1270:	70 91 72 05 	lds	r23, 0x0572
    1274:	82 2f       	mov	r24, r18
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    127c:	ce 01       	movw	r24, r28
    127e:	f0 cf       	rjmp	.-32     	; 0x1260 <nrk_kprintf+0x4>
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1286:	86 e0       	ldi	r24, 0x06	; 6
    1288:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    128a:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    128c:	88 ef       	ldi	r24, 0xF8	; 248
    128e:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1290:	80 ef       	ldi	r24, 0xF0	; 240
    1292:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	8d b9       	out	0x0d, r24	; 13
    1298:	08 95       	ret

0000129a <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    129a:	0c 94 43 09 	jmp	0x1286	; 0x1286 <PORT_INIT>

0000129e <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    129e:	8f 3f       	cpi	r24, 0xFF	; 255
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <nrk_gpio_set+0x6>
    12a2:	5c c0       	rjmp	.+184    	; 0x135c <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    12a4:	48 2f       	mov	r20, r24
    12a6:	47 70       	andi	r20, 0x07	; 7
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	47 30       	cpi	r20, 0x07	; 7
    12ac:	51 05       	cpc	r21, r1
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <nrk_gpio_set+0x14>
    12b0:	55 c0       	rjmp	.+170    	; 0x135c <nrk_gpio_set+0xbe>
    12b2:	fa 01       	movw	r30, r20
    12b4:	e0 57       	subi	r30, 0x70	; 112
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	86 95       	lsr	r24
    12ba:	86 95       	lsr	r24
    12bc:	86 95       	lsr	r24
    12be:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12c2:	92 b1       	in	r25, 0x02	; 2
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	08 2e       	mov	r0, r24
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <nrk_gpio_set+0x30>
    12cc:	22 0f       	add	r18, r18
    12ce:	0a 94       	dec	r0
    12d0:	ea f7       	brpl	.-6      	; 0x12cc <nrk_gpio_set+0x2e>
    12d2:	92 2b       	or	r25, r18
    12d4:	92 b9       	out	0x02, r25	; 2
    12d6:	40 c0       	rjmp	.+128    	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12d8:	95 b1       	in	r25, 0x05	; 5
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	08 2e       	mov	r0, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <nrk_gpio_set+0x46>
    12e2:	22 0f       	add	r18, r18
    12e4:	0a 94       	dec	r0
    12e6:	ea f7       	brpl	.-6      	; 0x12e2 <nrk_gpio_set+0x44>
    12e8:	92 2b       	or	r25, r18
    12ea:	95 b9       	out	0x05, r25	; 5
    12ec:	35 c0       	rjmp	.+106    	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12ee:	98 b1       	in	r25, 0x08	; 8
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	08 2e       	mov	r0, r24
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <nrk_gpio_set+0x5c>
    12f8:	22 0f       	add	r18, r18
    12fa:	0a 94       	dec	r0
    12fc:	ea f7       	brpl	.-6      	; 0x12f8 <nrk_gpio_set+0x5a>
    12fe:	92 2b       	or	r25, r18
    1300:	98 b9       	out	0x08, r25	; 8
    1302:	2a c0       	rjmp	.+84     	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1304:	9b b1       	in	r25, 0x0b	; 11
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	08 2e       	mov	r0, r24
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <nrk_gpio_set+0x72>
    130e:	22 0f       	add	r18, r18
    1310:	0a 94       	dec	r0
    1312:	ea f7       	brpl	.-6      	; 0x130e <nrk_gpio_set+0x70>
    1314:	92 2b       	or	r25, r18
    1316:	9b b9       	out	0x0b, r25	; 11
    1318:	1f c0       	rjmp	.+62     	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    131a:	9e b1       	in	r25, 0x0e	; 14
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	08 2e       	mov	r0, r24
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <nrk_gpio_set+0x88>
    1324:	22 0f       	add	r18, r18
    1326:	0a 94       	dec	r0
    1328:	ea f7       	brpl	.-6      	; 0x1324 <nrk_gpio_set+0x86>
    132a:	92 2b       	or	r25, r18
    132c:	9e b9       	out	0x0e, r25	; 14
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1330:	91 b3       	in	r25, 0x11	; 17
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	08 2e       	mov	r0, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <nrk_gpio_set+0x9e>
    133a:	22 0f       	add	r18, r18
    133c:	0a 94       	dec	r0
    133e:	ea f7       	brpl	.-6      	; 0x133a <nrk_gpio_set+0x9c>
    1340:	92 2b       	or	r25, r18
    1342:	91 bb       	out	0x11, r25	; 17
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1346:	94 b3       	in	r25, 0x14	; 20
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <nrk_gpio_set+0xb2>
    134e:	22 0f       	add	r18, r18
    1350:	8a 95       	dec	r24
    1352:	ea f7       	brpl	.-6      	; 0x134e <nrk_gpio_set+0xb0>
    1354:	92 2b       	or	r25, r18
    1356:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    135a:	08 95       	ret
                default: return -1;
    135c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    135e:	08 95       	ret

00001360 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	09 f4       	brne	.+2      	; 0x1366 <nrk_gpio_clr+0x6>
    1364:	57 c0       	rjmp	.+174    	; 0x1414 <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    1366:	48 2f       	mov	r20, r24
    1368:	47 70       	andi	r20, 0x07	; 7
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	47 30       	cpi	r20, 0x07	; 7
    136e:	51 05       	cpc	r21, r1
    1370:	08 f0       	brcs	.+2      	; 0x1374 <nrk_gpio_clr+0x14>
    1372:	50 c0       	rjmp	.+160    	; 0x1414 <nrk_gpio_clr+0xb4>
    1374:	fa 01       	movw	r30, r20
    1376:	e9 56       	subi	r30, 0x69	; 105
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	86 95       	lsr	r24
    137c:	86 95       	lsr	r24
    137e:	86 95       	lsr	r24
    1380:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1384:	92 b1       	in	r25, 0x02	; 2
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	08 2e       	mov	r0, r24
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <nrk_gpio_clr+0x30>
    138e:	22 0f       	add	r18, r18
    1390:	0a 94       	dec	r0
    1392:	ea f7       	brpl	.-6      	; 0x138e <nrk_gpio_clr+0x2e>
    1394:	20 95       	com	r18
    1396:	29 23       	and	r18, r25
    1398:	22 b9       	out	0x02, r18	; 2
    139a:	3a c0       	rjmp	.+116    	; 0x1410 <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    139c:	95 b1       	in	r25, 0x05	; 5
    139e:	21 e0       	ldi	r18, 0x01	; 1
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	08 2e       	mov	r0, r24
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <nrk_gpio_clr+0x48>
    13a6:	22 0f       	add	r18, r18
    13a8:	0a 94       	dec	r0
    13aa:	ea f7       	brpl	.-6      	; 0x13a6 <nrk_gpio_clr+0x46>
    13ac:	20 95       	com	r18
    13ae:	29 23       	and	r18, r25
    13b0:	25 b9       	out	0x05, r18	; 5
    13b2:	2e c0       	rjmp	.+92     	; 0x1410 <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13b4:	98 b1       	in	r25, 0x08	; 8
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	08 2e       	mov	r0, r24
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <nrk_gpio_clr+0x60>
    13be:	22 0f       	add	r18, r18
    13c0:	0a 94       	dec	r0
    13c2:	ea f7       	brpl	.-6      	; 0x13be <nrk_gpio_clr+0x5e>
    13c4:	20 95       	com	r18
    13c6:	29 23       	and	r18, r25
    13c8:	28 b9       	out	0x08, r18	; 8
    13ca:	22 c0       	rjmp	.+68     	; 0x1410 <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13cc:	9b b1       	in	r25, 0x0b	; 11
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	08 2e       	mov	r0, r24
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <nrk_gpio_clr+0x78>
    13d6:	22 0f       	add	r18, r18
    13d8:	0a 94       	dec	r0
    13da:	ea f7       	brpl	.-6      	; 0x13d6 <nrk_gpio_clr+0x76>
    13dc:	20 95       	com	r18
    13de:	29 23       	and	r18, r25
    13e0:	2b b9       	out	0x0b, r18	; 11
    13e2:	16 c0       	rjmp	.+44     	; 0x1410 <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13e4:	9e b1       	in	r25, 0x0e	; 14
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	08 2e       	mov	r0, r24
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <nrk_gpio_clr+0x90>
    13ee:	22 0f       	add	r18, r18
    13f0:	0a 94       	dec	r0
    13f2:	ea f7       	brpl	.-6      	; 0x13ee <nrk_gpio_clr+0x8e>
    13f4:	20 95       	com	r18
    13f6:	29 23       	and	r18, r25
    13f8:	2e b9       	out	0x0e, r18	; 14
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13fc:	91 b3       	in	r25, 0x11	; 17
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <nrk_gpio_clr+0xa6>
    1404:	22 0f       	add	r18, r18
    1406:	8a 95       	dec	r24
    1408:	ea f7       	brpl	.-6      	; 0x1404 <nrk_gpio_clr+0xa4>
    140a:	20 95       	com	r18
    140c:	29 23       	and	r18, r25
    140e:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1412:	08 95       	ret
                default: return -1;
    1414:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1416:	08 95       	ret

00001418 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1418:	8f 3f       	cpi	r24, 0xFF	; 255
    141a:	21 f1       	breq	.+72     	; 0x1464 <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    141c:	48 2f       	mov	r20, r24
    141e:	47 70       	andi	r20, 0x07	; 7
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	47 30       	cpi	r20, 0x07	; 7
    1424:	51 05       	cpc	r21, r1
    1426:	f0 f4       	brcc	.+60     	; 0x1464 <nrk_gpio_get+0x4c>
    1428:	fa 01       	movw	r30, r20
    142a:	e2 56       	subi	r30, 0x62	; 98
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	86 95       	lsr	r24
    1434:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1438:	20 b1       	in	r18, 0x00	; 0
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    143c:	23 b1       	in	r18, 0x03	; 3
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1440:	26 b1       	in	r18, 0x06	; 6
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1444:	29 b1       	in	r18, 0x09	; 9
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1448:	2c b1       	in	r18, 0x0c	; 12
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    144c:	2f b1       	in	r18, 0x0f	; 15
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1450:	22 b3       	in	r18, 0x12	; 18
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <nrk_gpio_get+0x42>
    1456:	35 95       	asr	r19
    1458:	27 95       	ror	r18
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <nrk_gpio_get+0x3e>
    145e:	82 2f       	mov	r24, r18
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	08 95       	ret
                default: return -1;
    1464:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1466:	08 95       	ret

00001468 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1468:	8f 3f       	cpi	r24, 0xFF	; 255
    146a:	09 f4       	brne	.+2      	; 0x146e <nrk_gpio_toggle+0x6>
    146c:	ef c0       	rjmp	.+478    	; 0x164c <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    146e:	48 2f       	mov	r20, r24
    1470:	47 70       	andi	r20, 0x07	; 7
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	47 30       	cpi	r20, 0x07	; 7
    1476:	51 05       	cpc	r21, r1
    1478:	08 f0       	brcs	.+2      	; 0x147c <nrk_gpio_toggle+0x14>
    147a:	e8 c0       	rjmp	.+464    	; 0x164c <nrk_gpio_toggle+0x1e4>
    147c:	fa 01       	movw	r30, r20
    147e:	eb 55       	subi	r30, 0x5B	; 91
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	86 95       	lsr	r24
    1484:	86 95       	lsr	r24
    1486:	86 95       	lsr	r24
    1488:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    148c:	20 b1       	in	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	08 2e       	mov	r0, r24
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <nrk_gpio_toggle+0x30>
    1494:	35 95       	asr	r19
    1496:	27 95       	ror	r18
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    149c:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    149e:	20 fd       	sbrc	r18, 0
    14a0:	0a c0       	rjmp	.+20     	; 0x14b6 <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	08 2e       	mov	r0, r24
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <nrk_gpio_toggle+0x44>
    14aa:	22 0f       	add	r18, r18
    14ac:	0a 94       	dec	r0
    14ae:	ea f7       	brpl	.-6      	; 0x14aa <nrk_gpio_toggle+0x42>
    14b0:	92 2b       	or	r25, r18
    14b2:	92 b9       	out	0x02, r25	; 2
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	08 2e       	mov	r0, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <nrk_gpio_toggle+0x58>
    14be:	22 0f       	add	r18, r18
    14c0:	0a 94       	dec	r0
    14c2:	ea f7       	brpl	.-6      	; 0x14be <nrk_gpio_toggle+0x56>
    14c4:	20 95       	com	r18
    14c6:	29 23       	and	r18, r25
    14c8:	22 b9       	out	0x02, r18	; 2
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    14cc:	23 b1       	in	r18, 0x03	; 3
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	08 2e       	mov	r0, r24
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <nrk_gpio_toggle+0x70>
    14d4:	35 95       	asr	r19
    14d6:	27 95       	ror	r18
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    14dc:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    14de:	20 fd       	sbrc	r18, 0
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <nrk_gpio_toggle+0x82>
    14e8:	22 0f       	add	r18, r18
    14ea:	8a 95       	dec	r24
    14ec:	ea f7       	brpl	.-6      	; 0x14e8 <nrk_gpio_toggle+0x80>
    14ee:	92 2b       	or	r25, r18
    14f0:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	08 2e       	mov	r0, r24
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <nrk_gpio_toggle+0x98>
    14fe:	22 0f       	add	r18, r18
    1500:	0a 94       	dec	r0
    1502:	ea f7       	brpl	.-6      	; 0x14fe <nrk_gpio_toggle+0x96>
    1504:	20 95       	com	r18
    1506:	29 23       	and	r18, r25
    1508:	25 b9       	out	0x05, r18	; 5
    150a:	f3 cf       	rjmp	.-26     	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    150c:	26 b1       	in	r18, 0x06	; 6
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	08 2e       	mov	r0, r24
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <nrk_gpio_toggle+0xb0>
    1514:	35 95       	asr	r19
    1516:	27 95       	ror	r18
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    151c:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    151e:	20 fd       	sbrc	r18, 0
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	08 2e       	mov	r0, r24
    1528:	01 c0       	rjmp	.+2      	; 0x152c <nrk_gpio_toggle+0xc4>
    152a:	22 0f       	add	r18, r18
    152c:	0a 94       	dec	r0
    152e:	ea f7       	brpl	.-6      	; 0x152a <nrk_gpio_toggle+0xc2>
    1530:	92 2b       	or	r25, r18
    1532:	98 b9       	out	0x08, r25	; 8
    1534:	de cf       	rjmp	.-68     	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	08 2e       	mov	r0, r24
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <nrk_gpio_toggle+0xd8>
    153e:	22 0f       	add	r18, r18
    1540:	0a 94       	dec	r0
    1542:	ea f7       	brpl	.-6      	; 0x153e <nrk_gpio_toggle+0xd6>
    1544:	20 95       	com	r18
    1546:	29 23       	and	r18, r25
    1548:	28 b9       	out	0x08, r18	; 8
    154a:	d3 cf       	rjmp	.-90     	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    154c:	29 b1       	in	r18, 0x09	; 9
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	08 2e       	mov	r0, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <nrk_gpio_toggle+0xf0>
    1554:	35 95       	asr	r19
    1556:	27 95       	ror	r18
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    155c:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    155e:	20 fd       	sbrc	r18, 0
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	08 2e       	mov	r0, r24
    1568:	01 c0       	rjmp	.+2      	; 0x156c <nrk_gpio_toggle+0x104>
    156a:	22 0f       	add	r18, r18
    156c:	0a 94       	dec	r0
    156e:	ea f7       	brpl	.-6      	; 0x156a <nrk_gpio_toggle+0x102>
    1570:	92 2b       	or	r25, r18
    1572:	9b b9       	out	0x0b, r25	; 11
    1574:	be cf       	rjmp	.-132    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	08 2e       	mov	r0, r24
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <nrk_gpio_toggle+0x118>
    157e:	22 0f       	add	r18, r18
    1580:	0a 94       	dec	r0
    1582:	ea f7       	brpl	.-6      	; 0x157e <nrk_gpio_toggle+0x116>
    1584:	20 95       	com	r18
    1586:	29 23       	and	r18, r25
    1588:	2b b9       	out	0x0b, r18	; 11
    158a:	b3 cf       	rjmp	.-154    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    158c:	2c b1       	in	r18, 0x0c	; 12
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	08 2e       	mov	r0, r24
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <nrk_gpio_toggle+0x130>
    1594:	35 95       	asr	r19
    1596:	27 95       	ror	r18
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    159c:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    159e:	20 fd       	sbrc	r18, 0
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	08 2e       	mov	r0, r24
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <nrk_gpio_toggle+0x144>
    15aa:	22 0f       	add	r18, r18
    15ac:	0a 94       	dec	r0
    15ae:	ea f7       	brpl	.-6      	; 0x15aa <nrk_gpio_toggle+0x142>
    15b0:	92 2b       	or	r25, r18
    15b2:	9e b9       	out	0x0e, r25	; 14
    15b4:	9e cf       	rjmp	.-196    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	08 2e       	mov	r0, r24
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <nrk_gpio_toggle+0x158>
    15be:	22 0f       	add	r18, r18
    15c0:	0a 94       	dec	r0
    15c2:	ea f7       	brpl	.-6      	; 0x15be <nrk_gpio_toggle+0x156>
    15c4:	20 95       	com	r18
    15c6:	29 23       	and	r18, r25
    15c8:	2e b9       	out	0x0e, r18	; 14
    15ca:	93 cf       	rjmp	.-218    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    15cc:	2f b1       	in	r18, 0x0f	; 15
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	08 2e       	mov	r0, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <nrk_gpio_toggle+0x170>
    15d4:	35 95       	asr	r19
    15d6:	27 95       	ror	r18
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    15dc:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    15de:	20 fd       	sbrc	r18, 0
    15e0:	0a c0       	rjmp	.+20     	; 0x15f6 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    15e2:	21 e0       	ldi	r18, 0x01	; 1
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	08 2e       	mov	r0, r24
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <nrk_gpio_toggle+0x184>
    15ea:	22 0f       	add	r18, r18
    15ec:	0a 94       	dec	r0
    15ee:	ea f7       	brpl	.-6      	; 0x15ea <nrk_gpio_toggle+0x182>
    15f0:	92 2b       	or	r25, r18
    15f2:	91 bb       	out	0x11, r25	; 17
    15f4:	7e cf       	rjmp	.-260    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	08 2e       	mov	r0, r24
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <nrk_gpio_toggle+0x198>
    15fe:	22 0f       	add	r18, r18
    1600:	0a 94       	dec	r0
    1602:	ea f7       	brpl	.-6      	; 0x15fe <nrk_gpio_toggle+0x196>
    1604:	20 95       	com	r18
    1606:	29 23       	and	r18, r25
    1608:	21 bb       	out	0x11, r18	; 17
    160a:	73 cf       	rjmp	.-282    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    160c:	22 b3       	in	r18, 0x12	; 18
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	08 2e       	mov	r0, r24
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <nrk_gpio_toggle+0x1b0>
    1614:	35 95       	asr	r19
    1616:	27 95       	ror	r18
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    161c:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    161e:	20 fd       	sbrc	r18, 0
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	08 2e       	mov	r0, r24
    1628:	01 c0       	rjmp	.+2      	; 0x162c <nrk_gpio_toggle+0x1c4>
    162a:	22 0f       	add	r18, r18
    162c:	0a 94       	dec	r0
    162e:	ea f7       	brpl	.-6      	; 0x162a <nrk_gpio_toggle+0x1c2>
    1630:	92 2b       	or	r25, r18
    1632:	94 bb       	out	0x14, r25	; 20
    1634:	5e cf       	rjmp	.-324    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1636:	21 e0       	ldi	r18, 0x01	; 1
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	08 2e       	mov	r0, r24
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <nrk_gpio_toggle+0x1d8>
    163e:	22 0f       	add	r18, r18
    1640:	0a 94       	dec	r0
    1642:	ea f7       	brpl	.-6      	; 0x163e <nrk_gpio_toggle+0x1d6>
    1644:	20 95       	com	r18
    1646:	29 23       	and	r18, r25
    1648:	24 bb       	out	0x14, r18	; 20
    164a:	53 cf       	rjmp	.-346    	; 0x14f2 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    164c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    164e:	08 95       	ret

00001650 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1650:	8f 3f       	cpi	r24, 0xFF	; 255
    1652:	09 f4       	brne	.+2      	; 0x1656 <nrk_gpio_direction+0x6>
    1654:	be c0       	rjmp	.+380    	; 0x17d2 <nrk_gpio_direction+0x182>
    1656:	48 2f       	mov	r20, r24
    1658:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    165a:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    165c:	61 11       	cpse	r22, r1
    165e:	60 c0       	rjmp	.+192    	; 0x1720 <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    1660:	47 30       	cpi	r20, 0x07	; 7
    1662:	51 05       	cpc	r21, r1
    1664:	08 f0       	brcs	.+2      	; 0x1668 <nrk_gpio_direction+0x18>
    1666:	b5 c0       	rjmp	.+362    	; 0x17d2 <nrk_gpio_direction+0x182>
    1668:	fa 01       	movw	r30, r20
    166a:	e4 55       	subi	r30, 0x54	; 84
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	86 95       	lsr	r24
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1678:	91 b1       	in	r25, 0x01	; 1
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	08 2e       	mov	r0, r24
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <nrk_gpio_direction+0x34>
    1682:	22 0f       	add	r18, r18
    1684:	0a 94       	dec	r0
    1686:	ea f7       	brpl	.-6      	; 0x1682 <nrk_gpio_direction+0x32>
    1688:	20 95       	com	r18
    168a:	29 23       	and	r18, r25
    168c:	21 b9       	out	0x01, r18	; 1
    168e:	9f c0       	rjmp	.+318    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1690:	94 b1       	in	r25, 0x04	; 4
    1692:	21 e0       	ldi	r18, 0x01	; 1
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	08 2e       	mov	r0, r24
    1698:	01 c0       	rjmp	.+2      	; 0x169c <nrk_gpio_direction+0x4c>
    169a:	22 0f       	add	r18, r18
    169c:	0a 94       	dec	r0
    169e:	ea f7       	brpl	.-6      	; 0x169a <nrk_gpio_direction+0x4a>
    16a0:	20 95       	com	r18
    16a2:	29 23       	and	r18, r25
    16a4:	24 b9       	out	0x04, r18	; 4
    16a6:	93 c0       	rjmp	.+294    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    16a8:	97 b1       	in	r25, 0x07	; 7
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	08 2e       	mov	r0, r24
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <nrk_gpio_direction+0x64>
    16b2:	22 0f       	add	r18, r18
    16b4:	0a 94       	dec	r0
    16b6:	ea f7       	brpl	.-6      	; 0x16b2 <nrk_gpio_direction+0x62>
    16b8:	20 95       	com	r18
    16ba:	29 23       	and	r18, r25
    16bc:	27 b9       	out	0x07, r18	; 7
    16be:	87 c0       	rjmp	.+270    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    16c0:	9a b1       	in	r25, 0x0a	; 10
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	08 2e       	mov	r0, r24
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <nrk_gpio_direction+0x7c>
    16ca:	22 0f       	add	r18, r18
    16cc:	0a 94       	dec	r0
    16ce:	ea f7       	brpl	.-6      	; 0x16ca <nrk_gpio_direction+0x7a>
    16d0:	20 95       	com	r18
    16d2:	29 23       	and	r18, r25
    16d4:	2a b9       	out	0x0a, r18	; 10
    16d6:	7b c0       	rjmp	.+246    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    16d8:	9d b1       	in	r25, 0x0d	; 13
    16da:	21 e0       	ldi	r18, 0x01	; 1
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	08 2e       	mov	r0, r24
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <nrk_gpio_direction+0x94>
    16e2:	22 0f       	add	r18, r18
    16e4:	0a 94       	dec	r0
    16e6:	ea f7       	brpl	.-6      	; 0x16e2 <nrk_gpio_direction+0x92>
    16e8:	20 95       	com	r18
    16ea:	29 23       	and	r18, r25
    16ec:	2d b9       	out	0x0d, r18	; 13
    16ee:	6f c0       	rjmp	.+222    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    16f0:	90 b3       	in	r25, 0x10	; 16
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	08 2e       	mov	r0, r24
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <nrk_gpio_direction+0xac>
    16fa:	22 0f       	add	r18, r18
    16fc:	0a 94       	dec	r0
    16fe:	ea f7       	brpl	.-6      	; 0x16fa <nrk_gpio_direction+0xaa>
    1700:	20 95       	com	r18
    1702:	29 23       	and	r18, r25
    1704:	20 bb       	out	0x10, r18	; 16
    1706:	63 c0       	rjmp	.+198    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1708:	93 b3       	in	r25, 0x13	; 19
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	08 2e       	mov	r0, r24
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <nrk_gpio_direction+0xc4>
    1712:	22 0f       	add	r18, r18
    1714:	0a 94       	dec	r0
    1716:	ea f7       	brpl	.-6      	; 0x1712 <nrk_gpio_direction+0xc2>
    1718:	20 95       	com	r18
    171a:	29 23       	and	r18, r25
    171c:	23 bb       	out	0x13, r18	; 19
    171e:	57 c0       	rjmp	.+174    	; 0x17ce <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1720:	47 30       	cpi	r20, 0x07	; 7
    1722:	51 05       	cpc	r21, r1
    1724:	08 f0       	brcs	.+2      	; 0x1728 <nrk_gpio_direction+0xd8>
    1726:	55 c0       	rjmp	.+170    	; 0x17d2 <nrk_gpio_direction+0x182>
    1728:	fa 01       	movw	r30, r20
    172a:	ed 54       	subi	r30, 0x4D	; 77
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	86 95       	lsr	r24
    1730:	86 95       	lsr	r24
    1732:	86 95       	lsr	r24
    1734:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1738:	91 b1       	in	r25, 0x01	; 1
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	08 2e       	mov	r0, r24
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <nrk_gpio_direction+0xf4>
    1742:	22 0f       	add	r18, r18
    1744:	0a 94       	dec	r0
    1746:	ea f7       	brpl	.-6      	; 0x1742 <nrk_gpio_direction+0xf2>
    1748:	92 2b       	or	r25, r18
    174a:	91 b9       	out	0x01, r25	; 1
    174c:	40 c0       	rjmp	.+128    	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    174e:	94 b1       	in	r25, 0x04	; 4
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	08 2e       	mov	r0, r24
    1756:	01 c0       	rjmp	.+2      	; 0x175a <nrk_gpio_direction+0x10a>
    1758:	22 0f       	add	r18, r18
    175a:	0a 94       	dec	r0
    175c:	ea f7       	brpl	.-6      	; 0x1758 <nrk_gpio_direction+0x108>
    175e:	92 2b       	or	r25, r18
    1760:	94 b9       	out	0x04, r25	; 4
    1762:	35 c0       	rjmp	.+106    	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1764:	97 b1       	in	r25, 0x07	; 7
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	08 2e       	mov	r0, r24
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <nrk_gpio_direction+0x120>
    176e:	22 0f       	add	r18, r18
    1770:	0a 94       	dec	r0
    1772:	ea f7       	brpl	.-6      	; 0x176e <nrk_gpio_direction+0x11e>
    1774:	92 2b       	or	r25, r18
    1776:	97 b9       	out	0x07, r25	; 7
    1778:	2a c0       	rjmp	.+84     	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    177a:	9a b1       	in	r25, 0x0a	; 10
    177c:	21 e0       	ldi	r18, 0x01	; 1
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	08 2e       	mov	r0, r24
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <nrk_gpio_direction+0x136>
    1784:	22 0f       	add	r18, r18
    1786:	0a 94       	dec	r0
    1788:	ea f7       	brpl	.-6      	; 0x1784 <nrk_gpio_direction+0x134>
    178a:	92 2b       	or	r25, r18
    178c:	9a b9       	out	0x0a, r25	; 10
    178e:	1f c0       	rjmp	.+62     	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1790:	9d b1       	in	r25, 0x0d	; 13
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	08 2e       	mov	r0, r24
    1798:	01 c0       	rjmp	.+2      	; 0x179c <nrk_gpio_direction+0x14c>
    179a:	22 0f       	add	r18, r18
    179c:	0a 94       	dec	r0
    179e:	ea f7       	brpl	.-6      	; 0x179a <nrk_gpio_direction+0x14a>
    17a0:	92 2b       	or	r25, r18
    17a2:	9d b9       	out	0x0d, r25	; 13
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    17a6:	90 b3       	in	r25, 0x10	; 16
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	08 2e       	mov	r0, r24
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <nrk_gpio_direction+0x162>
    17b0:	22 0f       	add	r18, r18
    17b2:	0a 94       	dec	r0
    17b4:	ea f7       	brpl	.-6      	; 0x17b0 <nrk_gpio_direction+0x160>
    17b6:	92 2b       	or	r25, r18
    17b8:	90 bb       	out	0x10, r25	; 16
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    17bc:	93 b3       	in	r25, 0x13	; 19
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <nrk_gpio_direction+0x176>
    17c4:	22 0f       	add	r18, r18
    17c6:	8a 95       	dec	r24
    17c8:	ea f7       	brpl	.-6      	; 0x17c4 <nrk_gpio_direction+0x174>
    17ca:	92 2b       	or	r25, r18
    17cc:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    17d0:	08 95       	ret
                        default: return -1;
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    17d4:	08 95       	ret

000017d6 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    17d6:	81 11       	cpse	r24, r1
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    17da:	80 b1       	in	r24, 0x00	; 0
    17dc:	86 95       	lsr	r24
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	89 27       	eor	r24, r25
    17e4:	08 95       	ret
	} 
return -1;
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    17e8:	08 95       	ret

000017ea <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <nrk_led_toggle+0x8>
    17ee:	83 e2       	ldi	r24, 0x23	; 35
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	11 f4       	brne	.+4      	; 0x17fc <nrk_led_toggle+0x12>
    17f8:	8b e2       	ldi	r24, 0x2B	; 43
    17fa:	08 c0       	rjmp	.+16     	; 0x180c <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	11 f4       	brne	.+4      	; 0x1806 <nrk_led_toggle+0x1c>
    1802:	83 e3       	ldi	r24, 0x33	; 51
    1804:	03 c0       	rjmp	.+6      	; 0x180c <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1806:	03 97       	sbiw	r24, 0x03	; 3
    1808:	29 f4       	brne	.+10     	; 0x1814 <nrk_led_toggle+0x2a>
    180a:	8b e3       	ldi	r24, 0x3B	; 59
    180c:	0e 94 34 0a 	call	0x1468	; 0x1468 <nrk_gpio_toggle>
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	08 95       	ret
return -1;
    1814:	8f ef       	ldi	r24, 0xFF	; 255
}
    1816:	08 95       	ret

00001818 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	11 f4       	brne	.+4      	; 0x1820 <nrk_led_clr+0x8>
    181c:	83 e2       	ldi	r24, 0x23	; 35
    181e:	0d c0       	rjmp	.+26     	; 0x183a <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	11 f4       	brne	.+4      	; 0x182a <nrk_led_clr+0x12>
    1826:	8b e2       	ldi	r24, 0x2B	; 43
    1828:	08 c0       	rjmp	.+16     	; 0x183a <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    182a:	82 30       	cpi	r24, 0x02	; 2
    182c:	91 05       	cpc	r25, r1
    182e:	11 f4       	brne	.+4      	; 0x1834 <nrk_led_clr+0x1c>
    1830:	83 e3       	ldi	r24, 0x33	; 51
    1832:	03 c0       	rjmp	.+6      	; 0x183a <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1834:	03 97       	sbiw	r24, 0x03	; 3
    1836:	29 f4       	brne	.+10     	; 0x1842 <nrk_led_clr+0x2a>
    1838:	8b e3       	ldi	r24, 0x3B	; 59
    183a:	0e 94 4f 09 	call	0x129e	; 0x129e <nrk_gpio_set>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	08 95       	ret
return -1;
    1842:	8f ef       	ldi	r24, 0xFF	; 255
}
    1844:	08 95       	ret

00001846 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	11 f4       	brne	.+4      	; 0x184e <nrk_led_set+0x8>
    184a:	83 e2       	ldi	r24, 0x23	; 35
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	11 f4       	brne	.+4      	; 0x1858 <nrk_led_set+0x12>
    1854:	8b e2       	ldi	r24, 0x2B	; 43
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	91 05       	cpc	r25, r1
    185c:	11 f4       	brne	.+4      	; 0x1862 <nrk_led_set+0x1c>
    185e:	83 e3       	ldi	r24, 0x33	; 51
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1862:	03 97       	sbiw	r24, 0x03	; 3
    1864:	29 f4       	brne	.+10     	; 0x1870 <nrk_led_set+0x2a>
    1866:	8b e3       	ldi	r24, 0x3B	; 59
    1868:	0e 94 b0 09 	call	0x1360	; 0x1360 <nrk_gpio_clr>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	08 95       	ret
return -1;
    1870:	8f ef       	ldi	r24, 0xFF	; 255
}
    1872:	08 95       	ret

00001874 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <nrk_gpio_pullups+0xa>
    1878:	85 b7       	in	r24, 0x35	; 53
    187a:	8f 7e       	andi	r24, 0xEF	; 239
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    187e:	85 b7       	in	r24, 0x35	; 53
    1880:	80 61       	ori	r24, 0x10	; 16
    1882:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	08 95       	ret

00001888 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    1888:	90 91 c8 00 	lds	r25, 0x00C8
    188c:	95 ff       	sbrs	r25, 5
    188e:	fc cf       	rjmp	.-8      	; 0x1888 <putc1>
    1890:	80 93 ce 00 	sts	0x00CE, r24
    1894:	08 95       	ret

00001896 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1896:	90 93 c5 00 	sts	0x00C5, r25
    189a:	80 93 c4 00 	sts	0x00C4, r24
    189e:	86 e0       	ldi	r24, 0x06	; 6
    18a0:	80 93 c2 00 	sts	0x00C2, r24
    18a4:	e1 ec       	ldi	r30, 0xC1	; 193
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8b 7f       	andi	r24, 0xFB	; 251
    18ac:	80 83       	st	Z, r24
    18ae:	a0 ec       	ldi	r26, 0xC0	; 192
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	8c 91       	ld	r24, X
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	8c 93       	st	X, r24
ENABLE_UART0();
    18b8:	80 81       	ld	r24, Z
    18ba:	88 61       	ori	r24, 0x18	; 24
    18bc:	80 83       	st	Z, r24
    18be:	08 95       	ret

000018c0 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    18c0:	90 93 cd 00 	sts	0x00CD, r25
    18c4:	80 93 cc 00 	sts	0x00CC, r24
    18c8:	86 e0       	ldi	r24, 0x06	; 6
    18ca:	80 93 ca 00 	sts	0x00CA, r24
    18ce:	e9 ec       	ldi	r30, 0xC9	; 201
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8b 7f       	andi	r24, 0xFB	; 251
    18d6:	80 83       	st	Z, r24
    18d8:	a8 ec       	ldi	r26, 0xC8	; 200
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	8c 91       	ld	r24, X
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	8c 93       	st	X, r24
ENABLE_UART1();
    18e2:	80 81       	ld	r24, Z
    18e4:	88 61       	ori	r24, 0x18	; 24
    18e6:	80 83       	st	Z, r24
    18e8:	08 95       	ret

000018ea <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    18ea:	0e 94 4b 0c 	call	0x1896	; 0x1896 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    18ee:	65 e0       	ldi	r22, 0x05	; 5
    18f0:	79 e0       	ldi	r23, 0x09	; 9
    18f2:	81 e1       	ldi	r24, 0x11	; 17
    18f4:	99 e0       	ldi	r25, 0x09	; 9
    18f6:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <fdevopen>
    18fa:	90 93 72 05 	sts	0x0572, r25
    18fe:	80 93 71 05 	sts	0x0571, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1902:	65 e0       	ldi	r22, 0x05	; 5
    1904:	79 e0       	ldi	r23, 0x09	; 9
    1906:	81 e1       	ldi	r24, 0x11	; 17
    1908:	99 e0       	ldi	r25, 0x09	; 9
    190a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <fdevopen>
    190e:	90 93 70 05 	sts	0x0570, r25
    1912:	80 93 6f 05 	sts	0x056F, r24
    1916:	08 95       	ret

00001918 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1918:	80 91 c8 00 	lds	r24, 0x00C8
    191c:	87 ff       	sbrs	r24, 7
    191e:	fc cf       	rjmp	.-8      	; 0x1918 <getc1>
    1920:	80 91 c8 00 	lds	r24, 0x00C8
    1924:	8f 77       	andi	r24, 0x7F	; 127
    1926:	80 93 c8 00 	sts	0x00C8, r24
    192a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    192e:	08 95       	ret

00001930 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	c9 f7       	brne	.-14     	; 0x1930 <halWait>

} // halWait
    193e:	08 95       	ret

00001940 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1940:	0c 94 a3 27 	jmp	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>

00001944 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    1944:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__eewr_byte_m128rfa1>
}
    1948:	08 95       	ret

0000194a <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    1960:	f8 2e       	mov	r15, r24
    1962:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    196c:	e8 2e       	mov	r14, r24
    196e:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    1978:	08 2f       	mov	r16, r24
    197a:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    1984:	18 2f       	mov	r17, r24
    1986:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    1990:	9e 2d       	mov	r25, r14
    1992:	9f 0d       	add	r25, r15
ct+=buf[2];
    1994:	90 0f       	add	r25, r16
ct+=buf[3];
    1996:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    1998:	89 13       	cpse	r24, r25
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <read_eeprom_mac_address+0x56>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    19be:	88 83       	st	Y, r24
return NRK_OK;
}
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    19c8:	fc 01       	movw	r30, r24
    19ca:	60 81       	ld	r22, Z
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	08 95       	ret

000019d8 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    19de:	86 e0       	ldi	r24, 0x06	; 6
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    19e6:	88 83       	st	Y, r24
  return NRK_OK;
}
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	8c 01       	movw	r16, r24
    19fa:	c8 e0       	ldi	r28, 0x08	; 8
    19fc:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    1a04:	f8 01       	movw	r30, r16
    1a06:	81 93       	st	Z+, r24
    1a08:	8f 01       	movw	r16, r30
    1a0a:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1a0c:	c8 31       	cpi	r28, 0x18	; 24
    1a0e:	d1 05       	cpc	r29, r1
    1a10:	b1 f7       	brne	.-20     	; 0x19fe <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	8c 01       	movw	r16, r24
    1a28:	c8 e0       	ldi	r28, 0x08	; 8
    1a2a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	61 91       	ld	r22, Z+
    1a30:	8f 01       	movw	r16, r30
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__eewr_byte_m128rfa1>
    1a38:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1a3a:	c8 31       	cpi	r28, 0x18	; 24
    1a3c:	d1 05       	cpc	r29, r1
    1a3e:	b1 f7       	brne	.-20     	; 0x1a2c <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1a52:	87 e0       	ldi	r24, 0x07	; 7
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <__eerd_byte_m128rfa1>
    1a5a:	88 83       	st	Y, r24
  return NRK_OK;
}
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1a64:	fc 01       	movw	r30, r24
    1a66:	60 81       	ld	r22, Z
    1a68:	87 e0       	ldi	r24, 0x07	; 7
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	08 95       	ret

00001a74 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1a74:	f8 94       	cli
    1a76:	08 95       	ret

00001a78 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1a78:	78 94       	sei
    1a7a:	08 95       	ret

00001a7c <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1a7c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <nrk_halt+0x4>

00001a82 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	a3 97       	sbiw	r28, 0x23	; 35
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1a96:	0e 94 90 11 	call	0x2320	; 0x2320 <nrk_signal_create>
    1a9a:	80 93 3e 05 	sts	0x053E, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1a9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa0:	21 f4       	brne	.+8      	; 0x1aaa <nrk_init+0x28>
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8e e0       	ldi	r24, 0x0E	; 14
    1aa6:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1aaa:	0e 94 19 21 	call	0x4232	; 0x4232 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1aae:	80 ff       	sbrs	r24, 0
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <nrk_init+0x38>
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1aba:	10 92 41 05 	sts	0x0541, r1
    nrk_cur_task_TCB = NULL;
    1abe:	10 92 4f 05 	sts	0x054F, r1
    1ac2:	10 92 4e 05 	sts	0x054E, r1
    
    nrk_high_ready_TCB = NULL;
    1ac6:	10 92 40 05 	sts	0x0540, r1
    1aca:	10 92 3f 05 	sts	0x053F, r1
    nrk_high_ready_prio = 0; 
    1ace:	10 92 50 05 	sts	0x0550, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1ad2:	10 92 4d 05 	sts	0x054D, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	80 93 3a 05 	sts	0x053A, r24
    nrk_sem_list[i].value=-1;
    1adc:	80 93 3c 05 	sts	0x053C, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1ae0:	80 93 3b 05 	sts	0x053B, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1ae4:	93 e6       	ldi	r25, 0x63	; 99
    1ae6:	90 93 ec 04 	sts	0x04EC, r25
        nrk_task_TCB[i].task_ID = -1; 
    1aea:	80 93 ea 04 	sts	0x04EA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1aee:	90 93 17 05 	sts	0x0517, r25
        nrk_task_TCB[i].task_ID = -1; 
    1af2:	80 93 15 05 	sts	0x0515, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1af6:	26 e5       	ldi	r18, 0x56	; 86
    1af8:	35 e0       	ldi	r19, 0x05	; 5
    1afa:	30 93 55 05 	sts	0x0555, r19
    1afe:	20 93 54 05 	sts	0x0554, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b02:	81 e5       	ldi	r24, 0x51	; 81
    1b04:	95 e0       	ldi	r25, 0x05	; 5
    1b06:	90 93 58 05 	sts	0x0558, r25
    1b0a:	80 93 57 05 	sts	0x0557, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b0e:	4b e5       	ldi	r20, 0x5B	; 91
    1b10:	55 e0       	ldi	r21, 0x05	; 5
    1b12:	50 93 5a 05 	sts	0x055A, r21
    1b16:	40 93 59 05 	sts	0x0559, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b1a:	30 93 5d 05 	sts	0x055D, r19
    1b1e:	20 93 5c 05 	sts	0x055C, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1b22:	10 92 53 05 	sts	0x0553, r1
    1b26:	10 92 52 05 	sts	0x0552, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1b2a:	10 92 5f 05 	sts	0x055F, r1
    1b2e:	10 92 5e 05 	sts	0x055E, r1
	_head_node = NULL;
    1b32:	10 92 44 05 	sts	0x0544, r1
    1b36:	10 92 43 05 	sts	0x0543, r1
	_free_node = &_nrk_readyQ[0];
    1b3a:	90 93 e1 04 	sts	0x04E1, r25
    1b3e:	80 93 e0 04 	sts	0x04E0, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1b42:	6f e2       	ldi	r22, 0x2F	; 47
    1b44:	7b e1       	ldi	r23, 0x1B	; 27
    1b46:	ce 01       	movw	r24, r28
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	0e 94 51 23 	call	0x46a2	; 0x46a2 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	6c e0       	ldi	r22, 0x0C	; 12
    1b54:	74 e0       	ldi	r23, 0x04	; 4
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	0e 94 55 23 	call	0x46aa	; 0x46aa <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1b5e:	85 e5       	ldi	r24, 0x55	; 85
    1b60:	80 93 0c 04 	sts	0x040C, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1b64:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1b66:	1c 86       	std	Y+12, r1	; 0x0c
    1b68:	1d 86       	std	Y+13, r1	; 0x0d
    1b6a:	1e 86       	std	Y+14, r1	; 0x0e
    1b6c:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1b6e:	18 8a       	std	Y+16, r1	; 0x10
    1b70:	19 8a       	std	Y+17, r1	; 0x11
    1b72:	1a 8a       	std	Y+18, r1	; 0x12
    1b74:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1b76:	1c 8a       	std	Y+20, r1	; 0x14
    1b78:	1d 8a       	std	Y+21, r1	; 0x15
    1b7a:	1e 8a       	std	Y+22, r1	; 0x16
    1b7c:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1b7e:	18 8e       	std	Y+24, r1	; 0x18
    1b80:	19 8e       	std	Y+25, r1	; 0x19
    1b82:	1a 8e       	std	Y+26, r1	; 0x1a
    1b84:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1b86:	1c 8e       	std	Y+28, r1	; 0x1c
    1b88:	1d 8e       	std	Y+29, r1	; 0x1d
    1b8a:	1e 8e       	std	Y+30, r1	; 0x1e
    1b8c:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1b8e:	18 a2       	std	Y+32, r1	; 0x20
    1b90:	19 a2       	std	Y+33, r1	; 0x21
    1b92:	1a a2       	std	Y+34, r1	; 0x22
    1b94:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <nrk_activate_task>
	
}
    1ba8:	a3 96       	adiw	r28, 0x23	; 35
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1bba:	60 91 ea 04 	lds	r22, 0x04EA
	// only check activated tasks
	if(task_ID!=-1)
    1bbe:	6f 3f       	cpi	r22, 0xFF	; 255
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1bc2:	80 91 15 05 	lds	r24, 0x0515
    1bc6:	68 13       	cpse	r22, r24
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1bca:	85 e0       	ldi	r24, 0x05	; 5
    1bcc:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1bd0:	60 91 15 05 	lds	r22, 0x0515
	// only check activated tasks
	if(task_ID!=-1)
    1bd4:	6f 3f       	cpi	r22, 0xFF	; 255
    1bd6:	e1 f4       	brne	.+56     	; 0x1c10 <nrk_start+0x56>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1bd8:	0e 94 c6 14 	call	0x298c	; 0x298c <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1bdc:	9b e2       	ldi	r25, 0x2B	; 43
    1bde:	89 02       	muls	r24, r25
    1be0:	f0 01       	movw	r30, r0
    1be2:	11 24       	eor	r1, r1
    1be4:	ee 51       	subi	r30, 0x1E	; 30
    1be6:	fb 4f       	sbci	r31, 0xFB	; 251
    1be8:	82 85       	ldd	r24, Z+10	; 0x0a
    1bea:	80 93 50 05 	sts	0x0550, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1bee:	f0 93 4f 05 	sts	0x054F, r31
    1bf2:	e0 93 4e 05 	sts	0x054E, r30
    1bf6:	f0 93 40 05 	sts	0x0540, r31
    1bfa:	e0 93 3f 05 	sts	0x053F, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1bfe:	80 93 41 05 	sts	0x0541, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1c02:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1c06:	0e 94 c3 23 	call	0x4786	; 0x4786 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1c0a:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_start_high_ready_task>
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <nrk_start+0x66>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1c10:	80 91 ea 04 	lds	r24, 0x04EA
    1c14:	68 13       	cpse	r22, r24
    1c16:	e0 cf       	rjmp	.-64     	; 0x1bd8 <nrk_start+0x1e>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1c18:	85 e0       	ldi	r24, 0x05	; 5
    1c1a:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
    1c1e:	dc cf       	rjmp	.-72     	; 0x1bd8 <nrk_start+0x1e>
    1c20:	ff cf       	rjmp	.-2      	; 0x1c20 <nrk_start+0x66>

00001c22 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	1f 92       	push	r1
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	5c 01       	movw	r10, r24
    1c3e:	6b 01       	movw	r12, r22
    1c40:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1c42:	dc 01       	movw	r26, r24
    1c44:	19 96       	adiw	r26, 0x09	; 9
    1c46:	8c 91       	ld	r24, X
    1c48:	19 97       	sbiw	r26, 0x09	; 9
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    1c4e:	80 91 3d 05 	lds	r24, 0x053D
    1c52:	8c 93       	st	X, r24
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1c56:	f5 01       	movw	r30, r10
    1c58:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1c5a:	80 91 3d 05 	lds	r24, 0x053D
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <nrk_TCB_init+0x48>
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	87 e0       	ldi	r24, 0x07	; 7
    1c66:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1c6a:	d5 01       	movw	r26, r10
    1c6c:	19 96       	adiw	r26, 0x09	; 9
    1c6e:	8c 91       	ld	r24, X
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <nrk_TCB_init+0x5c>
    1c74:	80 91 3d 05 	lds	r24, 0x053D
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 3d 05 	sts	0x053D, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1c7e:	80 91 3d 05 	lds	r24, 0x053D
    1c82:	81 11       	cpse	r24, r1
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <nrk_TCB_init+0x6a>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 3d 05 	sts	0x053D, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1c8c:	f5 01       	movw	r30, r10
    1c8e:	30 81       	ld	r19, Z
    1c90:	2b e2       	ldi	r18, 0x2B	; 43
    1c92:	32 03       	mulsu	r19, r18
    1c94:	f0 01       	movw	r30, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	ee 51       	subi	r30, 0x1E	; 30
    1c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c9c:	d1 82       	std	Z+1, r13	; 0x01
    1c9e:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1ca0:	d5 01       	movw	r26, r10
    1ca2:	18 96       	adiw	r26, 0x08	; 8
    1ca4:	8c 91       	ld	r24, X
    1ca6:	18 97       	sbiw	r26, 0x08	; 8
    1ca8:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1caa:	3c 91       	ld	r19, X
    1cac:	32 03       	mulsu	r19, r18
    1cae:	f0 01       	movw	r30, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	ee 51       	subi	r30, 0x1E	; 30
    1cb4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1cba:	3c 91       	ld	r19, X
    1cbc:	32 03       	mulsu	r19, r18
    1cbe:	f0 01       	movw	r30, r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	ee 51       	subi	r30, 0x1E	; 30
    1cc4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc6:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1cc8:	0c 91       	ld	r16, X
    1cca:	02 03       	mulsu	r16, r18
    1ccc:	80 01       	movw	r16, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	0e 51       	subi	r16, 0x1E	; 30
    1cd2:	1b 4f       	sbci	r17, 0xFB	; 251
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1cd8:	c5 01       	movw	r24, r10
    1cda:	0b 96       	adiw	r24, 0x0b	; 11
    1cdc:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_nrk_time_to_ticks_long>
    1ce0:	d8 01       	movw	r26, r16
    1ce2:	91 96       	adiw	r26, 0x21	; 33
    1ce4:	6d 93       	st	X+, r22
    1ce6:	7d 93       	st	X+, r23
    1ce8:	8d 93       	st	X+, r24
    1cea:	9c 93       	st	X, r25
    1cec:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1cee:	f5 01       	movw	r30, r10
    1cf0:	83 85       	ldd	r24, Z+11	; 0x0b
    1cf2:	94 85       	ldd	r25, Z+12	; 0x0c
    1cf4:	a5 85       	ldd	r26, Z+13	; 0x0d
    1cf6:	b6 85       	ldd	r27, Z+14	; 0x0e
    1cf8:	88 33       	cpi	r24, 0x38	; 56
    1cfa:	99 48       	sbci	r25, 0x89	; 137
    1cfc:	a1 44       	sbci	r26, 0x41	; 65
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	28 f0       	brcs	.+10     	; 0x1d0c <nrk_TCB_init+0xea>
    1d02:	d5 01       	movw	r26, r10
    1d04:	6c 91       	ld	r22, X
    1d06:	86 e1       	ldi	r24, 0x16	; 22
    1d08:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1d0c:	f5 01       	movw	r30, r10
    1d0e:	00 81       	ld	r16, Z
    1d10:	11 27       	eor	r17, r17
    1d12:	07 fd       	sbrc	r16, 7
    1d14:	10 95       	com	r17
    1d16:	c5 01       	movw	r24, r10
    1d18:	4b 96       	adiw	r24, 0x1b	; 27
    1d1a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_nrk_time_to_ticks_long>
    1d1e:	4b e2       	ldi	r20, 0x2B	; 43
    1d20:	40 9f       	mul	r20, r16
    1d22:	f0 01       	movw	r30, r0
    1d24:	41 9f       	mul	r20, r17
    1d26:	f0 0d       	add	r31, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	ee 51       	subi	r30, 0x1E	; 30
    1d2c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d2e:	65 8b       	std	Z+21, r22	; 0x15
    1d30:	76 8b       	std	Z+22, r23	; 0x16
    1d32:	87 8b       	std	Z+23, r24	; 0x17
    1d34:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1d36:	d5 01       	movw	r26, r10
    1d38:	2c 91       	ld	r18, X
    1d3a:	24 03       	mulsu	r18, r20
    1d3c:	60 01       	movw	r12, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	f6 01       	movw	r30, r12
    1d42:	ee 51       	subi	r30, 0x1E	; 30
    1d44:	fb 4f       	sbci	r31, 0xFB	; 251
    1d46:	6f 01       	movw	r12, r30
    1d48:	05 89       	ldd	r16, Z+21	; 0x15
    1d4a:	16 89       	ldd	r17, Z+22	; 0x16
    1d4c:	27 89       	ldd	r18, Z+23	; 0x17
    1d4e:	30 8d       	ldd	r19, Z+24	; 0x18
    1d50:	81 a1       	ldd	r24, Z+33	; 0x21
    1d52:	92 a1       	ldd	r25, Z+34	; 0x22
    1d54:	a3 a1       	ldd	r26, Z+35	; 0x23
    1d56:	b4 a1       	ldd	r27, Z+36	; 0x24
    1d58:	08 0f       	add	r16, r24
    1d5a:	19 1f       	adc	r17, r25
    1d5c:	2a 1f       	adc	r18, r26
    1d5e:	3b 1f       	adc	r19, r27
    1d60:	01 8f       	std	Z+25, r16	; 0x19
    1d62:	12 8f       	std	Z+26, r17	; 0x1a
    1d64:	23 8f       	std	Z+27, r18	; 0x1b
    1d66:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1d68:	c5 01       	movw	r24, r10
    1d6a:	43 96       	adiw	r24, 0x13	; 19
    1d6c:	49 83       	std	Y+1, r20	; 0x01
    1d6e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_nrk_time_to_ticks_long>
    1d72:	f6 01       	movw	r30, r12
    1d74:	65 a3       	std	Z+37, r22	; 0x25
    1d76:	76 a3       	std	Z+38, r23	; 0x26
    1d78:	87 a3       	std	Z+39, r24	; 0x27
    1d7a:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1d7c:	d5 01       	movw	r26, r10
    1d7e:	2c 91       	ld	r18, X
    1d80:	49 81       	ldd	r20, Y+1	; 0x01
    1d82:	24 03       	mulsu	r18, r20
    1d84:	f0 01       	movw	r30, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	ee 51       	subi	r30, 0x1E	; 30
    1d8a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d8c:	85 a1       	ldd	r24, Z+37	; 0x25
    1d8e:	96 a1       	ldd	r25, Z+38	; 0x26
    1d90:	a7 a1       	ldd	r26, Z+39	; 0x27
    1d92:	b0 a5       	ldd	r27, Z+40	; 0x28
    1d94:	85 8f       	std	Z+29, r24	; 0x1d
    1d96:	96 8f       	std	Z+30, r25	; 0x1e
    1d98:	a7 8f       	std	Z+31, r26	; 0x1f
    1d9a:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	92 a7       	std	Z+42, r25	; 0x2a
    1da2:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1da4:	f3 82       	std	Z+3, r15	; 0x03
    1da6:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1dac:	0f 90       	pop	r0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	08 95       	ret

00001dc4 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1dc4:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <_nrk_scheduler>

00001dc8 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1dc8:	85 e6       	ldi	r24, 0x65	; 101
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	08 95       	ret

00001dce <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    1dce:	e0 91 4e 05 	lds	r30, 0x054E
    1dd2:	f0 91 4f 05 	lds	r31, 0x054F
    1dd6:	84 87       	std	Z+12, r24	; 0x0c
    1dd8:	08 95       	ret

00001dda <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1dda:	e0 91 4e 05 	lds	r30, 0x054E
    1dde:	f0 91 4f 05 	lds	r31, 0x054F
}
    1de2:	84 85       	ldd	r24, Z+12	; 0x0c
    1de4:	08 95       	ret

00001de6 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    1de6:	20 91 0b 04 	lds	r18, 0x040B
    1dea:	22 23       	and	r18, r18
    1dec:	41 f0       	breq	.+16     	; 0x1dfe <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    1dee:	fb 01       	movw	r30, r22
    1df0:	20 83       	st	Z, r18
    *task_id = error_task;
    1df2:	20 91 5e 03 	lds	r18, 0x035E
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18
    return 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    1e00:	08 95       	ret

00001e02 <pause>:
    }

}

void pause()
{
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	1f 92       	push	r1
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1e0c:	19 82       	std	Y+1, r1	; 0x01
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	84 36       	cpi	r24, 0x64	; 100
    1e12:	40 f4       	brcc	.+16     	; 0x1e24 <pause+0x22>
        nrk_spin_wait_us (2000);
    1e14:	80 ed       	ldi	r24, 0xD0	; 208
    1e16:	97 e0       	ldi	r25, 0x07	; 7
    1e18:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	f5 cf       	rjmp	.-22     	; 0x1e0e <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1e24:	0f 90       	pop	r0
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
    pause();
    1e34:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
    pause();
    1e38:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
    pause();
    1e3c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
    nrk_led_clr(GREEN_LED);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
    pause();
    1e48:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <pause>

00001e4c <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
    pause();
    1e54:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
    nrk_led_clr(GREEN_LED);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
    pause();
    1e60:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <pause>

00001e64 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <blink_morse_code_error+0xc>
    1e70:	1f 92       	push	r1
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1e76:	1f 92       	push	r1
    1e78:	8f 93       	push	r24
    1e7a:	83 e1       	ldi	r24, 0x13	; 19
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	9f 93       	push	r25
    1e80:	8f 93       	push	r24
    1e82:	8e 01       	movw	r16, r28
    1e84:	0f 5f       	subi	r16, 0xFF	; 255
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	1f 93       	push	r17
    1e8a:	0f 93       	push	r16
    1e8c:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <sprintf>

    for(i=0; i<strlen(str); i++ )
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	f1 2c       	mov	r15, r1
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	01 90       	ld	r0, Z+
    1ea2:	00 20       	and	r0, r0
    1ea4:	e9 f7       	brne	.-6      	; 0x1ea0 <blink_morse_code_error+0x3c>
    1ea6:	31 97       	sbiw	r30, 0x01	; 1
    1ea8:	e0 1b       	sub	r30, r16
    1eaa:	f1 0b       	sbc	r31, r17
    1eac:	8f 2d       	mov	r24, r15
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	8e 17       	cp	r24, r30
    1eb2:	9f 07       	cpc	r25, r31
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <blink_morse_code_error+0x54>
    1eb6:	5c c0       	rjmp	.+184    	; 0x1f70 <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    1eb8:	f8 01       	movw	r30, r16
    1eba:	e8 0f       	add	r30, r24
    1ebc:	f9 1f       	adc	r31, r25
    1ebe:	80 81       	ld	r24, Z
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	f0 97       	sbiw	r30, 0x30	; 48
    1ec6:	ea 30       	cpi	r30, 0x0A	; 10
    1ec8:	f1 05       	cpc	r31, r1
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <blink_morse_code_error+0x6a>
    1ecc:	49 c0       	rjmp	.+146    	; 0x1f60 <blink_morse_code_error+0xfc>
    1ece:	e6 54       	subi	r30, 0x46	; 70
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
        {
        case '0':
            blink_dash();
    1ed6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1edc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dash();
    1ee0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1ee4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1ee8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1eec:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            break;
    1ef0:	37 c0       	rjmp	.+110    	; 0x1f60 <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    1ef2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1ef6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1efa:	f4 cf       	rjmp	.-24     	; 0x1ee4 <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1efc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1f00:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1f04:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f08:	ef cf       	rjmp	.-34     	; 0x1ee8 <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1f0a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1f0e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1f12:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            blink_dot();
    1f16:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f1a:	e8 cf       	rjmp	.-48     	; 0x1eec <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1f1c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1f22:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dot();
    1f26:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1f2c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f30:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dot();
    1f34:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1f3a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f3e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f42:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dot();
    1f46:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
    1f4a:	08 c0       	rjmp	.+16     	; 0x1f5c <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1f4c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f50:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f54:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dash();
    1f58:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_dash>
            blink_dot();
    1f5c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <blink_dot>
            break;
        }
        pause();
    1f60:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
        pause();
    1f64:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
        pause();
    1f68:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1f6c:	f3 94       	inc	r15
    1f6e:	97 cf       	rjmp	.-210    	; 0x1e9e <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	08 95       	ret

00001f82 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    int8_t t=0,i=0;
    if (error_num == 0)
    1f8a:	80 91 0b 04 	lds	r24, 0x040B
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <nrk_error_print+0x12>
    1f92:	c3 c0       	rjmp	.+390    	; 0x211a <nrk_error_print+0x198>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    1f94:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
#endif


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
    nrk_int_disable ();
    1f98:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    1f9c:	c3 e1       	ldi	r28, 0x13	; 19
    1f9e:	d3 e0       	ldi	r29, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1fa0:	8b e4       	ldi	r24, 0x4B	; 75
    1fa2:	94 e0       	ldi	r25, 0x04	; 4
    1fa4:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>
        printf ("%d", error_task);
    1fa8:	80 91 5e 03 	lds	r24, 0x035E
    1fac:	1f 92       	push	r1
    1fae:	8f 93       	push	r24
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
        nrk_kprintf (PSTR ("): "));
    1fb8:	87 e4       	ldi	r24, 0x47	; 71
    1fba:	94 e0       	ldi	r25, 0x04	; 4
    1fbc:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	80 91 0b 04 	lds	r24, 0x040B
    1fcc:	88 31       	cpi	r24, 0x18	; 24
    1fce:	10 f0       	brcs	.+4      	; 0x1fd4 <nrk_error_print+0x52>
            error_num = NRK_UNKOWN;
    1fd0:	10 92 0b 04 	sts	0x040B, r1
        switch (error_num)
    1fd4:	80 91 0b 04 	lds	r24, 0x040B
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	fc 01       	movw	r30, r24
    1fdc:	31 97       	sbiw	r30, 0x01	; 1
    1fde:	e6 31       	cpi	r30, 0x16	; 22
    1fe0:	f1 05       	cpc	r31, r1
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <nrk_error_print+0x64>
    1fe4:	46 c0       	rjmp	.+140    	; 0x2072 <nrk_error_print+0xf0>
    1fe6:	ec 53       	subi	r30, 0x3C	; 60
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1fee:	8b e0       	ldi	r24, 0x0B	; 11
    1ff0:	94 e0       	ldi	r25, 0x04	; 4
    1ff2:	41 c0       	rjmp	.+130    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1ff4:	84 ee       	ldi	r24, 0xE4	; 228
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	3e c0       	rjmp	.+124    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1ffa:	80 ed       	ldi	r24, 0xD0	; 208
    1ffc:	93 e0       	ldi	r25, 0x03	; 3
    1ffe:	3b c0       	rjmp	.+118    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2000:	8a eb       	ldi	r24, 0xBA	; 186
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	38 c0       	rjmp	.+112    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2006:	8f e9       	ldi	r24, 0x9F	; 159
    2008:	93 e0       	ldi	r25, 0x03	; 3
    200a:	35 c0       	rjmp	.+106    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    200c:	89 e8       	ldi	r24, 0x89	; 137
    200e:	93 e0       	ldi	r25, 0x03	; 3
    2010:	32 c0       	rjmp	.+100    	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2012:	81 e7       	ldi	r24, 0x71	; 113
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	2f c0       	rjmp	.+94     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2018:	8e e5       	ldi	r24, 0x5E	; 94
    201a:	93 e0       	ldi	r25, 0x03	; 3
    201c:	2c c0       	rjmp	.+88     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    201e:	8b e4       	ldi	r24, 0x4B	; 75
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	29 c0       	rjmp	.+82     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2024:	8d e2       	ldi	r24, 0x2D	; 45
    2026:	93 e0       	ldi	r25, 0x03	; 3
    2028:	26 c0       	rjmp	.+76     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    202a:	88 e0       	ldi	r24, 0x08	; 8
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	23 c0       	rjmp	.+70     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2030:	8c ef       	ldi	r24, 0xFC	; 252
    2032:	92 e0       	ldi	r25, 0x02	; 2
    2034:	20 c0       	rjmp	.+64     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2036:	81 ee       	ldi	r24, 0xE1	; 225
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	1d c0       	rjmp	.+58     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    203c:	82 ed       	ldi	r24, 0xD2	; 210
    203e:	92 e0       	ldi	r25, 0x02	; 2
    2040:	1a c0       	rjmp	.+52     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2042:	8e eb       	ldi	r24, 0xBE	; 190
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2048:	8d ea       	ldi	r24, 0xAD	; 173
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    204e:	89 e9       	ldi	r24, 0x99	; 153
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2054:	89 e7       	ldi	r24, 0x79	; 121
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	0e c0       	rjmp	.+28     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    205a:	81 e6       	ldi	r24, 0x61	; 97
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	0b c0       	rjmp	.+22     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2060:	86 e4       	ldi	r24, 0x46	; 70
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2066:	85 e3       	ldi	r24, 0x35	; 53
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <nrk_error_print+0xf4>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    206c:	86 e2       	ldi	r24, 0x26	; 38
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <nrk_error_print+0xf4>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2072:	8f e1       	ldi	r24, 0x1F	; 31
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>
        }
        putchar ('\r');
    207a:	60 91 71 05 	lds	r22, 0x0571
    207e:	70 91 72 05 	lds	r23, 0x0572
    2082:	8d e0       	ldi	r24, 0x0D	; 13
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
        putchar ('\n');
    208a:	60 91 71 05 	lds	r22, 0x0571
    208e:	70 91 72 05 	lds	r23, 0x0572
    2092:	8a e0       	ldi	r24, 0x0A	; 10
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    209a:	14 e1       	ldi	r17, 0x14	; 20

//t=error_num;
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
            nrk_led_clr (3);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
    20ac:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    20ae:	88 ee       	ldi	r24, 0xE8	; 232
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <nrk_spin_wait_us>
    20b6:	01 50       	subi	r16, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    20b8:	d1 f7       	brne	.-12     	; 0x20ae <nrk_error_print+0x12c>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
            nrk_led_clr (2);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
    20ca:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    20cc:	88 ee       	ldi	r24, 0xE8	; 232
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <nrk_spin_wait_us>
    20d4:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    20d6:	d1 f7       	brne	.-12     	; 0x20cc <nrk_error_print+0x14a>
    20d8:	11 50       	subi	r17, 0x01	; 1



//t=error_num;
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    20da:	01 f7       	brne	.-64     	; 0x209c <nrk_error_print+0x11a>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
        nrk_led_clr(3);
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
        blink_morse_code_error( error_task );
    20ec:	80 91 5e 03 	lds	r24, 0x035E
    20f0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <blink_morse_code_error>
        pause();
    20f4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
        nrk_led_set(2);
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 23 0c 	call	0x1846	; 0x1846 <nrk_led_set>
        pause();
    2100:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
        nrk_led_clr(2);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 0c 0c 	call	0x1818	; 0x1818 <nrk_led_clr>
        pause();
    210c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <pause>
        blink_morse_code_error( error_num);
    2110:	80 91 0b 04 	lds	r24, 0x040B
    2114:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <blink_morse_code_error>
    }
    2118:	43 cf       	rjmp	.-378    	; 0x1fa0 <nrk_error_print+0x1e>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2126:	80 93 0b 04 	sts	0x040B, r24
    error_task = nrk_cur_task_TCB->task_ID;
    212a:	e0 91 4e 05 	lds	r30, 0x054E
    212e:	f0 91 4f 05 	lds	r31, 0x054F
    2132:	80 85       	ldd	r24, Z+8	; 0x08
    2134:	80 93 5e 03 	sts	0x035E, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2138:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <nrk_error_print>

0000213c <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    213c:	80 93 0b 04 	sts	0x040B, r24
    error_task = task;
    2140:	60 93 5e 03 	sts	0x035E, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2144:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <nrk_error_print>

00002148 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2148:	6f 92       	push	r6
    214a:	7f 92       	push	r7
    214c:	8f 92       	push	r8
    214e:	9f 92       	push	r9
    2150:	af 92       	push	r10
    2152:	bf 92       	push	r11
    2154:	cf 92       	push	r12
    2156:	df 92       	push	r13
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2164:	87 e5       	ldi	r24, 0x57	; 87
    2166:	94 e0       	ldi	r25, 0x04	; 4
    2168:	0e 94 2e 09 	call	0x125c	; 0x125c <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    216c:	e0 91 4e 05 	lds	r30, 0x054E
    2170:	f0 91 4f 05 	lds	r31, 0x054F
    2174:	20 85       	ldd	r18, Z+8	; 0x08
    2176:	82 2f       	mov	r24, r18
    2178:	99 27       	eor	r25, r25
    217a:	87 fd       	sbrc	r24, 7
    217c:	90 95       	com	r25
    217e:	9f 93       	push	r25
    2180:	2f 93       	push	r18
    2182:	86 e1       	ldi	r24, 0x16	; 22
    2184:	93 e0       	ldi	r25, 0x03	; 3
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    218e:	e0 91 4e 05 	lds	r30, 0x054E
    2192:	f0 91 4f 05 	lds	r31, 0x054F
    2196:	c2 81       	ldd	r28, Z+2	; 0x02
    2198:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	8a e4       	ldi	r24, 0x4A	; 74
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    printf( "canary = %x ",*stkc );
    21aa:	88 81       	ld	r24, Y
    21ac:	1f 92       	push	r1
    21ae:	8f 93       	push	r24
    21b0:	8f e1       	ldi	r24, 0x1F	; 31
    21b2:	93 e0       	ldi	r25, 0x03	; 3
    21b4:	9f 93       	push	r25
    21b6:	8f 93       	push	r24
    21b8:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    21bc:	e0 91 4e 05 	lds	r30, 0x054E
    21c0:	f0 91 4f 05 	lds	r31, 0x054F
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    21c4:	81 81       	ldd	r24, Z+1	; 0x01
    21c6:	8f 93       	push	r24
    21c8:	80 81       	ld	r24, Z
    21ca:	8f 93       	push	r24
    21cc:	8c e2       	ldi	r24, 0x2C	; 44
    21ce:	93 e0       	ldi	r25, 0x03	; 3
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    21d8:	80 91 4f 05 	lds	r24, 0x054F
    21dc:	8f 93       	push	r24
    21de:	80 91 4e 05 	lds	r24, 0x054E
    21e2:	8f 93       	push	r24
    21e4:	86 e3       	ldi	r24, 0x36	; 54
    21e6:	93 e0       	ldi	r25, 0x03	; 3
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    21f0:	c2 ee       	ldi	r28, 0xE2	; 226
    21f2:	d4 e0       	ldi	r29, 0x04	; 4
    21f4:	ed b7       	in	r30, 0x3d	; 61
    21f6:	fe b7       	in	r31, 0x3e	; 62
    21f8:	74 96       	adiw	r30, 0x14	; 20
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	fe bf       	out	0x3e, r31	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	ed bf       	out	0x3d, r30	; 61
    2204:	00 e0       	ldi	r16, 0x00	; 0
    2206:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2208:	86 e4       	ldi	r24, 0x46	; 70
    220a:	68 2e       	mov	r6, r24
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2210:	9f e1       	ldi	r25, 0x1F	; 31
    2212:	89 2e       	mov	r8, r25
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2218:	2c e2       	ldi	r18, 0x2C	; 44
    221a:	a2 2e       	mov	r10, r18
    221c:	23 e0       	ldi	r18, 0x03	; 3
    221e:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2220:	36 e3       	ldi	r19, 0x36	; 54
    2222:	c3 2e       	mov	r12, r19
    2224:	33 e0       	ldi	r19, 0x03	; 3
    2226:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2228:	ea 80       	ldd	r14, Y+2	; 0x02
    222a:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    222c:	ff 92       	push	r15
    222e:	ef 92       	push	r14
    2230:	1f 93       	push	r17
    2232:	0f 93       	push	r16
    2234:	7f 92       	push	r7
    2236:	6f 92       	push	r6
    2238:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
        printf( "canary = %x ",*stkc );
    223c:	f7 01       	movw	r30, r14
    223e:	80 81       	ld	r24, Z
    2240:	1f 92       	push	r1
    2242:	8f 93       	push	r24
    2244:	9f 92       	push	r9
    2246:	8f 92       	push	r8
    2248:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	8f 93       	push	r24
    2250:	88 81       	ld	r24, Y
    2252:	8f 93       	push	r24
    2254:	bf 92       	push	r11
    2256:	af 92       	push	r10
    2258:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	df 92       	push	r13
    2262:	cf 92       	push	r12
    2264:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <printf>
    2268:	0f 5f       	subi	r16, 0xFF	; 255
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    226e:	ed b7       	in	r30, 0x3d	; 61
    2270:	fe b7       	in	r31, 0x3e	; 62
    2272:	72 96       	adiw	r30, 0x12	; 18
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	fe bf       	out	0x3e, r31	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	ed bf       	out	0x3d, r30	; 61
    227e:	02 30       	cpi	r16, 0x02	; 2
    2280:	11 05       	cpc	r17, r1
    2282:	91 f6       	brne	.-92     	; 0x2228 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	9f 90       	pop	r9
    229a:	8f 90       	pop	r8
    229c:	7f 90       	pop	r7
    229e:	6f 90       	pop	r6
    22a0:	08 95       	ret

000022a2 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    22a6:	e0 91 4e 05 	lds	r30, 0x054E
    22aa:	f0 91 4f 05 	lds	r31, 0x054F
    22ae:	c2 81       	ldd	r28, Z+2	; 0x02
    22b0:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22b2:	88 81       	ld	r24, Y
    22b4:	85 35       	cpi	r24, 0x55	; 85
    22b6:	39 f0       	breq	.+14     	; 0x22c6 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    22b8:	0e 94 a4 10 	call	0x2148	; 0x2148 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0e 94 93 10 	call	0x2126	; 0x2126 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    22c2:	85 e5       	ldi	r24, 0x55	; 85
    22c4:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    22c6:	e0 91 4e 05 	lds	r30, 0x054E
    22ca:	f0 91 4f 05 	lds	r31, 0x054F
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	81 15       	cp	r24, r1
    22d4:	92 44       	sbci	r25, 0x42	; 66
    22d6:	38 f0       	brcs	.+14     	; 0x22e6 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    22d8:	0e 94 a4 10 	call	0x2148	; 0x2148 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22dc:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22e2:	0c 94 93 10 	jmp	0x2126	; 0x2126 <nrk_error_add>




#endif
}
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    22ec:	2b e2       	ldi	r18, 0x2B	; 43
    22ee:	82 02       	muls	r24, r18
    22f0:	f0 01       	movw	r30, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	ee 51       	subi	r30, 0x1E	; 30
    22f6:	fb 4f       	sbci	r31, 0xFB	; 251
    22f8:	a2 81       	ldd	r26, Z+2	; 0x02
    22fa:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22fc:	8c 91       	ld	r24, X
    22fe:	85 35       	cpi	r24, 0x55	; 85
    2300:	19 f0       	breq	.+6      	; 0x2308 <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    2302:	85 e5       	ldi	r24, 0x55	; 85
    2304:	8c 93       	st	X, r24
    2306:	08 c0       	rjmp	.+16     	; 0x2318 <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	81 15       	cp	r24, r1
    230e:	92 44       	sbci	r25, 0x42	; 66
    2310:	28 f0       	brcs	.+10     	; 0x231c <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2312:	82 e1       	ldi	r24, 0x12	; 18
    2314:	0e 94 93 10 	call	0x2126	; 0x2126 <nrk_error_add>
        return NRK_ERROR;
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	08 95       	ret
    }
#endif
    return NRK_OK;
    231c:	81 e0       	ldi	r24, 0x01	; 1
}
    231e:	08 95       	ret

00002320 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2324:	00 91 83 03 	lds	r16, 0x0383
    2328:	10 91 84 03 	lds	r17, 0x0384
    232c:	20 91 85 03 	lds	r18, 0x0385
    2330:	30 91 86 03 	lds	r19, 0x0386
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	b9 01       	movw	r22, r18
    233a:	a8 01       	movw	r20, r16
    233c:	08 2e       	mov	r0, r24
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <nrk_signal_create+0x28>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <nrk_signal_create+0x20>
    234c:	40 fd       	sbrc	r20, 0
    234e:	19 c0       	rjmp	.+50     	; 0x2382 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	08 2e       	mov	r0, r24
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <nrk_signal_create+0x44>
    235c:	44 0f       	add	r20, r20
    235e:	55 1f       	adc	r21, r21
    2360:	66 1f       	adc	r22, r22
    2362:	77 1f       	adc	r23, r23
    2364:	0a 94       	dec	r0
    2366:	d2 f7       	brpl	.-12     	; 0x235c <nrk_signal_create+0x3c>
    2368:	40 2b       	or	r20, r16
    236a:	51 2b       	or	r21, r17
    236c:	62 2b       	or	r22, r18
    236e:	73 2b       	or	r23, r19
    2370:	40 93 83 03 	sts	0x0383, r20
    2374:	50 93 84 03 	sts	0x0384, r21
    2378:	60 93 85 03 	sts	0x0385, r22
    237c:	70 93 86 03 	sts	0x0386, r23
			return i;
    2380:	05 c0       	rjmp	.+10     	; 0x238c <nrk_signal_create+0x6c>
    2382:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2384:	80 32       	cpi	r24, 0x20	; 32
    2386:	91 05       	cpc	r25, r1
    2388:	b9 f6       	brne	.-82     	; 0x2338 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    238a:	8f ef       	ldi	r24, 0xFF	; 255


}
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2392:	e0 91 4e 05 	lds	r30, 0x054E
    2396:	f0 91 4f 05 	lds	r31, 0x054F
    239a:	65 85       	ldd	r22, Z+13	; 0x0d
    239c:	76 85       	ldd	r23, Z+14	; 0x0e
    239e:	87 85       	ldd	r24, Z+15	; 0x0f
    23a0:	90 89       	ldd	r25, Z+16	; 0x10
}
    23a2:	08 95       	ret

000023a4 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    23a4:	cf 92       	push	r12
    23a6:	df 92       	push	r13
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	1f 92       	push	r1
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    23ba:	c1 2c       	mov	r12, r1
    23bc:	d1 2c       	mov	r13, r1
    23be:	76 01       	movw	r14, r12
    23c0:	c3 94       	inc	r12
    23c2:	08 2e       	mov	r0, r24
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <nrk_signal_delete+0x2a>
    23c6:	cc 0c       	add	r12, r12
    23c8:	dd 1c       	adc	r13, r13
    23ca:	ee 1c       	adc	r14, r14
    23cc:	ff 1c       	adc	r15, r15
    23ce:	0a 94       	dec	r0
    23d0:	d2 f7       	brpl	.-12     	; 0x23c6 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    23d2:	40 91 83 03 	lds	r20, 0x0383
    23d6:	50 91 84 03 	lds	r21, 0x0384
    23da:	60 91 85 03 	lds	r22, 0x0385
    23de:	70 91 86 03 	lds	r23, 0x0386
    23e2:	4c 21       	and	r20, r12
    23e4:	5d 21       	and	r21, r13
    23e6:	6e 21       	and	r22, r14
    23e8:	7f 21       	and	r23, r15
    23ea:	45 2b       	or	r20, r21
    23ec:	46 2b       	or	r20, r22
    23ee:	47 2b       	or	r20, r23
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <nrk_signal_delete+0x50>
    23f2:	63 c0       	rjmp	.+198    	; 0x24ba <nrk_signal_delete+0x116>

	nrk_int_disable();
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    23fa:	eb ee       	ldi	r30, 0xEB	; 235
    23fc:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23fe:	97 01       	movw	r18, r14
    2400:	86 01       	movw	r16, r12
    2402:	00 95       	com	r16
    2404:	10 95       	com	r17
    2406:	20 95       	com	r18
    2408:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	df 01       	movw	r26, r30
    2410:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2412:	4c 91       	ld	r20, X
    2414:	4f 3f       	cpi	r20, 0xFF	; 255
    2416:	49 f1       	breq	.+82     	; 0x246a <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2418:	44 81       	ldd	r20, Z+4	; 0x04
    241a:	55 81       	ldd	r21, Z+5	; 0x05
    241c:	66 81       	ldd	r22, Z+6	; 0x06
    241e:	77 81       	ldd	r23, Z+7	; 0x07
    2420:	4c 15       	cp	r20, r12
    2422:	5d 05       	cpc	r21, r13
    2424:	6e 05       	cpc	r22, r14
    2426:	7f 05       	cpc	r23, r15
    2428:	41 f4       	brne	.+16     	; 0x243a <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    242a:	10 86       	std	Z+8, r1	; 0x08
    242c:	11 86       	std	Z+9, r1	; 0x09
    242e:	12 86       	std	Z+10, r1	; 0x0a
    2430:	13 86       	std	Z+11, r1	; 0x0b
    2432:	df 01       	movw	r26, r30
    2434:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    2436:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2438:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    243a:	44 81       	ldd	r20, Z+4	; 0x04
    243c:	55 81       	ldd	r21, Z+5	; 0x05
    243e:	66 81       	ldd	r22, Z+6	; 0x06
    2440:	77 81       	ldd	r23, Z+7	; 0x07
    2442:	40 23       	and	r20, r16
    2444:	51 23       	and	r21, r17
    2446:	62 23       	and	r22, r18
    2448:	73 23       	and	r23, r19
    244a:	44 83       	std	Z+4, r20	; 0x04
    244c:	55 83       	std	Z+5, r21	; 0x05
    244e:	66 83       	std	Z+6, r22	; 0x06
    2450:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2452:	40 85       	ldd	r20, Z+8	; 0x08
    2454:	51 85       	ldd	r21, Z+9	; 0x09
    2456:	62 85       	ldd	r22, Z+10	; 0x0a
    2458:	73 85       	ldd	r23, Z+11	; 0x0b
    245a:	40 23       	and	r20, r16
    245c:	51 23       	and	r21, r17
    245e:	62 23       	and	r22, r18
    2460:	73 23       	and	r23, r19
    2462:	40 87       	std	Z+8, r20	; 0x08
    2464:	51 87       	std	Z+9, r21	; 0x09
    2466:	62 87       	std	Z+10, r22	; 0x0a
    2468:	73 87       	std	Z+11, r23	; 0x0b
    246a:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    246c:	45 e0       	ldi	r20, 0x05	; 5
    246e:	e1 34       	cpi	r30, 0x41	; 65
    2470:	f4 07       	cpc	r31, r20
    2472:	69 f6       	brne	.-102    	; 0x240e <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2474:	4e ef       	ldi	r20, 0xFE	; 254
    2476:	5f ef       	ldi	r21, 0xFF	; 255
    2478:	6f ef       	ldi	r22, 0xFF	; 255
    247a:	7f ef       	ldi	r23, 0xFF	; 255
    247c:	04 c0       	rjmp	.+8      	; 0x2486 <nrk_signal_delete+0xe2>
    247e:	44 0f       	add	r20, r20
    2480:	55 1f       	adc	r21, r21
    2482:	66 1f       	adc	r22, r22
    2484:	77 1f       	adc	r23, r23
    2486:	8a 95       	dec	r24
    2488:	d2 f7       	brpl	.-12     	; 0x247e <nrk_signal_delete+0xda>
    248a:	80 91 83 03 	lds	r24, 0x0383
    248e:	90 91 84 03 	lds	r25, 0x0384
    2492:	a0 91 85 03 	lds	r26, 0x0385
    2496:	b0 91 86 03 	lds	r27, 0x0386
    249a:	84 23       	and	r24, r20
    249c:	95 23       	and	r25, r21
    249e:	a6 23       	and	r26, r22
    24a0:	b7 23       	and	r27, r23
    24a2:	80 93 83 03 	sts	0x0383, r24
    24a6:	90 93 84 03 	sts	0x0384, r25
    24aa:	a0 93 85 03 	sts	0x0385, r26
    24ae:	b0 93 86 03 	sts	0x0386, r27
	nrk_int_enable();
    24b2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>

	return NRK_OK;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    24ba:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    24bc:	0f 90       	pop	r0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	08 95       	ret

000024d0 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	04 c0       	rjmp	.+8      	; 0x24e6 <nrk_signal_unregister+0x16>
    24de:	44 0f       	add	r20, r20
    24e0:	55 1f       	adc	r21, r21
    24e2:	66 1f       	adc	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	8a 95       	dec	r24
    24e8:	d2 f7       	brpl	.-12     	; 0x24de <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    24ea:	e0 91 4e 05 	lds	r30, 0x054E
    24ee:	f0 91 4f 05 	lds	r31, 0x054F
    24f2:	85 85       	ldd	r24, Z+13	; 0x0d
    24f4:	96 85       	ldd	r25, Z+14	; 0x0e
    24f6:	a7 85       	ldd	r26, Z+15	; 0x0f
    24f8:	b0 89       	ldd	r27, Z+16	; 0x10
    24fa:	8a 01       	movw	r16, r20
    24fc:	9b 01       	movw	r18, r22
    24fe:	08 23       	and	r16, r24
    2500:	19 23       	and	r17, r25
    2502:	2a 23       	and	r18, r26
    2504:	3b 23       	and	r19, r27
    2506:	01 2b       	or	r16, r17
    2508:	02 2b       	or	r16, r18
    250a:	03 2b       	or	r16, r19
    250c:	d1 f0       	breq	.+52     	; 0x2542 <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    250e:	40 95       	com	r20
    2510:	50 95       	com	r21
    2512:	60 95       	com	r22
    2514:	70 95       	com	r23
    2516:	84 23       	and	r24, r20
    2518:	95 23       	and	r25, r21
    251a:	a6 23       	and	r26, r22
    251c:	b7 23       	and	r27, r23
    251e:	85 87       	std	Z+13, r24	; 0x0d
    2520:	96 87       	std	Z+14, r25	; 0x0e
    2522:	a7 87       	std	Z+15, r26	; 0x0f
    2524:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2526:	81 89       	ldd	r24, Z+17	; 0x11
    2528:	92 89       	ldd	r25, Z+18	; 0x12
    252a:	a3 89       	ldd	r26, Z+19	; 0x13
    252c:	b4 89       	ldd	r27, Z+20	; 0x14
    252e:	84 23       	and	r24, r20
    2530:	95 23       	and	r25, r21
    2532:	a6 23       	and	r26, r22
    2534:	b7 23       	and	r27, r23
    2536:	81 8b       	std	Z+17, r24	; 0x11
    2538:	92 8b       	std	Z+18, r25	; 0x12
    253a:	a3 8b       	std	Z+19, r26	; 0x13
    253c:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2542:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    254a:	40 91 83 03 	lds	r20, 0x0383
    254e:	50 91 84 03 	lds	r21, 0x0384
    2552:	60 91 85 03 	lds	r22, 0x0385
    2556:	70 91 86 03 	lds	r23, 0x0386
    255a:	08 2e       	mov	r0, r24
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <nrk_signal_register+0x1c>
    255e:	76 95       	lsr	r23
    2560:	67 95       	ror	r22
    2562:	57 95       	ror	r21
    2564:	47 95       	ror	r20
    2566:	0a 94       	dec	r0
    2568:	d2 f7       	brpl	.-12     	; 0x255e <nrk_signal_register+0x14>
    256a:	40 ff       	sbrs	r20, 0
    256c:	1d c0       	rjmp	.+58     	; 0x25a8 <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    256e:	e0 91 4e 05 	lds	r30, 0x054E
    2572:	f0 91 4f 05 	lds	r31, 0x054F
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <nrk_signal_register+0x3e>
    2580:	44 0f       	add	r20, r20
    2582:	55 1f       	adc	r21, r21
    2584:	66 1f       	adc	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	8a 95       	dec	r24
    258a:	d2 f7       	brpl	.-12     	; 0x2580 <nrk_signal_register+0x36>
    258c:	85 85       	ldd	r24, Z+13	; 0x0d
    258e:	96 85       	ldd	r25, Z+14	; 0x0e
    2590:	a7 85       	ldd	r26, Z+15	; 0x0f
    2592:	b0 89       	ldd	r27, Z+16	; 0x10
    2594:	84 2b       	or	r24, r20
    2596:	95 2b       	or	r25, r21
    2598:	a6 2b       	or	r26, r22
    259a:	b7 2b       	or	r27, r23
    259c:	85 87       	std	Z+13, r24	; 0x0d
    259e:	96 87       	std	Z+14, r25	; 0x0e
    25a0:	a7 87       	std	Z+15, r26	; 0x0f
    25a2:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	08 95       	ret
	}
            
	return NRK_ERROR;
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
}
    25aa:	08 95       	ret

000025ac <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    25ba:	c1 2c       	mov	r12, r1
    25bc:	d1 2c       	mov	r13, r1
    25be:	76 01       	movw	r14, r12
    25c0:	c3 94       	inc	r12
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <nrk_event_signal+0x20>
    25c4:	cc 0c       	add	r12, r12
    25c6:	dd 1c       	adc	r13, r13
    25c8:	ee 1c       	adc	r14, r14
    25ca:	ff 1c       	adc	r15, r15
    25cc:	8a 95       	dec	r24
    25ce:	d2 f7       	brpl	.-12     	; 0x25c4 <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    25d0:	80 91 83 03 	lds	r24, 0x0383
    25d4:	90 91 84 03 	lds	r25, 0x0384
    25d8:	a0 91 85 03 	lds	r26, 0x0385
    25dc:	b0 91 86 03 	lds	r27, 0x0386
    25e0:	8c 21       	and	r24, r12
    25e2:	9d 21       	and	r25, r13
    25e4:	ae 21       	and	r26, r14
    25e6:	bf 21       	and	r27, r15
    25e8:	89 2b       	or	r24, r25
    25ea:	8a 2b       	or	r24, r26
    25ec:	8b 2b       	or	r24, r27
    25ee:	11 f4       	brne	.+4      	; 0x25f4 <nrk_event_signal+0x48>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	44 c0       	rjmp	.+136    	; 0x267c <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    25f4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    25f8:	e9 ee       	ldi	r30, 0xE9	; 233
    25fa:	f4 e0       	ldi	r31, 0x04	; 4
    25fc:	cb ee       	ldi	r28, 0xEB	; 235
    25fe:	d4 e0       	ldi	r29, 0x04	; 4

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    2600:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2602:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2604:	80 81       	ld	r24, Z
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	b9 f4       	brne	.+46     	; 0x2638 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    260a:	82 85       	ldd	r24, Z+10	; 0x0a
    260c:	93 85       	ldd	r25, Z+11	; 0x0b
    260e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2610:	b5 85       	ldd	r27, Z+13	; 0x0d
    2612:	8c 21       	and	r24, r12
    2614:	9d 21       	and	r25, r13
    2616:	ae 21       	and	r26, r14
    2618:	bf 21       	and	r27, r15
    261a:	89 2b       	or	r24, r25
    261c:	8a 2b       	or	r24, r26
    261e:	8b 2b       	or	r24, r27
    2620:	59 f0       	breq	.+22     	; 0x2638 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2622:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    2624:	16 86       	std	Z+14, r1	; 0x0e
    2626:	17 86       	std	Z+15, r1	; 0x0f
    2628:	10 8a       	std	Z+16, r1	; 0x10
    262a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    262c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    262e:	c2 86       	std	Z+10, r12	; 0x0a
    2630:	d3 86       	std	Z+11, r13	; 0x0b
    2632:	e4 86       	std	Z+12, r14	; 0x0c
    2634:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2636:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2638:	80 81       	ld	r24, Z
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	a1 f4       	brne	.+40     	; 0x2666 <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    263e:	82 85       	ldd	r24, Z+10	; 0x0a
    2640:	93 85       	ldd	r25, Z+11	; 0x0b
    2642:	a4 85       	ldd	r26, Z+12	; 0x0c
    2644:	b5 85       	ldd	r27, Z+13	; 0x0d
    2646:	8c 15       	cp	r24, r12
    2648:	9d 05       	cpc	r25, r13
    264a:	ae 05       	cpc	r26, r14
    264c:	bf 05       	cpc	r27, r15
    264e:	59 f4       	brne	.+22     	; 0x2666 <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2650:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    2652:	16 86       	std	Z+14, r1	; 0x0e
    2654:	17 86       	std	Z+15, r1	; 0x0f
    2656:	10 8a       	std	Z+16, r1	; 0x10
    2658:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    265a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    265c:	12 86       	std	Z+10, r1	; 0x0a
    265e:	13 86       	std	Z+11, r1	; 0x0b
    2660:	14 86       	std	Z+12, r1	; 0x0c
    2662:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2664:	11 e0       	ldi	r17, 0x01	; 1
    2666:	bb 96       	adiw	r30, 0x2b	; 43
    2668:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    266a:	85 e0       	ldi	r24, 0x05	; 5
    266c:	ef 33       	cpi	r30, 0x3F	; 63
    266e:	f8 07       	cpc	r31, r24
    2670:	49 f6       	brne	.-110    	; 0x2604 <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2672:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
	if(event_occured)
    2676:	11 11       	cpse	r17, r1
    2678:	05 c0       	rjmp	.+10     	; 0x2684 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
	return NRK_ERROR;
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    2684:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	ff 90       	pop	r15
    268e:	ef 90       	pop	r14
    2690:	df 90       	pop	r13
    2692:	cf 90       	pop	r12
    2694:	08 95       	ret

00002696 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    269a:	e0 91 4e 05 	lds	r30, 0x054E
    269e:	f0 91 4f 05 	lds	r31, 0x054F
    26a2:	05 85       	ldd	r16, Z+13	; 0x0d
    26a4:	16 85       	ldd	r17, Z+14	; 0x0e
    26a6:	27 85       	ldd	r18, Z+15	; 0x0f
    26a8:	30 89       	ldd	r19, Z+16	; 0x10
    26aa:	06 23       	and	r16, r22
    26ac:	17 23       	and	r17, r23
    26ae:	28 23       	and	r18, r24
    26b0:	39 23       	and	r19, r25
    26b2:	01 2b       	or	r16, r17
    26b4:	02 2b       	or	r16, r18
    26b6:	03 2b       	or	r16, r19
    26b8:	19 f1       	breq	.+70     	; 0x2700 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    26ba:	61 8b       	std	Z+17, r22	; 0x11
    26bc:	72 8b       	std	Z+18, r23	; 0x12
    26be:	83 8b       	std	Z+19, r24	; 0x13
    26c0:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	00 90 3e 05 	lds	r0, 0x053E
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <nrk_event_wait+0x42>
    26d0:	b6 95       	lsr	r27
    26d2:	a7 95       	ror	r26
    26d4:	97 95       	ror	r25
    26d6:	87 95       	ror	r24
    26d8:	0a 94       	dec	r0
    26da:	d2 f7       	brpl	.-12     	; 0x26d0 <nrk_event_wait+0x3a>
    26dc:	80 ff       	sbrs	r24, 0
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    26e0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <nrk_wait_until_nw>
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    26ee:	e0 91 4e 05 	lds	r30, 0x054E
    26f2:	f0 91 4f 05 	lds	r31, 0x054F
    26f6:	61 89       	ldd	r22, Z+17	; 0x11
    26f8:	72 89       	ldd	r23, Z+18	; 0x12
    26fa:	83 89       	ldd	r24, Z+19	; 0x13
    26fc:	94 89       	ldd	r25, Z+20	; 0x14
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	08 95       	ret

00002712 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	8a 53       	subi	r24, 0x3A	; 58
    2716:	95 40       	sbci	r25, 0x05	; 5
    2718:	09 f4       	brne	.+2      	; 0x271c <nrk_get_resource_index+0xa>
    271a:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    271c:	82 2f       	mov	r24, r18
    271e:	81 95       	neg	r24
    2720:	08 95       	ret

00002722 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2722:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2726:	8f 3f       	cpi	r24, 0xFF	; 255
    2728:	11 f4       	brne	.+4      	; 0x272e <nrk_sem_query+0xc>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	03 c0       	rjmp	.+6      	; 0x2734 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	29 f4       	brne	.+10     	; 0x273c <nrk_sem_query+0x1a>
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    273c:	99 27       	eor	r25, r25
    273e:	87 fd       	sbrc	r24, 7
    2740:	90 95       	com	r25
    2742:	fc 01       	movw	r30, r24
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	e8 0f       	add	r30, r24
    274a:	f9 1f       	adc	r31, r25
    274c:	e4 5c       	subi	r30, 0xC4	; 196
    274e:	fa 4f       	sbci	r31, 0xFA	; 250
    2750:	80 81       	ld	r24, Z
}
    2752:	08 95       	ret

00002754 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	1f 92       	push	r1
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2766:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    276a:	8f 3f       	cpi	r24, 0xFF	; 255
    276c:	11 f4       	brne	.+4      	; 0x2772 <nrk_sem_pend+0x1e>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	29 f4       	brne	.+10     	; 0x2780 <nrk_sem_pend+0x2c>
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	e8 2e       	mov	r14, r24
    278a:	ff 24       	eor	r15, r15
    278c:	e7 fc       	sbrc	r14, 7
    278e:	f0 94       	com	r15
    2790:	87 01       	movw	r16, r14
    2792:	00 0f       	add	r16, r16
    2794:	11 1f       	adc	r17, r17
    2796:	f8 01       	movw	r30, r16
    2798:	ee 0d       	add	r30, r14
    279a:	ff 1d       	adc	r31, r15
    279c:	e4 5c       	subi	r30, 0xC4	; 196
    279e:	fa 4f       	sbci	r31, 0xFA	; 250
    27a0:	90 81       	ld	r25, Z
    27a2:	91 11       	cpse	r25, r1
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    27a6:	e0 91 4e 05 	lds	r30, 0x054E
    27aa:	f0 91 4f 05 	lds	r31, 0x054F
    27ae:	97 81       	ldd	r25, Z+7	; 0x07
    27b0:	92 60       	ori	r25, 0x02	; 2
    27b2:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    27b4:	99 27       	eor	r25, r25
    27b6:	87 fd       	sbrc	r24, 7
    27b8:	90 95       	com	r25
    27ba:	a9 2f       	mov	r26, r25
    27bc:	b9 2f       	mov	r27, r25
    27be:	81 8b       	std	Z+17, r24	; 0x11
    27c0:	92 8b       	std	Z+18, r25	; 0x12
    27c2:	a3 8b       	std	Z+19, r26	; 0x13
    27c4:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    27c6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    27d2:	0e 0d       	add	r16, r14
    27d4:	1f 1d       	adc	r17, r15
    27d6:	f8 01       	movw	r30, r16
    27d8:	e4 5c       	subi	r30, 0xC4	; 196
    27da:	fa 4f       	sbci	r31, 0xFA	; 250
    27dc:	80 81       	ld	r24, Z
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	80 83       	st	Z, r24
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    27e2:	e0 91 4e 05 	lds	r30, 0x054E
    27e6:	f0 91 4f 05 	lds	r31, 0x054F
    27ea:	d8 01       	movw	r26, r16
    27ec:	a5 5c       	subi	r26, 0xC5	; 197
    27ee:	ba 4f       	sbci	r27, 0xFA	; 250
    27f0:	8c 91       	ld	r24, X
    27f2:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    27f8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>

	return NRK_OK;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
}
    27fe:	0f 90       	pop	r0
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	ff 90       	pop	r15
    280a:	ef 90       	pop	r14
    280c:	08 95       	ret

0000280e <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	1f 92       	push	r1
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    281c:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	11 f4       	brne	.+4      	; 0x2828 <nrk_sem_post+0x1a>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	03 c0       	rjmp	.+6      	; 0x282e <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	29 f4       	brne	.+10     	; 0x2836 <nrk_sem_post+0x28>
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	7c c0       	rjmp	.+248    	; 0x292e <nrk_sem_post+0x120>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2836:	48 2f       	mov	r20, r24
    2838:	55 27       	eor	r21, r21
    283a:	47 fd       	sbrc	r20, 7
    283c:	50 95       	com	r21
    283e:	9a 01       	movw	r18, r20
    2840:	22 0f       	add	r18, r18
    2842:	33 1f       	adc	r19, r19
    2844:	24 0f       	add	r18, r20
    2846:	35 1f       	adc	r19, r21
    2848:	89 01       	movw	r16, r18
    284a:	04 5c       	subi	r16, 0xC4	; 196
    284c:	1a 4f       	sbci	r17, 0xFA	; 250
    284e:	f9 01       	movw	r30, r18
    2850:	e6 5c       	subi	r30, 0xC6	; 198
    2852:	fa 4f       	sbci	r31, 0xFA	; 250
    2854:	d8 01       	movw	r26, r16
    2856:	4c 91       	ld	r20, X
    2858:	90 81       	ld	r25, Z
    285a:	49 17       	cp	r20, r25
    285c:	0c f0       	brlt	.+2      	; 0x2860 <nrk_sem_post+0x52>
    285e:	66 c0       	rjmp	.+204    	; 0x292c <nrk_sem_post+0x11e>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>

		nrk_sem_list[id].value++;
    2866:	f8 01       	movw	r30, r16
    2868:	90 81       	ld	r25, Z
    286a:	9f 5f       	subi	r25, 0xFF	; 255
    286c:	90 83       	st	Z, r25
		nrk_cur_task_TCB->elevated_prio_flag=0;
    286e:	e0 91 4e 05 	lds	r30, 0x054E
    2872:	f0 91 4f 05 	lds	r31, 0x054F
    2876:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2878:	90 91 e9 04 	lds	r25, 0x04E9
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	92 30       	cpi	r25, 0x02	; 2
    2880:	41 f5       	brne	.+80     	; 0x28d2 <nrk_sem_post+0xc4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2882:	00 91 f3 04 	lds	r16, 0x04F3
    2886:	10 91 f4 04 	lds	r17, 0x04F4
    288a:	20 91 f5 04 	lds	r18, 0x04F5
    288e:	30 91 f6 04 	lds	r19, 0x04F6
    2892:	48 2f       	mov	r20, r24
    2894:	55 27       	eor	r21, r21
    2896:	47 fd       	sbrc	r20, 7
    2898:	50 95       	com	r21
    289a:	65 2f       	mov	r22, r21
    289c:	75 2f       	mov	r23, r21
    289e:	04 17       	cp	r16, r20
    28a0:	15 07       	cpc	r17, r21
    28a2:	26 07       	cpc	r18, r22
    28a4:	37 07       	cpc	r19, r23
    28a6:	a9 f4       	brne	.+42     	; 0x28d2 <nrk_sem_post+0xc4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	90 93 eb 04 	sts	0x04EB, r25
					nrk_task_TCB[task_ID].next_wakeup=0;
    28ae:	10 92 f7 04 	sts	0x04F7, r1
    28b2:	10 92 f8 04 	sts	0x04F8, r1
    28b6:	10 92 f9 04 	sts	0x04F9, r1
    28ba:	10 92 fa 04 	sts	0x04FA, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    28be:	10 92 e9 04 	sts	0x04E9, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    28c2:	10 92 f3 04 	sts	0x04F3, r1
    28c6:	10 92 f4 04 	sts	0x04F4, r1
    28ca:	10 92 f5 04 	sts	0x04F5, r1
    28ce:	10 92 f6 04 	sts	0x04F6, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    28d2:	90 91 14 05 	lds	r25, 0x0514
    28d6:	92 30       	cpi	r25, 0x02	; 2
    28d8:	39 f5       	brne	.+78     	; 0x2928 <nrk_sem_post+0x11a>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    28da:	99 27       	eor	r25, r25
    28dc:	87 fd       	sbrc	r24, 7
    28de:	90 95       	com	r25
    28e0:	a9 2f       	mov	r26, r25
    28e2:	b9 2f       	mov	r27, r25
    28e4:	40 91 1e 05 	lds	r20, 0x051E
    28e8:	50 91 1f 05 	lds	r21, 0x051F
    28ec:	60 91 20 05 	lds	r22, 0x0520
    28f0:	70 91 21 05 	lds	r23, 0x0521
    28f4:	48 17       	cp	r20, r24
    28f6:	59 07       	cpc	r21, r25
    28f8:	6a 07       	cpc	r22, r26
    28fa:	7b 07       	cpc	r23, r27
    28fc:	a9 f4       	brne	.+42     	; 0x2928 <nrk_sem_post+0x11a>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	80 93 16 05 	sts	0x0516, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2904:	10 92 22 05 	sts	0x0522, r1
    2908:	10 92 23 05 	sts	0x0523, r1
    290c:	10 92 24 05 	sts	0x0524, r1
    2910:	10 92 25 05 	sts	0x0525, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    2914:	10 92 14 05 	sts	0x0514, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2918:	10 92 1e 05 	sts	0x051E, r1
    291c:	10 92 1f 05 	sts	0x051F, r1
    2920:	10 92 20 05 	sts	0x0520, r1
    2924:	10 92 21 05 	sts	0x0521, r1
				}   

		}
		nrk_int_enable();
    2928:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
	}
		
return NRK_OK;
    292c:	81 e0       	ldi	r24, 0x01	; 1
}
    292e:	0f 90       	pop	r0
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    293a:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    293e:	8f 3f       	cpi	r24, 0xFF	; 255
    2940:	11 f4       	brne	.+4      	; 0x2946 <nrk_sem_delete+0xc>
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	03 c0       	rjmp	.+6      	; 0x294c <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	29 f4       	brne	.+10     	; 0x2954 <nrk_sem_delete+0x1a>
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
    2950:	8f ef       	ldi	r24, 0xFF	; 255
    2952:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2954:	99 27       	eor	r25, r25
    2956:	87 fd       	sbrc	r24, 7
    2958:	90 95       	com	r25
    295a:	9c 01       	movw	r18, r24
    295c:	22 0f       	add	r18, r18
    295e:	33 1f       	adc	r19, r19
    2960:	28 0f       	add	r18, r24
    2962:	39 1f       	adc	r19, r25
    2964:	f9 01       	movw	r30, r18
    2966:	e6 5c       	subi	r30, 0xC6	; 198
    2968:	fa 4f       	sbci	r31, 0xFA	; 250
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    296e:	f9 01       	movw	r30, r18
    2970:	e4 5c       	subi	r30, 0xC4	; 196
    2972:	fa 4f       	sbci	r31, 0xFA	; 250
    2974:	80 83       	st	Z, r24
	nrk_sem_list[id].resource_ceiling=-1;
    2976:	f9 01       	movw	r30, r18
    2978:	e5 5c       	subi	r30, 0xC5	; 197
    297a:	fa 4f       	sbci	r31, 0xFA	; 250
    297c:	80 83       	st	Z, r24
	_nrk_resource_cnt--;
    297e:	80 91 4d 05 	lds	r24, 0x054D
    2982:	81 50       	subi	r24, 0x01	; 1
    2984:	80 93 4d 05 	sts	0x054D, r24
return NRK_OK;
    2988:	81 e0       	ldi	r24, 0x01	; 1
}
    298a:	08 95       	ret

0000298c <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    298c:	e0 91 43 05 	lds	r30, 0x0543
    2990:	f0 91 44 05 	lds	r31, 0x0544
}
    2994:	80 81       	ld	r24, Z
    2996:	08 95       	ret

00002998 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2998:	e0 91 43 05 	lds	r30, 0x0543
    299c:	f0 91 44 05 	lds	r31, 0x0544
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    29a0:	30 97       	sbiw	r30, 0x00	; 0
    29a2:	21 f0       	breq	.+8      	; 0x29ac <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    29a4:	03 80       	ldd	r0, Z+3	; 0x03
    29a6:	f4 81       	ldd	r31, Z+4	; 0x04
    29a8:	e0 2d       	mov	r30, r0
    29aa:	fa cf       	rjmp	.-12     	; 0x29a0 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    29ac:	08 95       	ret

000029ae <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    29be:	e0 91 e0 04 	lds	r30, 0x04E0
    29c2:	f0 91 e1 04 	lds	r31, 0x04E1
    29c6:	30 97       	sbiw	r30, 0x00	; 0
    29c8:	09 f4       	brne	.+2      	; 0x29cc <nrk_add_to_readyQ+0x1e>
    29ca:	8a c0       	rjmp	.+276    	; 0x2ae0 <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    29cc:	40 91 43 05 	lds	r20, 0x0543
    29d0:	50 91 44 05 	lds	r21, 0x0544
    CurNode = _free_node;

    if (_head_node != NULL)
    29d4:	41 15       	cp	r20, r1
    29d6:	51 05       	cpc	r21, r1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <nrk_add_to_readyQ+0x2e>
    29da:	46 c0       	rjmp	.+140    	; 0x2a68 <nrk_add_to_readyQ+0xba>
    29dc:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    29de:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    29e0:	69 2f       	mov	r22, r25
    29e2:	78 2f       	mov	r23, r24
    29e4:	76 03       	mulsu	r23, r22
    29e6:	90 01       	movw	r18, r0
    29e8:	11 24       	eor	r1, r1
    29ea:	2e 51       	subi	r18, 0x1E	; 30
    29ec:	3b 4f       	sbci	r19, 0xFB	; 251
    29ee:	89 01       	movw	r16, r18
    29f0:	06 5f       	subi	r16, 0xF6	; 246
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    29f4:	79 01       	movw	r14, r18
    29f6:	c4 e0       	ldi	r28, 0x04	; 4
    29f8:	ec 0e       	add	r14, r28
    29fa:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    29fc:	25 5f       	subi	r18, 0xF5	; 245
    29fe:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2a00:	6c 91       	ld	r22, X
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	96 9f       	mul	r25, r22
    2a06:	e0 01       	movw	r28, r0
    2a08:	97 9f       	mul	r25, r23
    2a0a:	d0 0d       	add	r29, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	ce 51       	subi	r28, 0x1E	; 30
    2a10:	db 4f       	sbci	r29, 0xFB	; 251
    2a12:	dc 80       	ldd	r13, Y+4	; 0x04
    2a14:	dd 20       	and	r13, r13
    2a16:	29 f0       	breq	.+10     	; 0x2a22 <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    2a18:	db 84       	ldd	r13, Y+11	; 0x0b
    2a1a:	e8 01       	movw	r28, r16
    2a1c:	c8 80       	ld	r12, Y
    2a1e:	dc 14       	cp	r13, r12
    2a20:	28 f1       	brcs	.+74     	; 0x2a6c <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2a22:	e7 01       	movw	r28, r14
    2a24:	d8 80       	ld	r13, Y
    2a26:	dd 20       	and	r13, r13
    2a28:	61 f0       	breq	.+24     	; 0x2a42 <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2a2a:	96 9f       	mul	r25, r22
    2a2c:	e0 01       	movw	r28, r0
    2a2e:	97 9f       	mul	r25, r23
    2a30:	d0 0d       	add	r29, r0
    2a32:	11 24       	eor	r1, r1
    2a34:	ce 51       	subi	r28, 0x1E	; 30
    2a36:	db 4f       	sbci	r29, 0xFB	; 251
    2a38:	da 84       	ldd	r13, Y+10	; 0x0a
    2a3a:	e9 01       	movw	r28, r18
    2a3c:	c8 80       	ld	r12, Y
    2a3e:	dc 14       	cp	r13, r12
    2a40:	a8 f0       	brcs	.+42     	; 0x2a6c <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2a42:	96 9f       	mul	r25, r22
    2a44:	e0 01       	movw	r28, r0
    2a46:	97 9f       	mul	r25, r23
    2a48:	d0 0d       	add	r29, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	ce 51       	subi	r28, 0x1E	; 30
    2a4e:	db 4f       	sbci	r29, 0xFB	; 251
    2a50:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a52:	e8 01       	movw	r28, r16
    2a54:	68 81       	ld	r22, Y
    2a56:	76 17       	cp	r23, r22
    2a58:	48 f0       	brcs	.+18     	; 0x2a6c <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2a5a:	13 96       	adiw	r26, 0x03	; 3
    2a5c:	0d 90       	ld	r0, X+
    2a5e:	bc 91       	ld	r27, X
    2a60:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2a62:	10 97       	sbiw	r26, 0x00	; 0
    2a64:	69 f6       	brne	.-102    	; 0x2a00 <nrk_add_to_readyQ+0x52>
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <nrk_add_to_readyQ+0xbe>
    2a68:	a0 e0       	ldi	r26, 0x00	; 0
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2a6c:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2a6e:	c3 81       	ldd	r28, Z+3	; 0x03
    2a70:	d4 81       	ldd	r29, Z+4	; 0x04
    2a72:	d0 93 e1 04 	sts	0x04E1, r29
    2a76:	c0 93 e0 04 	sts	0x04E0, r28

    if (NextNode == _head_node)
    2a7a:	a4 17       	cp	r26, r20
    2a7c:	b5 07       	cpc	r27, r21
    2a7e:	b1 f4       	brne	.+44     	; 0x2aac <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    2a80:	10 97       	sbiw	r26, 0x00	; 0
    2a82:	49 f0       	breq	.+18     	; 0x2a96 <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    2a84:	b4 83       	std	Z+4, r27	; 0x04
    2a86:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2a88:	12 82       	std	Z+2, r1	; 0x02
    2a8a:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2a8c:	12 96       	adiw	r26, 0x02	; 2
    2a8e:	fc 93       	st	X, r31
    2a90:	ee 93       	st	-X, r30
    2a92:	11 97       	sbiw	r26, 0x01	; 1
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    2a96:	14 82       	std	Z+4, r1	; 0x04
    2a98:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2a9a:	12 82       	std	Z+2, r1	; 0x02
    2a9c:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2a9e:	fa 83       	std	Y+2, r31	; 0x02
    2aa0:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2aa2:	f0 93 44 05 	sts	0x0544, r31
    2aa6:	e0 93 43 05 	sts	0x0543, r30
    2aaa:	1a c0       	rjmp	.+52     	; 0x2ae0 <nrk_add_to_readyQ+0x132>
    2aac:	11 96       	adiw	r26, 0x01	; 1
    2aae:	8d 91       	ld	r24, X+
    2ab0:	9c 91       	ld	r25, X
    2ab2:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2ab4:	ac 17       	cp	r26, r28
    2ab6:	bd 07       	cpc	r27, r29
    2ab8:	59 f0       	breq	.+22     	; 0x2ad0 <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2aba:	92 83       	std	Z+2, r25	; 0x02
    2abc:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2abe:	b4 83       	std	Z+4, r27	; 0x04
    2ac0:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2ac2:	11 96       	adiw	r26, 0x01	; 1
    2ac4:	cd 91       	ld	r28, X+
    2ac6:	dc 91       	ld	r29, X
    2ac8:	12 97       	sbiw	r26, 0x02	; 2
    2aca:	fc 83       	std	Y+4, r31	; 0x04
    2acc:	eb 83       	std	Y+3, r30	; 0x03
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2ad0:	14 82       	std	Z+4, r1	; 0x04
    2ad2:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2ad4:	92 83       	std	Z+2, r25	; 0x02
    2ad6:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2ad8:	12 96       	adiw	r26, 0x02	; 2
    2ada:	fc 93       	st	X, r31
    2adc:	ee 93       	st	-X, r30
    2ade:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	08 95       	ret

00002af2 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2af6:	e0 91 43 05 	lds	r30, 0x0543
    2afa:	f0 91 44 05 	lds	r31, 0x0544
    2afe:	30 97       	sbiw	r30, 0x00	; 0
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <nrk_rem_from_readyQ+0x12>
    2b02:	44 c0       	rjmp	.+136    	; 0x2b8c <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2b04:	99 27       	eor	r25, r25
    2b06:	87 fd       	sbrc	r24, 7
    2b08:	90 95       	com	r25
    2b0a:	20 81       	ld	r18, Z
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	28 17       	cp	r18, r24
    2b10:	39 07       	cpc	r19, r25
    2b12:	81 f4       	brne	.+32     	; 0x2b34 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2b14:	a3 81       	ldd	r26, Z+3	; 0x03
    2b16:	b4 81       	ldd	r27, Z+4	; 0x04
    2b18:	b0 93 44 05 	sts	0x0544, r27
    2b1c:	a0 93 43 05 	sts	0x0543, r26
        _head_node->Prev = NULL;
    2b20:	12 96       	adiw	r26, 0x02	; 2
    2b22:	1c 92       	st	X, r1
    2b24:	1e 92       	st	-X, r1
    2b26:	11 97       	sbiw	r26, 0x01	; 1
    2b28:	18 c0       	rjmp	.+48     	; 0x2b5a <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2b2a:	03 80       	ldd	r0, Z+3	; 0x03
    2b2c:	f4 81       	ldd	r31, Z+4	; 0x04
    2b2e:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2b30:	30 97       	sbiw	r30, 0x00	; 0
    2b32:	61 f1       	breq	.+88     	; 0x2b8c <nrk_rem_from_readyQ+0x9a>
    2b34:	20 81       	ld	r18, Z
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	28 17       	cp	r18, r24
    2b3a:	39 07       	cpc	r19, r25
    2b3c:	b1 f7       	brne	.-20     	; 0x2b2a <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2b3e:	c1 81       	ldd	r28, Z+1	; 0x01
    2b40:	d2 81       	ldd	r29, Z+2	; 0x02
    2b42:	83 81       	ldd	r24, Z+3	; 0x03
    2b44:	94 81       	ldd	r25, Z+4	; 0x04
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2b4a:	a3 81       	ldd	r26, Z+3	; 0x03
    2b4c:	b4 81       	ldd	r27, Z+4	; 0x04
    2b4e:	10 97       	sbiw	r26, 0x00	; 0
    2b50:	21 f0       	breq	.+8      	; 0x2b5a <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2b52:	12 96       	adiw	r26, 0x02	; 2
    2b54:	dc 93       	st	X, r29
    2b56:	ce 93       	st	-X, r28
    2b58:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2b5a:	a0 91 e0 04 	lds	r26, 0x04E0
    2b5e:	b0 91 e1 04 	lds	r27, 0x04E1
    2b62:	10 97       	sbiw	r26, 0x00	; 0
    2b64:	39 f4       	brne	.+14     	; 0x2b74 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2b66:	f0 93 e1 04 	sts	0x04E1, r31
    2b6a:	e0 93 e0 04 	sts	0x04E0, r30
        _free_node->Next = NULL;
    2b6e:	14 82       	std	Z+4, r1	; 0x04
    2b70:	13 82       	std	Z+3, r1	; 0x03
    2b72:	0a c0       	rjmp	.+20     	; 0x2b88 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2b74:	b4 83       	std	Z+4, r27	; 0x04
    2b76:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2b78:	12 96       	adiw	r26, 0x02	; 2
    2b7a:	fc 93       	st	X, r31
    2b7c:	ee 93       	st	-X, r30
    2b7e:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2b80:	f0 93 e1 04 	sts	0x04E1, r31
    2b84:	e0 93 e0 04 	sts	0x04E0, r30
    }
    _free_node->Prev = NULL;
    2b88:	12 82       	std	Z+2, r1	; 0x02
    2b8a:	11 82       	std	Z+1, r1	; 0x01
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2ba0:	4b 81       	ldd	r20, Y+3	; 0x03
    2ba2:	5c 81       	ldd	r21, Y+4	; 0x04
    2ba4:	69 81       	ldd	r22, Y+1	; 0x01
    2ba6:	7a 81       	ldd	r23, Y+2	; 0x02
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	0e 94 74 23 	call	0x46e8	; 0x46e8 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2bb0:	2f 81       	ldd	r18, Y+7	; 0x07
    2bb2:	22 23       	and	r18, r18
    2bb4:	71 f0       	breq	.+28     	; 0x2bd2 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2bb6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bb8:	5c 81       	ldd	r21, Y+4	; 0x04
    2bba:	e1 2c       	mov	r14, r1
    2bbc:	f1 2c       	mov	r15, r1
    2bbe:	00 e0       	ldi	r16, 0x00	; 0
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	ce 01       	movw	r24, r28
    2bca:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2bce:	1f 82       	std	Y+7, r1	; 0x07
    2bd0:	0c c0       	rjmp	.+24     	; 0x2bea <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2bd2:	e8 81       	ld	r30, Y
    2bd4:	2b e2       	ldi	r18, 0x2B	; 43
    2bd6:	e2 02       	muls	r30, r18
    2bd8:	f0 01       	movw	r30, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	ee 51       	subi	r30, 0x1E	; 30
    2bde:	fb 4f       	sbci	r31, 0xFB	; 251
    2be0:	21 85       	ldd	r18, Z+9	; 0x09
    2be2:	23 30       	cpi	r18, 0x03	; 3
    2be4:	b9 f4       	brne	.+46     	; 0x2c14 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2bea:	e8 81       	ld	r30, Y
    2bec:	8b e2       	ldi	r24, 0x2B	; 43
    2bee:	e8 02       	muls	r30, r24
    2bf0:	f0 01       	movw	r30, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	ee 51       	subi	r30, 0x1E	; 30
    2bf6:	fb 4f       	sbci	r31, 0xFB	; 251
    2bf8:	45 89       	ldd	r20, Z+21	; 0x15
    2bfa:	56 89       	ldd	r21, Z+22	; 0x16
    2bfc:	67 89       	ldd	r22, Z+23	; 0x17
    2bfe:	70 8d       	ldd	r23, Z+24	; 0x18
    2c00:	45 2b       	or	r20, r21
    2c02:	46 2b       	or	r20, r22
    2c04:	47 2b       	or	r20, r23
    2c06:	41 f4       	brne	.+16     	; 0x2c18 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2c0c:	88 81       	ld	r24, Y
    2c0e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <nrk_add_to_readyQ>
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	01 c0       	rjmp	.+2      	; 0x2c1a <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
}
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	08 95       	ret

00002c28 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	28 97       	sbiw	r28, 0x08	; 8
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	29 83       	std	Y+1, r18	; 0x01
    2c40:	3a 83       	std	Y+2, r19	; 0x02
    2c42:	4b 83       	std	Y+3, r20	; 0x03
    2c44:	5c 83       	std	Y+4, r21	; 0x04
    2c46:	6d 83       	std	Y+5, r22	; 0x05
    2c48:	7e 83       	std	Y+6, r23	; 0x06
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2c4e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2c52:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2c56:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2c58:	ce 01       	movw	r24, r28
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2c60:	63 30       	cpi	r22, 0x03	; 3
    2c62:	71 05       	cpc	r23, r1
    2c64:	98 f0       	brcs	.+38     	; 0x2c8c <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2c66:	e0 91 4e 05 	lds	r30, 0x054E
    2c6a:	f0 91 4f 05 	lds	r31, 0x054F
    2c6e:	21 2f       	mov	r18, r17
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	26 0f       	add	r18, r22
    2c74:	37 1f       	adc	r19, r23
    2c76:	c9 01       	movw	r24, r18
    2c78:	a0 e0       	ldi	r26, 0x00	; 0
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	85 8b       	std	Z+21, r24	; 0x15
    2c7e:	96 8b       	std	Z+22, r25	; 0x16
    2c80:	a7 8b       	std	Z+23, r26	; 0x17
    2c82:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2c84:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>

    return NRK_OK;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2c8c:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2c8e:	28 96       	adiw	r28, 0x08	; 8
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	08 95       	ret

00002ca2 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2ca2:	0e 94 46 23 	call	0x468c	; 0x468c <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2ca6:	e0 91 4e 05 	lds	r30, 0x054E
    2caa:	f0 91 4f 05 	lds	r31, 0x054F
    2cae:	85 81       	ldd	r24, Z+5	; 0x05
    2cb0:	81 11       	cpse	r24, r1
    2cb2:	f7 cf       	rjmp	.-18     	; 0x2ca2 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2cb4:	08 95       	ret

00002cb6 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2cb6:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2cb8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2cbc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2cc0:	e0 91 4e 05 	lds	r30, 0x054E
    2cc4:	f0 91 4f 05 	lds	r31, 0x054F
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	92 a7       	std	Z+42, r25	; 0x2a
    2cce:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2cd4:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2cd8:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2cda:	88 3f       	cpi	r24, 0xF8	; 248
    2cdc:	88 f4       	brcc	.+34     	; 0x2d00 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cde:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2ce2:	2c 2f       	mov	r18, r28
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	48 2f       	mov	r20, r24
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	24 17       	cp	r18, r20
    2cf0:	35 07       	cpc	r19, r21
    2cf2:	34 f4       	brge	.+12     	; 0x2d00 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2cf8:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2cfc:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2d00:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2d04:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2d0e:	e0 91 4e 05 	lds	r30, 0x054E
    2d12:	f0 91 4f 05 	lds	r31, 0x054F
    2d16:	80 85       	ldd	r24, Z+8	; 0x08
    2d18:	0e 94 79 15 	call	0x2af2	; 0x2af2 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2d1c:	e0 91 4e 05 	lds	r30, 0x054E
    2d20:	f0 91 4f 05 	lds	r31, 0x054F
    2d24:	84 e0       	ldi	r24, 0x04	; 4
    2d26:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2d28:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	08 95       	ret

00002d30 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2d36:	0e 94 51 11 	call	0x22a2	; 0x22a2 <nrk_stack_check>

    if (p == 0)
    2d3a:	20 97       	sbiw	r28, 0x00	; 0
    2d3c:	11 f4       	brne	.+4      	; 0x2d42 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2d3e:	c1 e0       	ldi	r28, 0x01	; 1
    2d40:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2d42:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d46:	e0 91 4e 05 	lds	r30, 0x054E
    2d4a:	f0 91 4f 05 	lds	r31, 0x054F
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2d52:	d2 a7       	std	Z+42, r29	; 0x2a
    2d54:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2d56:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2d5a:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2d5c:	88 3f       	cpi	r24, 0xF8	; 248
    2d5e:	88 f4       	brcc	.+34     	; 0x2d82 <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d60:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2d64:	2c 2f       	mov	r18, r28
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	48 2f       	mov	r20, r24
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	24 17       	cp	r18, r20
    2d72:	35 07       	cpc	r19, r21
    2d74:	34 f4       	brge	.+12     	; 0x2d82 <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d7a:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2d7e:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2d82:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2d86:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	08 95       	ret

00002d92 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2d9e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2da2:	e0 91 4e 05 	lds	r30, 0x054E
    2da6:	f0 91 4f 05 	lds	r31, 0x054F
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2dae:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2db2:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2db4:	e0 91 4e 05 	lds	r30, 0x054E
    2db8:	f0 91 4f 05 	lds	r31, 0x054F
    2dbc:	c8 2f       	mov	r28, r24
    2dbe:	d0 e0       	ldi	r29, 0x00	; 0
    2dc0:	ae 01       	movw	r20, r28
    2dc2:	40 0f       	add	r20, r16
    2dc4:	51 1f       	adc	r21, r17
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	45 8b       	std	Z+21, r20	; 0x15
    2dcc:	56 8b       	std	Z+22, r21	; 0x16
    2dce:	67 8b       	std	Z+23, r22	; 0x17
    2dd0:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2dd2:	87 ef       	ldi	r24, 0xF7	; 247
    2dd4:	8f 15       	cp	r24, r15
    2dd6:	70 f0       	brcs	.+28     	; 0x2df4 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2dd8:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2ddc:	21 96       	adiw	r28, 0x01	; 1
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	c2 17       	cp	r28, r18
    2de4:	d3 07       	cpc	r29, r19
    2de6:	34 f4       	brge	.+12     	; 0x2df4 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    2dec:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);
    2df0:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2df4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2df8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	08 95       	ret

00002e0a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2e10:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e14:	e0 91 4e 05 	lds	r30, 0x054E
    2e18:	f0 91 4f 05 	lds	r31, 0x054F
    2e1c:	21 e0       	ldi	r18, 0x01	; 1
    2e1e:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2e20:	ce 01       	movw	r24, r28
    2e22:	a0 e0       	ldi	r26, 0x00	; 0
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	85 8b       	std	Z+21, r24	; 0x15
    2e28:	96 8b       	std	Z+22, r25	; 0x16
    2e2a:	a7 8b       	std	Z+23, r26	; 0x17
    2e2c:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2e2e:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2e32:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e34:	88 3f       	cpi	r24, 0xF8	; 248
    2e36:	88 f4       	brcc	.+34     	; 0x2e5a <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e38:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2e3c:	2c 2f       	mov	r18, r28
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	2f 5f       	subi	r18, 0xFF	; 255
    2e42:	3f 4f       	sbci	r19, 0xFF	; 255
    2e44:	48 2f       	mov	r20, r24
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	24 17       	cp	r18, r20
    2e4a:	35 07       	cpc	r19, r21
    2e4c:	34 f4       	brge	.+12     	; 0x2e5a <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e52:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);
    2e56:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e5a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e5e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2e6a:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2e6c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e70:	e0 91 4e 05 	lds	r30, 0x054E
    2e74:	f0 91 4f 05 	lds	r31, 0x054F
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2e7c:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2e7e:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2e82:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e84:	88 3f       	cpi	r24, 0xF8	; 248
    2e86:	88 f4       	brcc	.+34     	; 0x2eaa <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e88:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2e8c:	2c 2f       	mov	r18, r28
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	2f 5f       	subi	r18, 0xFF	; 255
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	48 2f       	mov	r20, r24
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	24 17       	cp	r18, r20
    2e9a:	35 07       	cpc	r19, r21
    2e9c:	34 f4       	brge	.+12     	; 0x2eaa <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2ea2:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);
    2ea6:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2eaa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2eae:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	28 97       	sbiw	r28, 0x08	; 8
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	29 83       	std	Y+1, r18	; 0x01
    2ed0:	3a 83       	std	Y+2, r19	; 0x02
    2ed2:	4b 83       	std	Y+3, r20	; 0x03
    2ed4:	5c 83       	std	Y+4, r21	; 0x04
    2ed6:	6d 83       	std	Y+5, r22	; 0x05
    2ed8:	7e 83       	std	Y+6, r23	; 0x06
    2eda:	8f 83       	std	Y+7, r24	; 0x07
    2edc:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2ede:	0e 94 51 11 	call	0x22a2	; 0x22a2 <nrk_stack_check>

    nrk_int_disable ();
    2ee2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2ee6:	e0 91 4e 05 	lds	r30, 0x054E
    2eea:	f0 91 4f 05 	lds	r31, 0x054F
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	92 a7       	std	Z+42, r25	; 0x2a
    2ef8:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2efa:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    2efe:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2f00:	ce 01       	movw	r24, r28
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2f08:	e0 91 4e 05 	lds	r30, 0x054E
    2f0c:	f0 91 4f 05 	lds	r31, 0x054F
    2f10:	61 0f       	add	r22, r17
    2f12:	71 1d       	adc	r23, r1
    2f14:	81 1d       	adc	r24, r1
    2f16:	91 1d       	adc	r25, r1
    2f18:	65 8b       	std	Z+21, r22	; 0x15
    2f1a:	76 8b       	std	Z+22, r23	; 0x16
    2f1c:	87 8b       	std	Z+23, r24	; 0x17
    2f1e:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2f20:	18 3f       	cpi	r17, 0xF8	; 248
    2f22:	88 f4       	brcc	.+34     	; 0x2f46 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2f24:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    2f28:	21 2f       	mov	r18, r17
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	2f 5f       	subi	r18, 0xFF	; 255
    2f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f30:	48 2f       	mov	r20, r24
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	24 17       	cp	r18, r20
    2f36:	35 07       	cpc	r19, r21
    2f38:	34 f4       	brge	.+12     	; 0x2f46 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2f3e:	80 93 0a 04 	sts	0x040A, r24
            _nrk_set_next_wakeup (timer);
    2f42:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2f46:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2f4a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	28 96       	adiw	r28, 0x08	; 8
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	08 95       	ret

00002f64 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	60 97       	sbiw	r28, 0x10	; 16
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	29 87       	std	Y+9, r18	; 0x09
    2f8e:	3a 87       	std	Y+10, r19	; 0x0a
    2f90:	4b 87       	std	Y+11, r20	; 0x0b
    2f92:	5c 87       	std	Y+12, r21	; 0x0c
    2f94:	6d 87       	std	Y+13, r22	; 0x0d
    2f96:	7e 87       	std	Y+14, r23	; 0x0e
    2f98:	8f 87       	std	Y+15, r24	; 0x0f
    2f9a:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	0e 94 0e 18 	call	0x301c	; 0x301c <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2fa4:	89 80       	ldd	r8, Y+1	; 0x01
    2fa6:	9a 80       	ldd	r9, Y+2	; 0x02
    2fa8:	ab 80       	ldd	r10, Y+3	; 0x03
    2faa:	bc 80       	ldd	r11, Y+4	; 0x04
    2fac:	cd 80       	ldd	r12, Y+5	; 0x05
    2fae:	de 80       	ldd	r13, Y+6	; 0x06
    2fb0:	ef 80       	ldd	r14, Y+7	; 0x07
    2fb2:	f8 84       	ldd	r15, Y+8	; 0x08
    2fb4:	09 85       	ldd	r16, Y+9	; 0x09
    2fb6:	1a 85       	ldd	r17, Y+10	; 0x0a
    2fb8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fba:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fbc:	4d 85       	ldd	r20, Y+13	; 0x0d
    2fbe:	5e 85       	ldd	r21, Y+14	; 0x0e
    2fc0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fc2:	78 89       	ldd	r23, Y+16	; 0x10
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	09 96       	adiw	r24, 0x09	; 9
    2fc8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    2fce:	61 f0       	breq	.+24     	; 0x2fe8 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2fd0:	29 85       	ldd	r18, Y+9	; 0x09
    2fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fd8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2fda:	7e 85       	ldd	r23, Y+14	; 0x0e
    2fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fde:	98 89       	ldd	r25, Y+16	; 0x10
    2fe0:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <nrk_wait>

    return NRK_OK;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2fe8:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2fea:	60 96       	adiw	r28, 0x10	; 16
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	af 90       	pop	r10
    300a:	9f 90       	pop	r9
    300c:	8f 90       	pop	r8
    300e:	08 95       	ret

00003010 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3010:	e0 91 4e 05 	lds	r30, 0x054E
    3014:	f0 91 4f 05 	lds	r31, 0x054F
}
    3018:	80 85       	ldd	r24, Z+8	; 0x08
    301a:	08 95       	ret

0000301c <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    301c:	cf 92       	push	r12
    301e:	df 92       	push	r13
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    302a:	1c 82       	std	Y+4, r1	; 0x04
    302c:	1d 82       	std	Y+5, r1	; 0x05
    302e:	1e 82       	std	Y+6, r1	; 0x06
    3030:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3032:	40 91 45 05 	lds	r20, 0x0545
    3036:	50 91 46 05 	lds	r21, 0x0546
    303a:	60 91 47 05 	lds	r22, 0x0547
    303e:	70 91 48 05 	lds	r23, 0x0548
    3042:	48 83       	st	Y, r20
    3044:	59 83       	std	Y+1, r21	; 0x01
    3046:	6a 83       	std	Y+2, r22	; 0x02
    3048:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    304a:	c0 90 49 05 	lds	r12, 0x0549
    304e:	d0 90 4a 05 	lds	r13, 0x054A
    3052:	e0 90 4b 05 	lds	r14, 0x054B
    3056:	f0 90 4c 05 	lds	r15, 0x054C
    305a:	cc 82       	std	Y+4, r12	; 0x04
    305c:	dd 82       	std	Y+5, r13	; 0x05
    305e:	ee 82       	std	Y+6, r14	; 0x06
    3060:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3062:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    3066:	a8 2f       	mov	r26, r24
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	23 eb       	ldi	r18, 0xB3	; 179
    306c:	36 ee       	ldi	r19, 0xE6	; 230
    306e:	4e e0       	ldi	r20, 0x0E	; 14
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <__muluhisi3>
    3076:	6c 0d       	add	r22, r12
    3078:	7d 1d       	adc	r23, r13
    307a:	8e 1d       	adc	r24, r14
    307c:	9f 1d       	adc	r25, r15
    307e:	6c 83       	std	Y+4, r22	; 0x04
    3080:	7d 83       	std	Y+5, r23	; 0x05
    3082:	8e 83       	std	Y+6, r24	; 0x06
    3084:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3086:	4c 81       	ldd	r20, Y+4	; 0x04
    3088:	5d 81       	ldd	r21, Y+5	; 0x05
    308a:	6e 81       	ldd	r22, Y+6	; 0x06
    308c:	7f 81       	ldd	r23, Y+7	; 0x07
    308e:	41 15       	cp	r20, r1
    3090:	8a ec       	ldi	r24, 0xCA	; 202
    3092:	58 07       	cpc	r21, r24
    3094:	8a e9       	ldi	r24, 0x9A	; 154
    3096:	68 07       	cpc	r22, r24
    3098:	8b e3       	ldi	r24, 0x3B	; 59
    309a:	78 07       	cpc	r23, r24
    309c:	a0 f0       	brcs	.+40     	; 0x30c6 <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    309e:	5a 5c       	subi	r21, 0xCA	; 202
    30a0:	6a 49       	sbci	r22, 0x9A	; 154
    30a2:	7b 43       	sbci	r23, 0x3B	; 59
    30a4:	4c 83       	std	Y+4, r20	; 0x04
    30a6:	5d 83       	std	Y+5, r21	; 0x05
    30a8:	6e 83       	std	Y+6, r22	; 0x06
    30aa:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    30ac:	48 81       	ld	r20, Y
    30ae:	59 81       	ldd	r21, Y+1	; 0x01
    30b0:	6a 81       	ldd	r22, Y+2	; 0x02
    30b2:	7b 81       	ldd	r23, Y+3	; 0x03
    30b4:	4f 5f       	subi	r20, 0xFF	; 255
    30b6:	5f 4f       	sbci	r21, 0xFF	; 255
    30b8:	6f 4f       	sbci	r22, 0xFF	; 255
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	48 83       	st	Y, r20
    30be:	59 83       	std	Y+1, r21	; 0x01
    30c0:	6a 83       	std	Y+2, r22	; 0x02
    30c2:	7b 83       	std	Y+3, r23	; 0x03
    30c4:	e0 cf       	rjmp	.-64     	; 0x3086 <nrk_time_get+0x6a>
    }

}
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	ff 90       	pop	r15
    30cc:	ef 90       	pop	r14
    30ce:	df 90       	pop	r13
    30d0:	cf 90       	pop	r12
    30d2:	08 95       	ret

000030d4 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    30d4:	8f 92       	push	r8
    30d6:	9f 92       	push	r9
    30d8:	af 92       	push	r10
    30da:	bf 92       	push	r11
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	60 97       	sbiw	r28, 0x10	; 16
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	fc 01       	movw	r30, r24
    30fe:	09 83       	std	Y+1, r16	; 0x01
    3100:	1a 83       	std	Y+2, r17	; 0x02
    3102:	2b 83       	std	Y+3, r18	; 0x03
    3104:	3c 83       	std	Y+4, r19	; 0x04
    3106:	4d 83       	std	Y+5, r20	; 0x05
    3108:	5e 83       	std	Y+6, r21	; 0x06
    310a:	6f 83       	std	Y+7, r22	; 0x07
    310c:	78 87       	std	Y+8, r23	; 0x08
    310e:	89 86       	std	Y+9, r8	; 0x09
    3110:	9a 86       	std	Y+10, r9	; 0x0a
    3112:	ab 86       	std	Y+11, r10	; 0x0b
    3114:	bc 86       	std	Y+12, r11	; 0x0c
    3116:	cd 86       	std	Y+13, r12	; 0x0d
    3118:	de 86       	std	Y+14, r13	; 0x0e
    311a:	ef 86       	std	Y+15, r14	; 0x0f
    311c:	f8 8a       	std	Y+16, r15	; 0x10
    311e:	89 80       	ldd	r8, Y+1	; 0x01
    3120:	9a 80       	ldd	r9, Y+2	; 0x02
    3122:	ab 80       	ldd	r10, Y+3	; 0x03
    3124:	bc 80       	ldd	r11, Y+4	; 0x04
    3126:	0d 81       	ldd	r16, Y+5	; 0x05
    3128:	1e 81       	ldd	r17, Y+6	; 0x06
    312a:	2f 81       	ldd	r18, Y+7	; 0x07
    312c:	38 85       	ldd	r19, Y+8	; 0x08
    312e:	c9 84       	ldd	r12, Y+9	; 0x09
    3130:	da 84       	ldd	r13, Y+10	; 0x0a
    3132:	eb 84       	ldd	r14, Y+11	; 0x0b
    3134:	fc 84       	ldd	r15, Y+12	; 0x0c
    3136:	4d 85       	ldd	r20, Y+13	; 0x0d
    3138:	5e 85       	ldd	r21, Y+14	; 0x0e
    313a:	6f 85       	ldd	r22, Y+15	; 0x0f
    313c:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    313e:	8c 14       	cp	r8, r12
    3140:	9d 04       	cpc	r9, r13
    3142:	ae 04       	cpc	r10, r14
    3144:	bf 04       	cpc	r11, r15
    3146:	08 f4       	brcc	.+2      	; 0x314a <nrk_time_sub+0x76>
    3148:	3f c0       	rjmp	.+126    	; 0x31c8 <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    314a:	c8 14       	cp	r12, r8
    314c:	d9 04       	cpc	r13, r9
    314e:	ea 04       	cpc	r14, r10
    3150:	fb 04       	cpc	r15, r11
    3152:	91 f4       	brne	.+36     	; 0x3178 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3154:	04 17       	cp	r16, r20
    3156:	15 07       	cpc	r17, r21
    3158:	26 07       	cpc	r18, r22
    315a:	37 07       	cpc	r19, r23
    315c:	a8 f1       	brcs	.+106    	; 0x31c8 <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    315e:	04 1b       	sub	r16, r20
    3160:	15 0b       	sbc	r17, r21
    3162:	26 0b       	sbc	r18, r22
    3164:	37 0b       	sbc	r19, r23
    3166:	04 83       	std	Z+4, r16	; 0x04
    3168:	15 83       	std	Z+5, r17	; 0x05
    316a:	26 83       	std	Z+6, r18	; 0x06
    316c:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    316e:	10 82       	st	Z, r1
    3170:	11 82       	std	Z+1, r1	; 0x01
    3172:	12 82       	std	Z+2, r1	; 0x02
    3174:	13 82       	std	Z+3, r1	; 0x03
    3176:	26 c0       	rjmp	.+76     	; 0x31c4 <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3178:	04 17       	cp	r16, r20
    317a:	15 07       	cpc	r17, r21
    317c:	26 07       	cpc	r18, r22
    317e:	37 07       	cpc	r19, r23
    3180:	88 f4       	brcc	.+34     	; 0x31a4 <nrk_time_sub+0xd0>
{
	high.secs--;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	88 1a       	sub	r8, r24
    3186:	91 08       	sbc	r9, r1
    3188:	a1 08       	sbc	r10, r1
    318a:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    318c:	8c 18       	sub	r8, r12
    318e:	9d 08       	sbc	r9, r13
    3190:	ae 08       	sbc	r10, r14
    3192:	bf 08       	sbc	r11, r15
    3194:	80 82       	st	Z, r8
    3196:	91 82       	std	Z+1, r9	; 0x01
    3198:	a2 82       	std	Z+2, r10	; 0x02
    319a:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    319c:	16 53       	subi	r17, 0x36	; 54
    319e:	25 46       	sbci	r18, 0x65	; 101
    31a0:	34 4c       	sbci	r19, 0xC4	; 196
    31a2:	08 c0       	rjmp	.+16     	; 0x31b4 <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    31a4:	8c 18       	sub	r8, r12
    31a6:	9d 08       	sbc	r9, r13
    31a8:	ae 08       	sbc	r10, r14
    31aa:	bf 08       	sbc	r11, r15
    31ac:	80 82       	st	Z, r8
    31ae:	91 82       	std	Z+1, r9	; 0x01
    31b0:	a2 82       	std	Z+2, r10	; 0x02
    31b2:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    31b4:	04 1b       	sub	r16, r20
    31b6:	15 0b       	sbc	r17, r21
    31b8:	26 0b       	sbc	r18, r22
    31ba:	37 0b       	sbc	r19, r23
    31bc:	04 83       	std	Z+4, r16	; 0x04
    31be:	15 83       	std	Z+5, r17	; 0x05
    31c0:	26 83       	std	Z+6, r18	; 0x06
    31c2:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    31ca:	60 96       	adiw	r28, 0x10	; 16
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	08 95       	ret

000031f0 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    31f0:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    31f2:	44 81       	ldd	r20, Z+4	; 0x04
    31f4:	55 81       	ldd	r21, Z+5	; 0x05
    31f6:	66 81       	ldd	r22, Z+6	; 0x06
    31f8:	77 81       	ldd	r23, Z+7	; 0x07
    31fa:	41 15       	cp	r20, r1
    31fc:	8a ec       	ldi	r24, 0xCA	; 202
    31fe:	58 07       	cpc	r21, r24
    3200:	8a e9       	ldi	r24, 0x9A	; 154
    3202:	68 07       	cpc	r22, r24
    3204:	8b e3       	ldi	r24, 0x3B	; 59
    3206:	78 07       	cpc	r23, r24
    3208:	a0 f0       	brcs	.+40     	; 0x3232 <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    320a:	5a 5c       	subi	r21, 0xCA	; 202
    320c:	6a 49       	sbci	r22, 0x9A	; 154
    320e:	7b 43       	sbci	r23, 0x3B	; 59
    3210:	44 83       	std	Z+4, r20	; 0x04
    3212:	55 83       	std	Z+5, r21	; 0x05
    3214:	66 83       	std	Z+6, r22	; 0x06
    3216:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3218:	40 81       	ld	r20, Z
    321a:	51 81       	ldd	r21, Z+1	; 0x01
    321c:	62 81       	ldd	r22, Z+2	; 0x02
    321e:	73 81       	ldd	r23, Z+3	; 0x03
    3220:	4f 5f       	subi	r20, 0xFF	; 255
    3222:	5f 4f       	sbci	r21, 0xFF	; 255
    3224:	6f 4f       	sbci	r22, 0xFF	; 255
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	40 83       	st	Z, r20
    322a:	51 83       	std	Z+1, r21	; 0x01
    322c:	62 83       	std	Z+2, r22	; 0x02
    322e:	73 83       	std	Z+3, r23	; 0x03
    3230:	e0 cf       	rjmp	.-64     	; 0x31f2 <nrk_time_compact_nanos+0x2>
    }
}
    3232:	08 95       	ret

00003234 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3234:	8f 92       	push	r8
    3236:	9f 92       	push	r9
    3238:	af 92       	push	r10
    323a:	bf 92       	push	r11
    323c:	cf 92       	push	r12
    323e:	df 92       	push	r13
    3240:	ef 92       	push	r14
    3242:	ff 92       	push	r15
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	60 97       	sbiw	r28, 0x10	; 16
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	09 83       	std	Y+1, r16	; 0x01
    325e:	1a 83       	std	Y+2, r17	; 0x02
    3260:	2b 83       	std	Y+3, r18	; 0x03
    3262:	3c 83       	std	Y+4, r19	; 0x04
    3264:	4d 83       	std	Y+5, r20	; 0x05
    3266:	5e 83       	std	Y+6, r21	; 0x06
    3268:	6f 83       	std	Y+7, r22	; 0x07
    326a:	78 87       	std	Y+8, r23	; 0x08
    326c:	89 86       	std	Y+9, r8	; 0x09
    326e:	9a 86       	std	Y+10, r9	; 0x0a
    3270:	ab 86       	std	Y+11, r10	; 0x0b
    3272:	bc 86       	std	Y+12, r11	; 0x0c
    3274:	cd 86       	std	Y+13, r12	; 0x0d
    3276:	de 86       	std	Y+14, r13	; 0x0e
    3278:	ef 86       	std	Y+15, r14	; 0x0f
    327a:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    327c:	49 85       	ldd	r20, Y+9	; 0x09
    327e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3280:	6b 85       	ldd	r22, Y+11	; 0x0b
    3282:	7c 85       	ldd	r23, Y+12	; 0x0c
    3284:	09 81       	ldd	r16, Y+1	; 0x01
    3286:	1a 81       	ldd	r17, Y+2	; 0x02
    3288:	2b 81       	ldd	r18, Y+3	; 0x03
    328a:	3c 81       	ldd	r19, Y+4	; 0x04
    328c:	40 0f       	add	r20, r16
    328e:	51 1f       	adc	r21, r17
    3290:	62 1f       	adc	r22, r18
    3292:	73 1f       	adc	r23, r19
    3294:	fc 01       	movw	r30, r24
    3296:	40 83       	st	Z, r20
    3298:	51 83       	std	Z+1, r21	; 0x01
    329a:	62 83       	std	Z+2, r22	; 0x02
    329c:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    329e:	4d 85       	ldd	r20, Y+13	; 0x0d
    32a0:	5e 85       	ldd	r21, Y+14	; 0x0e
    32a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    32a4:	78 89       	ldd	r23, Y+16	; 0x10
    32a6:	0d 81       	ldd	r16, Y+5	; 0x05
    32a8:	1e 81       	ldd	r17, Y+6	; 0x06
    32aa:	2f 81       	ldd	r18, Y+7	; 0x07
    32ac:	38 85       	ldd	r19, Y+8	; 0x08
    32ae:	40 0f       	add	r20, r16
    32b0:	51 1f       	adc	r21, r17
    32b2:	62 1f       	adc	r22, r18
    32b4:	73 1f       	adc	r23, r19
    32b6:	44 83       	std	Z+4, r20	; 0x04
    32b8:	55 83       	std	Z+5, r21	; 0x05
    32ba:	66 83       	std	Z+6, r22	; 0x06
    32bc:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    32be:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <nrk_time_compact_nanos>
return NRK_OK;
}
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	60 96       	adiw	r28, 0x10	; 16
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	bf 90       	pop	r11
    32e2:	af 90       	pop	r10
    32e4:	9f 90       	pop	r9
    32e6:	8f 90       	pop	r8
    32e8:	08 95       	ret

000032ea <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    32ea:	60 93 45 05 	sts	0x0545, r22
    32ee:	70 93 46 05 	sts	0x0546, r23
    32f2:	80 93 47 05 	sts	0x0547, r24
    32f6:	90 93 48 05 	sts	0x0548, r25
  nrk_system_time.nano_secs=nano_secs;
    32fa:	20 93 49 05 	sts	0x0549, r18
    32fe:	30 93 4a 05 	sts	0x054A, r19
    3302:	40 93 4b 05 	sts	0x054B, r20
    3306:	50 93 4c 05 	sts	0x054C, r21
    330a:	08 95       	ret

0000330c <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    330c:	2f 92       	push	r2
    330e:	3f 92       	push	r3
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	62 97       	sbiw	r28, 0x12	; 18
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3340:	dc 01       	movw	r26, r24
    3342:	4d 90       	ld	r4, X+
    3344:	5d 90       	ld	r5, X+
    3346:	6d 90       	ld	r6, X+
    3348:	7c 90       	ld	r7, X
    334a:	13 97       	sbiw	r26, 0x03	; 3
    334c:	14 96       	adiw	r26, 0x04	; 4
    334e:	6d 91       	ld	r22, X+
    3350:	7d 91       	ld	r23, X+
    3352:	8d 91       	ld	r24, X+
    3354:	9c 91       	ld	r25, X
    3356:	17 97       	sbiw	r26, 0x07	; 7
    3358:	41 14       	cp	r4, r1
    335a:	51 04       	cpc	r5, r1
    335c:	61 04       	cpc	r6, r1
    335e:	71 04       	cpc	r7, r1
    3360:	09 f4       	brne	.+2      	; 0x3364 <_nrk_time_to_ticks+0x58>
    3362:	6c c0       	rjmp	.+216    	; 0x343c <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3364:	b2 e4       	ldi	r27, 0x42	; 66
    3366:	4b 16       	cp	r4, r27
    3368:	51 04       	cpc	r5, r1
    336a:	61 04       	cpc	r6, r1
    336c:	71 04       	cpc	r7, r1
    336e:	08 f0       	brcs	.+2      	; 0x3372 <_nrk_time_to_ticks+0x66>
    3370:	6d c0       	rjmp	.+218    	; 0x344c <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3372:	7b 01       	movw	r14, r22
    3374:	8c 01       	movw	r16, r24
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	a9 01       	movw	r20, r18
    337c:	69 83       	std	Y+1, r22	; 0x01
    337e:	fa 82       	std	Y+2, r15	; 0x02
    3380:	0b 83       	std	Y+3, r16	; 0x03
    3382:	1c 83       	std	Y+4, r17	; 0x04
    3384:	2d 83       	std	Y+5, r18	; 0x05
    3386:	3e 83       	std	Y+6, r19	; 0x06
    3388:	4f 83       	std	Y+7, r20	; 0x07
    338a:	58 87       	std	Y+8, r21	; 0x08
    338c:	a0 e0       	ldi	r26, 0x00	; 0
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	19 8a       	std	Y+17, r1	; 0x11
    3392:	1a 8a       	std	Y+18, r1	; 0x12
    3394:	31 2c       	mov	r3, r1
    3396:	81 2c       	mov	r8, r1
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	e0 e0       	ldi	r30, 0x00	; 0
    339c:	91 2c       	mov	r9, r1
    339e:	9d 01       	movw	r18, r26
    33a0:	49 89       	ldd	r20, Y+17	; 0x11
    33a2:	5a 89       	ldd	r21, Y+18	; 0x12
    33a4:	63 2d       	mov	r22, r3
    33a6:	78 2d       	mov	r23, r8
    33a8:	8f 2f       	mov	r24, r31
    33aa:	9e 2f       	mov	r25, r30
    33ac:	a9 80       	ldd	r10, Y+1	; 0x01
    33ae:	ba 80       	ldd	r11, Y+2	; 0x02
    33b0:	cb 80       	ldd	r12, Y+3	; 0x03
    33b2:	dc 80       	ldd	r13, Y+4	; 0x04
    33b4:	ed 80       	ldd	r14, Y+5	; 0x05
    33b6:	fe 80       	ldd	r15, Y+6	; 0x06
    33b8:	0f 81       	ldd	r16, Y+7	; 0x07
    33ba:	18 85       	ldd	r17, Y+8	; 0x08
    33bc:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__adddi3>
    33c0:	22 2e       	mov	r2, r18
    33c2:	39 87       	std	Y+9, r19	; 0x09
    33c4:	4a 87       	std	Y+10, r20	; 0x0a
    33c6:	5b 87       	std	Y+11, r21	; 0x0b
    33c8:	6c 87       	std	Y+12, r22	; 0x0c
    33ca:	7d 87       	std	Y+13, r23	; 0x0d
    33cc:	8e 87       	std	Y+14, r24	; 0x0e
    33ce:	9f 87       	std	Y+15, r25	; 0x0f
    33d0:	9d 01       	movw	r18, r26
    33d2:	49 89       	ldd	r20, Y+17	; 0x11
    33d4:	5a 89       	ldd	r21, Y+18	; 0x12
    33d6:	63 2d       	mov	r22, r3
    33d8:	78 2d       	mov	r23, r8
    33da:	8f 2f       	mov	r24, r31
    33dc:	9e 2f       	mov	r25, r30
    33de:	36 53       	subi	r19, 0x36	; 54
    33e0:	45 46       	sbci	r20, 0x65	; 101
    33e2:	54 4c       	sbci	r21, 0xC4	; 196
    33e4:	6f 4f       	sbci	r22, 0xFF	; 255
    33e6:	7f 4f       	sbci	r23, 0xFF	; 255
    33e8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ea:	9f 4f       	sbci	r25, 0xFF	; 255
    33ec:	d9 01       	movw	r26, r18
    33ee:	49 8b       	std	Y+17, r20	; 0x11
    33f0:	5a 8b       	std	Y+18, r21	; 0x12
    33f2:	36 2e       	mov	r3, r22
    33f4:	87 2e       	mov	r8, r23
    33f6:	f8 2f       	mov	r31, r24
    33f8:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    33fa:	49 2d       	mov	r20, r9
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	44 15       	cp	r20, r4
    3404:	55 05       	cpc	r21, r5
    3406:	66 05       	cpc	r22, r6
    3408:	77 05       	cpc	r23, r7
    340a:	10 f4       	brcc	.+4      	; 0x3410 <_nrk_time_to_ticks+0x104>
    340c:	93 94       	inc	r9
    340e:	c7 cf       	rjmp	.-114    	; 0x339e <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3410:	83 eb       	ldi	r24, 0xB3	; 179
    3412:	a8 2e       	mov	r10, r24
    3414:	96 ee       	ldi	r25, 0xE6	; 230
    3416:	b9 2e       	mov	r11, r25
    3418:	2e e0       	ldi	r18, 0x0E	; 14
    341a:	c2 2e       	mov	r12, r18
    341c:	d1 2c       	mov	r13, r1
    341e:	e1 2c       	mov	r14, r1
    3420:	f1 2c       	mov	r15, r1
    3422:	00 e0       	ldi	r16, 0x00	; 0
    3424:	10 e0       	ldi	r17, 0x00	; 0
    3426:	22 2d       	mov	r18, r2
    3428:	39 85       	ldd	r19, Y+9	; 0x09
    342a:	4a 85       	ldd	r20, Y+10	; 0x0a
    342c:	5b 85       	ldd	r21, Y+11	; 0x0b
    342e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3430:	7d 85       	ldd	r23, Y+13	; 0x0d
    3432:	8e 85       	ldd	r24, Y+14	; 0x0e
    3434:	9f 85       	ldd	r25, Y+15	; 0x0f
    3436:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__udivdi3>
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    343c:	23 eb       	ldi	r18, 0xB3	; 179
    343e:	36 ee       	ldi	r19, 0xE6	; 230
    3440:	4e e0       	ldi	r20, 0x0E	; 14
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodsi4>
    3448:	c9 01       	movw	r24, r18
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3450:	62 96       	adiw	r28, 0x12	; 18
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	cf 90       	pop	r12
    346c:	bf 90       	pop	r11
    346e:	af 90       	pop	r10
    3470:	9f 90       	pop	r9
    3472:	8f 90       	pop	r8
    3474:	7f 90       	pop	r7
    3476:	6f 90       	pop	r6
    3478:	5f 90       	pop	r5
    347a:	4f 90       	pop	r4
    347c:	3f 90       	pop	r3
    347e:	2f 90       	pop	r2
    3480:	08 95       	ret

00003482 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3482:	cf 92       	push	r12
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	28 97       	sbiw	r28, 0x08	; 8
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    349e:	6b 01       	movw	r12, r22
    34a0:	7c 01       	movw	r14, r24
    34a2:	3a e0       	ldi	r19, 0x0A	; 10
    34a4:	f6 94       	lsr	r15
    34a6:	e7 94       	ror	r14
    34a8:	d7 94       	ror	r13
    34aa:	c7 94       	ror	r12
    34ac:	3a 95       	dec	r19
    34ae:	d1 f7       	brne	.-12     	; 0x34a4 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    34b0:	c9 82       	std	Y+1, r12	; 0x01
    34b2:	da 82       	std	Y+2, r13	; 0x02
    34b4:	eb 82       	std	Y+3, r14	; 0x03
    34b6:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    34b8:	9b 01       	movw	r18, r22
    34ba:	ac 01       	movw	r20, r24
    34bc:	33 70       	andi	r19, 0x03	; 3
    34be:	44 27       	eor	r20, r20
    34c0:	55 27       	eor	r21, r21
    34c2:	63 eb       	ldi	r22, 0xB3	; 179
    34c4:	76 ee       	ldi	r23, 0xE6	; 230
    34c6:	8e e0       	ldi	r24, 0x0E	; 14
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 7d 25 	call	0x4afa	; 0x4afa <__mulsi3>

return t;
    34ce:	6d 83       	std	Y+5, r22	; 0x05
    34d0:	7e 83       	std	Y+6, r23	; 0x06
    34d2:	8f 83       	std	Y+7, r24	; 0x07
    34d4:	98 87       	std	Y+8, r25	; 0x08
    34d6:	2c 2d       	mov	r18, r12
    34d8:	3a 81       	ldd	r19, Y+2	; 0x02
    34da:	4b 81       	ldd	r20, Y+3	; 0x03
    34dc:	5c 81       	ldd	r21, Y+4	; 0x04
}
    34de:	28 96       	adiw	r28, 0x08	; 8
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	08 95       	ret

000034f8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    34f8:	2f 92       	push	r2
    34fa:	3f 92       	push	r3
    34fc:	4f 92       	push	r4
    34fe:	5f 92       	push	r5
    3500:	6f 92       	push	r6
    3502:	7f 92       	push	r7
    3504:	8f 92       	push	r8
    3506:	9f 92       	push	r9
    3508:	af 92       	push	r10
    350a:	bf 92       	push	r11
    350c:	cf 92       	push	r12
    350e:	df 92       	push	r13
    3510:	ef 92       	push	r14
    3512:	ff 92       	push	r15
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	62 97       	sbiw	r28, 0x12	; 18
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    352c:	dc 01       	movw	r26, r24
    352e:	4d 90       	ld	r4, X+
    3530:	5d 90       	ld	r5, X+
    3532:	6d 90       	ld	r6, X+
    3534:	7c 90       	ld	r7, X
    3536:	13 97       	sbiw	r26, 0x03	; 3
    3538:	14 96       	adiw	r26, 0x04	; 4
    353a:	6d 91       	ld	r22, X+
    353c:	7d 91       	ld	r23, X+
    353e:	8d 91       	ld	r24, X+
    3540:	9c 91       	ld	r25, X
    3542:	17 97       	sbiw	r26, 0x07	; 7
    3544:	41 14       	cp	r4, r1
    3546:	51 04       	cpc	r5, r1
    3548:	61 04       	cpc	r6, r1
    354a:	71 04       	cpc	r7, r1
    354c:	09 f4       	brne	.+2      	; 0x3550 <_nrk_time_to_ticks_long+0x58>
    354e:	66 c0       	rjmp	.+204    	; 0x361c <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    3550:	7b 01       	movw	r14, r22
    3552:	8c 01       	movw	r16, r24
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	a9 01       	movw	r20, r18
    355a:	69 83       	std	Y+1, r22	; 0x01
    355c:	fa 82       	std	Y+2, r15	; 0x02
    355e:	0b 83       	std	Y+3, r16	; 0x03
    3560:	1c 83       	std	Y+4, r17	; 0x04
    3562:	2d 83       	std	Y+5, r18	; 0x05
    3564:	3e 83       	std	Y+6, r19	; 0x06
    3566:	4f 83       	std	Y+7, r20	; 0x07
    3568:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    356a:	a0 e0       	ldi	r26, 0x00	; 0
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	19 8a       	std	Y+17, r1	; 0x11
    3570:	1a 8a       	std	Y+18, r1	; 0x12
    3572:	31 2c       	mov	r3, r1
    3574:	81 2c       	mov	r8, r1
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	e0 e0       	ldi	r30, 0x00	; 0
    357a:	91 2c       	mov	r9, r1
    357c:	9d 01       	movw	r18, r26
    357e:	49 89       	ldd	r20, Y+17	; 0x11
    3580:	5a 89       	ldd	r21, Y+18	; 0x12
    3582:	63 2d       	mov	r22, r3
    3584:	78 2d       	mov	r23, r8
    3586:	8f 2f       	mov	r24, r31
    3588:	9e 2f       	mov	r25, r30
    358a:	a9 80       	ldd	r10, Y+1	; 0x01
    358c:	ba 80       	ldd	r11, Y+2	; 0x02
    358e:	cb 80       	ldd	r12, Y+3	; 0x03
    3590:	dc 80       	ldd	r13, Y+4	; 0x04
    3592:	ed 80       	ldd	r14, Y+5	; 0x05
    3594:	fe 80       	ldd	r15, Y+6	; 0x06
    3596:	0f 81       	ldd	r16, Y+7	; 0x07
    3598:	18 85       	ldd	r17, Y+8	; 0x08
    359a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__adddi3>
    359e:	22 2e       	mov	r2, r18
    35a0:	39 87       	std	Y+9, r19	; 0x09
    35a2:	4a 87       	std	Y+10, r20	; 0x0a
    35a4:	5b 87       	std	Y+11, r21	; 0x0b
    35a6:	6c 87       	std	Y+12, r22	; 0x0c
    35a8:	7d 87       	std	Y+13, r23	; 0x0d
    35aa:	8e 87       	std	Y+14, r24	; 0x0e
    35ac:	9f 87       	std	Y+15, r25	; 0x0f
    35ae:	9d 01       	movw	r18, r26
    35b0:	49 89       	ldd	r20, Y+17	; 0x11
    35b2:	5a 89       	ldd	r21, Y+18	; 0x12
    35b4:	63 2d       	mov	r22, r3
    35b6:	78 2d       	mov	r23, r8
    35b8:	8f 2f       	mov	r24, r31
    35ba:	9e 2f       	mov	r25, r30
    35bc:	36 53       	subi	r19, 0x36	; 54
    35be:	45 46       	sbci	r20, 0x65	; 101
    35c0:	54 4c       	sbci	r21, 0xC4	; 196
    35c2:	6f 4f       	sbci	r22, 0xFF	; 255
    35c4:	7f 4f       	sbci	r23, 0xFF	; 255
    35c6:	8f 4f       	sbci	r24, 0xFF	; 255
    35c8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ca:	d9 01       	movw	r26, r18
    35cc:	49 8b       	std	Y+17, r20	; 0x11
    35ce:	5a 8b       	std	Y+18, r21	; 0x12
    35d0:	36 2e       	mov	r3, r22
    35d2:	87 2e       	mov	r8, r23
    35d4:	f8 2f       	mov	r31, r24
    35d6:	e9 2f       	mov	r30, r25
    35d8:	49 2d       	mov	r20, r9
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	44 15       	cp	r20, r4
    35e2:	55 05       	cpc	r21, r5
    35e4:	66 05       	cpc	r22, r6
    35e6:	77 05       	cpc	r23, r7
    35e8:	10 f4       	brcc	.+4      	; 0x35ee <_nrk_time_to_ticks_long+0xf6>
    35ea:	93 94       	inc	r9
    35ec:	c7 cf       	rjmp	.-114    	; 0x357c <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    35ee:	43 eb       	ldi	r20, 0xB3	; 179
    35f0:	a4 2e       	mov	r10, r20
    35f2:	56 ee       	ldi	r21, 0xE6	; 230
    35f4:	b5 2e       	mov	r11, r21
    35f6:	6e e0       	ldi	r22, 0x0E	; 14
    35f8:	c6 2e       	mov	r12, r22
    35fa:	d1 2c       	mov	r13, r1
    35fc:	e1 2c       	mov	r14, r1
    35fe:	f1 2c       	mov	r15, r1
    3600:	00 e0       	ldi	r16, 0x00	; 0
    3602:	10 e0       	ldi	r17, 0x00	; 0
    3604:	22 2d       	mov	r18, r2
    3606:	39 85       	ldd	r19, Y+9	; 0x09
    3608:	4a 85       	ldd	r20, Y+10	; 0x0a
    360a:	5b 85       	ldd	r21, Y+11	; 0x0b
    360c:	6c 85       	ldd	r22, Y+12	; 0x0c
    360e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3610:	8e 85       	ldd	r24, Y+14	; 0x0e
    3612:	9f 85       	ldd	r25, Y+15	; 0x0f
    3614:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__udivdi3>
    3618:	ca 01       	movw	r24, r20
    361a:	07 c0       	rjmp	.+14     	; 0x362a <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    361c:	23 eb       	ldi	r18, 0xB3	; 179
    361e:	36 ee       	ldi	r19, 0xE6	; 230
    3620:	4e e0       	ldi	r20, 0x0E	; 14
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodsi4>
    3628:	ca 01       	movw	r24, r20
}
return ticks;
}
    362a:	b9 01       	movw	r22, r18
    362c:	62 96       	adiw	r28, 0x12	; 18
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	bf 90       	pop	r11
    364a:	af 90       	pop	r10
    364c:	9f 90       	pop	r9
    364e:	8f 90       	pop	r8
    3650:	7f 90       	pop	r7
    3652:	6f 90       	pop	r6
    3654:	5f 90       	pop	r5
    3656:	4f 90       	pop	r4
    3658:	3f 90       	pop	r3
    365a:	2f 90       	pop	r2
    365c:	08 95       	ret

0000365e <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    365e:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3660:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3662:	0e 94 51 11 	call	0x22a2	; 0x22a2 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3666:	0e 94 37 20 	call	0x406e	; 0x406e <_nrk_get_next_wakeup>
    366a:	84 30       	cpi	r24, 0x04	; 4
    366c:	28 f4       	brcc	.+10     	; 0x3678 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    366e:	d0 93 42 05 	sts	0x0542, r29
	    nrk_idle();
    3672:	0e 94 46 23 	call	0x468c	; 0x468c <nrk_idle>
    3676:	08 c0       	rjmp	.+16     	; 0x3688 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    3678:	8a e0       	ldi	r24, 0x0A	; 10
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    3680:	c0 93 42 05 	sts	0x0542, r28
	    nrk_sleep();
    3684:	0e 94 3a 23 	call	0x4674	; 0x4674 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3688:	80 91 0c 04 	lds	r24, 0x040C
    368c:	85 35       	cpi	r24, 0x55	; 85
    368e:	19 f0       	breq	.+6      	; 0x3696 <nrk_idle_task+0x38>
    3690:	88 e0       	ldi	r24, 0x08	; 8
    3692:	0e 94 93 10 	call	0x2126	; 0x2126 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3696:	80 91 7e 41 	lds	r24, 0x417E
    369a:	85 35       	cpi	r24, 0x55	; 85
    369c:	11 f3       	breq	.-60     	; 0x3662 <nrk_idle_task+0x4>
    369e:	88 e0       	ldi	r24, 0x08	; 8
    36a0:	0e 94 93 10 	call	0x2126	; 0x2126 <nrk_error_add>
    36a4:	de cf       	rjmp	.-68     	; 0x3662 <nrk_idle_task+0x4>

000036a6 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    36a6:	2f 92       	push	r2
    36a8:	3f 92       	push	r3
    36aa:	4f 92       	push	r4
    36ac:	5f 92       	push	r5
    36ae:	6f 92       	push	r6
    36b0:	7f 92       	push	r7
    36b2:	8f 92       	push	r8
    36b4:	9f 92       	push	r9
    36b6:	af 92       	push	r10
    36b8:	bf 92       	push	r11
    36ba:	cf 92       	push	r12
    36bc:	df 92       	push	r13
    36be:	ef 92       	push	r14
    36c0:	ff 92       	push	r15
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	29 97       	sbiw	r28, 0x09	; 9
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    36da:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    36de:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    36e2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    36e6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_nrk_high_speed_timer_get>
    36ea:	9f 83       	std	Y+7, r25	; 0x07
    36ec:	8e 83       	std	Y+6, r24	; 0x06
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    36ee:	8a ef       	ldi	r24, 0xFA	; 250
    36f0:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    36f4:	a0 91 0a 04 	lds	r26, 0x040A
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	23 eb       	ldi	r18, 0xB3	; 179
    36fc:	36 ee       	ldi	r19, 0xE6	; 230
    36fe:	4e e0       	ldi	r20, 0x0E	; 14
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <__muluhisi3>
    3706:	6b 01       	movw	r12, r22
    3708:	7c 01       	movw	r14, r24
    370a:	80 91 49 05 	lds	r24, 0x0549
    370e:	90 91 4a 05 	lds	r25, 0x054A
    3712:	a0 91 4b 05 	lds	r26, 0x054B
    3716:	b0 91 4c 05 	lds	r27, 0x054C
    371a:	c8 0e       	add	r12, r24
    371c:	d9 1e       	adc	r13, r25
    371e:	ea 1e       	adc	r14, r26
    3720:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3722:	c7 01       	movw	r24, r14
    3724:	b6 01       	movw	r22, r12
    3726:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodsi4>
    372a:	00 91 45 05 	lds	r16, 0x0545
    372e:	10 91 46 05 	lds	r17, 0x0546
    3732:	20 91 47 05 	lds	r18, 0x0547
    3736:	30 91 48 05 	lds	r19, 0x0548
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    373a:	c6 1a       	sub	r12, r22
    373c:	d7 0a       	sbc	r13, r23
    373e:	e8 0a       	sbc	r14, r24
    3740:	f9 0a       	sbc	r15, r25
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3742:	63 eb       	ldi	r22, 0xB3	; 179
    3744:	46 2e       	mov	r4, r22
    3746:	66 ee       	ldi	r22, 0xE6	; 230
    3748:	56 2e       	mov	r5, r22
    374a:	6e e0       	ldi	r22, 0x0E	; 14
    374c:	66 2e       	mov	r6, r22
    374e:	71 2c       	mov	r7, r1
    3750:	48 01       	movw	r8, r16
    3752:	59 01       	movw	r10, r18
    3754:	8f ef       	ldi	r24, 0xFF	; 255
    3756:	88 1a       	sub	r8, r24
    3758:	98 0a       	sbc	r9, r24
    375a:	a8 0a       	sbc	r10, r24
    375c:	b8 0a       	sbc	r11, r24
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    375e:	c1 14       	cp	r12, r1
    3760:	9a ec       	ldi	r25, 0xCA	; 202
    3762:	d9 06       	cpc	r13, r25
    3764:	9a e9       	ldi	r25, 0x9A	; 154
    3766:	e9 06       	cpc	r14, r25
    3768:	9b e3       	ldi	r25, 0x3B	; 59
    376a:	f9 06       	cpc	r15, r25
    376c:	98 f0       	brcs	.+38     	; 0x3794 <_nrk_scheduler+0xee>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    376e:	2a ec       	ldi	r18, 0xCA	; 202
    3770:	d2 1a       	sub	r13, r18
    3772:	2a e9       	ldi	r18, 0x9A	; 154
    3774:	e2 0a       	sbc	r14, r18
    3776:	2b e3       	ldi	r18, 0x3B	; 59
    3778:	f2 0a       	sbc	r15, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    377a:	c7 01       	movw	r24, r14
    377c:	b6 01       	movw	r22, r12
    377e:	a3 01       	movw	r20, r6
    3780:	92 01       	movw	r18, r4
    3782:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodsi4>
    3786:	c6 1a       	sub	r12, r22
    3788:	d7 0a       	sbc	r13, r23
    378a:	e8 0a       	sbc	r14, r24
    378c:	f9 0a       	sbc	r15, r25
    378e:	95 01       	movw	r18, r10
    3790:	84 01       	movw	r16, r8
    3792:	de cf       	rjmp	.-68     	; 0x3750 <_nrk_scheduler+0xaa>
    3794:	00 93 45 05 	sts	0x0545, r16
    3798:	10 93 46 05 	sts	0x0546, r17
    379c:	20 93 47 05 	sts	0x0547, r18
    37a0:	30 93 48 05 	sts	0x0548, r19
    37a4:	c0 92 49 05 	sts	0x0549, r12
    37a8:	d0 92 4a 05 	sts	0x054A, r13
    37ac:	e0 92 4b 05 	sts	0x054B, r14
    37b0:	f0 92 4c 05 	sts	0x054C, r15
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    37b4:	e0 91 4e 05 	lds	r30, 0x054E
    37b8:	f0 91 4f 05 	lds	r31, 0x054F
    37bc:	85 81       	ldd	r24, Z+5	; 0x05
    37be:	88 23       	and	r24, r24
    37c0:	39 f1       	breq	.+78     	; 0x3810 <_nrk_scheduler+0x16a>
    37c2:	81 85       	ldd	r24, Z+9	; 0x09
    37c4:	84 30       	cpi	r24, 0x04	; 4
    37c6:	21 f1       	breq	.+72     	; 0x3810 <_nrk_scheduler+0x16a>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    37c8:	87 81       	ldd	r24, Z+7	; 0x07
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	29 f0       	breq	.+10     	; 0x37d8 <_nrk_scheduler+0x132>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    37ce:	88 23       	and	r24, r24
    37d0:	41 f0       	breq	.+16     	; 0x37e2 <_nrk_scheduler+0x13c>
    37d2:	86 81       	ldd	r24, Z+6	; 0x06
    37d4:	81 11       	cpse	r24, r1
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <_nrk_scheduler+0x136>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    37d8:	85 e0       	ldi	r24, 0x05	; 5
    37da:	01 c0       	rjmp	.+2      	; 0x37de <_nrk_scheduler+0x138>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    37dc:	83 e0       	ldi	r24, 0x03	; 3
    37de:	81 87       	std	Z+9, r24	; 0x09
    37e0:	14 c0       	rjmp	.+40     	; 0x380a <_nrk_scheduler+0x164>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    37e2:	83 e0       	ldi	r24, 0x03	; 3
    37e4:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    37e6:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    37e8:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    37ea:	85 89       	ldd	r24, Z+21	; 0x15
    37ec:	96 89       	ldd	r25, Z+22	; 0x16
    37ee:	a7 89       	ldd	r26, Z+23	; 0x17
    37f0:	b0 8d       	ldd	r27, Z+24	; 0x18
    37f2:	89 2b       	or	r24, r25
    37f4:	8a 2b       	or	r24, r26
    37f6:	8b 2b       	or	r24, r27
    37f8:	41 f4       	brne	.+16     	; 0x380a <_nrk_scheduler+0x164>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    37fa:	81 8d       	ldd	r24, Z+25	; 0x19
    37fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    37fe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3800:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3802:	85 8b       	std	Z+21, r24	; 0x15
    3804:	96 8b       	std	Z+22, r25	; 0x16
    3806:	a7 8b       	std	Z+23, r26	; 0x17
    3808:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    380a:	80 85       	ldd	r24, Z+8	; 0x08
    380c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3810:	e0 91 4e 05 	lds	r30, 0x054E
    3814:	f0 91 4f 05 	lds	r31, 0x054F
    3818:	85 a1       	ldd	r24, Z+37	; 0x25
    381a:	96 a1       	ldd	r25, Z+38	; 0x26
    381c:	a7 a1       	ldd	r26, Z+39	; 0x27
    381e:	b0 a5       	ldd	r27, Z+40	; 0x28
    3820:	89 2b       	or	r24, r25
    3822:	8a 2b       	or	r24, r26
    3824:	8b 2b       	or	r24, r27
    3826:	09 f4       	brne	.+2      	; 0x382a <_nrk_scheduler+0x184>
    3828:	44 c0       	rjmp	.+136    	; 0x38b2 <_nrk_scheduler+0x20c>
    382a:	20 85       	ldd	r18, Z+8	; 0x08
    382c:	22 23       	and	r18, r18
    382e:	09 f4       	brne	.+2      	; 0x3832 <_nrk_scheduler+0x18c>
    3830:	40 c0       	rjmp	.+128    	; 0x38b2 <_nrk_scheduler+0x20c>
    3832:	81 85       	ldd	r24, Z+9	; 0x09
    3834:	84 30       	cpi	r24, 0x04	; 4
    3836:	e9 f1       	breq	.+122    	; 0x38b2 <_nrk_scheduler+0x20c>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3838:	45 8d       	ldd	r20, Z+29	; 0x1d
    383a:	56 8d       	ldd	r21, Z+30	; 0x1e
    383c:	67 8d       	ldd	r22, Z+31	; 0x1f
    383e:	70 a1       	ldd	r23, Z+32	; 0x20
    3840:	80 91 0a 04 	lds	r24, 0x040A
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	48 17       	cp	r20, r24
    384c:	59 07       	cpc	r21, r25
    384e:	6a 07       	cpc	r22, r26
    3850:	7b 07       	cpc	r23, r27
    3852:	68 f4       	brcc	.+26     	; 0x386e <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3854:	62 2f       	mov	r22, r18
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    385c:	e0 91 4e 05 	lds	r30, 0x054E
    3860:	f0 91 4f 05 	lds	r31, 0x054F
    3864:	15 8e       	std	Z+29, r1	; 0x1d
    3866:	16 8e       	std	Z+30, r1	; 0x1e
    3868:	17 8e       	std	Z+31, r1	; 0x1f
    386a:	10 a2       	std	Z+32, r1	; 0x20
    386c:	08 c0       	rjmp	.+16     	; 0x387e <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    386e:	48 1b       	sub	r20, r24
    3870:	59 0b       	sbc	r21, r25
    3872:	6a 0b       	sbc	r22, r26
    3874:	7b 0b       	sbc	r23, r27
    3876:	45 8f       	std	Z+29, r20	; 0x1d
    3878:	56 8f       	std	Z+30, r21	; 0x1e
    387a:	67 8f       	std	Z+31, r22	; 0x1f
    387c:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    387e:	e0 91 4e 05 	lds	r30, 0x054E
    3882:	f0 91 4f 05 	lds	r31, 0x054F
    3886:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3888:	45 8d       	ldd	r20, Z+29	; 0x1d
    388a:	56 8d       	ldd	r21, Z+30	; 0x1e
    388c:	67 8d       	ldd	r22, Z+31	; 0x1f
    388e:	70 a1       	ldd	r23, Z+32	; 0x20
    3890:	45 2b       	or	r20, r21
    3892:	46 2b       	or	r20, r22
    3894:	47 2b       	or	r20, r23
    3896:	69 f4       	brne	.+26     	; 0x38b2 <_nrk_scheduler+0x20c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3898:	61 2f       	mov	r22, r17
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    38a0:	e0 91 4e 05 	lds	r30, 0x054E
    38a4:	f0 91 4f 05 	lds	r31, 0x054F
    38a8:	83 e0       	ldi	r24, 0x03	; 3
    38aa:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    38ac:	81 2f       	mov	r24, r17
    38ae:	0e 94 79 15 	call	0x2af2	; 0x2af2 <nrk_rem_from_readyQ>
    38b2:	0a ee       	ldi	r16, 0xEA	; 234
    38b4:	14 e0       	ldi	r17, 0x04	; 4
    38b6:	3b ee       	ldi	r19, 0xEB	; 235
    38b8:	23 2e       	mov	r2, r19
    38ba:	34 e0       	ldi	r19, 0x04	; 4
    38bc:	33 2e       	mov	r3, r19
    38be:	47 ef       	ldi	r20, 0xF7	; 247
    38c0:	a4 2e       	mov	r10, r20
    38c2:	44 e0       	ldi	r20, 0x04	; 4
    38c4:	b4 2e       	mov	r11, r20
    38c6:	a9 ee       	ldi	r26, 0xE9	; 233
    38c8:	b4 e0       	ldi	r27, 0x04	; 4
    38ca:	ba 83       	std	Y+2, r27	; 0x02
    38cc:	a9 83       	std	Y+1, r26	; 0x01
    38ce:	e8 ee       	ldi	r30, 0xE8	; 232
    38d0:	f4 e0       	ldi	r31, 0x04	; 4
    38d2:	fc 83       	std	Y+4, r31	; 0x04
    38d4:	eb 83       	std	Y+3, r30	; 0x03
    38d6:	57 ee       	ldi	r21, 0xE7	; 231
    38d8:	85 2e       	mov	r8, r21
    38da:	54 e0       	ldi	r21, 0x04	; 4
    38dc:	95 2e       	mov	r9, r21
    38de:	20 e6       	ldi	r18, 0x60	; 96
    38e0:	3a ee       	ldi	r19, 0xEA	; 234
    38e2:	39 87       	std	Y+9, r19	; 0x09
    38e4:	28 87       	std	Y+8, r18	; 0x08
    38e6:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    38e8:	d8 01       	movw	r26, r16
    38ea:	8c 91       	ld	r24, X
    38ec:	8f 3f       	cpi	r24, 0xFF	; 255
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <_nrk_scheduler+0x24c>
    38f0:	2a c1       	rjmp	.+596    	; 0x3b46 <_nrk_scheduler+0x4a0>
        nrk_task_TCB[task_ID].suspend_flag=0;
    38f2:	f4 01       	movw	r30, r8
    38f4:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    38f6:	8c 91       	ld	r24, X
    38f8:	88 23       	and	r24, r24
    38fa:	09 f4       	brne	.+2      	; 0x38fe <_nrk_scheduler+0x258>
    38fc:	6a c0       	rjmp	.+212    	; 0x39d2 <_nrk_scheduler+0x32c>
    38fe:	d1 01       	movw	r26, r2
    3900:	8c 91       	ld	r24, X
    3902:	84 30       	cpi	r24, 0x04	; 4
    3904:	09 f4       	brne	.+2      	; 0x3908 <_nrk_scheduler+0x262>
    3906:	65 c0       	rjmp	.+202    	; 0x39d2 <_nrk_scheduler+0x32c>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3908:	f5 01       	movw	r30, r10
    390a:	c0 80       	ld	r12, Z
    390c:	d1 80       	ldd	r13, Z+1	; 0x01
    390e:	e2 80       	ldd	r14, Z+2	; 0x02
    3910:	f3 80       	ldd	r15, Z+3	; 0x03
    3912:	60 91 0a 04 	lds	r22, 0x040A
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	c6 16       	cp	r12, r22
    391e:	d7 06       	cpc	r13, r23
    3920:	e8 06       	cpc	r14, r24
    3922:	f9 06       	cpc	r15, r25
    3924:	48 f0       	brcs	.+18     	; 0x3938 <_nrk_scheduler+0x292>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3926:	c6 1a       	sub	r12, r22
    3928:	d7 0a       	sbc	r13, r23
    392a:	e8 0a       	sbc	r14, r24
    392c:	f9 0a       	sbc	r15, r25
    392e:	c0 82       	st	Z, r12
    3930:	d1 82       	std	Z+1, r13	; 0x01
    3932:	e2 82       	std	Z+2, r14	; 0x02
    3934:	f3 82       	std	Z+3, r15	; 0x03
    3936:	05 c0       	rjmp	.+10     	; 0x3942 <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    3938:	f5 01       	movw	r30, r10
    393a:	10 82       	st	Z, r1
    393c:	11 82       	std	Z+1, r1	; 0x01
    393e:	12 82       	std	Z+2, r1	; 0x02
    3940:	13 82       	std	Z+3, r1	; 0x03
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3942:	d8 01       	movw	r26, r16
    3944:	51 96       	adiw	r26, 0x11	; 17
    3946:	cd 90       	ld	r12, X+
    3948:	dd 90       	ld	r13, X+
    394a:	ed 90       	ld	r14, X+
    394c:	fc 90       	ld	r15, X
    394e:	54 97       	sbiw	r26, 0x14	; 20
    3950:	c6 16       	cp	r12, r22
    3952:	d7 06       	cpc	r13, r23
    3954:	e8 06       	cpc	r14, r24
    3956:	f9 06       	cpc	r15, r25
    3958:	50 f0       	brcs	.+20     	; 0x396e <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    395a:	c6 1a       	sub	r12, r22
    395c:	d7 0a       	sbc	r13, r23
    395e:	e8 0a       	sbc	r14, r24
    3960:	f9 0a       	sbc	r15, r25
    3962:	f8 01       	movw	r30, r16
    3964:	c1 8a       	std	Z+17, r12	; 0x11
    3966:	d2 8a       	std	Z+18, r13	; 0x12
    3968:	e3 8a       	std	Z+19, r14	; 0x13
    396a:	f4 8a       	std	Z+20, r15	; 0x14
    396c:	21 c0       	rjmp	.+66     	; 0x39b0 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    396e:	d8 01       	movw	r26, r16
    3970:	59 96       	adiw	r26, 0x19	; 25
    3972:	2d 91       	ld	r18, X+
    3974:	3d 91       	ld	r19, X+
    3976:	4d 91       	ld	r20, X+
    3978:	5c 91       	ld	r21, X
    397a:	5c 97       	sbiw	r26, 0x1c	; 28
    397c:	62 17       	cp	r22, r18
    397e:	73 07       	cpc	r23, r19
    3980:	84 07       	cpc	r24, r20
    3982:	95 07       	cpc	r25, r21
    3984:	60 f4       	brcc	.+24     	; 0x399e <_nrk_scheduler+0x2f8>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3986:	69 01       	movw	r12, r18
    3988:	7a 01       	movw	r14, r20
    398a:	c6 1a       	sub	r12, r22
    398c:	d7 0a       	sbc	r13, r23
    398e:	e8 0a       	sbc	r14, r24
    3990:	f9 0a       	sbc	r15, r25
    3992:	f8 01       	movw	r30, r16
    3994:	c1 8a       	std	Z+17, r12	; 0x11
    3996:	d2 8a       	std	Z+18, r13	; 0x12
    3998:	e3 8a       	std	Z+19, r14	; 0x13
    399a:	f4 8a       	std	Z+20, r15	; 0x14
    399c:	09 c0       	rjmp	.+18     	; 0x39b0 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    399e:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__udivmodsi4>
    39a2:	d8 01       	movw	r26, r16
    39a4:	51 96       	adiw	r26, 0x11	; 17
    39a6:	6d 93       	st	X+, r22
    39a8:	7d 93       	st	X+, r23
    39aa:	8d 93       	st	X+, r24
    39ac:	9c 93       	st	X, r25
    39ae:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    39b0:	f8 01       	movw	r30, r16
    39b2:	81 89       	ldd	r24, Z+17	; 0x11
    39b4:	92 89       	ldd	r25, Z+18	; 0x12
    39b6:	a3 89       	ldd	r26, Z+19	; 0x13
    39b8:	b4 89       	ldd	r27, Z+20	; 0x14
    39ba:	89 2b       	or	r24, r25
    39bc:	8a 2b       	or	r24, r26
    39be:	8b 2b       	or	r24, r27
    39c0:	41 f4       	brne	.+16     	; 0x39d2 <_nrk_scheduler+0x32c>
    39c2:	81 8d       	ldd	r24, Z+25	; 0x19
    39c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    39c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    39c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    39ca:	81 8b       	std	Z+17, r24	; 0x11
    39cc:	92 8b       	std	Z+18, r25	; 0x12
    39ce:	a3 8b       	std	Z+19, r26	; 0x13
    39d0:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    39d2:	d1 01       	movw	r26, r2
    39d4:	8c 91       	ld	r24, X
    39d6:	83 30       	cpi	r24, 0x03	; 3
    39d8:	09 f0       	breq	.+2      	; 0x39dc <_nrk_scheduler+0x336>
    39da:	b5 c0       	rjmp	.+362    	; 0x3b46 <_nrk_scheduler+0x4a0>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    39dc:	f5 01       	movw	r30, r10
    39de:	80 81       	ld	r24, Z
    39e0:	91 81       	ldd	r25, Z+1	; 0x01
    39e2:	a2 81       	ldd	r26, Z+2	; 0x02
    39e4:	b3 81       	ldd	r27, Z+3	; 0x03
    39e6:	89 2b       	or	r24, r25
    39e8:	8a 2b       	or	r24, r26
    39ea:	8b 2b       	or	r24, r27
    39ec:	09 f0       	breq	.+2      	; 0x39f0 <_nrk_scheduler+0x34a>
    39ee:	96 c0       	rjmp	.+300    	; 0x3b1c <_nrk_scheduler+0x476>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    39f0:	a9 81       	ldd	r26, Y+1	; 0x01
    39f2:	ba 81       	ldd	r27, Y+2	; 0x02
    39f4:	8c 91       	ld	r24, X
    39f6:	88 23       	and	r24, r24
    39f8:	b9 f0       	breq	.+46     	; 0x3a28 <_nrk_scheduler+0x382>
    39fa:	eb 81       	ldd	r30, Y+3	; 0x03
    39fc:	fc 81       	ldd	r31, Y+4	; 0x04
    39fe:	80 81       	ld	r24, Z
    3a00:	88 23       	and	r24, r24
    3a02:	91 f0       	breq	.+36     	; 0x3a28 <_nrk_scheduler+0x382>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	a0 e0       	ldi	r26, 0x00	; 0
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	00 90 3e 05 	lds	r0, 0x053E
    3a10:	04 c0       	rjmp	.+8      	; 0x3a1a <_nrk_scheduler+0x374>
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	aa 1f       	adc	r26, r26
    3a18:	bb 1f       	adc	r27, r27
    3a1a:	0a 94       	dec	r0
    3a1c:	d2 f7       	brpl	.-12     	; 0x3a12 <_nrk_scheduler+0x36c>
    3a1e:	f8 01       	movw	r30, r16
    3a20:	81 87       	std	Z+9, r24	; 0x09
    3a22:	92 87       	std	Z+10, r25	; 0x0a
    3a24:	a3 87       	std	Z+11, r26	; 0x0b
    3a26:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    3a28:	a9 81       	ldd	r26, Y+1	; 0x01
    3a2a:	ba 81       	ldd	r27, Y+2	; 0x02
    3a2c:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    3a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a30:	fc 81       	ldd	r31, Y+4	; 0x04
    3a32:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    3a34:	d4 01       	movw	r26, r8
    3a36:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    3a38:	f5 01       	movw	r30, r10
    3a3a:	84 89       	ldd	r24, Z+20	; 0x14
    3a3c:	95 89       	ldd	r25, Z+21	; 0x15
    3a3e:	d8 01       	movw	r26, r16
    3a40:	5d 96       	adiw	r26, 0x1d	; 29
    3a42:	4d 91       	ld	r20, X+
    3a44:	5d 91       	ld	r21, X+
    3a46:	6d 91       	ld	r22, X+
    3a48:	7c 91       	ld	r23, X
    3a4a:	90 97       	sbiw	r26, 0x20	; 32
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	45 8b       	std	Z+21, r20	; 0x15
    3a50:	56 8b       	std	Z+22, r21	; 0x16
    3a52:	67 8b       	std	Z+23, r22	; 0x17
    3a54:	70 8f       	std	Z+24, r23	; 0x18
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	29 f5       	brne	.+74     	; 0x3aa4 <_nrk_scheduler+0x3fe>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    3a5a:	e2 e0       	ldi	r30, 0x02	; 2
    3a5c:	d1 01       	movw	r26, r2
    3a5e:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3a60:	f8 01       	movw	r30, r16
    3a62:	81 89       	ldd	r24, Z+17	; 0x11
    3a64:	92 89       	ldd	r25, Z+18	; 0x12
    3a66:	a3 89       	ldd	r26, Z+19	; 0x13
    3a68:	b4 89       	ldd	r27, Z+20	; 0x14
    3a6a:	f5 01       	movw	r30, r10
    3a6c:	80 83       	st	Z, r24
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	a2 83       	std	Z+2, r26	; 0x02
    3a72:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3a74:	f8 01       	movw	r30, r16
    3a76:	81 8d       	ldd	r24, Z+25	; 0x19
    3a78:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a7a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3a7c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3a7e:	89 2b       	or	r24, r25
    3a80:	8a 2b       	or	r24, r26
    3a82:	8b 2b       	or	r24, r27
    3a84:	59 f4       	brne	.+22     	; 0x3a9c <_nrk_scheduler+0x3f6>
    3a86:	2a ef       	ldi	r18, 0xFA	; 250
    3a88:	c2 2e       	mov	r12, r18
    3a8a:	d1 2c       	mov	r13, r1
    3a8c:	e1 2c       	mov	r14, r1
    3a8e:	f1 2c       	mov	r15, r1
    3a90:	d5 01       	movw	r26, r10
    3a92:	cd 92       	st	X+, r12
    3a94:	dd 92       	st	X+, r13
    3a96:	ed 92       	st	X+, r14
    3a98:	fc 92       	st	X, r15
    3a9a:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <nrk_add_to_readyQ>
    3aa2:	3c c0       	rjmp	.+120    	; 0x3b1c <_nrk_scheduler+0x476>
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3aa4:	d5 01       	movw	r26, r10
    3aa6:	54 96       	adiw	r26, 0x14	; 20
    3aa8:	4d 90       	ld	r4, X+
    3aaa:	5c 90       	ld	r5, X
    3aac:	55 97       	sbiw	r26, 0x15	; 21
    3aae:	b1 e0       	ldi	r27, 0x01	; 1
    3ab0:	4b 1a       	sub	r4, r27
    3ab2:	51 08       	sbc	r5, r1
    3ab4:	61 2c       	mov	r6, r1
    3ab6:	71 2c       	mov	r7, r1
    3ab8:	61 8d       	ldd	r22, Z+25	; 0x19
    3aba:	72 8d       	ldd	r23, Z+26	; 0x1a
    3abc:	83 8d       	ldd	r24, Z+27	; 0x1b
    3abe:	94 8d       	ldd	r25, Z+28	; 0x1c
    3ac0:	a3 01       	movw	r20, r6
    3ac2:	92 01       	movw	r18, r4
    3ac4:	0e 94 7d 25 	call	0x4afa	; 0x4afa <__mulsi3>
    3ac8:	f5 01       	movw	r30, r10
    3aca:	60 83       	st	Z, r22
    3acc:	71 83       	std	Z+1, r23	; 0x01
    3ace:	82 83       	std	Z+2, r24	; 0x02
    3ad0:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3ad2:	d8 01       	movw	r26, r16
    3ad4:	59 96       	adiw	r26, 0x19	; 25
    3ad6:	cd 90       	ld	r12, X+
    3ad8:	dd 90       	ld	r13, X+
    3ada:	ed 90       	ld	r14, X+
    3adc:	fc 90       	ld	r15, X
    3ade:	5c 97       	sbiw	r26, 0x1c	; 28
    3ae0:	c7 01       	movw	r24, r14
    3ae2:	b6 01       	movw	r22, r12
    3ae4:	0e 94 7d 25 	call	0x4afa	; 0x4afa <__mulsi3>
    3ae8:	f8 01       	movw	r30, r16
    3aea:	61 8b       	std	Z+17, r22	; 0x11
    3aec:	72 8b       	std	Z+18, r23	; 0x12
    3aee:	83 8b       	std	Z+19, r24	; 0x13
    3af0:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3af2:	cd 28       	or	r12, r13
    3af4:	ce 28       	or	r12, r14
    3af6:	cf 28       	or	r12, r15
    3af8:	59 f4       	brne	.+22     	; 0x3b10 <_nrk_scheduler+0x46a>
    3afa:	9a ef       	ldi	r25, 0xFA	; 250
    3afc:	c9 2e       	mov	r12, r25
    3afe:	d1 2c       	mov	r13, r1
    3b00:	e1 2c       	mov	r14, r1
    3b02:	f1 2c       	mov	r15, r1
    3b04:	d5 01       	movw	r26, r10
    3b06:	cd 92       	st	X+, r12
    3b08:	dd 92       	st	X+, r13
    3b0a:	ed 92       	st	X+, r14
    3b0c:	fc 92       	st	X, r15
    3b0e:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    3b10:	cc 24       	eor	r12, r12
    3b12:	c3 94       	inc	r12
    3b14:	d1 2c       	mov	r13, r1
    3b16:	f5 01       	movw	r30, r10
    3b18:	d5 8a       	std	Z+21, r13	; 0x15
    3b1a:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3b1c:	f5 01       	movw	r30, r10
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	a2 81       	ldd	r26, Z+2	; 0x02
    3b24:	b3 81       	ldd	r27, Z+3	; 0x03
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	a1 05       	cpc	r26, r1
    3b2a:	b1 05       	cpc	r27, r1
    3b2c:	61 f0       	breq	.+24     	; 0x3b46 <_nrk_scheduler+0x4a0>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3b2e:	c8 84       	ldd	r12, Y+8	; 0x08
    3b30:	d9 84       	ldd	r13, Y+9	; 0x09
    3b32:	a6 01       	movw	r20, r12
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3b38:	84 17       	cp	r24, r20
    3b3a:	95 07       	cpc	r25, r21
    3b3c:	a6 07       	cpc	r26, r22
    3b3e:	b7 07       	cpc	r27, r23
    3b40:	10 f4       	brcc	.+4      	; 0x3b46 <_nrk_scheduler+0x4a0>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3b42:	99 87       	std	Y+9, r25	; 0x09
    3b44:	88 87       	std	Y+8, r24	; 0x08
    3b46:	2d 81       	ldd	r18, Y+5	; 0x05
    3b48:	2f 5f       	subi	r18, 0xFF	; 255
    3b4a:	2d 83       	std	Y+5, r18	; 0x05
    3b4c:	05 5d       	subi	r16, 0xD5	; 213
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	3b e2       	ldi	r19, 0x2B	; 43
    3b52:	23 0e       	add	r2, r19
    3b54:	31 1c       	adc	r3, r1
    3b56:	8b e2       	ldi	r24, 0x2B	; 43
    3b58:	a8 0e       	add	r10, r24
    3b5a:	b1 1c       	adc	r11, r1
    3b5c:	a9 81       	ldd	r26, Y+1	; 0x01
    3b5e:	ba 81       	ldd	r27, Y+2	; 0x02
    3b60:	9b 96       	adiw	r26, 0x2b	; 43
    3b62:	ba 83       	std	Y+2, r27	; 0x02
    3b64:	a9 83       	std	Y+1, r26	; 0x01
    3b66:	eb 81       	ldd	r30, Y+3	; 0x03
    3b68:	fc 81       	ldd	r31, Y+4	; 0x04
    3b6a:	bb 96       	adiw	r30, 0x2b	; 43
    3b6c:	fc 83       	std	Y+4, r31	; 0x04
    3b6e:	eb 83       	std	Y+3, r30	; 0x03
    3b70:	fb e2       	ldi	r31, 0x2B	; 43
    3b72:	8f 0e       	add	r8, r31
    3b74:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3b76:	22 30       	cpi	r18, 0x02	; 2
    3b78:	09 f0       	breq	.+2      	; 0x3b7c <_nrk_scheduler+0x4d6>
    3b7a:	b6 ce       	rjmp	.-660    	; 0x38e8 <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3b7c:	0e 94 c6 14 	call	0x298c	; 0x298c <nrk_get_high_ready_task_ID>
    3b80:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3b82:	2b e2       	ldi	r18, 0x2B	; 43
    3b84:	82 02       	muls	r24, r18
    3b86:	f0 01       	movw	r30, r0
    3b88:	11 24       	eor	r1, r1
    3b8a:	ee 51       	subi	r30, 0x1E	; 30
    3b8c:	fb 4f       	sbci	r31, 0xFB	; 251
    3b8e:	82 85       	ldd	r24, Z+10	; 0x0a
    3b90:	80 93 50 05 	sts	0x0550, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3b94:	f0 93 40 05 	sts	0x0540, r31
    3b98:	e0 93 3f 05 	sts	0x053F, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3b9c:	ff 20       	and	r15, r15
    3b9e:	21 f1       	breq	.+72     	; 0x3be8 <_nrk_scheduler+0x542>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3ba0:	45 a1       	ldd	r20, Z+37	; 0x25
    3ba2:	56 a1       	ldd	r21, Z+38	; 0x26
    3ba4:	67 a1       	ldd	r22, Z+39	; 0x27
    3ba6:	70 a5       	ldd	r23, Z+40	; 0x28
    3ba8:	45 2b       	or	r20, r21
    3baa:	46 2b       	or	r20, r22
    3bac:	47 2b       	or	r20, r23
    3bae:	b1 f0       	breq	.+44     	; 0x3bdc <_nrk_scheduler+0x536>
    3bb0:	45 8d       	ldd	r20, Z+29	; 0x1d
    3bb2:	56 8d       	ldd	r21, Z+30	; 0x1e
    3bb4:	67 8d       	ldd	r22, Z+31	; 0x1f
    3bb6:	70 a1       	ldd	r23, Z+32	; 0x20
    3bb8:	4a 3f       	cpi	r20, 0xFA	; 250
    3bba:	51 05       	cpc	r21, r1
    3bbc:	61 05       	cpc	r22, r1
    3bbe:	71 05       	cpc	r23, r1
    3bc0:	68 f4       	brcc	.+26     	; 0x3bdc <_nrk_scheduler+0x536>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    3bc2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bc4:	d9 84       	ldd	r13, Y+9	; 0x09
    3bc6:	86 01       	movw	r16, r12
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 17       	cp	r20, r16
    3bce:	51 07       	cpc	r21, r17
    3bd0:	62 07       	cpc	r22, r18
    3bd2:	73 07       	cpc	r23, r19
    3bd4:	48 f5       	brcc	.+82     	; 0x3c28 <_nrk_scheduler+0x582>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    3bd6:	59 87       	std	Y+9, r21	; 0x09
    3bd8:	48 87       	std	Y+8, r20	; 0x08
    3bda:	26 c0       	rjmp	.+76     	; 0x3c28 <_nrk_scheduler+0x582>
    3bdc:	28 85       	ldd	r18, Y+8	; 0x08
    3bde:	39 85       	ldd	r19, Y+9	; 0x09
    3be0:	2b 3f       	cpi	r18, 0xFB	; 251
    3be2:	31 05       	cpc	r19, r1
    3be4:	08 f1       	brcs	.+66     	; 0x3c28 <_nrk_scheduler+0x582>
    3be6:	19 c0       	rjmp	.+50     	; 0x3c1a <_nrk_scheduler+0x574>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    3be8:	28 85       	ldd	r18, Y+8	; 0x08
    3bea:	39 85       	ldd	r19, Y+9	; 0x09
    3bec:	24 30       	cpi	r18, 0x04	; 4
    3bee:	31 05       	cpc	r19, r1
    3bf0:	d8 f0       	brcs	.+54     	; 0x3c28 <_nrk_scheduler+0x582>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    3bf2:	23 50       	subi	r18, 0x03	; 3
    3bf4:	31 09       	sbc	r19, r1
    3bf6:	2a 3f       	cpi	r18, 0xFA	; 250
    3bf8:	31 05       	cpc	r19, r1
    3bfa:	50 f4       	brcc	.+20     	; 0x3c10 <_nrk_scheduler+0x56a>
    3bfc:	39 87       	std	Y+9, r19	; 0x09
    3bfe:	28 87       	std	Y+8, r18	; 0x08
    3c00:	22 30       	cpi	r18, 0x02	; 2
    3c02:	31 05       	cpc	r19, r1
    3c04:	88 f4       	brcc	.+34     	; 0x3c28 <_nrk_scheduler+0x582>
    3c06:	a2 e0       	ldi	r26, 0x02	; 2
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	b9 87       	std	Y+9, r27	; 0x09
    3c0c:	a8 87       	std	Y+8, r26	; 0x08
    3c0e:	0c c0       	rjmp	.+24     	; 0x3c28 <_nrk_scheduler+0x582>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    3c10:	28 85       	ldd	r18, Y+8	; 0x08
    3c12:	39 85       	ldd	r19, Y+9	; 0x09
    3c14:	2d 3f       	cpi	r18, 0xFD	; 253
    3c16:	31 05       	cpc	r19, r1
    3c18:	19 f0       	breq	.+6      	; 0x3c20 <_nrk_scheduler+0x57a>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    3c1a:	aa ef       	ldi	r26, 0xFA	; 250
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	f5 cf       	rjmp	.-22     	; 0x3c0a <_nrk_scheduler+0x564>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    3c20:	27 ef       	ldi	r18, 0xF7	; 247
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	39 87       	std	Y+9, r19	; 0x09
    3c26:	28 87       	std	Y+8, r18	; 0x08
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3c28:	80 93 41 05 	sts	0x0541, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3c2c:	f0 93 4f 05 	sts	0x054F, r31
    3c30:	e0 93 4e 05 	sts	0x054E, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3c34:	38 85       	ldd	r19, Y+8	; 0x08
    3c36:	30 93 0a 04 	sts	0x040A, r19

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3c3a:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    3c3e:	28 2f       	mov	r18, r24
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	2f 5f       	subi	r18, 0xFF	; 255
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	c8 84       	ldd	r12, Y+8	; 0x08
    3c48:	d9 84       	ldd	r13, Y+9	; 0x09
    3c4a:	2c 15       	cp	r18, r12
    3c4c:	3d 05       	cpc	r19, r13
    3c4e:	58 f0       	brcs	.+22     	; 0x3c66 <_nrk_scheduler+0x5c0>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3c50:	0e 94 9d 20 	call	0x413a	; 0x413a <_nrk_os_timer_get>
    3c54:	c8 2e       	mov	r12, r24
    3c56:	d1 2c       	mov	r13, r1
    3c58:	96 01       	movw	r18, r12
    3c5a:	2e 5f       	subi	r18, 0xFE	; 254
    3c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5e:	39 87       	std	Y+9, r19	; 0x09
    3c60:	28 87       	std	Y+8, r18	; 0x08
        _nrk_prev_timer_val=next_wake;
    3c62:	20 93 0a 04 	sts	0x040A, r18
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3c66:	f1 10       	cpse	r15, r1
    3c68:	10 92 42 05 	sts	0x0542, r1

    _nrk_set_next_wakeup(next_wake);
    3c6c:	88 85       	ldd	r24, Y+8	; 0x08
    3c6e:	0e 94 3b 20 	call	0x4076	; 0x4076 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3c72:	6c ed       	ldi	r22, 0xDC	; 220
    3c74:	75 e0       	ldi	r23, 0x05	; 5
    3c76:	8e 81       	ldd	r24, Y+6	; 0x06
    3c78:	9f 81       	ldd	r25, Y+7	; 0x07
    3c7a:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3c7e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3c82:	29 96       	adiw	r28, 0x09	; 9
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	ff 90       	pop	r15
    3c98:	ef 90       	pop	r14
    3c9a:	df 90       	pop	r13
    3c9c:	cf 90       	pop	r12
    3c9e:	bf 90       	pop	r11
    3ca0:	af 90       	pop	r10
    3ca2:	9f 90       	pop	r9
    3ca4:	8f 90       	pop	r8
    3ca6:	7f 90       	pop	r7
    3ca8:	6f 90       	pop	r6
    3caa:	5f 90       	pop	r5
    3cac:	4f 90       	pop	r4
    3cae:	3f 90       	pop	r3
    3cb0:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3cb2:	0c 94 dd 23 	jmp	0x47ba	; 0x47ba <nrk_start_high_ready_task>

00003cb6 <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    3cb6:	40 91 61 05 	lds	r20, 0x0561
    3cba:	14 16       	cp	r1, r20
    3cbc:	94 f0       	brlt	.+36     	; 0x3ce2 <nrk_register_driver+0x2c>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    3cbe:	54 e0       	ldi	r21, 0x04	; 4
    3cc0:	45 02       	muls	r20, r21
    3cc2:	90 01       	movw	r18, r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	f9 01       	movw	r30, r18
    3cc8:	ee 59       	subi	r30, 0x9E	; 158
    3cca:	fa 4f       	sbci	r31, 0xFA	; 250
    3ccc:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    3cce:	f9 01       	movw	r30, r18
    3cd0:	ec 59       	subi	r30, 0x9C	; 156
    3cd2:	fa 4f       	sbci	r31, 0xFA	; 250
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
        _nrk_driver_count++;
    3cd8:	4f 5f       	subi	r20, 0xFF	; 255
    3cda:	40 93 61 05 	sts	0x0561, r20
        return NRK_OK;
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	08 95       	ret
    }
    else
        return NRK_ERROR;
    3ce2:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ce4:	08 95       	ret

00003ce6 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	06 2f       	mov	r16, r22
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3cf0:	40 91 61 05 	lds	r20, 0x0561
    3cf4:	55 27       	eor	r21, r21
    3cf6:	47 fd       	sbrc	r20, 7
    3cf8:	50 95       	com	r21
    3cfa:	10 e0       	ldi	r17, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    3cfc:	e8 2f       	mov	r30, r24
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3d00:	21 2f       	mov	r18, r17
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	24 17       	cp	r18, r20
    3d06:	35 07       	cpc	r19, r21
    3d08:	8c f5       	brge	.+98     	; 0x3d6c <nrk_open+0x86>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    3d0a:	e9 01       	movw	r28, r18
    3d0c:	cc 0f       	add	r28, r28
    3d0e:	dd 1f       	adc	r29, r29
    3d10:	cc 0f       	add	r28, r28
    3d12:	dd 1f       	adc	r29, r29
    3d14:	de 01       	movw	r26, r28
    3d16:	ae 59       	subi	r26, 0x9E	; 158
    3d18:	ba 4f       	sbci	r27, 0xFA	; 250
    3d1a:	8c 91       	ld	r24, X
    3d1c:	99 27       	eor	r25, r25
    3d1e:	87 fd       	sbrc	r24, 7
    3d20:	90 95       	com	r25
    3d22:	8e 17       	cp	r24, r30
    3d24:	9f 07       	cpc	r25, r31
    3d26:	01 f5       	brne	.+64     	; 0x3d68 <nrk_open+0x82>
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    3d28:	f9 01       	movw	r30, r18
    3d2a:	ea 59       	subi	r30, 0x9A	; 154
    3d2c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d2e:	80 81       	ld	r24, Z
    3d30:	81 11       	cpse	r24, r1
    3d32:	0e c0       	rjmp	.+28     	; 0x3d50 <nrk_open+0x6a>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    3d38:	fe 01       	movw	r30, r28
    3d3a:	ec 59       	subi	r30, 0x9C	; 156
    3d3c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d3e:	01 90       	ld	r0, Z+
    3d40:	f0 81       	ld	r31, Z
    3d42:	e0 2d       	mov	r30, r0
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	40 e0       	ldi	r20, 0x00	; 0
    3d48:	50 e0       	ldi	r21, 0x00	; 0
    3d4a:	60 2f       	mov	r22, r16
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    3d50:	cc 59       	subi	r28, 0x9C	; 156
    3d52:	da 4f       	sbci	r29, 0xFA	; 250
    3d54:	e8 81       	ld	r30, Y
    3d56:	f9 81       	ldd	r31, Y+1	; 0x01
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	60 2f       	mov	r22, r16
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	09 95       	icall
            return cnt;
    3d64:	81 2f       	mov	r24, r17
    3d66:	03 c0       	rjmp	.+6      	; 0x3d6e <nrk_open+0x88>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3d68:	1f 5f       	subi	r17, 0xFF	; 255
    3d6a:	ca cf       	rjmp	.-108    	; 0x3d00 <nrk_open+0x1a>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	08 95       	ret

00003d78 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    3d78:	e8 2f       	mov	r30, r24
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 91 61 05 	lds	r24, 0x0561
    3d80:	99 27       	eor	r25, r25
    3d82:	87 fd       	sbrc	r24, 7
    3d84:	90 95       	com	r25
    3d86:	8e 17       	cp	r24, r30
    3d88:	9f 07       	cpc	r25, r31
    3d8a:	7c f0       	brlt	.+30     	; 0x3daa <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    3d8c:	ee 0f       	add	r30, r30
    3d8e:	ff 1f       	adc	r31, r31
    3d90:	ee 0f       	add	r30, r30
    3d92:	ff 1f       	adc	r31, r31
    3d94:	ec 59       	subi	r30, 0x9C	; 156
    3d96:	fa 4f       	sbci	r31, 0xFA	; 250
    3d98:	01 90       	ld	r0, Z+
    3d9a:	f0 81       	ld	r31, Z
    3d9c:	e0 2d       	mov	r30, r0
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	60 e0       	ldi	r22, 0x00	; 0
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    3db0:	8f ef       	ldi	r24, 0xFF	; 255
    3db2:	08 95       	ret

00003db4 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    3db4:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    3db6:	e8 2f       	mov	r30, r24
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 91 61 05 	lds	r24, 0x0561
    3dbe:	99 27       	eor	r25, r25
    3dc0:	87 fd       	sbrc	r24, 7
    3dc2:	90 95       	com	r25
    3dc4:	8e 17       	cp	r24, r30
    3dc6:	9f 07       	cpc	r25, r31
    3dc8:	6c f0       	brlt	.+26     	; 0x3de4 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    3dca:	ee 0f       	add	r30, r30
    3dcc:	ff 1f       	adc	r31, r31
    3dce:	ee 0f       	add	r30, r30
    3dd0:	ff 1f       	adc	r31, r31
    3dd2:	ec 59       	subi	r30, 0x9C	; 156
    3dd4:	fa 4f       	sbci	r31, 0xFA	; 250
    3dd6:	01 90       	ld	r0, Z+
    3dd8:	f0 81       	ld	r31, Z
    3dda:	e0 2d       	mov	r30, r0
    3ddc:	ab 01       	movw	r20, r22
    3dde:	60 e0       	ldi	r22, 0x00	; 0
    3de0:	86 e0       	ldi	r24, 0x06	; 6
    3de2:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    3dea:	8f ef       	ldi	r24, 0xFF	; 255
    3dec:	08 95       	ret

00003dee <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    3dee:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    3df0:	e8 2f       	mov	r30, r24
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 91 61 05 	lds	r24, 0x0561
    3df8:	99 27       	eor	r25, r25
    3dfa:	87 fd       	sbrc	r24, 7
    3dfc:	90 95       	com	r25
    3dfe:	8e 17       	cp	r24, r30
    3e00:	9f 07       	cpc	r25, r31
    3e02:	6c f0       	brlt	.+26     	; 0x3e1e <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    3e04:	ee 0f       	add	r30, r30
    3e06:	ff 1f       	adc	r31, r31
    3e08:	ee 0f       	add	r30, r30
    3e0a:	ff 1f       	adc	r31, r31
    3e0c:	ec 59       	subi	r30, 0x9C	; 156
    3e0e:	fa 4f       	sbci	r31, 0xFA	; 250
    3e10:	01 90       	ld	r0, Z+
    3e12:	f0 81       	ld	r31, Z
    3e14:	e0 2d       	mov	r30, r0
    3e16:	ab 01       	movw	r20, r22
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	85 e0       	ldi	r24, 0x05	; 5
    3e1c:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    3e24:	8f ef       	ldi	r24, 0xFF	; 255
    3e26:	08 95       	ret

00003e28 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    3e28:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    3e2a:	e8 2f       	mov	r30, r24
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 91 61 05 	lds	r24, 0x0561
    3e32:	99 27       	eor	r25, r25
    3e34:	87 fd       	sbrc	r24, 7
    3e36:	90 95       	com	r25
    3e38:	8e 17       	cp	r24, r30
    3e3a:	9f 07       	cpc	r25, r31
    3e3c:	6c f0       	brlt	.+26     	; 0x3e58 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    3e3e:	ee 0f       	add	r30, r30
    3e40:	ff 1f       	adc	r31, r31
    3e42:	ee 0f       	add	r30, r30
    3e44:	ff 1f       	adc	r31, r31
    3e46:	ec 59       	subi	r30, 0x9C	; 156
    3e48:	fa 4f       	sbci	r31, 0xFA	; 250
    3e4a:	01 90       	ld	r0, Z+
    3e4c:	f0 81       	ld	r31, Z
    3e4e:	e0 2d       	mov	r30, r0
    3e50:	40 e0       	ldi	r20, 0x00	; 0
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	84 e0       	ldi	r24, 0x04	; 4
    3e56:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    3e5e:	8f ef       	ldi	r24, 0xFF	; 255
    3e60:	08 95       	ret

00003e62 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    3e62:	e8 2f       	mov	r30, r24
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 91 61 05 	lds	r24, 0x0561
    3e6a:	99 27       	eor	r25, r25
    3e6c:	87 fd       	sbrc	r24, 7
    3e6e:	90 95       	com	r25
    3e70:	8e 17       	cp	r24, r30
    3e72:	9f 07       	cpc	r25, r31
    3e74:	74 f0       	brlt	.+28     	; 0x3e92 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	ec 59       	subi	r30, 0x9C	; 156
    3e80:	fa 4f       	sbci	r31, 0xFA	; 250
    3e82:	01 90       	ld	r0, Z+
    3e84:	f0 81       	ld	r31, Z
    3e86:	e0 2d       	mov	r30, r0
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	50 e0       	ldi	r21, 0x00	; 0
    3e8e:	83 e0       	ldi	r24, 0x03	; 3
    3e90:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    3e98:	8f ef       	ldi	r24, 0xFF	; 255
    3e9a:	08 95       	ret

00003e9c <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	89 f7       	brne	.-30     	; 0x3e9c <nrk_spin_wait_us>

}
    3eba:	08 95       	ret

00003ebc <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3ebc:	10 92 21 01 	sts	0x0121, r1
    3ec0:	08 95       	ret

00003ec2 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3ec2:	89 e0       	ldi	r24, 0x09	; 9
    3ec4:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3ec8:	8d e8       	ldi	r24, 0x8D	; 141
    3eca:	9c e3       	ldi	r25, 0x3C	; 60
    3ecc:	90 93 29 01 	sts	0x0129, r25
    3ed0:	80 93 28 01 	sts	0x0128, r24
    3ed4:	08 95       	ret

00003ed6 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3ed6:	10 92 25 01 	sts	0x0125, r1
    3eda:	10 92 24 01 	sts	0x0124, r1
    3ede:	08 95       	ret

00003ee0 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	00 d0       	rcall	.+0      	; 0x3ee6 <_nrk_precision_os_timer_get+0x6>
    3ee6:	cd b7       	in	r28, 0x3d	; 61
    3ee8:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3eea:	80 91 24 01 	lds	r24, 0x0124
    3eee:	90 91 25 01 	lds	r25, 0x0125
    3ef2:	9a 83       	std	Y+2, r25	; 0x02
    3ef4:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	df 91       	pop	r29
    3f00:	cf 91       	pop	r28
    3f02:	08 95       	ret

00003f04 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3f04:	10 92 81 00 	sts	0x0081, r1
    3f08:	08 95       	ret

00003f0a <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	80 93 81 00 	sts	0x0081, r24
    3f10:	08 95       	ret

00003f12 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3f12:	83 b5       	in	r24, 0x23	; 35
    3f14:	81 60       	ori	r24, 0x01	; 1
    3f16:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3f18:	10 92 85 00 	sts	0x0085, r1
    3f1c:	10 92 84 00 	sts	0x0084, r1
    3f20:	08 95       	ret

00003f22 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <_nrk_high_speed_timer_get+0x6>
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3f2c:	80 91 84 00 	lds	r24, 0x0084
    3f30:	90 91 85 00 	lds	r25, 0x0085
    3f34:	9a 83       	std	Y+2, r25	; 0x02
    3f36:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	08 95       	ret

00003f46 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3f46:	cf 92       	push	r12
    3f48:	df 92       	push	r13
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3f52:	ec 01       	movw	r28, r24
    3f54:	cc 0f       	add	r28, r28
    3f56:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3f58:	c9 37       	cpi	r28, 0x79	; 121
    3f5a:	8f ef       	ldi	r24, 0xFF	; 255
    3f5c:	d8 07       	cpc	r29, r24
    3f5e:	10 f0       	brcs	.+4      	; 0x3f64 <nrk_high_speed_timer_wait+0x1e>
    3f60:	c0 e0       	ldi	r28, 0x00	; 0
    3f62:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3f64:	6b 01       	movw	r12, r22
    3f66:	e1 2c       	mov	r14, r1
    3f68:	f1 2c       	mov	r15, r1
    3f6a:	cc 0e       	add	r12, r28
    3f6c:	dd 1e       	adc	r13, r29
    3f6e:	e1 1c       	adc	r14, r1
    3f70:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	c8 16       	cp	r12, r24
    3f76:	d1 04       	cpc	r13, r1
    3f78:	e8 06       	cpc	r14, r24
    3f7a:	f1 04       	cpc	r15, r1
    3f7c:	40 f0       	brcs	.+16     	; 0x3f8e <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	e8 1a       	sub	r14, r24
    3f82:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3f84:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_nrk_high_speed_timer_get>
    3f88:	c8 17       	cp	r28, r24
    3f8a:	d9 07       	cpc	r29, r25
    3f8c:	d8 f3       	brcs	.-10     	; 0x3f84 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3f8e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <_nrk_high_speed_timer_get>
    3f92:	8c 15       	cp	r24, r12
    3f94:	9d 05       	cpc	r25, r13
    3f96:	d8 f3       	brcs	.-10     	; 0x3f8e <nrk_high_speed_timer_wait+0x48>
}
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	df 90       	pop	r13
    3fa2:	cf 90       	pop	r12
    3fa4:	08 95       	ret

00003fa6 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3fa6:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3faa:	e0 e7       	ldi	r30, 0x70	; 112
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	8d 7f       	andi	r24, 0xFD	; 253
    3fb2:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8e 7f       	andi	r24, 0xFE	; 254
    3fb8:	80 83       	st	Z, r24
    3fba:	08 95       	ret

00003fbc <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3fbc:	80 93 b2 00 	sts	0x00B2, r24
    3fc0:	08 95       	ret

00003fc2 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3fc2:	e0 e7       	ldi	r30, 0x70	; 112
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	80 81       	ld	r24, Z
    3fc8:	83 60       	ori	r24, 0x03	; 3
    3fca:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3fcc:	83 e0       	ldi	r24, 0x03	; 3
    3fce:	80 93 b1 00 	sts	0x00B1, r24
    3fd2:	08 95       	ret

00003fd4 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3fd4:	83 b5       	in	r24, 0x23	; 35
    3fd6:	82 60       	ori	r24, 0x02	; 2
    3fd8:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3fda:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3fde:	10 92 5f 03 	sts	0x035F, r1
    _nrk_prev_timer_val=0;
    3fe2:	10 92 0a 04 	sts	0x040A, r1
    3fe6:	08 95       	ret

00003fe8 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3fec:	8e ef       	ldi	r24, 0xFE	; 254
    3fee:	80 93 0a 04 	sts	0x040A, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3ff2:	80 e2       	ldi	r24, 0x20	; 32
    3ff4:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3ff8:	80 91 0a 04 	lds	r24, 0x040A
    3ffc:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4004:	92 e0       	ldi	r25, 0x02	; 2
    4006:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    400a:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    400e:	93 b5       	in	r25, 0x23	; 35
    4010:	92 60       	ori	r25, 0x02	; 2
    4012:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4014:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4016:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4018:	83 b5       	in	r24, 0x23	; 35
    401a:	82 60       	ori	r24, 0x02	; 2
    401c:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    401e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4028:	10 92 85 00 	sts	0x0085, r1
    402c:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4030:	83 b5       	in	r24, 0x23	; 35
    4032:	82 60       	ori	r24, 0x02	; 2
    4034:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4036:	83 b5       	in	r24, 0x23	; 35
    4038:	81 60       	ori	r24, 0x01	; 1
    403a:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    403c:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4040:	c4 e2       	ldi	r28, 0x24	; 36
    4042:	d1 e0       	ldi	r29, 0x01	; 1
    4044:	19 82       	std	Y+1, r1	; 0x01
    4046:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4048:	83 b5       	in	r24, 0x23	; 35
    404a:	82 60       	ori	r24, 0x02	; 2
    404c:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    404e:	83 b5       	in	r24, 0x23	; 35
    4050:	81 60       	ori	r24, 0x01	; 1
    4052:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4054:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4058:	19 82       	std	Y+1, r1	; 0x01
    405a:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    405c:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4060:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4064:	10 92 5f 03 	sts	0x035F, r1
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    406e:	80 91 b3 00 	lds	r24, 0x00B3
}
    4072:	8f 5f       	subi	r24, 0xFF	; 255
    4074:	08 95       	ret

00004076 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4076:	81 50       	subi	r24, 0x01	; 1
    4078:	80 93 b3 00 	sts	0x00B3, r24
    407c:	08 95       	ret

0000407e <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    407e:	81 11       	cpse	r24, r1
    4080:	02 c0       	rjmp	.+4      	; 0x4086 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4082:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4086:	8f ef       	ldi	r24, 0xFF	; 255
    4088:	08 95       	ret

0000408a <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    408a:	81 11       	cpse	r24, r1
    408c:	06 c0       	rjmp	.+12     	; 0x409a <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    408e:	10 92 95 00 	sts	0x0095, r1
    4092:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	08 95       	ret
	}
return NRK_ERROR;
    409a:	8f ef       	ldi	r24, 0xFF	; 255
}
    409c:	08 95       	ret

0000409e <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    409e:	81 11       	cpse	r24, r1
    40a0:	05 c0       	rjmp	.+10     	; 0x40ac <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    40a2:	80 91 94 00 	lds	r24, 0x0094
    40a6:	90 91 95 00 	lds	r25, 0x0095
    40aa:	08 95       	ret
	}
return 0;
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0

}
    40b0:	08 95       	ret

000040b2 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    40b2:	81 11       	cpse	r24, r1
    40b4:	05 c0       	rjmp	.+10     	; 0x40c0 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	08 95       	ret
	}
return NRK_ERROR;
    40c0:	8f ef       	ldi	r24, 0xFF	; 255
}
    40c2:	08 95       	ret

000040c4 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    40c4:	81 11       	cpse	r24, r1
    40c6:	35 c0       	rjmp	.+106    	; 0x4132 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    40c8:	cb 01       	movw	r24, r22
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	05 97       	sbiw	r24, 0x05	; 5
    40ce:	10 f4       	brcc	.+4      	; 0x40d4 <nrk_timer_int_configure+0x10>
    40d0:	60 93 09 04 	sts	0x0409, r22
	TCCR3A = 0;  
    40d4:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    40d8:	88 e0       	ldi	r24, 0x08	; 8
    40da:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    40de:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    40e2:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    40e6:	30 93 5d 03 	sts	0x035D, r19
    40ea:	20 93 5c 03 	sts	0x035C, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    40ee:	80 91 09 04 	lds	r24, 0x0409
    40f2:	81 30       	cpi	r24, 0x01	; 1
    40f4:	21 f4       	brne	.+8      	; 0x40fe <nrk_timer_int_configure+0x3a>
    40f6:	80 91 91 00 	lds	r24, 0x0091
    40fa:	81 60       	ori	r24, 0x01	; 1
    40fc:	11 c0       	rjmp	.+34     	; 0x4120 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    40fe:	82 30       	cpi	r24, 0x02	; 2
    4100:	21 f4       	brne	.+8      	; 0x410a <nrk_timer_int_configure+0x46>
    4102:	80 91 91 00 	lds	r24, 0x0091
    4106:	82 60       	ori	r24, 0x02	; 2
    4108:	0b c0       	rjmp	.+22     	; 0x4120 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    410a:	83 30       	cpi	r24, 0x03	; 3
    410c:	21 f4       	brne	.+8      	; 0x4116 <nrk_timer_int_configure+0x52>
    410e:	80 91 91 00 	lds	r24, 0x0091
    4112:	83 60       	ori	r24, 0x03	; 3
    4114:	05 c0       	rjmp	.+10     	; 0x4120 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4116:	84 30       	cpi	r24, 0x04	; 4
    4118:	31 f4       	brne	.+12     	; 0x4126 <nrk_timer_int_configure+0x62>
    411a:	80 91 91 00 	lds	r24, 0x0091
    411e:	84 60       	ori	r24, 0x04	; 4
    4120:	80 93 91 00 	sts	0x0091, r24
    4124:	08 c0       	rjmp	.+16     	; 0x4136 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4126:	85 30       	cpi	r24, 0x05	; 5
    4128:	31 f4       	brne	.+12     	; 0x4136 <nrk_timer_int_configure+0x72>
    412a:	80 91 91 00 	lds	r24, 0x0091
    412e:	85 60       	ori	r24, 0x05	; 5
    4130:	f7 cf       	rjmp	.-18     	; 0x4120 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4132:	8f ef       	ldi	r24, 0xFF	; 255
    4134:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4136:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4138:	08 95       	ret

0000413a <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    413a:	80 91 b2 00 	lds	r24, 0x00B2
}
    413e:	08 95       	ret

00004140 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4140:	1f 92       	push	r1
    4142:	0f 92       	push	r0
    4144:	0f b6       	in	r0, 0x3f	; 63
    4146:	0f 92       	push	r0
    4148:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    414a:	60 e0       	ldi	r22, 0x00	; 0
    414c:	8a e0       	ldi	r24, 0x0A	; 10
    414e:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
    4152:	ff cf       	rjmp	.-2      	; 0x4152 <__vector_default+0x12>

00004154 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4154:	0f 92       	push	r0
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	0f 92       	push	r0
    415a:	1f 92       	push	r1
    415c:	2f 92       	push	r2
    415e:	3f 92       	push	r3
    4160:	4f 92       	push	r4
    4162:	5f 92       	push	r5
    4164:	6f 92       	push	r6
    4166:	7f 92       	push	r7
    4168:	8f 92       	push	r8
    416a:	9f 92       	push	r9
    416c:	af 92       	push	r10
    416e:	bf 92       	push	r11
    4170:	cf 92       	push	r12
    4172:	df 92       	push	r13
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	2f 93       	push	r18
    417e:	3f 93       	push	r19
    4180:	4f 93       	push	r20
    4182:	5f 93       	push	r21
    4184:	6f 93       	push	r22
    4186:	7f 93       	push	r23
    4188:	8f 93       	push	r24
    418a:	9f 93       	push	r25
    418c:	af 93       	push	r26
    418e:	bf 93       	push	r27
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	ef 93       	push	r30
    4196:	ff 93       	push	r31
    4198:	a0 91 4e 05 	lds	r26, 0x054E
    419c:	b0 91 4f 05 	lds	r27, 0x054F
    41a0:	0d b6       	in	r0, 0x3d	; 61
    41a2:	0d 92       	st	X+, r0
    41a4:	0e b6       	in	r0, 0x3e	; 62
    41a6:	0d 92       	st	X+, r0
    41a8:	1f 92       	push	r1
    41aa:	a0 91 07 04 	lds	r26, 0x0407
    41ae:	b0 91 08 04 	lds	r27, 0x0408
    41b2:	1e 90       	ld	r1, -X
    41b4:	be bf       	out	0x3e, r27	; 62
    41b6:	ad bf       	out	0x3d, r26	; 61
    41b8:	08 95       	ret

000041ba <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    41ba:	1f 92       	push	r1
    41bc:	0f 92       	push	r0
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	0f 92       	push	r0
    41c2:	11 24       	eor	r1, r1
    41c4:	0b b6       	in	r0, 0x3b	; 59
    41c6:	0f 92       	push	r0
    41c8:	2f 93       	push	r18
    41ca:	3f 93       	push	r19
    41cc:	4f 93       	push	r20
    41ce:	5f 93       	push	r21
    41d0:	6f 93       	push	r22
    41d2:	7f 93       	push	r23
    41d4:	8f 93       	push	r24
    41d6:	9f 93       	push	r25
    41d8:	af 93       	push	r26
    41da:	bf 93       	push	r27
    41dc:	ef 93       	push	r30
    41de:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    41e0:	e0 91 5c 03 	lds	r30, 0x035C
    41e4:	f0 91 5d 03 	lds	r31, 0x035D
    41e8:	30 97       	sbiw	r30, 0x00	; 0
    41ea:	11 f0       	breq	.+4      	; 0x41f0 <__vector_32+0x36>
    41ec:	09 95       	icall
    41ee:	04 c0       	rjmp	.+8      	; 0x41f8 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	8a e0       	ldi	r24, 0x0A	; 10
    41f4:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
	return;  	
}
    41f8:	ff 91       	pop	r31
    41fa:	ef 91       	pop	r30
    41fc:	bf 91       	pop	r27
    41fe:	af 91       	pop	r26
    4200:	9f 91       	pop	r25
    4202:	8f 91       	pop	r24
    4204:	7f 91       	pop	r23
    4206:	6f 91       	pop	r22
    4208:	5f 91       	pop	r21
    420a:	4f 91       	pop	r20
    420c:	3f 91       	pop	r19
    420e:	2f 91       	pop	r18
    4210:	0f 90       	pop	r0
    4212:	0b be       	out	0x3b, r0	; 59
    4214:	0f 90       	pop	r0
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	0f 90       	pop	r0
    421a:	1f 90       	pop	r1
    421c:	18 95       	reti

0000421e <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    421e:	1f 92       	push	r1
    4220:	0f 92       	push	r0
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	0f 92       	push	r0
    4226:	11 24       	eor	r1, r1

	return;  	
} 
    4228:	0f 90       	pop	r0
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	0f 90       	pop	r0
    422e:	1f 90       	pop	r1
    4230:	18 95       	reti

00004232 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4232:	04 b6       	in	r0, 0x34	; 52
    4234:	03 fc       	sbrc	r0, 3
    4236:	02 c0       	rjmp	.+4      	; 0x423c <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	01 c0       	rjmp	.+2      	; 0x423e <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    423c:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    423e:	04 b6       	in	r0, 0x34	; 52
    4240:	02 fe       	sbrs	r0, 2
    4242:	06 c0       	rjmp	.+12     	; 0x4250 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4244:	94 b7       	in	r25, 0x34	; 52
    4246:	9b 7f       	andi	r25, 0xFB	; 251
    4248:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    424a:	04 b6       	in	r0, 0x34	; 52
    424c:	00 fe       	sbrs	r0, 0
		error|=0x04;
    424e:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4250:	04 b6       	in	r0, 0x34	; 52
    4252:	01 fe       	sbrs	r0, 1
    4254:	05 c0       	rjmp	.+10     	; 0x4260 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4256:	94 b7       	in	r25, 0x34	; 52
    4258:	9d 7f       	andi	r25, 0xFD	; 253
    425a:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    425c:	82 60       	ori	r24, 0x02	; 2
    425e:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4260:	81 11       	cpse	r24, r1
    4262:	0c c0       	rjmp	.+24     	; 0x427c <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4264:	04 b6       	in	r0, 0x34	; 52
    4266:	00 fe       	sbrs	r0, 0
    4268:	04 c0       	rjmp	.+8      	; 0x4272 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    426a:	94 b7       	in	r25, 0x34	; 52
    426c:	9e 7f       	andi	r25, 0xFE	; 254
    426e:	94 bf       	out	0x34, r25	; 52
    4270:	01 c0       	rjmp	.+2      	; 0x4274 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4272:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4274:	90 91 b0 00 	lds	r25, 0x00B0
    4278:	91 11       	cpse	r25, r1
    427a:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    427c:	08 95       	ret

0000427e <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    427e:	81 11       	cpse	r24, r1
    4280:	02 c0       	rjmp	.+4      	; 0x4286 <nrk_ext_int_enable+0x8>
    4282:	e8 9a       	sbi	0x1d, 0	; 29
    4284:	39 c0       	rjmp	.+114    	; 0x42f8 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4286:	81 30       	cpi	r24, 0x01	; 1
    4288:	11 f4       	brne	.+4      	; 0x428e <nrk_ext_int_enable+0x10>
    428a:	e9 9a       	sbi	0x1d, 1	; 29
    428c:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    428e:	82 30       	cpi	r24, 0x02	; 2
    4290:	11 f4       	brne	.+4      	; 0x4296 <nrk_ext_int_enable+0x18>
    4292:	ea 9a       	sbi	0x1d, 2	; 29
    4294:	31 c0       	rjmp	.+98     	; 0x42f8 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4296:	83 30       	cpi	r24, 0x03	; 3
    4298:	21 f4       	brne	.+8      	; 0x42a2 <nrk_ext_int_enable+0x24>
    429a:	80 91 6b 00 	lds	r24, 0x006B
    429e:	81 60       	ori	r24, 0x01	; 1
    42a0:	29 c0       	rjmp	.+82     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    42a2:	84 30       	cpi	r24, 0x04	; 4
    42a4:	21 f4       	brne	.+8      	; 0x42ae <nrk_ext_int_enable+0x30>
    42a6:	80 91 6b 00 	lds	r24, 0x006B
    42aa:	82 60       	ori	r24, 0x02	; 2
    42ac:	23 c0       	rjmp	.+70     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    42ae:	85 30       	cpi	r24, 0x05	; 5
    42b0:	21 f4       	brne	.+8      	; 0x42ba <nrk_ext_int_enable+0x3c>
    42b2:	80 91 6b 00 	lds	r24, 0x006B
    42b6:	84 60       	ori	r24, 0x04	; 4
    42b8:	1d c0       	rjmp	.+58     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    42ba:	86 30       	cpi	r24, 0x06	; 6
    42bc:	21 f4       	brne	.+8      	; 0x42c6 <nrk_ext_int_enable+0x48>
    42be:	80 91 6b 00 	lds	r24, 0x006B
    42c2:	88 60       	ori	r24, 0x08	; 8
    42c4:	17 c0       	rjmp	.+46     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    42c6:	87 30       	cpi	r24, 0x07	; 7
    42c8:	21 f4       	brne	.+8      	; 0x42d2 <nrk_ext_int_enable+0x54>
    42ca:	80 91 6b 00 	lds	r24, 0x006B
    42ce:	80 61       	ori	r24, 0x10	; 16
    42d0:	11 c0       	rjmp	.+34     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    42d2:	88 30       	cpi	r24, 0x08	; 8
    42d4:	21 f4       	brne	.+8      	; 0x42de <nrk_ext_int_enable+0x60>
    42d6:	80 91 6b 00 	lds	r24, 0x006B
    42da:	80 62       	ori	r24, 0x20	; 32
    42dc:	0b c0       	rjmp	.+22     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    42de:	89 30       	cpi	r24, 0x09	; 9
    42e0:	21 f4       	brne	.+8      	; 0x42ea <nrk_ext_int_enable+0x6c>
    42e2:	80 91 6b 00 	lds	r24, 0x006B
    42e6:	80 64       	ori	r24, 0x40	; 64
    42e8:	05 c0       	rjmp	.+10     	; 0x42f4 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    42ea:	8a 30       	cpi	r24, 0x0A	; 10
    42ec:	39 f4       	brne	.+14     	; 0x42fc <nrk_ext_int_enable+0x7e>
    42ee:	80 91 6b 00 	lds	r24, 0x006B
    42f2:	80 68       	ori	r24, 0x80	; 128
    42f4:	80 93 6b 00 	sts	0x006B, r24
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	08 95       	ret
return NRK_ERROR;
    42fc:	8f ef       	ldi	r24, 0xFF	; 255
}
    42fe:	08 95       	ret

00004300 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4300:	81 11       	cpse	r24, r1
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <nrk_ext_int_disable+0x8>
    4304:	e8 98       	cbi	0x1d, 0	; 29
    4306:	39 c0       	rjmp	.+114    	; 0x437a <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4308:	81 30       	cpi	r24, 0x01	; 1
    430a:	11 f4       	brne	.+4      	; 0x4310 <nrk_ext_int_disable+0x10>
    430c:	e9 98       	cbi	0x1d, 1	; 29
    430e:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4310:	82 30       	cpi	r24, 0x02	; 2
    4312:	11 f4       	brne	.+4      	; 0x4318 <nrk_ext_int_disable+0x18>
    4314:	e9 98       	cbi	0x1d, 1	; 29
    4316:	31 c0       	rjmp	.+98     	; 0x437a <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4318:	83 30       	cpi	r24, 0x03	; 3
    431a:	21 f4       	brne	.+8      	; 0x4324 <nrk_ext_int_disable+0x24>
    431c:	80 91 6b 00 	lds	r24, 0x006B
    4320:	8e 7f       	andi	r24, 0xFE	; 254
    4322:	29 c0       	rjmp	.+82     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4324:	84 30       	cpi	r24, 0x04	; 4
    4326:	21 f4       	brne	.+8      	; 0x4330 <nrk_ext_int_disable+0x30>
    4328:	80 91 6b 00 	lds	r24, 0x006B
    432c:	8d 7f       	andi	r24, 0xFD	; 253
    432e:	23 c0       	rjmp	.+70     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4330:	85 30       	cpi	r24, 0x05	; 5
    4332:	21 f4       	brne	.+8      	; 0x433c <nrk_ext_int_disable+0x3c>
    4334:	80 91 6b 00 	lds	r24, 0x006B
    4338:	8b 7f       	andi	r24, 0xFB	; 251
    433a:	1d c0       	rjmp	.+58     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    433c:	86 30       	cpi	r24, 0x06	; 6
    433e:	21 f4       	brne	.+8      	; 0x4348 <nrk_ext_int_disable+0x48>
    4340:	80 91 6b 00 	lds	r24, 0x006B
    4344:	87 7f       	andi	r24, 0xF7	; 247
    4346:	17 c0       	rjmp	.+46     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4348:	87 30       	cpi	r24, 0x07	; 7
    434a:	21 f4       	brne	.+8      	; 0x4354 <nrk_ext_int_disable+0x54>
    434c:	80 91 6b 00 	lds	r24, 0x006B
    4350:	8f 7e       	andi	r24, 0xEF	; 239
    4352:	11 c0       	rjmp	.+34     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4354:	88 30       	cpi	r24, 0x08	; 8
    4356:	21 f4       	brne	.+8      	; 0x4360 <nrk_ext_int_disable+0x60>
    4358:	80 91 6b 00 	lds	r24, 0x006B
    435c:	8f 7d       	andi	r24, 0xDF	; 223
    435e:	0b c0       	rjmp	.+22     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4360:	89 30       	cpi	r24, 0x09	; 9
    4362:	21 f4       	brne	.+8      	; 0x436c <nrk_ext_int_disable+0x6c>
    4364:	80 91 6b 00 	lds	r24, 0x006B
    4368:	8f 7b       	andi	r24, 0xBF	; 191
    436a:	05 c0       	rjmp	.+10     	; 0x4376 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    436c:	8a 30       	cpi	r24, 0x0A	; 10
    436e:	39 f4       	brne	.+14     	; 0x437e <nrk_ext_int_disable+0x7e>
    4370:	80 91 6b 00 	lds	r24, 0x006B
    4374:	8f 77       	andi	r24, 0x7F	; 127
    4376:	80 93 6b 00 	sts	0x006B, r24
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	08 95       	ret
return NRK_ERROR;
    437e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4380:	08 95       	ret

00004382 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4382:	81 11       	cpse	r24, r1
    4384:	26 c0       	rjmp	.+76     	; 0x43d2 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4386:	50 93 6a 05 	sts	0x056A, r21
    438a:	40 93 69 05 	sts	0x0569, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    438e:	61 11       	cpse	r22, r1
    4390:	04 c0       	rjmp	.+8      	; 0x439a <nrk_ext_int_configure+0x18>
    4392:	80 91 69 00 	lds	r24, 0x0069
    4396:	8c 7f       	andi	r24, 0xFC	; 252
    4398:	3d c0       	rjmp	.+122    	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    439a:	61 30       	cpi	r22, 0x01	; 1
    439c:	49 f4       	brne	.+18     	; 0x43b0 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    439e:	80 91 69 00 	lds	r24, 0x0069
    43a2:	8d 7f       	andi	r24, 0xFD	; 253
    43a4:	80 93 69 00 	sts	0x0069, r24
    43a8:	80 91 69 00 	lds	r24, 0x0069
    43ac:	81 60       	ori	r24, 0x01	; 1
    43ae:	32 c0       	rjmp	.+100    	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    43b0:	62 30       	cpi	r22, 0x02	; 2
    43b2:	49 f4       	brne	.+18     	; 0x43c6 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    43b4:	80 91 69 00 	lds	r24, 0x0069
    43b8:	82 60       	ori	r24, 0x02	; 2
    43ba:	80 93 69 00 	sts	0x0069, r24
    43be:	80 91 69 00 	lds	r24, 0x0069
    43c2:	8e 7f       	andi	r24, 0xFE	; 254
    43c4:	27 c0       	rjmp	.+78     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    43c6:	63 30       	cpi	r22, 0x03	; 3
    43c8:	39 f5       	brne	.+78     	; 0x4418 <nrk_ext_int_configure+0x96>
    43ca:	80 91 69 00 	lds	r24, 0x0069
    43ce:	83 60       	ori	r24, 0x03	; 3
    43d0:	21 c0       	rjmp	.+66     	; 0x4414 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    43d2:	81 30       	cpi	r24, 0x01	; 1
    43d4:	49 f5       	brne	.+82     	; 0x4428 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    43d6:	50 93 68 05 	sts	0x0568, r21
    43da:	40 93 67 05 	sts	0x0567, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    43de:	61 11       	cpse	r22, r1
    43e0:	04 c0       	rjmp	.+8      	; 0x43ea <nrk_ext_int_configure+0x68>
    43e2:	80 91 69 00 	lds	r24, 0x0069
    43e6:	83 7f       	andi	r24, 0xF3	; 243
    43e8:	15 c0       	rjmp	.+42     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    43ea:	61 30       	cpi	r22, 0x01	; 1
    43ec:	49 f4       	brne	.+18     	; 0x4400 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    43ee:	80 91 69 00 	lds	r24, 0x0069
    43f2:	87 7f       	andi	r24, 0xF7	; 247
    43f4:	80 93 69 00 	sts	0x0069, r24
    43f8:	80 91 69 00 	lds	r24, 0x0069
    43fc:	84 60       	ori	r24, 0x04	; 4
    43fe:	0a c0       	rjmp	.+20     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4400:	62 30       	cpi	r22, 0x02	; 2
    4402:	61 f4       	brne	.+24     	; 0x441c <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4404:	80 91 69 00 	lds	r24, 0x0069
    4408:	88 60       	ori	r24, 0x08	; 8
    440a:	80 93 69 00 	sts	0x0069, r24
    440e:	80 91 69 00 	lds	r24, 0x0069
    4412:	8b 7f       	andi	r24, 0xFB	; 251
    4414:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    441c:	63 30       	cpi	r22, 0x03	; 3
    441e:	e1 f7       	brne	.-8      	; 0x4418 <nrk_ext_int_configure+0x96>
    4420:	80 91 69 00 	lds	r24, 0x0069
    4424:	8c 60       	ori	r24, 0x0C	; 12
    4426:	f6 cf       	rjmp	.-20     	; 0x4414 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4428:	82 30       	cpi	r24, 0x02	; 2
    442a:	31 f5       	brne	.+76     	; 0x4478 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    442c:	50 93 6c 05 	sts	0x056C, r21
    4430:	40 93 6b 05 	sts	0x056B, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4434:	61 11       	cpse	r22, r1
    4436:	04 c0       	rjmp	.+8      	; 0x4440 <nrk_ext_int_configure+0xbe>
    4438:	80 91 69 00 	lds	r24, 0x0069
    443c:	8f 7c       	andi	r24, 0xCF	; 207
    443e:	ea cf       	rjmp	.-44     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4440:	61 30       	cpi	r22, 0x01	; 1
    4442:	49 f4       	brne	.+18     	; 0x4456 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4444:	80 91 69 00 	lds	r24, 0x0069
    4448:	8f 7d       	andi	r24, 0xDF	; 223
    444a:	80 93 69 00 	sts	0x0069, r24
    444e:	80 91 69 00 	lds	r24, 0x0069
    4452:	80 61       	ori	r24, 0x10	; 16
    4454:	df cf       	rjmp	.-66     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4456:	62 30       	cpi	r22, 0x02	; 2
    4458:	49 f4       	brne	.+18     	; 0x446c <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    445a:	80 91 69 00 	lds	r24, 0x0069
    445e:	80 62       	ori	r24, 0x20	; 32
    4460:	80 93 69 00 	sts	0x0069, r24
    4464:	80 91 69 00 	lds	r24, 0x0069
    4468:	8f 7e       	andi	r24, 0xEF	; 239
    446a:	d4 cf       	rjmp	.-88     	; 0x4414 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    446c:	63 30       	cpi	r22, 0x03	; 3
    446e:	a1 f6       	brne	.-88     	; 0x4418 <nrk_ext_int_configure+0x96>
    4470:	80 91 69 00 	lds	r24, 0x0069
    4474:	80 63       	ori	r24, 0x30	; 48
    4476:	ce cf       	rjmp	.-100    	; 0x4414 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4478:	83 50       	subi	r24, 0x03	; 3
    447a:	88 30       	cpi	r24, 0x08	; 8
    447c:	50 f4       	brcc	.+20     	; 0x4492 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    447e:	80 91 68 00 	lds	r24, 0x0068
    4482:	81 60       	ori	r24, 0x01	; 1
    4484:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4488:	50 93 6e 05 	sts	0x056E, r21
    448c:	40 93 6d 05 	sts	0x056D, r20
    4490:	c3 cf       	rjmp	.-122    	; 0x4418 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    4492:	8f ef       	ldi	r24, 0xFF	; 255
}
    4494:	08 95       	ret

00004496 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4496:	1f 92       	push	r1
    4498:	0f 92       	push	r0
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	0f 92       	push	r0
    449e:	11 24       	eor	r1, r1
    44a0:	0b b6       	in	r0, 0x3b	; 59
    44a2:	0f 92       	push	r0
    44a4:	2f 93       	push	r18
    44a6:	3f 93       	push	r19
    44a8:	4f 93       	push	r20
    44aa:	5f 93       	push	r21
    44ac:	6f 93       	push	r22
    44ae:	7f 93       	push	r23
    44b0:	8f 93       	push	r24
    44b2:	9f 93       	push	r25
    44b4:	af 93       	push	r26
    44b6:	bf 93       	push	r27
    44b8:	ef 93       	push	r30
    44ba:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    44bc:	e0 91 6d 05 	lds	r30, 0x056D
    44c0:	f0 91 6e 05 	lds	r31, 0x056E
    44c4:	30 97       	sbiw	r30, 0x00	; 0
    44c6:	11 f0       	breq	.+4      	; 0x44cc <__vector_9+0x36>
    44c8:	09 95       	icall
    44ca:	04 c0       	rjmp	.+8      	; 0x44d4 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	8a e0       	ldi	r24, 0x0A	; 10
    44d0:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
	return;  	
}
    44d4:	ff 91       	pop	r31
    44d6:	ef 91       	pop	r30
    44d8:	bf 91       	pop	r27
    44da:	af 91       	pop	r26
    44dc:	9f 91       	pop	r25
    44de:	8f 91       	pop	r24
    44e0:	7f 91       	pop	r23
    44e2:	6f 91       	pop	r22
    44e4:	5f 91       	pop	r21
    44e6:	4f 91       	pop	r20
    44e8:	3f 91       	pop	r19
    44ea:	2f 91       	pop	r18
    44ec:	0f 90       	pop	r0
    44ee:	0b be       	out	0x3b, r0	; 59
    44f0:	0f 90       	pop	r0
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	0f 90       	pop	r0
    44f6:	1f 90       	pop	r1
    44f8:	18 95       	reti

000044fa <__vector_1>:


SIGNAL(INT0_vect) {
    44fa:	1f 92       	push	r1
    44fc:	0f 92       	push	r0
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	0f 92       	push	r0
    4502:	11 24       	eor	r1, r1
    4504:	0b b6       	in	r0, 0x3b	; 59
    4506:	0f 92       	push	r0
    4508:	2f 93       	push	r18
    450a:	3f 93       	push	r19
    450c:	4f 93       	push	r20
    450e:	5f 93       	push	r21
    4510:	6f 93       	push	r22
    4512:	7f 93       	push	r23
    4514:	8f 93       	push	r24
    4516:	9f 93       	push	r25
    4518:	af 93       	push	r26
    451a:	bf 93       	push	r27
    451c:	ef 93       	push	r30
    451e:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4520:	e0 91 69 05 	lds	r30, 0x0569
    4524:	f0 91 6a 05 	lds	r31, 0x056A
    4528:	30 97       	sbiw	r30, 0x00	; 0
    452a:	11 f0       	breq	.+4      	; 0x4530 <__vector_1+0x36>
    452c:	09 95       	icall
    452e:	04 c0       	rjmp	.+8      	; 0x4538 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	8a e0       	ldi	r24, 0x0A	; 10
    4534:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
	return;  	
}
    4538:	ff 91       	pop	r31
    453a:	ef 91       	pop	r30
    453c:	bf 91       	pop	r27
    453e:	af 91       	pop	r26
    4540:	9f 91       	pop	r25
    4542:	8f 91       	pop	r24
    4544:	7f 91       	pop	r23
    4546:	6f 91       	pop	r22
    4548:	5f 91       	pop	r21
    454a:	4f 91       	pop	r20
    454c:	3f 91       	pop	r19
    454e:	2f 91       	pop	r18
    4550:	0f 90       	pop	r0
    4552:	0b be       	out	0x3b, r0	; 59
    4554:	0f 90       	pop	r0
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	0f 90       	pop	r0
    455a:	1f 90       	pop	r1
    455c:	18 95       	reti

0000455e <__vector_2>:

SIGNAL(INT1_vect) {
    455e:	1f 92       	push	r1
    4560:	0f 92       	push	r0
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	0f 92       	push	r0
    4566:	11 24       	eor	r1, r1
    4568:	0b b6       	in	r0, 0x3b	; 59
    456a:	0f 92       	push	r0
    456c:	2f 93       	push	r18
    456e:	3f 93       	push	r19
    4570:	4f 93       	push	r20
    4572:	5f 93       	push	r21
    4574:	6f 93       	push	r22
    4576:	7f 93       	push	r23
    4578:	8f 93       	push	r24
    457a:	9f 93       	push	r25
    457c:	af 93       	push	r26
    457e:	bf 93       	push	r27
    4580:	ef 93       	push	r30
    4582:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4584:	e0 91 67 05 	lds	r30, 0x0567
    4588:	f0 91 68 05 	lds	r31, 0x0568
    458c:	30 97       	sbiw	r30, 0x00	; 0
    458e:	11 f0       	breq	.+4      	; 0x4594 <__vector_2+0x36>
    4590:	09 95       	icall
    4592:	04 c0       	rjmp	.+8      	; 0x459c <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	8a e0       	ldi	r24, 0x0A	; 10
    4598:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
	return;  	
}
    459c:	ff 91       	pop	r31
    459e:	ef 91       	pop	r30
    45a0:	bf 91       	pop	r27
    45a2:	af 91       	pop	r26
    45a4:	9f 91       	pop	r25
    45a6:	8f 91       	pop	r24
    45a8:	7f 91       	pop	r23
    45aa:	6f 91       	pop	r22
    45ac:	5f 91       	pop	r21
    45ae:	4f 91       	pop	r20
    45b0:	3f 91       	pop	r19
    45b2:	2f 91       	pop	r18
    45b4:	0f 90       	pop	r0
    45b6:	0b be       	out	0x3b, r0	; 59
    45b8:	0f 90       	pop	r0
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	0f 90       	pop	r0
    45be:	1f 90       	pop	r1
    45c0:	18 95       	reti

000045c2 <__vector_3>:

SIGNAL(INT2_vect) {
    45c2:	1f 92       	push	r1
    45c4:	0f 92       	push	r0
    45c6:	0f b6       	in	r0, 0x3f	; 63
    45c8:	0f 92       	push	r0
    45ca:	11 24       	eor	r1, r1
    45cc:	0b b6       	in	r0, 0x3b	; 59
    45ce:	0f 92       	push	r0
    45d0:	2f 93       	push	r18
    45d2:	3f 93       	push	r19
    45d4:	4f 93       	push	r20
    45d6:	5f 93       	push	r21
    45d8:	6f 93       	push	r22
    45da:	7f 93       	push	r23
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    45e8:	e0 91 6b 05 	lds	r30, 0x056B
    45ec:	f0 91 6c 05 	lds	r31, 0x056C
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	11 f0       	breq	.+4      	; 0x45f8 <__vector_3+0x36>
    45f4:	09 95       	icall
    45f6:	04 c0       	rjmp	.+8      	; 0x4600 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    45f8:	60 e0       	ldi	r22, 0x00	; 0
    45fa:	8a e0       	ldi	r24, 0x0A	; 10
    45fc:	0e 94 9e 10 	call	0x213c	; 0x213c <nrk_kernel_error_add>
	return;  	
}
    4600:	ff 91       	pop	r31
    4602:	ef 91       	pop	r30
    4604:	bf 91       	pop	r27
    4606:	af 91       	pop	r26
    4608:	9f 91       	pop	r25
    460a:	8f 91       	pop	r24
    460c:	7f 91       	pop	r23
    460e:	6f 91       	pop	r22
    4610:	5f 91       	pop	r21
    4612:	4f 91       	pop	r20
    4614:	3f 91       	pop	r19
    4616:	2f 91       	pop	r18
    4618:	0f 90       	pop	r0
    461a:	0b be       	out	0x3b, r0	; 59
    461c:	0f 90       	pop	r0
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	0f 90       	pop	r0
    4622:	1f 90       	pop	r1
    4624:	18 95       	reti

00004626 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4626:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    462a:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    462c:	84 b7       	in	r24, 0x34	; 52
    462e:	87 7f       	andi	r24, 0xF7	; 247
    4630:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4632:	e0 e6       	ldi	r30, 0x60	; 96
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	80 81       	ld	r24, Z
    4638:	88 61       	ori	r24, 0x18	; 24
    463a:	80 83       	st	Z, r24
WDTCSR = 0;
    463c:	10 82       	st	Z, r1
nrk_int_enable();
    463e:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <nrk_int_enable>

00004642 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4642:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4646:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4648:	84 b7       	in	r24, 0x34	; 52
    464a:	87 7f       	andi	r24, 0xF7	; 247
    464c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    464e:	e0 e6       	ldi	r30, 0x60	; 96
    4650:	f0 e0       	ldi	r31, 0x00	; 0
    4652:	80 81       	ld	r24, Z
    4654:	88 61       	ori	r24, 0x18	; 24
    4656:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4658:	8d e0       	ldi	r24, 0x0D	; 13
    465a:	80 83       	st	Z, r24
nrk_int_enable();
    465c:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <nrk_int_enable>

00004660 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4660:	04 b6       	in	r0, 0x34	; 52
    4662:	03 fc       	sbrc	r0, 3
    4664:	02 c0       	rjmp	.+4      	; 0x466a <nrk_watchdog_check+0xa>
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	08 95       	ret
return NRK_ERROR;
    466a:	8f ef       	ldi	r24, 0xFF	; 255
}
    466c:	08 95       	ret

0000466e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    466e:	a8 95       	wdr
    4670:	08 95       	ret

00004672 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    4672:	08 95       	ret

00004674 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4674:	83 b7       	in	r24, 0x33	; 51
    4676:	81 7f       	andi	r24, 0xF1	; 241
    4678:	86 60       	ori	r24, 0x06	; 6
    467a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    467c:	83 b7       	in	r24, 0x33	; 51
    467e:	81 60       	ori	r24, 0x01	; 1
    4680:	83 bf       	out	0x33, r24	; 51
    4682:	88 95       	sleep
    4684:	83 b7       	in	r24, 0x33	; 51
    4686:	8e 7f       	andi	r24, 0xFE	; 254
    4688:	83 bf       	out	0x33, r24	; 51
    468a:	08 95       	ret

0000468c <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    468c:	83 b7       	in	r24, 0x33	; 51
    468e:	81 7f       	andi	r24, 0xF1	; 241
    4690:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4692:	83 b7       	in	r24, 0x33	; 51
    4694:	81 60       	ori	r24, 0x01	; 1
    4696:	83 bf       	out	0x33, r24	; 51
    4698:	88 95       	sleep
    469a:	83 b7       	in	r24, 0x33	; 51
    469c:	8e 7f       	andi	r24, 0xFE	; 254
    469e:	83 bf       	out	0x33, r24	; 51
    46a0:	08 95       	ret

000046a2 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    46a2:	fc 01       	movw	r30, r24
    46a4:	76 83       	std	Z+6, r23	; 0x06
    46a6:	65 83       	std	Z+5, r22	; 0x05
    46a8:	08 95       	ret

000046aa <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    46aa:	ef 92       	push	r14
    46ac:	ff 92       	push	r15
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	ec 01       	movw	r28, r24
    46b8:	8b 01       	movw	r16, r22
    46ba:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    46bc:	40 32       	cpi	r20, 0x20	; 32
    46be:	51 05       	cpc	r21, r1
    46c0:	18 f4       	brcc	.+6      	; 0x46c8 <nrk_task_set_stk+0x1e>
    46c2:	81 e1       	ldi	r24, 0x11	; 17
    46c4:	0e 94 93 10 	call	0x2126	; 0x2126 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    46c8:	a7 01       	movw	r20, r14
    46ca:	41 50       	subi	r20, 0x01	; 1
    46cc:	51 09       	sbc	r21, r1
    46ce:	40 0f       	add	r20, r16
    46d0:	51 1f       	adc	r21, r17
    46d2:	5a 83       	std	Y+2, r21	; 0x02
    46d4:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    46d6:	1c 83       	std	Y+4, r17	; 0x04
    46d8:	0b 83       	std	Y+3, r16	; 0x03

}
    46da:	df 91       	pop	r29
    46dc:	cf 91       	pop	r28
    46de:	1f 91       	pop	r17
    46e0:	0f 91       	pop	r16
    46e2:	ff 90       	pop	r15
    46e4:	ef 90       	pop	r14
    46e6:	08 95       	ret

000046e8 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    46e8:	25 e5       	ldi	r18, 0x55	; 85
    46ea:	fa 01       	movw	r30, r20
    46ec:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    46ee:	fb 01       	movw	r30, r22
    46f0:	32 97       	sbiw	r30, 0x02	; 2
    46f2:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    46f4:	fb 01       	movw	r30, r22
    46f6:	31 97       	sbiw	r30, 0x01	; 1
    46f8:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    46fa:	fb 01       	movw	r30, r22
    46fc:	34 97       	sbiw	r30, 0x04	; 4
    46fe:	11 82       	std	Z+1, r1	; 0x01
    4700:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4702:	fb 01       	movw	r30, r22
    4704:	36 97       	sbiw	r30, 0x06	; 6
    4706:	11 82       	std	Z+1, r1	; 0x01
    4708:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    470a:	fb 01       	movw	r30, r22
    470c:	38 97       	sbiw	r30, 0x08	; 8
    470e:	11 82       	std	Z+1, r1	; 0x01
    4710:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4712:	fb 01       	movw	r30, r22
    4714:	3a 97       	sbiw	r30, 0x0a	; 10
    4716:	11 82       	std	Z+1, r1	; 0x01
    4718:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    471a:	fb 01       	movw	r30, r22
    471c:	3c 97       	sbiw	r30, 0x0c	; 12
    471e:	11 82       	std	Z+1, r1	; 0x01
    4720:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4722:	fb 01       	movw	r30, r22
    4724:	3e 97       	sbiw	r30, 0x0e	; 14
    4726:	11 82       	std	Z+1, r1	; 0x01
    4728:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    472a:	fb 01       	movw	r30, r22
    472c:	70 97       	sbiw	r30, 0x10	; 16
    472e:	11 82       	std	Z+1, r1	; 0x01
    4730:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4732:	fb 01       	movw	r30, r22
    4734:	72 97       	sbiw	r30, 0x12	; 18
    4736:	11 82       	std	Z+1, r1	; 0x01
    4738:	10 82       	st	Z, r1

    *(--stk) = 0; 
    473a:	fb 01       	movw	r30, r22
    473c:	74 97       	sbiw	r30, 0x14	; 20
    473e:	11 82       	std	Z+1, r1	; 0x01
    4740:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4742:	fb 01       	movw	r30, r22
    4744:	76 97       	sbiw	r30, 0x16	; 22
    4746:	11 82       	std	Z+1, r1	; 0x01
    4748:	10 82       	st	Z, r1
    *(--stk) = 0; 
    474a:	fb 01       	movw	r30, r22
    474c:	78 97       	sbiw	r30, 0x18	; 24
    474e:	11 82       	std	Z+1, r1	; 0x01
    4750:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4752:	fb 01       	movw	r30, r22
    4754:	7a 97       	sbiw	r30, 0x1a	; 26
    4756:	11 82       	std	Z+1, r1	; 0x01
    4758:	10 82       	st	Z, r1
    *(--stk) = 0; 
    475a:	fb 01       	movw	r30, r22
    475c:	7c 97       	sbiw	r30, 0x1c	; 28
    475e:	11 82       	std	Z+1, r1	; 0x01
    4760:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4762:	fb 01       	movw	r30, r22
    4764:	7e 97       	sbiw	r30, 0x1e	; 30
    4766:	11 82       	std	Z+1, r1	; 0x01
    4768:	10 82       	st	Z, r1
    *(--stk) = 0; 
    476a:	fb 01       	movw	r30, r22
    476c:	b0 97       	sbiw	r30, 0x20	; 32
    476e:	11 82       	std	Z+1, r1	; 0x01
    4770:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4772:	fb 01       	movw	r30, r22
    4774:	b2 97       	sbiw	r30, 0x22	; 34
    4776:	11 82       	std	Z+1, r1	; 0x01
    4778:	10 82       	st	Z, r1
    *(--stk) = 0;
    477a:	cb 01       	movw	r24, r22
    477c:	84 97       	sbiw	r24, 0x24	; 36
    477e:	fc 01       	movw	r30, r24
    4780:	11 82       	std	Z+1, r1	; 0x01
    4782:	10 82       	st	Z, r1


    return ((void *)stk);
}
    4784:	08 95       	ret

00004786 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4786:	85 e5       	ldi	r24, 0x55	; 85
    4788:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    478c:	ee ef       	ldi	r30, 0xFE	; 254
    478e:	f1 e4       	ldi	r31, 0x41	; 65
    4790:	f0 93 08 04 	sts	0x0408, r31
    4794:	e0 93 07 04 	sts	0x0407, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4798:	82 ee       	ldi	r24, 0xE2	; 226
    479a:	9e e0       	ldi	r25, 0x0E	; 14
    479c:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    479e:	80 93 ff 41 	sts	0x41FF, r24
    47a2:	08 95       	ret

000047a4 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    47a4:	82 ee       	ldi	r24, 0xE2	; 226
    47a6:	9e e0       	ldi	r25, 0x0E	; 14
    47a8:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    47ac:	80 93 ff 41 	sts	0x41FF, r24
    47b0:	08 95       	ret

000047b2 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    47b2:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <_nrk_setup_timer>
  nrk_int_enable();  
    47b6:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <nrk_int_enable>

000047ba <nrk_start_high_ready_task>:
    47ba:	a0 91 3f 05 	lds	r26, 0x053F
    47be:	b0 91 40 05 	lds	r27, 0x0540
    47c2:	cd 91       	ld	r28, X+
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	dd 91       	ld	r29, X+
    47c8:	de bf       	out	0x3e, r29	; 62
    47ca:	ff 91       	pop	r31
    47cc:	ef 91       	pop	r30
    47ce:	df 91       	pop	r29
    47d0:	cf 91       	pop	r28
    47d2:	bf 91       	pop	r27
    47d4:	af 91       	pop	r26
    47d6:	9f 91       	pop	r25
    47d8:	8f 91       	pop	r24
    47da:	7f 91       	pop	r23
    47dc:	6f 91       	pop	r22
    47de:	5f 91       	pop	r21
    47e0:	4f 91       	pop	r20
    47e2:	3f 91       	pop	r19
    47e4:	2f 91       	pop	r18
    47e6:	1f 91       	pop	r17
    47e8:	0f 91       	pop	r16
    47ea:	ff 90       	pop	r15
    47ec:	ef 90       	pop	r14
    47ee:	df 90       	pop	r13
    47f0:	cf 90       	pop	r12
    47f2:	bf 90       	pop	r11
    47f4:	af 90       	pop	r10
    47f6:	9f 90       	pop	r9
    47f8:	8f 90       	pop	r8
    47fa:	7f 90       	pop	r7
    47fc:	6f 90       	pop	r6
    47fe:	5f 90       	pop	r5
    4800:	4f 90       	pop	r4
    4802:	3f 90       	pop	r3
    4804:	2f 90       	pop	r2
    4806:	1f 90       	pop	r1
    4808:	0f 90       	pop	r0
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	0f 90       	pop	r0
    480e:	18 95       	reti

00004810 <main>:
    4810:	0e 94 4d 09 	call	0x129a	; 0x129a <nrk_setup_ports>
    4814:	80 e1       	ldi	r24, 0x10	; 16
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	0e 94 75 0c 	call	0x18ea	; 0x18ea <nrk_setup_uart>
    481c:	80 e8       	ldi	r24, 0x80	; 128
    481e:	92 e0       	ldi	r25, 0x02	; 2
    4820:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <puts>
    4824:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <nrk_init>
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	a9 01       	movw	r20, r18
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	cb 01       	movw	r24, r22
    4834:	0e 94 75 19 	call	0x32ea	; 0x32ea <nrk_time_set>
    4838:	0e 94 26 03 	call	0x64c	; 0x64c <nrk_register_drivers>
    483c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <nrk_create_taskset>
    4840:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <nrk_start>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	08 95       	ret

0000484a <vfprintf>:
    484a:	6f 92       	push	r6
    484c:	7f 92       	push	r7
    484e:	9f 92       	push	r9
    4850:	af 92       	push	r10
    4852:	bf 92       	push	r11
    4854:	cf 92       	push	r12
    4856:	df 92       	push	r13
    4858:	ef 92       	push	r14
    485a:	ff 92       	push	r15
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	cd b7       	in	r28, 0x3d	; 61
    4866:	de b7       	in	r29, 0x3e	; 62
    4868:	2c 97       	sbiw	r28, 0x0c	; 12
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	8c 01       	movw	r16, r24
    4876:	7b 01       	movw	r14, r22
    4878:	3a 01       	movw	r6, r20
    487a:	fc 01       	movw	r30, r24
    487c:	17 82       	std	Z+7, r1	; 0x07
    487e:	16 82       	std	Z+6, r1	; 0x06
    4880:	83 81       	ldd	r24, Z+3	; 0x03
    4882:	81 ff       	sbrs	r24, 1
    4884:	19 c1       	rjmp	.+562    	; 0x4ab8 <vfprintf+0x26e>
    4886:	ce 01       	movw	r24, r28
    4888:	01 96       	adiw	r24, 0x01	; 1
    488a:	5c 01       	movw	r10, r24
    488c:	f8 01       	movw	r30, r16
    488e:	d3 80       	ldd	r13, Z+3	; 0x03
    4890:	f7 01       	movw	r30, r14
    4892:	d3 fc       	sbrc	r13, 3
    4894:	25 91       	lpm	r18, Z+
    4896:	d3 fe       	sbrs	r13, 3
    4898:	21 91       	ld	r18, Z+
    489a:	7f 01       	movw	r14, r30
    489c:	22 23       	and	r18, r18
    489e:	09 f4       	brne	.+2      	; 0x48a2 <vfprintf+0x58>
    48a0:	07 c1       	rjmp	.+526    	; 0x4ab0 <vfprintf+0x266>
    48a2:	25 32       	cpi	r18, 0x25	; 37
    48a4:	49 f4       	brne	.+18     	; 0x48b8 <vfprintf+0x6e>
    48a6:	d3 fc       	sbrc	r13, 3
    48a8:	25 91       	lpm	r18, Z+
    48aa:	d3 fe       	sbrs	r13, 3
    48ac:	21 91       	ld	r18, Z+
    48ae:	7f 01       	movw	r14, r30
    48b0:	25 32       	cpi	r18, 0x25	; 37
    48b2:	11 f0       	breq	.+4      	; 0x48b8 <vfprintf+0x6e>
    48b4:	91 2c       	mov	r9, r1
    48b6:	1b c0       	rjmp	.+54     	; 0x48ee <vfprintf+0xa4>
    48b8:	b8 01       	movw	r22, r16
    48ba:	82 2f       	mov	r24, r18
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    48c2:	63 01       	movw	r12, r6
    48c4:	36 01       	movw	r6, r12
    48c6:	e2 cf       	rjmp	.-60     	; 0x488c <vfprintf+0x42>
    48c8:	22 23       	and	r18, r18
    48ca:	09 f4       	brne	.+2      	; 0x48ce <vfprintf+0x84>
    48cc:	f1 c0       	rjmp	.+482    	; 0x4ab0 <vfprintf+0x266>
    48ce:	62 2f       	mov	r22, r18
    48d0:	70 e0       	ldi	r23, 0x00	; 0
    48d2:	8d e6       	ldi	r24, 0x6D	; 109
    48d4:	94 e0       	ldi	r25, 0x04	; 4
    48d6:	2c 87       	std	Y+12, r18	; 0x0c
    48d8:	0e 94 40 26 	call	0x4c80	; 0x4c80 <strchr_P>
    48dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    48de:	89 2b       	or	r24, r25
    48e0:	49 f0       	breq	.+18     	; 0x48f4 <vfprintf+0xaa>
    48e2:	f7 01       	movw	r30, r14
    48e4:	d3 fc       	sbrc	r13, 3
    48e6:	25 91       	lpm	r18, Z+
    48e8:	d3 fe       	sbrs	r13, 3
    48ea:	21 91       	ld	r18, Z+
    48ec:	7f 01       	movw	r14, r30
    48ee:	97 fe       	sbrs	r9, 7
    48f0:	eb cf       	rjmp	.-42     	; 0x48c8 <vfprintf+0x7e>
    48f2:	0c c0       	rjmp	.+24     	; 0x490c <vfprintf+0xc2>
    48f4:	23 32       	cpi	r18, 0x23	; 35
    48f6:	21 f4       	brne	.+8      	; 0x4900 <vfprintf+0xb6>
    48f8:	f9 2d       	mov	r31, r9
    48fa:	f0 61       	ori	r31, 0x10	; 16
    48fc:	9f 2e       	mov	r9, r31
    48fe:	f1 cf       	rjmp	.-30     	; 0x48e2 <vfprintf+0x98>
    4900:	2c 36       	cpi	r18, 0x6C	; 108
    4902:	39 f4       	brne	.+14     	; 0x4912 <vfprintf+0xc8>
    4904:	29 2d       	mov	r18, r9
    4906:	20 68       	ori	r18, 0x80	; 128
    4908:	92 2e       	mov	r9, r18
    490a:	eb cf       	rjmp	.-42     	; 0x48e2 <vfprintf+0x98>
    490c:	22 23       	and	r18, r18
    490e:	09 f4       	brne	.+2      	; 0x4912 <vfprintf+0xc8>
    4910:	cf c0       	rjmp	.+414    	; 0x4ab0 <vfprintf+0x266>
    4912:	62 2f       	mov	r22, r18
    4914:	70 e0       	ldi	r23, 0x00	; 0
    4916:	86 e6       	ldi	r24, 0x66	; 102
    4918:	94 e0       	ldi	r25, 0x04	; 4
    491a:	2c 87       	std	Y+12, r18	; 0x0c
    491c:	0e 94 40 26 	call	0x4c80	; 0x4c80 <strchr_P>
    4920:	2c 85       	ldd	r18, Y+12	; 0x0c
    4922:	89 2b       	or	r24, r25
    4924:	41 f0       	breq	.+16     	; 0x4936 <vfprintf+0xec>
    4926:	63 01       	movw	r12, r6
    4928:	f4 e0       	ldi	r31, 0x04	; 4
    492a:	cf 0e       	add	r12, r31
    492c:	d1 1c       	adc	r13, r1
    492e:	b8 01       	movw	r22, r16
    4930:	8f e3       	ldi	r24, 0x3F	; 63
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	12 c0       	rjmp	.+36     	; 0x495a <vfprintf+0x110>
    4936:	23 36       	cpi	r18, 0x63	; 99
    4938:	41 f0       	breq	.+16     	; 0x494a <vfprintf+0x100>
    493a:	23 37       	cpi	r18, 0x73	; 115
    493c:	89 f0       	breq	.+34     	; 0x4960 <vfprintf+0x116>
    493e:	23 35       	cpi	r18, 0x53	; 83
    4940:	21 f5       	brne	.+72     	; 0x498a <vfprintf+0x140>
    4942:	f9 2d       	mov	r31, r9
    4944:	f1 60       	ori	r31, 0x01	; 1
    4946:	9f 2e       	mov	r9, r31
    4948:	0b c0       	rjmp	.+22     	; 0x4960 <vfprintf+0x116>
    494a:	63 01       	movw	r12, r6
    494c:	22 e0       	ldi	r18, 0x02	; 2
    494e:	c2 0e       	add	r12, r18
    4950:	d1 1c       	adc	r13, r1
    4952:	b8 01       	movw	r22, r16
    4954:	f3 01       	movw	r30, r6
    4956:	80 81       	ld	r24, Z
    4958:	91 81       	ldd	r25, Z+1	; 0x01
    495a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    495e:	b2 cf       	rjmp	.-156    	; 0x48c4 <vfprintf+0x7a>
    4960:	63 01       	movw	r12, r6
    4962:	22 e0       	ldi	r18, 0x02	; 2
    4964:	c2 0e       	add	r12, r18
    4966:	d1 1c       	adc	r13, r1
    4968:	f3 01       	movw	r30, r6
    496a:	60 80       	ld	r6, Z
    496c:	71 80       	ldd	r7, Z+1	; 0x01
    496e:	f3 01       	movw	r30, r6
    4970:	90 fc       	sbrc	r9, 0
    4972:	85 91       	lpm	r24, Z+
    4974:	90 fe       	sbrs	r9, 0
    4976:	81 91       	ld	r24, Z+
    4978:	3f 01       	movw	r6, r30
    497a:	88 23       	and	r24, r24
    497c:	09 f4       	brne	.+2      	; 0x4980 <vfprintf+0x136>
    497e:	a2 cf       	rjmp	.-188    	; 0x48c4 <vfprintf+0x7a>
    4980:	b8 01       	movw	r22, r16
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    4988:	f2 cf       	rjmp	.-28     	; 0x496e <vfprintf+0x124>
    498a:	24 36       	cpi	r18, 0x64	; 100
    498c:	11 f0       	breq	.+4      	; 0x4992 <vfprintf+0x148>
    498e:	29 36       	cpi	r18, 0x69	; 105
    4990:	39 f5       	brne	.+78     	; 0x49e0 <vfprintf+0x196>
    4992:	63 01       	movw	r12, r6
    4994:	97 fe       	sbrs	r9, 7
    4996:	09 c0       	rjmp	.+18     	; 0x49aa <vfprintf+0x160>
    4998:	f4 e0       	ldi	r31, 0x04	; 4
    499a:	cf 0e       	add	r12, r31
    499c:	d1 1c       	adc	r13, r1
    499e:	f3 01       	movw	r30, r6
    49a0:	60 81       	ld	r22, Z
    49a2:	71 81       	ldd	r23, Z+1	; 0x01
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	93 81       	ldd	r25, Z+3	; 0x03
    49a8:	0a c0       	rjmp	.+20     	; 0x49be <vfprintf+0x174>
    49aa:	f2 e0       	ldi	r31, 0x02	; 2
    49ac:	cf 0e       	add	r12, r31
    49ae:	d1 1c       	adc	r13, r1
    49b0:	f3 01       	movw	r30, r6
    49b2:	60 81       	ld	r22, Z
    49b4:	71 81       	ldd	r23, Z+1	; 0x01
    49b6:	88 27       	eor	r24, r24
    49b8:	77 fd       	sbrc	r23, 7
    49ba:	80 95       	com	r24
    49bc:	98 2f       	mov	r25, r24
    49be:	f9 2d       	mov	r31, r9
    49c0:	ff 7e       	andi	r31, 0xEF	; 239
    49c2:	9f 2e       	mov	r9, r31
    49c4:	97 ff       	sbrs	r25, 7
    49c6:	09 c0       	rjmp	.+18     	; 0x49da <vfprintf+0x190>
    49c8:	90 95       	com	r25
    49ca:	80 95       	com	r24
    49cc:	70 95       	com	r23
    49ce:	61 95       	neg	r22
    49d0:	7f 4f       	sbci	r23, 0xFF	; 255
    49d2:	8f 4f       	sbci	r24, 0xFF	; 255
    49d4:	9f 4f       	sbci	r25, 0xFF	; 255
    49d6:	f0 64       	ori	r31, 0x40	; 64
    49d8:	9f 2e       	mov	r9, r31
    49da:	2a e0       	ldi	r18, 0x0A	; 10
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	38 c0       	rjmp	.+112    	; 0x4a50 <vfprintf+0x206>
    49e0:	20 37       	cpi	r18, 0x70	; 112
    49e2:	a1 f0       	breq	.+40     	; 0x4a0c <vfprintf+0x1c2>
    49e4:	40 f4       	brcc	.+16     	; 0x49f6 <vfprintf+0x1ac>
    49e6:	28 35       	cpi	r18, 0x58	; 88
    49e8:	d1 f0       	breq	.+52     	; 0x4a1e <vfprintf+0x1d4>
    49ea:	2f 36       	cpi	r18, 0x6F	; 111
    49ec:	09 f0       	breq	.+2      	; 0x49f0 <vfprintf+0x1a6>
    49ee:	60 c0       	rjmp	.+192    	; 0x4ab0 <vfprintf+0x266>
    49f0:	28 e0       	ldi	r18, 0x08	; 8
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	19 c0       	rjmp	.+50     	; 0x4a28 <vfprintf+0x1de>
    49f6:	25 37       	cpi	r18, 0x75	; 117
    49f8:	19 f0       	breq	.+6      	; 0x4a00 <vfprintf+0x1b6>
    49fa:	28 37       	cpi	r18, 0x78	; 120
    49fc:	51 f0       	breq	.+20     	; 0x4a12 <vfprintf+0x1c8>
    49fe:	58 c0       	rjmp	.+176    	; 0x4ab0 <vfprintf+0x266>
    4a00:	29 2d       	mov	r18, r9
    4a02:	2f 7e       	andi	r18, 0xEF	; 239
    4a04:	92 2e       	mov	r9, r18
    4a06:	2a e0       	ldi	r18, 0x0A	; 10
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	0e c0       	rjmp	.+28     	; 0x4a28 <vfprintf+0x1de>
    4a0c:	89 2d       	mov	r24, r9
    4a0e:	80 61       	ori	r24, 0x10	; 16
    4a10:	98 2e       	mov	r9, r24
    4a12:	99 2d       	mov	r25, r9
    4a14:	94 62       	ori	r25, 0x24	; 36
    4a16:	99 2e       	mov	r9, r25
    4a18:	20 e1       	ldi	r18, 0x10	; 16
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	05 c0       	rjmp	.+10     	; 0x4a28 <vfprintf+0x1de>
    4a1e:	e9 2d       	mov	r30, r9
    4a20:	e4 60       	ori	r30, 0x04	; 4
    4a22:	9e 2e       	mov	r9, r30
    4a24:	20 e1       	ldi	r18, 0x10	; 16
    4a26:	32 e0       	ldi	r19, 0x02	; 2
    4a28:	63 01       	movw	r12, r6
    4a2a:	97 fe       	sbrs	r9, 7
    4a2c:	09 c0       	rjmp	.+18     	; 0x4a40 <vfprintf+0x1f6>
    4a2e:	f4 e0       	ldi	r31, 0x04	; 4
    4a30:	cf 0e       	add	r12, r31
    4a32:	d1 1c       	adc	r13, r1
    4a34:	f3 01       	movw	r30, r6
    4a36:	60 81       	ld	r22, Z
    4a38:	71 81       	ldd	r23, Z+1	; 0x01
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	08 c0       	rjmp	.+16     	; 0x4a50 <vfprintf+0x206>
    4a40:	f2 e0       	ldi	r31, 0x02	; 2
    4a42:	cf 0e       	add	r12, r31
    4a44:	d1 1c       	adc	r13, r1
    4a46:	f3 01       	movw	r30, r6
    4a48:	60 81       	ld	r22, Z
    4a4a:	71 81       	ldd	r23, Z+1	; 0x01
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	a5 01       	movw	r20, r10
    4a52:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__ultoa_invert>
    4a56:	78 2e       	mov	r7, r24
    4a58:	7a 18       	sub	r7, r10
    4a5a:	96 fe       	sbrs	r9, 6
    4a5c:	05 c0       	rjmp	.+10     	; 0x4a68 <vfprintf+0x21e>
    4a5e:	b8 01       	movw	r22, r16
    4a60:	8d e2       	ldi	r24, 0x2D	; 45
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    4a68:	94 fe       	sbrs	r9, 4
    4a6a:	16 c0       	rjmp	.+44     	; 0x4a98 <vfprintf+0x24e>
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	e7 0d       	add	r30, r7
    4a70:	f1 1d       	adc	r31, r1
    4a72:	80 81       	ld	r24, Z
    4a74:	80 33       	cpi	r24, 0x30	; 48
    4a76:	81 f0       	breq	.+32     	; 0x4a98 <vfprintf+0x24e>
    4a78:	b8 01       	movw	r22, r16
    4a7a:	80 e3       	ldi	r24, 0x30	; 48
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    4a82:	92 fe       	sbrs	r9, 2
    4a84:	09 c0       	rjmp	.+18     	; 0x4a98 <vfprintf+0x24e>
    4a86:	29 2d       	mov	r18, r9
    4a88:	20 72       	andi	r18, 0x20	; 32
    4a8a:	82 2f       	mov	r24, r18
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	b8 01       	movw	r22, r16
    4a90:	88 5a       	subi	r24, 0xA8	; 168
    4a92:	9f 4f       	sbci	r25, 0xFF	; 255
    4a94:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    4a98:	7a 94       	dec	r7
    4a9a:	f5 01       	movw	r30, r10
    4a9c:	e7 0d       	add	r30, r7
    4a9e:	f1 1d       	adc	r31, r1
    4aa0:	80 81       	ld	r24, Z
    4aa2:	b8 01       	movw	r22, r16
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <fputc>
    4aaa:	71 10       	cpse	r7, r1
    4aac:	f5 cf       	rjmp	.-22     	; 0x4a98 <vfprintf+0x24e>
    4aae:	0a cf       	rjmp	.-492    	; 0x48c4 <vfprintf+0x7a>
    4ab0:	f8 01       	movw	r30, r16
    4ab2:	86 81       	ldd	r24, Z+6	; 0x06
    4ab4:	97 81       	ldd	r25, Z+7	; 0x07
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <vfprintf+0x272>
    4ab8:	8f ef       	ldi	r24, 0xFF	; 255
    4aba:	9f ef       	ldi	r25, 0xFF	; 255
    4abc:	2c 96       	adiw	r28, 0x0c	; 12
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	1f 91       	pop	r17
    4ace:	0f 91       	pop	r16
    4ad0:	ff 90       	pop	r15
    4ad2:	ef 90       	pop	r14
    4ad4:	df 90       	pop	r13
    4ad6:	cf 90       	pop	r12
    4ad8:	bf 90       	pop	r11
    4ada:	af 90       	pop	r10
    4adc:	9f 90       	pop	r9
    4ade:	7f 90       	pop	r7
    4ae0:	6f 90       	pop	r6
    4ae2:	08 95       	ret

00004ae4 <__muluhisi3>:
    4ae4:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__umulhisi3>
    4ae8:	a5 9f       	mul	r26, r21
    4aea:	90 0d       	add	r25, r0
    4aec:	b4 9f       	mul	r27, r20
    4aee:	90 0d       	add	r25, r0
    4af0:	a4 9f       	mul	r26, r20
    4af2:	80 0d       	add	r24, r0
    4af4:	91 1d       	adc	r25, r1
    4af6:	11 24       	eor	r1, r1
    4af8:	08 95       	ret

00004afa <__mulsi3>:
    4afa:	db 01       	movw	r26, r22
    4afc:	8f 93       	push	r24
    4afe:	9f 93       	push	r25
    4b00:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <__muluhisi3>
    4b04:	bf 91       	pop	r27
    4b06:	af 91       	pop	r26
    4b08:	a2 9f       	mul	r26, r18
    4b0a:	80 0d       	add	r24, r0
    4b0c:	91 1d       	adc	r25, r1
    4b0e:	a3 9f       	mul	r26, r19
    4b10:	90 0d       	add	r25, r0
    4b12:	b2 9f       	mul	r27, r18
    4b14:	90 0d       	add	r25, r0
    4b16:	11 24       	eor	r1, r1
    4b18:	08 95       	ret

00004b1a <__udivmodhi4>:
    4b1a:	aa 1b       	sub	r26, r26
    4b1c:	bb 1b       	sub	r27, r27
    4b1e:	51 e1       	ldi	r21, 0x11	; 17
    4b20:	07 c0       	rjmp	.+14     	; 0x4b30 <__udivmodhi4_ep>

00004b22 <__udivmodhi4_loop>:
    4b22:	aa 1f       	adc	r26, r26
    4b24:	bb 1f       	adc	r27, r27
    4b26:	a6 17       	cp	r26, r22
    4b28:	b7 07       	cpc	r27, r23
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <__udivmodhi4_ep>
    4b2c:	a6 1b       	sub	r26, r22
    4b2e:	b7 0b       	sbc	r27, r23

00004b30 <__udivmodhi4_ep>:
    4b30:	88 1f       	adc	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	5a 95       	dec	r21
    4b36:	a9 f7       	brne	.-22     	; 0x4b22 <__udivmodhi4_loop>
    4b38:	80 95       	com	r24
    4b3a:	90 95       	com	r25
    4b3c:	bc 01       	movw	r22, r24
    4b3e:	cd 01       	movw	r24, r26
    4b40:	08 95       	ret

00004b42 <__udivmodsi4>:
    4b42:	a1 e2       	ldi	r26, 0x21	; 33
    4b44:	1a 2e       	mov	r1, r26
    4b46:	aa 1b       	sub	r26, r26
    4b48:	bb 1b       	sub	r27, r27
    4b4a:	fd 01       	movw	r30, r26
    4b4c:	0d c0       	rjmp	.+26     	; 0x4b68 <__udivmodsi4_ep>

00004b4e <__udivmodsi4_loop>:
    4b4e:	aa 1f       	adc	r26, r26
    4b50:	bb 1f       	adc	r27, r27
    4b52:	ee 1f       	adc	r30, r30
    4b54:	ff 1f       	adc	r31, r31
    4b56:	a2 17       	cp	r26, r18
    4b58:	b3 07       	cpc	r27, r19
    4b5a:	e4 07       	cpc	r30, r20
    4b5c:	f5 07       	cpc	r31, r21
    4b5e:	20 f0       	brcs	.+8      	; 0x4b68 <__udivmodsi4_ep>
    4b60:	a2 1b       	sub	r26, r18
    4b62:	b3 0b       	sbc	r27, r19
    4b64:	e4 0b       	sbc	r30, r20
    4b66:	f5 0b       	sbc	r31, r21

00004b68 <__udivmodsi4_ep>:
    4b68:	66 1f       	adc	r22, r22
    4b6a:	77 1f       	adc	r23, r23
    4b6c:	88 1f       	adc	r24, r24
    4b6e:	99 1f       	adc	r25, r25
    4b70:	1a 94       	dec	r1
    4b72:	69 f7       	brne	.-38     	; 0x4b4e <__udivmodsi4_loop>
    4b74:	60 95       	com	r22
    4b76:	70 95       	com	r23
    4b78:	80 95       	com	r24
    4b7a:	90 95       	com	r25
    4b7c:	9b 01       	movw	r18, r22
    4b7e:	ac 01       	movw	r20, r24
    4b80:	bd 01       	movw	r22, r26
    4b82:	cf 01       	movw	r24, r30
    4b84:	08 95       	ret

00004b86 <__umoddi3>:
    4b86:	68 94       	set
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <__udivdi3_umoddi3>

00004b8a <__udivdi3>:
    4b8a:	e8 94       	clt

00004b8c <__udivdi3_umoddi3>:
    4b8c:	8f 92       	push	r8
    4b8e:	9f 92       	push	r9
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <__udivmod64>
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	9f 90       	pop	r9
    4b9e:	8f 90       	pop	r8
    4ba0:	08 95       	ret

00004ba2 <__udivmod64>:
    4ba2:	88 24       	eor	r8, r8
    4ba4:	99 24       	eor	r9, r9
    4ba6:	f4 01       	movw	r30, r8
    4ba8:	e4 01       	movw	r28, r8
    4baa:	b0 e4       	ldi	r27, 0x40	; 64
    4bac:	9f 93       	push	r25
    4bae:	aa 27       	eor	r26, r26
    4bb0:	9a 15       	cp	r25, r10
    4bb2:	8b 04       	cpc	r8, r11
    4bb4:	9c 04       	cpc	r9, r12
    4bb6:	ed 05       	cpc	r30, r13
    4bb8:	fe 05       	cpc	r31, r14
    4bba:	cf 05       	cpc	r28, r15
    4bbc:	d0 07       	cpc	r29, r16
    4bbe:	a1 07       	cpc	r26, r17
    4bc0:	98 f4       	brcc	.+38     	; 0x4be8 <__udivmod64+0x46>
    4bc2:	ad 2f       	mov	r26, r29
    4bc4:	dc 2f       	mov	r29, r28
    4bc6:	cf 2f       	mov	r28, r31
    4bc8:	fe 2f       	mov	r31, r30
    4bca:	e9 2d       	mov	r30, r9
    4bcc:	98 2c       	mov	r9, r8
    4bce:	89 2e       	mov	r8, r25
    4bd0:	98 2f       	mov	r25, r24
    4bd2:	87 2f       	mov	r24, r23
    4bd4:	76 2f       	mov	r23, r22
    4bd6:	65 2f       	mov	r22, r21
    4bd8:	54 2f       	mov	r21, r20
    4bda:	43 2f       	mov	r20, r19
    4bdc:	32 2f       	mov	r19, r18
    4bde:	22 27       	eor	r18, r18
    4be0:	b8 50       	subi	r27, 0x08	; 8
    4be2:	31 f7       	brne	.-52     	; 0x4bb0 <__udivmod64+0xe>
    4be4:	bf 91       	pop	r27
    4be6:	27 c0       	rjmp	.+78     	; 0x4c36 <__udivmod64+0x94>
    4be8:	1b 2e       	mov	r1, r27
    4bea:	bf 91       	pop	r27
    4bec:	bb 27       	eor	r27, r27
    4bee:	22 0f       	add	r18, r18
    4bf0:	33 1f       	adc	r19, r19
    4bf2:	44 1f       	adc	r20, r20
    4bf4:	55 1f       	adc	r21, r21
    4bf6:	66 1f       	adc	r22, r22
    4bf8:	77 1f       	adc	r23, r23
    4bfa:	88 1f       	adc	r24, r24
    4bfc:	99 1f       	adc	r25, r25
    4bfe:	88 1c       	adc	r8, r8
    4c00:	99 1c       	adc	r9, r9
    4c02:	ee 1f       	adc	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	cc 1f       	adc	r28, r28
    4c08:	dd 1f       	adc	r29, r29
    4c0a:	aa 1f       	adc	r26, r26
    4c0c:	bb 1f       	adc	r27, r27
    4c0e:	8a 14       	cp	r8, r10
    4c10:	9b 04       	cpc	r9, r11
    4c12:	ec 05       	cpc	r30, r12
    4c14:	fd 05       	cpc	r31, r13
    4c16:	ce 05       	cpc	r28, r14
    4c18:	df 05       	cpc	r29, r15
    4c1a:	a0 07       	cpc	r26, r16
    4c1c:	b1 07       	cpc	r27, r17
    4c1e:	48 f0       	brcs	.+18     	; 0x4c32 <__udivmod64+0x90>
    4c20:	8a 18       	sub	r8, r10
    4c22:	9b 08       	sbc	r9, r11
    4c24:	ec 09       	sbc	r30, r12
    4c26:	fd 09       	sbc	r31, r13
    4c28:	ce 09       	sbc	r28, r14
    4c2a:	df 09       	sbc	r29, r15
    4c2c:	a0 0b       	sbc	r26, r16
    4c2e:	b1 0b       	sbc	r27, r17
    4c30:	21 60       	ori	r18, 0x01	; 1
    4c32:	1a 94       	dec	r1
    4c34:	e1 f6       	brne	.-72     	; 0x4bee <__udivmod64+0x4c>
    4c36:	2e f4       	brtc	.+10     	; 0x4c42 <__udivmod64+0xa0>
    4c38:	94 01       	movw	r18, r8
    4c3a:	af 01       	movw	r20, r30
    4c3c:	be 01       	movw	r22, r28
    4c3e:	cd 01       	movw	r24, r26
    4c40:	00 0c       	add	r0, r0
    4c42:	08 95       	ret

00004c44 <__tablejump2__>:
    4c44:	ee 0f       	add	r30, r30
    4c46:	ff 1f       	adc	r31, r31

00004c48 <__tablejump__>:
    4c48:	05 90       	lpm	r0, Z+
    4c4a:	f4 91       	lpm	r31, Z
    4c4c:	e0 2d       	mov	r30, r0
    4c4e:	09 94       	ijmp

00004c50 <__adddi3>:
    4c50:	2a 0d       	add	r18, r10
    4c52:	3b 1d       	adc	r19, r11
    4c54:	4c 1d       	adc	r20, r12
    4c56:	5d 1d       	adc	r21, r13
    4c58:	6e 1d       	adc	r22, r14
    4c5a:	7f 1d       	adc	r23, r15
    4c5c:	80 1f       	adc	r24, r16
    4c5e:	91 1f       	adc	r25, r17
    4c60:	08 95       	ret

00004c62 <__umulhisi3>:
    4c62:	a2 9f       	mul	r26, r18
    4c64:	b0 01       	movw	r22, r0
    4c66:	b3 9f       	mul	r27, r19
    4c68:	c0 01       	movw	r24, r0
    4c6a:	a3 9f       	mul	r26, r19
    4c6c:	70 0d       	add	r23, r0
    4c6e:	81 1d       	adc	r24, r1
    4c70:	11 24       	eor	r1, r1
    4c72:	91 1d       	adc	r25, r1
    4c74:	b2 9f       	mul	r27, r18
    4c76:	70 0d       	add	r23, r0
    4c78:	81 1d       	adc	r24, r1
    4c7a:	11 24       	eor	r1, r1
    4c7c:	91 1d       	adc	r25, r1
    4c7e:	08 95       	ret

00004c80 <strchr_P>:
    4c80:	fc 01       	movw	r30, r24
    4c82:	05 90       	lpm	r0, Z+
    4c84:	06 16       	cp	r0, r22
    4c86:	21 f0       	breq	.+8      	; 0x4c90 <strchr_P+0x10>
    4c88:	00 20       	and	r0, r0
    4c8a:	d9 f7       	brne	.-10     	; 0x4c82 <strchr_P+0x2>
    4c8c:	c0 01       	movw	r24, r0
    4c8e:	08 95       	ret
    4c90:	31 97       	sbiw	r30, 0x01	; 1
    4c92:	cf 01       	movw	r24, r30
    4c94:	08 95       	ret

00004c96 <memcpy>:
    4c96:	fb 01       	movw	r30, r22
    4c98:	dc 01       	movw	r26, r24
    4c9a:	02 c0       	rjmp	.+4      	; 0x4ca0 <memcpy+0xa>
    4c9c:	01 90       	ld	r0, Z+
    4c9e:	0d 92       	st	X+, r0
    4ca0:	41 50       	subi	r20, 0x01	; 1
    4ca2:	50 40       	sbci	r21, 0x00	; 0
    4ca4:	d8 f7       	brcc	.-10     	; 0x4c9c <memcpy+0x6>
    4ca6:	08 95       	ret

00004ca8 <fdevopen>:
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	ec 01       	movw	r28, r24
    4cb2:	8b 01       	movw	r16, r22
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	31 f4       	brne	.+12     	; 0x4cc4 <fdevopen+0x1c>
    4cb8:	61 15       	cp	r22, r1
    4cba:	71 05       	cpc	r23, r1
    4cbc:	19 f4       	brne	.+6      	; 0x4cc4 <fdevopen+0x1c>
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	38 c0       	rjmp	.+112    	; 0x4d34 <fdevopen+0x8c>
    4cc4:	6e e0       	ldi	r22, 0x0E	; 14
    4cc6:	70 e0       	ldi	r23, 0x00	; 0
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <calloc>
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	a1 f3       	breq	.-24     	; 0x4cbe <fdevopen+0x16>
    4cd6:	80 e8       	ldi	r24, 0x80	; 128
    4cd8:	83 83       	std	Z+3, r24	; 0x03
    4cda:	01 15       	cp	r16, r1
    4cdc:	11 05       	cpc	r17, r1
    4cde:	71 f0       	breq	.+28     	; 0x4cfc <fdevopen+0x54>
    4ce0:	13 87       	std	Z+11, r17	; 0x0b
    4ce2:	02 87       	std	Z+10, r16	; 0x0a
    4ce4:	81 e8       	ldi	r24, 0x81	; 129
    4ce6:	83 83       	std	Z+3, r24	; 0x03
    4ce8:	80 91 6f 05 	lds	r24, 0x056F
    4cec:	90 91 70 05 	lds	r25, 0x0570
    4cf0:	89 2b       	or	r24, r25
    4cf2:	21 f4       	brne	.+8      	; 0x4cfc <fdevopen+0x54>
    4cf4:	f0 93 70 05 	sts	0x0570, r31
    4cf8:	e0 93 6f 05 	sts	0x056F, r30
    4cfc:	20 97       	sbiw	r28, 0x00	; 0
    4cfe:	c9 f0       	breq	.+50     	; 0x4d32 <fdevopen+0x8a>
    4d00:	d1 87       	std	Z+9, r29	; 0x09
    4d02:	c0 87       	std	Z+8, r28	; 0x08
    4d04:	83 81       	ldd	r24, Z+3	; 0x03
    4d06:	82 60       	ori	r24, 0x02	; 2
    4d08:	83 83       	std	Z+3, r24	; 0x03
    4d0a:	80 91 71 05 	lds	r24, 0x0571
    4d0e:	90 91 72 05 	lds	r25, 0x0572
    4d12:	89 2b       	or	r24, r25
    4d14:	71 f4       	brne	.+28     	; 0x4d32 <fdevopen+0x8a>
    4d16:	f0 93 72 05 	sts	0x0572, r31
    4d1a:	e0 93 71 05 	sts	0x0571, r30
    4d1e:	80 91 73 05 	lds	r24, 0x0573
    4d22:	90 91 74 05 	lds	r25, 0x0574
    4d26:	89 2b       	or	r24, r25
    4d28:	21 f4       	brne	.+8      	; 0x4d32 <fdevopen+0x8a>
    4d2a:	f0 93 74 05 	sts	0x0574, r31
    4d2e:	e0 93 73 05 	sts	0x0573, r30
    4d32:	cf 01       	movw	r24, r30
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	08 95       	ret

00004d3e <fputc>:
    4d3e:	0f 93       	push	r16
    4d40:	1f 93       	push	r17
    4d42:	cf 93       	push	r28
    4d44:	df 93       	push	r29
    4d46:	18 2f       	mov	r17, r24
    4d48:	09 2f       	mov	r16, r25
    4d4a:	eb 01       	movw	r28, r22
    4d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4e:	81 fd       	sbrc	r24, 1
    4d50:	03 c0       	rjmp	.+6      	; 0x4d58 <fputc+0x1a>
    4d52:	8f ef       	ldi	r24, 0xFF	; 255
    4d54:	9f ef       	ldi	r25, 0xFF	; 255
    4d56:	20 c0       	rjmp	.+64     	; 0x4d98 <fputc+0x5a>
    4d58:	82 ff       	sbrs	r24, 2
    4d5a:	10 c0       	rjmp	.+32     	; 0x4d7c <fputc+0x3e>
    4d5c:	4e 81       	ldd	r20, Y+6	; 0x06
    4d5e:	5f 81       	ldd	r21, Y+7	; 0x07
    4d60:	2c 81       	ldd	r18, Y+4	; 0x04
    4d62:	3d 81       	ldd	r19, Y+5	; 0x05
    4d64:	42 17       	cp	r20, r18
    4d66:	53 07       	cpc	r21, r19
    4d68:	7c f4       	brge	.+30     	; 0x4d88 <fputc+0x4a>
    4d6a:	e8 81       	ld	r30, Y
    4d6c:	f9 81       	ldd	r31, Y+1	; 0x01
    4d6e:	9f 01       	movw	r18, r30
    4d70:	2f 5f       	subi	r18, 0xFF	; 255
    4d72:	3f 4f       	sbci	r19, 0xFF	; 255
    4d74:	39 83       	std	Y+1, r19	; 0x01
    4d76:	28 83       	st	Y, r18
    4d78:	10 83       	st	Z, r17
    4d7a:	06 c0       	rjmp	.+12     	; 0x4d88 <fputc+0x4a>
    4d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    4d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    4d80:	81 2f       	mov	r24, r17
    4d82:	09 95       	icall
    4d84:	89 2b       	or	r24, r25
    4d86:	29 f7       	brne	.-54     	; 0x4d52 <fputc+0x14>
    4d88:	2e 81       	ldd	r18, Y+6	; 0x06
    4d8a:	3f 81       	ldd	r19, Y+7	; 0x07
    4d8c:	2f 5f       	subi	r18, 0xFF	; 255
    4d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d90:	3f 83       	std	Y+7, r19	; 0x07
    4d92:	2e 83       	std	Y+6, r18	; 0x06
    4d94:	81 2f       	mov	r24, r17
    4d96:	90 2f       	mov	r25, r16
    4d98:	df 91       	pop	r29
    4d9a:	cf 91       	pop	r28
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	08 95       	ret

00004da2 <printf>:
    4da2:	cf 93       	push	r28
    4da4:	df 93       	push	r29
    4da6:	cd b7       	in	r28, 0x3d	; 61
    4da8:	de b7       	in	r29, 0x3e	; 62
    4daa:	fe 01       	movw	r30, r28
    4dac:	35 96       	adiw	r30, 0x05	; 5
    4dae:	61 91       	ld	r22, Z+
    4db0:	71 91       	ld	r23, Z+
    4db2:	af 01       	movw	r20, r30
    4db4:	80 91 71 05 	lds	r24, 0x0571
    4db8:	90 91 72 05 	lds	r25, 0x0572
    4dbc:	0e 94 25 24 	call	0x484a	; 0x484a <vfprintf>
    4dc0:	df 91       	pop	r29
    4dc2:	cf 91       	pop	r28
    4dc4:	08 95       	ret

00004dc6 <putchar>:
    4dc6:	60 91 71 05 	lds	r22, 0x0571
    4dca:	70 91 72 05 	lds	r23, 0x0572
    4dce:	0c 94 9f 26 	jmp	0x4d3e	; 0x4d3e <fputc>

00004dd2 <puts>:
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	e0 91 71 05 	lds	r30, 0x0571
    4dde:	f0 91 72 05 	lds	r31, 0x0572
    4de2:	23 81       	ldd	r18, Z+3	; 0x03
    4de4:	21 ff       	sbrs	r18, 1
    4de6:	1b c0       	rjmp	.+54     	; 0x4e1e <puts+0x4c>
    4de8:	ec 01       	movw	r28, r24
    4dea:	00 e0       	ldi	r16, 0x00	; 0
    4dec:	10 e0       	ldi	r17, 0x00	; 0
    4dee:	89 91       	ld	r24, Y+
    4df0:	60 91 71 05 	lds	r22, 0x0571
    4df4:	70 91 72 05 	lds	r23, 0x0572
    4df8:	db 01       	movw	r26, r22
    4dfa:	18 96       	adiw	r26, 0x08	; 8
    4dfc:	ed 91       	ld	r30, X+
    4dfe:	fc 91       	ld	r31, X
    4e00:	19 97       	sbiw	r26, 0x09	; 9
    4e02:	88 23       	and	r24, r24
    4e04:	31 f0       	breq	.+12     	; 0x4e12 <puts+0x40>
    4e06:	09 95       	icall
    4e08:	89 2b       	or	r24, r25
    4e0a:	89 f3       	breq	.-30     	; 0x4dee <puts+0x1c>
    4e0c:	0f ef       	ldi	r16, 0xFF	; 255
    4e0e:	1f ef       	ldi	r17, 0xFF	; 255
    4e10:	ee cf       	rjmp	.-36     	; 0x4dee <puts+0x1c>
    4e12:	8a e0       	ldi	r24, 0x0A	; 10
    4e14:	09 95       	icall
    4e16:	89 2b       	or	r24, r25
    4e18:	11 f4       	brne	.+4      	; 0x4e1e <puts+0x4c>
    4e1a:	c8 01       	movw	r24, r16
    4e1c:	02 c0       	rjmp	.+4      	; 0x4e22 <puts+0x50>
    4e1e:	8f ef       	ldi	r24, 0xFF	; 255
    4e20:	9f ef       	ldi	r25, 0xFF	; 255
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	08 95       	ret

00004e2c <sprintf>:
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	cd b7       	in	r28, 0x3d	; 61
    4e36:	de b7       	in	r29, 0x3e	; 62
    4e38:	2e 97       	sbiw	r28, 0x0e	; 14
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	f8 94       	cli
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	0d 89       	ldd	r16, Y+21	; 0x15
    4e46:	1e 89       	ldd	r17, Y+22	; 0x16
    4e48:	86 e0       	ldi	r24, 0x06	; 6
    4e4a:	8c 83       	std	Y+4, r24	; 0x04
    4e4c:	1a 83       	std	Y+2, r17	; 0x02
    4e4e:	09 83       	std	Y+1, r16	; 0x01
    4e50:	8f ef       	ldi	r24, 0xFF	; 255
    4e52:	9f e7       	ldi	r25, 0x7F	; 127
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
    4e58:	ae 01       	movw	r20, r28
    4e5a:	47 5e       	subi	r20, 0xE7	; 231
    4e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5e:	6f 89       	ldd	r22, Y+23	; 0x17
    4e60:	78 8d       	ldd	r23, Y+24	; 0x18
    4e62:	ce 01       	movw	r24, r28
    4e64:	01 96       	adiw	r24, 0x01	; 1
    4e66:	0e 94 25 24 	call	0x484a	; 0x484a <vfprintf>
    4e6a:	ef 81       	ldd	r30, Y+7	; 0x07
    4e6c:	f8 85       	ldd	r31, Y+8	; 0x08
    4e6e:	e0 0f       	add	r30, r16
    4e70:	f1 1f       	adc	r31, r17
    4e72:	10 82       	st	Z, r1
    4e74:	2e 96       	adiw	r28, 0x0e	; 14
    4e76:	0f b6       	in	r0, 0x3f	; 63
    4e78:	f8 94       	cli
    4e7a:	de bf       	out	0x3e, r29	; 62
    4e7c:	0f be       	out	0x3f, r0	; 63
    4e7e:	cd bf       	out	0x3d, r28	; 61
    4e80:	df 91       	pop	r29
    4e82:	cf 91       	pop	r28
    4e84:	1f 91       	pop	r17
    4e86:	0f 91       	pop	r16
    4e88:	08 95       	ret

00004e8a <__ultoa_invert>:
    4e8a:	fa 01       	movw	r30, r20
    4e8c:	aa 27       	eor	r26, r26
    4e8e:	28 30       	cpi	r18, 0x08	; 8
    4e90:	51 f1       	breq	.+84     	; 0x4ee6 <__ultoa_invert+0x5c>
    4e92:	20 31       	cpi	r18, 0x10	; 16
    4e94:	81 f1       	breq	.+96     	; 0x4ef6 <__ultoa_invert+0x6c>
    4e96:	e8 94       	clt
    4e98:	6f 93       	push	r22
    4e9a:	6e 7f       	andi	r22, 0xFE	; 254
    4e9c:	6e 5f       	subi	r22, 0xFE	; 254
    4e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea4:	af 4f       	sbci	r26, 0xFF	; 255
    4ea6:	b1 e0       	ldi	r27, 0x01	; 1
    4ea8:	3e d0       	rcall	.+124    	; 0x4f26 <__ultoa_invert+0x9c>
    4eaa:	b4 e0       	ldi	r27, 0x04	; 4
    4eac:	3c d0       	rcall	.+120    	; 0x4f26 <__ultoa_invert+0x9c>
    4eae:	67 0f       	add	r22, r23
    4eb0:	78 1f       	adc	r23, r24
    4eb2:	89 1f       	adc	r24, r25
    4eb4:	9a 1f       	adc	r25, r26
    4eb6:	a1 1d       	adc	r26, r1
    4eb8:	68 0f       	add	r22, r24
    4eba:	79 1f       	adc	r23, r25
    4ebc:	8a 1f       	adc	r24, r26
    4ebe:	91 1d       	adc	r25, r1
    4ec0:	a1 1d       	adc	r26, r1
    4ec2:	6a 0f       	add	r22, r26
    4ec4:	71 1d       	adc	r23, r1
    4ec6:	81 1d       	adc	r24, r1
    4ec8:	91 1d       	adc	r25, r1
    4eca:	a1 1d       	adc	r26, r1
    4ecc:	20 d0       	rcall	.+64     	; 0x4f0e <__ultoa_invert+0x84>
    4ece:	09 f4       	brne	.+2      	; 0x4ed2 <__ultoa_invert+0x48>
    4ed0:	68 94       	set
    4ed2:	3f 91       	pop	r19
    4ed4:	2a e0       	ldi	r18, 0x0A	; 10
    4ed6:	26 9f       	mul	r18, r22
    4ed8:	11 24       	eor	r1, r1
    4eda:	30 19       	sub	r19, r0
    4edc:	30 5d       	subi	r19, 0xD0	; 208
    4ede:	31 93       	st	Z+, r19
    4ee0:	de f6       	brtc	.-74     	; 0x4e98 <__ultoa_invert+0xe>
    4ee2:	cf 01       	movw	r24, r30
    4ee4:	08 95       	ret
    4ee6:	46 2f       	mov	r20, r22
    4ee8:	47 70       	andi	r20, 0x07	; 7
    4eea:	40 5d       	subi	r20, 0xD0	; 208
    4eec:	41 93       	st	Z+, r20
    4eee:	b3 e0       	ldi	r27, 0x03	; 3
    4ef0:	0f d0       	rcall	.+30     	; 0x4f10 <__ultoa_invert+0x86>
    4ef2:	c9 f7       	brne	.-14     	; 0x4ee6 <__ultoa_invert+0x5c>
    4ef4:	f6 cf       	rjmp	.-20     	; 0x4ee2 <__ultoa_invert+0x58>
    4ef6:	46 2f       	mov	r20, r22
    4ef8:	4f 70       	andi	r20, 0x0F	; 15
    4efa:	40 5d       	subi	r20, 0xD0	; 208
    4efc:	4a 33       	cpi	r20, 0x3A	; 58
    4efe:	18 f0       	brcs	.+6      	; 0x4f06 <__ultoa_invert+0x7c>
    4f00:	49 5d       	subi	r20, 0xD9	; 217
    4f02:	31 fd       	sbrc	r19, 1
    4f04:	40 52       	subi	r20, 0x20	; 32
    4f06:	41 93       	st	Z+, r20
    4f08:	02 d0       	rcall	.+4      	; 0x4f0e <__ultoa_invert+0x84>
    4f0a:	a9 f7       	brne	.-22     	; 0x4ef6 <__ultoa_invert+0x6c>
    4f0c:	ea cf       	rjmp	.-44     	; 0x4ee2 <__ultoa_invert+0x58>
    4f0e:	b4 e0       	ldi	r27, 0x04	; 4
    4f10:	a6 95       	lsr	r26
    4f12:	97 95       	ror	r25
    4f14:	87 95       	ror	r24
    4f16:	77 95       	ror	r23
    4f18:	67 95       	ror	r22
    4f1a:	ba 95       	dec	r27
    4f1c:	c9 f7       	brne	.-14     	; 0x4f10 <__ultoa_invert+0x86>
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	61 05       	cpc	r22, r1
    4f22:	71 05       	cpc	r23, r1
    4f24:	08 95       	ret
    4f26:	9b 01       	movw	r18, r22
    4f28:	ac 01       	movw	r20, r24
    4f2a:	0a 2e       	mov	r0, r26
    4f2c:	06 94       	lsr	r0
    4f2e:	57 95       	ror	r21
    4f30:	47 95       	ror	r20
    4f32:	37 95       	ror	r19
    4f34:	27 95       	ror	r18
    4f36:	ba 95       	dec	r27
    4f38:	c9 f7       	brne	.-14     	; 0x4f2c <__ultoa_invert+0xa2>
    4f3a:	62 0f       	add	r22, r18
    4f3c:	73 1f       	adc	r23, r19
    4f3e:	84 1f       	adc	r24, r20
    4f40:	95 1f       	adc	r25, r21
    4f42:	a0 1d       	adc	r26, r0
    4f44:	08 95       	ret

00004f46 <__eerd_byte_m128rfa1>:
    4f46:	f9 99       	sbic	0x1f, 1	; 31
    4f48:	fe cf       	rjmp	.-4      	; 0x4f46 <__eerd_byte_m128rfa1>
    4f4a:	92 bd       	out	0x22, r25	; 34
    4f4c:	81 bd       	out	0x21, r24	; 33
    4f4e:	f8 9a       	sbi	0x1f, 0	; 31
    4f50:	99 27       	eor	r25, r25
    4f52:	80 b5       	in	r24, 0x20	; 32
    4f54:	08 95       	ret

00004f56 <__eewr_byte_m128rfa1>:
    4f56:	26 2f       	mov	r18, r22

00004f58 <__eewr_r18_m128rfa1>:
    4f58:	f9 99       	sbic	0x1f, 1	; 31
    4f5a:	fe cf       	rjmp	.-4      	; 0x4f58 <__eewr_r18_m128rfa1>
    4f5c:	1f ba       	out	0x1f, r1	; 31
    4f5e:	92 bd       	out	0x22, r25	; 34
    4f60:	81 bd       	out	0x21, r24	; 33
    4f62:	20 bd       	out	0x20, r18	; 32
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	fa 9a       	sbi	0x1f, 2	; 31
    4f6a:	f9 9a       	sbi	0x1f, 1	; 31
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	01 96       	adiw	r24, 0x01	; 1
    4f70:	08 95       	ret

00004f72 <calloc>:
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
    4f7a:	86 9f       	mul	r24, r22
    4f7c:	80 01       	movw	r16, r0
    4f7e:	87 9f       	mul	r24, r23
    4f80:	10 0d       	add	r17, r0
    4f82:	96 9f       	mul	r25, r22
    4f84:	10 0d       	add	r17, r0
    4f86:	11 24       	eor	r1, r1
    4f88:	c8 01       	movw	r24, r16
    4f8a:	0e 94 d5 27 	call	0x4faa	; 0x4faa <malloc>
    4f8e:	ec 01       	movw	r28, r24
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	29 f0       	breq	.+10     	; 0x4f9e <calloc+0x2c>
    4f94:	a8 01       	movw	r20, r16
    4f96:	60 e0       	ldi	r22, 0x00	; 0
    4f98:	70 e0       	ldi	r23, 0x00	; 0
    4f9a:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <memset>
    4f9e:	ce 01       	movw	r24, r28
    4fa0:	df 91       	pop	r29
    4fa2:	cf 91       	pop	r28
    4fa4:	1f 91       	pop	r17
    4fa6:	0f 91       	pop	r16
    4fa8:	08 95       	ret

00004faa <malloc>:
    4faa:	cf 93       	push	r28
    4fac:	df 93       	push	r29
    4fae:	82 30       	cpi	r24, 0x02	; 2
    4fb0:	91 05       	cpc	r25, r1
    4fb2:	10 f4       	brcc	.+4      	; 0x4fb8 <malloc+0xe>
    4fb4:	82 e0       	ldi	r24, 0x02	; 2
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	e0 91 77 05 	lds	r30, 0x0577
    4fbc:	f0 91 78 05 	lds	r31, 0x0578
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	a0 e0       	ldi	r26, 0x00	; 0
    4fc6:	b0 e0       	ldi	r27, 0x00	; 0
    4fc8:	30 97       	sbiw	r30, 0x00	; 0
    4fca:	39 f1       	breq	.+78     	; 0x501a <malloc+0x70>
    4fcc:	40 81       	ld	r20, Z
    4fce:	51 81       	ldd	r21, Z+1	; 0x01
    4fd0:	48 17       	cp	r20, r24
    4fd2:	59 07       	cpc	r21, r25
    4fd4:	b8 f0       	brcs	.+46     	; 0x5004 <malloc+0x5a>
    4fd6:	48 17       	cp	r20, r24
    4fd8:	59 07       	cpc	r21, r25
    4fda:	71 f4       	brne	.+28     	; 0x4ff8 <malloc+0x4e>
    4fdc:	82 81       	ldd	r24, Z+2	; 0x02
    4fde:	93 81       	ldd	r25, Z+3	; 0x03
    4fe0:	10 97       	sbiw	r26, 0x00	; 0
    4fe2:	29 f0       	breq	.+10     	; 0x4fee <malloc+0x44>
    4fe4:	13 96       	adiw	r26, 0x03	; 3
    4fe6:	9c 93       	st	X, r25
    4fe8:	8e 93       	st	-X, r24
    4fea:	12 97       	sbiw	r26, 0x02	; 2
    4fec:	2c c0       	rjmp	.+88     	; 0x5046 <malloc+0x9c>
    4fee:	90 93 78 05 	sts	0x0578, r25
    4ff2:	80 93 77 05 	sts	0x0577, r24
    4ff6:	27 c0       	rjmp	.+78     	; 0x5046 <malloc+0x9c>
    4ff8:	21 15       	cp	r18, r1
    4ffa:	31 05       	cpc	r19, r1
    4ffc:	31 f0       	breq	.+12     	; 0x500a <malloc+0x60>
    4ffe:	42 17       	cp	r20, r18
    5000:	53 07       	cpc	r21, r19
    5002:	18 f0       	brcs	.+6      	; 0x500a <malloc+0x60>
    5004:	a9 01       	movw	r20, r18
    5006:	db 01       	movw	r26, r22
    5008:	01 c0       	rjmp	.+2      	; 0x500c <malloc+0x62>
    500a:	ef 01       	movw	r28, r30
    500c:	9a 01       	movw	r18, r20
    500e:	bd 01       	movw	r22, r26
    5010:	df 01       	movw	r26, r30
    5012:	02 80       	ldd	r0, Z+2	; 0x02
    5014:	f3 81       	ldd	r31, Z+3	; 0x03
    5016:	e0 2d       	mov	r30, r0
    5018:	d7 cf       	rjmp	.-82     	; 0x4fc8 <malloc+0x1e>
    501a:	21 15       	cp	r18, r1
    501c:	31 05       	cpc	r19, r1
    501e:	f9 f0       	breq	.+62     	; 0x505e <malloc+0xb4>
    5020:	28 1b       	sub	r18, r24
    5022:	39 0b       	sbc	r19, r25
    5024:	24 30       	cpi	r18, 0x04	; 4
    5026:	31 05       	cpc	r19, r1
    5028:	80 f4       	brcc	.+32     	; 0x504a <malloc+0xa0>
    502a:	8a 81       	ldd	r24, Y+2	; 0x02
    502c:	9b 81       	ldd	r25, Y+3	; 0x03
    502e:	61 15       	cp	r22, r1
    5030:	71 05       	cpc	r23, r1
    5032:	21 f0       	breq	.+8      	; 0x503c <malloc+0x92>
    5034:	fb 01       	movw	r30, r22
    5036:	93 83       	std	Z+3, r25	; 0x03
    5038:	82 83       	std	Z+2, r24	; 0x02
    503a:	04 c0       	rjmp	.+8      	; 0x5044 <malloc+0x9a>
    503c:	90 93 78 05 	sts	0x0578, r25
    5040:	80 93 77 05 	sts	0x0577, r24
    5044:	fe 01       	movw	r30, r28
    5046:	32 96       	adiw	r30, 0x02	; 2
    5048:	44 c0       	rjmp	.+136    	; 0x50d2 <malloc+0x128>
    504a:	fe 01       	movw	r30, r28
    504c:	e2 0f       	add	r30, r18
    504e:	f3 1f       	adc	r31, r19
    5050:	81 93       	st	Z+, r24
    5052:	91 93       	st	Z+, r25
    5054:	22 50       	subi	r18, 0x02	; 2
    5056:	31 09       	sbc	r19, r1
    5058:	39 83       	std	Y+1, r19	; 0x01
    505a:	28 83       	st	Y, r18
    505c:	3a c0       	rjmp	.+116    	; 0x50d2 <malloc+0x128>
    505e:	20 91 75 05 	lds	r18, 0x0575
    5062:	30 91 76 05 	lds	r19, 0x0576
    5066:	23 2b       	or	r18, r19
    5068:	41 f4       	brne	.+16     	; 0x507a <malloc+0xd0>
    506a:	20 91 02 02 	lds	r18, 0x0202
    506e:	30 91 03 02 	lds	r19, 0x0203
    5072:	30 93 76 05 	sts	0x0576, r19
    5076:	20 93 75 05 	sts	0x0575, r18
    507a:	20 91 00 02 	lds	r18, 0x0200
    507e:	30 91 01 02 	lds	r19, 0x0201
    5082:	21 15       	cp	r18, r1
    5084:	31 05       	cpc	r19, r1
    5086:	41 f4       	brne	.+16     	; 0x5098 <malloc+0xee>
    5088:	2d b7       	in	r18, 0x3d	; 61
    508a:	3e b7       	in	r19, 0x3e	; 62
    508c:	40 91 04 02 	lds	r20, 0x0204
    5090:	50 91 05 02 	lds	r21, 0x0205
    5094:	24 1b       	sub	r18, r20
    5096:	35 0b       	sbc	r19, r21
    5098:	e0 91 75 05 	lds	r30, 0x0575
    509c:	f0 91 76 05 	lds	r31, 0x0576
    50a0:	e2 17       	cp	r30, r18
    50a2:	f3 07       	cpc	r31, r19
    50a4:	a0 f4       	brcc	.+40     	; 0x50ce <malloc+0x124>
    50a6:	2e 1b       	sub	r18, r30
    50a8:	3f 0b       	sbc	r19, r31
    50aa:	28 17       	cp	r18, r24
    50ac:	39 07       	cpc	r19, r25
    50ae:	78 f0       	brcs	.+30     	; 0x50ce <malloc+0x124>
    50b0:	ac 01       	movw	r20, r24
    50b2:	4e 5f       	subi	r20, 0xFE	; 254
    50b4:	5f 4f       	sbci	r21, 0xFF	; 255
    50b6:	24 17       	cp	r18, r20
    50b8:	35 07       	cpc	r19, r21
    50ba:	48 f0       	brcs	.+18     	; 0x50ce <malloc+0x124>
    50bc:	4e 0f       	add	r20, r30
    50be:	5f 1f       	adc	r21, r31
    50c0:	50 93 76 05 	sts	0x0576, r21
    50c4:	40 93 75 05 	sts	0x0575, r20
    50c8:	81 93       	st	Z+, r24
    50ca:	91 93       	st	Z+, r25
    50cc:	02 c0       	rjmp	.+4      	; 0x50d2 <malloc+0x128>
    50ce:	e0 e0       	ldi	r30, 0x00	; 0
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	cf 01       	movw	r24, r30
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	08 95       	ret

000050da <free>:
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	00 97       	sbiw	r24, 0x00	; 0
    50e0:	09 f4       	brne	.+2      	; 0x50e4 <free+0xa>
    50e2:	87 c0       	rjmp	.+270    	; 0x51f2 <free+0x118>
    50e4:	fc 01       	movw	r30, r24
    50e6:	32 97       	sbiw	r30, 0x02	; 2
    50e8:	13 82       	std	Z+3, r1	; 0x03
    50ea:	12 82       	std	Z+2, r1	; 0x02
    50ec:	c0 91 77 05 	lds	r28, 0x0577
    50f0:	d0 91 78 05 	lds	r29, 0x0578
    50f4:	20 97       	sbiw	r28, 0x00	; 0
    50f6:	81 f4       	brne	.+32     	; 0x5118 <free+0x3e>
    50f8:	20 81       	ld	r18, Z
    50fa:	31 81       	ldd	r19, Z+1	; 0x01
    50fc:	28 0f       	add	r18, r24
    50fe:	39 1f       	adc	r19, r25
    5100:	80 91 75 05 	lds	r24, 0x0575
    5104:	90 91 76 05 	lds	r25, 0x0576
    5108:	82 17       	cp	r24, r18
    510a:	93 07       	cpc	r25, r19
    510c:	79 f5       	brne	.+94     	; 0x516c <free+0x92>
    510e:	f0 93 76 05 	sts	0x0576, r31
    5112:	e0 93 75 05 	sts	0x0575, r30
    5116:	6d c0       	rjmp	.+218    	; 0x51f2 <free+0x118>
    5118:	de 01       	movw	r26, r28
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	ae 17       	cp	r26, r30
    5120:	bf 07       	cpc	r27, r31
    5122:	50 f4       	brcc	.+20     	; 0x5138 <free+0x5e>
    5124:	12 96       	adiw	r26, 0x02	; 2
    5126:	4d 91       	ld	r20, X+
    5128:	5c 91       	ld	r21, X
    512a:	13 97       	sbiw	r26, 0x03	; 3
    512c:	9d 01       	movw	r18, r26
    512e:	41 15       	cp	r20, r1
    5130:	51 05       	cpc	r21, r1
    5132:	09 f1       	breq	.+66     	; 0x5176 <free+0x9c>
    5134:	da 01       	movw	r26, r20
    5136:	f3 cf       	rjmp	.-26     	; 0x511e <free+0x44>
    5138:	b3 83       	std	Z+3, r27	; 0x03
    513a:	a2 83       	std	Z+2, r26	; 0x02
    513c:	40 81       	ld	r20, Z
    513e:	51 81       	ldd	r21, Z+1	; 0x01
    5140:	84 0f       	add	r24, r20
    5142:	95 1f       	adc	r25, r21
    5144:	8a 17       	cp	r24, r26
    5146:	9b 07       	cpc	r25, r27
    5148:	71 f4       	brne	.+28     	; 0x5166 <free+0x8c>
    514a:	8d 91       	ld	r24, X+
    514c:	9c 91       	ld	r25, X
    514e:	11 97       	sbiw	r26, 0x01	; 1
    5150:	84 0f       	add	r24, r20
    5152:	95 1f       	adc	r25, r21
    5154:	02 96       	adiw	r24, 0x02	; 2
    5156:	91 83       	std	Z+1, r25	; 0x01
    5158:	80 83       	st	Z, r24
    515a:	12 96       	adiw	r26, 0x02	; 2
    515c:	8d 91       	ld	r24, X+
    515e:	9c 91       	ld	r25, X
    5160:	13 97       	sbiw	r26, 0x03	; 3
    5162:	93 83       	std	Z+3, r25	; 0x03
    5164:	82 83       	std	Z+2, r24	; 0x02
    5166:	21 15       	cp	r18, r1
    5168:	31 05       	cpc	r19, r1
    516a:	29 f4       	brne	.+10     	; 0x5176 <free+0x9c>
    516c:	f0 93 78 05 	sts	0x0578, r31
    5170:	e0 93 77 05 	sts	0x0577, r30
    5174:	3e c0       	rjmp	.+124    	; 0x51f2 <free+0x118>
    5176:	d9 01       	movw	r26, r18
    5178:	13 96       	adiw	r26, 0x03	; 3
    517a:	fc 93       	st	X, r31
    517c:	ee 93       	st	-X, r30
    517e:	12 97       	sbiw	r26, 0x02	; 2
    5180:	4d 91       	ld	r20, X+
    5182:	5d 91       	ld	r21, X+
    5184:	a4 0f       	add	r26, r20
    5186:	b5 1f       	adc	r27, r21
    5188:	ea 17       	cp	r30, r26
    518a:	fb 07       	cpc	r31, r27
    518c:	79 f4       	brne	.+30     	; 0x51ac <free+0xd2>
    518e:	80 81       	ld	r24, Z
    5190:	91 81       	ldd	r25, Z+1	; 0x01
    5192:	84 0f       	add	r24, r20
    5194:	95 1f       	adc	r25, r21
    5196:	02 96       	adiw	r24, 0x02	; 2
    5198:	d9 01       	movw	r26, r18
    519a:	11 96       	adiw	r26, 0x01	; 1
    519c:	9c 93       	st	X, r25
    519e:	8e 93       	st	-X, r24
    51a0:	82 81       	ldd	r24, Z+2	; 0x02
    51a2:	93 81       	ldd	r25, Z+3	; 0x03
    51a4:	13 96       	adiw	r26, 0x03	; 3
    51a6:	9c 93       	st	X, r25
    51a8:	8e 93       	st	-X, r24
    51aa:	12 97       	sbiw	r26, 0x02	; 2
    51ac:	e0 e0       	ldi	r30, 0x00	; 0
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	8a 81       	ldd	r24, Y+2	; 0x02
    51b2:	9b 81       	ldd	r25, Y+3	; 0x03
    51b4:	00 97       	sbiw	r24, 0x00	; 0
    51b6:	19 f0       	breq	.+6      	; 0x51be <free+0xe4>
    51b8:	fe 01       	movw	r30, r28
    51ba:	ec 01       	movw	r28, r24
    51bc:	f9 cf       	rjmp	.-14     	; 0x51b0 <free+0xd6>
    51be:	ce 01       	movw	r24, r28
    51c0:	02 96       	adiw	r24, 0x02	; 2
    51c2:	28 81       	ld	r18, Y
    51c4:	39 81       	ldd	r19, Y+1	; 0x01
    51c6:	82 0f       	add	r24, r18
    51c8:	93 1f       	adc	r25, r19
    51ca:	20 91 75 05 	lds	r18, 0x0575
    51ce:	30 91 76 05 	lds	r19, 0x0576
    51d2:	28 17       	cp	r18, r24
    51d4:	39 07       	cpc	r19, r25
    51d6:	69 f4       	brne	.+26     	; 0x51f2 <free+0x118>
    51d8:	30 97       	sbiw	r30, 0x00	; 0
    51da:	29 f4       	brne	.+10     	; 0x51e6 <free+0x10c>
    51dc:	10 92 78 05 	sts	0x0578, r1
    51e0:	10 92 77 05 	sts	0x0577, r1
    51e4:	02 c0       	rjmp	.+4      	; 0x51ea <free+0x110>
    51e6:	13 82       	std	Z+3, r1	; 0x03
    51e8:	12 82       	std	Z+2, r1	; 0x02
    51ea:	d0 93 76 05 	sts	0x0576, r29
    51ee:	c0 93 75 05 	sts	0x0575, r28
    51f2:	df 91       	pop	r29
    51f4:	cf 91       	pop	r28
    51f6:	08 95       	ret

000051f8 <memset>:
    51f8:	dc 01       	movw	r26, r24
    51fa:	01 c0       	rjmp	.+2      	; 0x51fe <memset+0x6>
    51fc:	6d 93       	st	X+, r22
    51fe:	41 50       	subi	r20, 0x01	; 1
    5200:	50 40       	sbci	r21, 0x00	; 0
    5202:	e0 f7       	brcc	.-8      	; 0x51fc <memset+0x4>
    5204:	08 95       	ret

00005206 <_exit>:
    5206:	f8 94       	cli

00005208 <__stop_program>:
    5208:	ff cf       	rjmp	.-2      	; 0x5208 <__stop_program>
