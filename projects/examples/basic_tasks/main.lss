
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800200  00005dd8  00005e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000056b  00800400  00800400  0000606c  2**0
                  ALLOC
  3 .stab         00013200  00000000  00000000  0000606c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009545  00000000  00000000  0001926c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000227b1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 02 	jmp	0x510	; 0x510 <__ctors_end>
       4:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__vector_1>
       8:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__vector_2>
       c:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__vector_3>
      10:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      14:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      18:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      1c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      20:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      24:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <__vector_9>
      28:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      2c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      30:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      34:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <__vector_13>
      38:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      3c:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <__vector_13>
      40:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      44:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      48:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      4c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      50:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      54:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      58:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      5c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      60:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      64:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      68:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      6c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      70:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      74:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      78:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      7c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      80:	0c 94 ce 26 	jmp	0x4d9c	; 0x4d9c <__vector_32>
      84:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      88:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      8c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      90:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      94:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      98:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      9c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      a0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      a4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      a8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      ac:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      b0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      b4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      b8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      bc:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      c0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      c4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      c8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      cc:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      d0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      d4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      d8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      dc:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      e0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      e4:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_57>
      e8:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_58>
      ec:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_59>
      f0:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_60>
      f4:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_61>
      f8:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_62>
      fc:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_63>
     100:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_64>
     104:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     108:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     10c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     110:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     114:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     118:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     11c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
     120:	03 0b       	sbc	r16, r19
     122:	0e 0b       	sbc	r16, r30
     124:	19 0b       	sbc	r17, r25
     126:	24 0b       	sbc	r18, r20
     128:	2f 0b       	sbc	r18, r31
     12a:	3a 0b       	sbc	r19, r26
     12c:	45 0b       	sbc	r20, r21
     12e:	64 0b       	sbc	r22, r20
     130:	70 0b       	sbc	r23, r16
     132:	7c 0b       	sbc	r23, r28
     134:	88 0b       	sbc	r24, r24
     136:	94 0b       	sbc	r25, r20
     138:	a0 0b       	sbc	r26, r16
     13a:	a0 0b       	sbc	r26, r16
     13c:	be 0b       	sbc	r27, r30
     13e:	c0 0b       	sbc	r28, r16
     140:	c2 0b       	sbc	r28, r18
     142:	c4 0b       	sbc	r28, r20
     144:	c6 0b       	sbc	r28, r22
     146:	c8 0b       	sbc	r28, r24
     148:	ca 0b       	sbc	r28, r26
     14a:	e8 0b       	sbc	r30, r24
     14c:	08 0c       	add	r0, r8
     14e:	28 0c       	add	r2, r8
     150:	48 0c       	add	r4, r8
     152:	68 0c       	add	r6, r8
     154:	88 0c       	add	r8, r8
     156:	a8 0c       	add	r10, r8
     158:	de 0c       	add	r13, r14
     15a:	ea 0c       	add	r14, r10
     15c:	f6 0c       	add	r15, r6
     15e:	02 0d       	add	r16, r2
     160:	0e 0d       	add	r16, r14
     162:	1a 0d       	add	r17, r10
     164:	26 0d       	add	r18, r6
     166:	3e 0d       	add	r19, r14
     168:	49 0d       	add	r20, r9
     16a:	54 0d       	add	r21, r4
     16c:	5f 0d       	add	r21, r15
     16e:	6a 0d       	add	r22, r10
     170:	75 0d       	add	r23, r5
     172:	80 0d       	add	r24, r0
     174:	d1 14       	cp	r13, r1
     176:	d7 14       	cp	r13, r7
     178:	da 14       	cp	r13, r10
     17a:	dd 14       	cp	r13, r13
     17c:	e0 14       	cp	r14, r0
     17e:	e3 14       	cp	r14, r3
     180:	e9 14       	cp	r14, r9
     182:	e6 14       	cp	r14, r6
     184:	ec 14       	cp	r14, r12
     186:	ef 14       	cp	r14, r15
     188:	f2 14       	cp	r15, r2
     18a:	fb 14       	cp	r15, r11
     18c:	fe 14       	cp	r15, r14
     18e:	01 15       	cp	r16, r1
     190:	04 15       	cp	r16, r4
     192:	f8 14       	cp	r15, r8
     194:	ce 14       	cp	r12, r14
     196:	d4 14       	cp	r13, r4
     198:	07 15       	cp	r16, r7
     19a:	0a 15       	cp	r16, r10
     19c:	f5 14       	cp	r15, r5
     19e:	cb 14       	cp	r12, r11
     1a0:	be 15       	cp	r27, r14
     1a2:	c1 15       	cp	r28, r1
     1a4:	cc 15       	cp	r28, r12
     1a6:	d1 15       	cp	r29, r1
     1a8:	d8 15       	cp	r29, r8
     1aa:	e1 15       	cp	r30, r1
     1ac:	e4 15       	cp	r30, r4
     1ae:	e9 15       	cp	r30, r9
     1b0:	f0 15       	cp	r31, r0
     1b2:	f9 15       	cp	r31, r9

000001b4 <__c.3277>:
     1b4:	4e 61 6e 6f 2d 52 4b 20 56 65 72 73 69 6f 6e 20     Nano-RK Version 
	...

000001c5 <__c.3267>:
     1c5:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     1d5:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

000001e2 <__c.3262>:
     1e2:	0d 0a 00                                            ...

000001e5 <__c.3260>:
     1e5:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     1f5:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

00000202 <__c.3258>:
     202:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     212:	61 74 69 6f 6e 73 3a 20 00                          ations: .

0000021b <__c.3256>:
     21b:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     22b:	3a 20 00                                            : .

0000022e <__c.3254>:
     22e:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

0000023e <__c.3252>:
     23e:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     24e:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

00000259 <__c.3250>:
     259:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

0000026a <__c.3248>:
     26a:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     27a:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

0000028b <__c.3246>:
     28b:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     29b:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

000002a6 <__c.3244>:
     2a6:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

000002b1 <__c.3337>:
     2b1:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000002b8 <__c.3334>:
     2b8:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000002c7 <__c.3331>:
     2c7:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002d8 <__c.3328>:
     2d8:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2e8:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002f3 <__c.3325>:
     2f3:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     303:	20 53 69 67 6e 61 6c 00                              Signal.

0000030b <__c.3322>:
     30b:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     31b:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000032b <__c.3319>:
     32b:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     33b:	72 6f 72 00                                         ror.

0000033f <__c.3316>:
     33f:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000350 <__c.3313>:
     350:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     360:	61 72 74 00                                         art.

00000364 <__c.3310>:
     364:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000373 <__c.3307>:
     373:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     383:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000038e <__c.3304>:
     38e:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000039a <__c.3301>:
     39a:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     3aa:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     3ba:	20 6f 6b 3f 00                                       ok?.

000003bf <__c.3298>:
     3bf:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3cf:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003dd <__c.3295>:
     3dd:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3ed:	72 74 00                                            rt.

000003f0 <__c.3292>:
     3f0:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     400:	49 44 00                                            ID.

00000403 <__c.3289>:
     403:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     413:	20 57 61 6b 65 75 70 00                              Wakeup.

0000041b <__c.3286>:
     41b:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     42b:	6c 61 74 65 64 00                                   lated.

00000431 <__c.3283>:
     431:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     441:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000044c <__c.3280>:
     44c:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     45c:	69 6e 74 65 72 00                                   inter.

00000462 <__c.3277>:
     462:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     472:	6c 6f 77 00                                         low.

00000476 <__c.3274>:
     476:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     486:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     496:	6e 6f 75 67 68 21 00                                nough!.

0000049d <__c.3270>:
     49d:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     4ad:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     4bd:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     4cd:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000004d9 <__c.3267>:
     4d9:	29 3a 20 00                                         ): .

000004dd <__c.3265>:
     4dd:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000004e9 <__c.3175>:
     4e9:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000004f8 <__c.2103>:
     4f8:	45 46 47 65 66 67 00                                EFGefg.

000004ff <__c.2097>:
     4ff:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000510 <__ctors_end>:
     510:	11 24       	eor	r1, r1
     512:	1f be       	out	0x3f, r1	; 63
     514:	cf ef       	ldi	r28, 0xFF	; 255
     516:	d1 e4       	ldi	r29, 0x41	; 65
     518:	de bf       	out	0x3e, r29	; 62
     51a:	cd bf       	out	0x3d, r28	; 61

0000051c <__do_copy_data>:
     51c:	14 e0       	ldi	r17, 0x04	; 4
     51e:	a0 e0       	ldi	r26, 0x00	; 0
     520:	b2 e0       	ldi	r27, 0x02	; 2
     522:	e8 ed       	ldi	r30, 0xD8	; 216
     524:	fd e5       	ldi	r31, 0x5D	; 93
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	0b bf       	out	0x3b, r16	; 59
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__do_copy_data+0x14>
     52c:	07 90       	elpm	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	a0 30       	cpi	r26, 0x00	; 0
     532:	b1 07       	cpc	r27, r17
     534:	d9 f7       	brne	.-10     	; 0x52c <__do_copy_data+0x10>

00000536 <__do_clear_bss>:
     536:	19 e0       	ldi	r17, 0x09	; 9
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	b4 e0       	ldi	r27, 0x04	; 4
     53c:	01 c0       	rjmp	.+2      	; 0x540 <.do_clear_bss_start>

0000053e <.do_clear_bss_loop>:
     53e:	1d 92       	st	X+, r1

00000540 <.do_clear_bss_start>:
     540:	ab 36       	cpi	r26, 0x6B	; 107
     542:	b1 07       	cpc	r27, r17
     544:	e1 f7       	brne	.-8      	; 0x53e <.do_clear_bss_loop>
     546:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <main>
     54a:	0c 94 ea 2e 	jmp	0x5dd4	; 0x5dd4 <_exit>

0000054e <__bad_interrupt>:
     54e:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__vector_default>

00000552 <Task1>:
  
  return 0;
}

void Task1()
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	28 97       	sbiw	r28, 0x08	; 8
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;
uint16_t cnt;
uint8_t val;
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
     566:	84 eb       	ldi	r24, 0xB4	; 180
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
printf( "%d\r\n",NRK_VERSION );
     56e:	1f 92       	push	r1
     570:	85 e6       	ldi	r24, 0x65	; 101
     572:	8f 93       	push	r24
     574:	8a e0       	ldi	r24, 0x0A	; 10
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>

printf( "My node's address is %u\r\n",NODE_ADDR );
     580:	1f 92       	push	r1
     582:	1f 92       	push	r1
     584:	87 e5       	ldi	r24, 0x57	; 87
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
     590:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <nrk_get_pid>
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	81 e7       	ldi	r24, 0x71	; 113
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
t.secs=5;
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	89 83       	std	Y+1, r24	; 0x01
     5ae:	9a 83       	std	Y+2, r25	; 0x02
     5b0:	ab 83       	std	Y+3, r26	; 0x03
     5b2:	bc 83       	std	Y+4, r27	; 0x04
t.nano_secs=0;
     5b4:	1d 82       	std	Y+5, r1	; 0x05
     5b6:	1e 82       	std	Y+6, r1	; 0x06
     5b8:	1f 82       	std	Y+7, r1	; 0x07
     5ba:	18 86       	std	Y+8, r1	; 0x08

// setup a software watch dog timer
nrk_sw_wdt_init(0, &t, NULL);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 70 24 	call	0x48e0	; 0x48e0 <nrk_sw_wdt_init>
nrk_sw_wdt_start(0);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <nrk_sw_wdt_start>

nrk_gpio_direction(NRK_BUTTON, NRK_PIN_INPUT);
     5d6:	d0 90 2e 02 	lds	r13, 0x022E
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	8d 2d       	mov	r24, r13
     5de:	0e 94 ca 0c 	call	0x1994	; 0x1994 <nrk_gpio_direction>
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
void Task1()
{
nrk_time_t t;
uint16_t cnt;
uint8_t val;
cnt=0;
     5ec:	00 e0       	ldi	r16, 0x00	; 0
     5ee:	10 e0       	ldi	r17, 0x00	; 0
	// Update watchdog timer
	nrk_sw_wdt_update(0);
	nrk_led_toggle(ORANGE_LED);
	val=nrk_gpio_get(NRK_BUTTON);
	// Button logic is inverter 0 means pressed, 1 not pressed
	printf( "Task1 cnt=%u button state=%u\r\n",cnt,val );
     5f0:	80 e8       	ldi	r24, 0x80	; 128
     5f2:	e8 2e       	mov	r14, r24
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	f8 2e       	mov	r15, r24

nrk_gpio_direction(NRK_BUTTON, NRK_PIN_INPUT);

  while(1) {
	// Update watchdog timer
	nrk_sw_wdt_update(0);
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 93 24 	call	0x4926	; 0x4926 <nrk_sw_wdt_update>
	nrk_led_toggle(ORANGE_LED);
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <nrk_led_toggle>
	val=nrk_gpio_get(NRK_BUTTON);
     608:	8d 2d       	mov	r24, r13
     60a:	0e 94 ae 0b 	call	0x175c	; 0x175c <nrk_gpio_get>
	// Button logic is inverter 0 means pressed, 1 not pressed
	printf( "Task1 cnt=%u button state=%u\r\n",cnt,val );
     60e:	1f 92       	push	r1
     610:	8f 93       	push	r24
     612:	1f 93       	push	r17
     614:	0f 93       	push	r16
     616:	ff 92       	push	r15
     618:	ef 92       	push	r14
     61a:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
	nrk_wait_until_next_period();
     61e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <nrk_wait_until_next_period>
	//	nrk_stats_display_all();
	//	nrk_halt();
	//	}


	cnt++;
     622:	0f 5f       	subi	r16, 0xFF	; 255
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	e2 cf       	rjmp	.-60     	; 0x5f8 <Task1+0xa6>

00000634 <Task2>:
}

void Task2()
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
     634:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <nrk_get_pid>
     638:	1f 92       	push	r1
     63a:	8f 93       	push	r24
     63c:	8f e9       	ldi	r24, 0x9F	; 159
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
  cnt=0;
     650:	c0 e0       	ldi	r28, 0x00	; 0
     652:	d0 e0       	ldi	r29, 0x00	; 0
  while(1) {
	nrk_led_toggle(BLUE_LED);
	printf( "Task2 signed cnt=%d\r\n",cnt );
     654:	0e ea       	ldi	r16, 0xAE	; 174
     656:	12 e0       	ldi	r17, 0x02	; 2
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <nrk_led_toggle>
	printf( "Task2 signed cnt=%d\r\n",cnt );
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	1f 93       	push	r17
     666:	0f 93       	push	r16
     668:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
	//nrk_stats_display_pid(nrk_get_pid());
	nrk_wait_until_next_period();
     66c:	0e 94 a4 1b 	call	0x3748	; 0x3748 <nrk_wait_until_next_period>
	cnt--;
     670:	21 97       	sbiw	r28, 0x01	; 1
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	ee cf       	rjmp	.-36     	; 0x658 <Task2+0x24>

0000067c <Task3>:
}

void Task3()
{
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
     67c:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <nrk_get_pid>
     680:	1f 92       	push	r1
     682:	8f 93       	push	r24
     684:	84 ec       	ldi	r24, 0xC4	; 196
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
  cnt=0;
     698:	c0 e0       	ldi	r28, 0x00	; 0
     69a:	d0 e0       	ldi	r29, 0x00	; 0
  while(1) {
	nrk_led_toggle(GREEN_LED);
	printf( "Task3 cnt=%u\r\n",cnt );
     69c:	03 ed       	ldi	r16, 0xD3	; 211
     69e:	12 e0       	ldi	r17, 0x02	; 2
{
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(GREEN_LED);
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <nrk_led_toggle>
	printf( "Task3 cnt=%u\r\n",cnt );
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	1f 93       	push	r17
     6ae:	0f 93       	push	r16
     6b0:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
	nrk_wait_until_next_period();
     6b4:	0e 94 a4 1b 	call	0x3748	; 0x3748 <nrk_wait_until_next_period>
	cnt++;
     6b8:	21 96       	adiw	r28, 0x01	; 1
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	ee cf       	rjmp	.-36     	; 0x6a0 <Task3+0x24>

000006c4 <Task4>:

void Task4()
{
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
     6c4:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <nrk_get_pid>
     6c8:	1f 92       	push	r1
     6ca:	8f 93       	push	r24
     6cc:	82 ee       	ldi	r24, 0xE2	; 226
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
  cnt=0;
     6e0:	c0 e0       	ldi	r28, 0x00	; 0
     6e2:	d0 e0       	ldi	r29, 0x00	; 0
  while(1) {
	nrk_led_toggle(RED_LED);
	printf( "Task4 cnt=%u\r\n",cnt );
     6e4:	01 ef       	ldi	r16, 0xF1	; 241
     6e6:	12 e0       	ldi	r17, 0x02	; 2
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <nrk_led_toggle>
	printf( "Task4 cnt=%u\r\n",cnt );
     6f0:	df 93       	push	r29
     6f2:	cf 93       	push	r28
     6f4:	1f 93       	push	r17
     6f6:	0f 93       	push	r16
     6f8:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
	nrk_wait_until_next_period();
     6fc:	0e 94 a4 1b 	call	0x3748	; 0x3748 <nrk_wait_until_next_period>
	cnt++;
     700:	21 96       	adiw	r28, 0x01	; 1
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	ee cf       	rjmp	.-36     	; 0x6e8 <Task4+0x24>

0000070c <nrk_create_taskset>:
	}
}

void
nrk_create_taskset()
{
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	cf 93       	push	r28
  nrk_task_set_entry_function( &TaskOne, Task1);
     71e:	69 ea       	ldi	r22, 0xA9	; 169
     720:	72 e0       	ldi	r23, 0x02	; 2
     722:	8c ea       	ldi	r24, 0xAC	; 172
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     72a:	40 e8       	ldi	r20, 0x80	; 128
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	6e e7       	ldi	r22, 0x7E	; 126
     730:	75 e0       	ldi	r23, 0x05	; 5
     732:	8c ea       	ldi	r24, 0xAC	; 172
     734:	94 e0       	ldi	r25, 0x04	; 4
     736:	0e 94 46 29 	call	0x528c	; 0x528c <nrk_task_set_stk>
  TaskOne.prio = 1;
     73a:	c1 e0       	ldi	r28, 0x01	; 1
     73c:	c0 93 b4 04 	sts	0x04B4, r28
  TaskOne.FirstActivation = TRUE;
     740:	c0 93 b3 04 	sts	0x04B3, r28
  TaskOne.Type = BASIC_TASK;
     744:	c0 93 b5 04 	sts	0x04B5, r28
  TaskOne.SchType = PREEMPTIVE;
     748:	c0 93 b6 04 	sts	0x04B6, r28
  TaskOne.period.secs = 0;
     74c:	10 92 b7 04 	sts	0x04B7, r1
     750:	10 92 b8 04 	sts	0x04B8, r1
     754:	10 92 b9 04 	sts	0x04B9, r1
     758:	10 92 ba 04 	sts	0x04BA, r1
  TaskOne.period.nano_secs = 250*NANOS_PER_MS;
     75c:	80 e8       	ldi	r24, 0x80	; 128
     75e:	92 eb       	ldi	r25, 0xB2	; 178
     760:	a6 ee       	ldi	r26, 0xE6	; 230
     762:	be e0       	ldi	r27, 0x0E	; 14
     764:	80 93 bb 04 	sts	0x04BB, r24
     768:	90 93 bc 04 	sts	0x04BC, r25
     76c:	a0 93 bd 04 	sts	0x04BD, r26
     770:	b0 93 be 04 	sts	0x04BE, r27
  TaskOne.cpu_reserve.secs = 1;
     774:	81 2c       	mov	r8, r1
     776:	91 2c       	mov	r9, r1
     778:	54 01       	movw	r10, r8
     77a:	83 94       	inc	r8
     77c:	80 92 bf 04 	sts	0x04BF, r8
     780:	90 92 c0 04 	sts	0x04C0, r9
     784:	a0 92 c1 04 	sts	0x04C1, r10
     788:	b0 92 c2 04 	sts	0x04C2, r11
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	90 ef       	ldi	r25, 0xF0	; 240
     790:	aa ef       	ldi	r26, 0xFA	; 250
     792:	b2 e0       	ldi	r27, 0x02	; 2
     794:	80 93 c3 04 	sts	0x04C3, r24
     798:	90 93 c4 04 	sts	0x04C4, r25
     79c:	a0 93 c5 04 	sts	0x04C5, r26
     7a0:	b0 93 c6 04 	sts	0x04C6, r27
  TaskOne.offset.secs = 0;
     7a4:	10 92 c7 04 	sts	0x04C7, r1
     7a8:	10 92 c8 04 	sts	0x04C8, r1
     7ac:	10 92 c9 04 	sts	0x04C9, r1
     7b0:	10 92 ca 04 	sts	0x04CA, r1
  TaskOne.offset.nano_secs= 0;
     7b4:	10 92 cb 04 	sts	0x04CB, r1
     7b8:	10 92 cc 04 	sts	0x04CC, r1
     7bc:	10 92 cd 04 	sts	0x04CD, r1
     7c0:	10 92 ce 04 	sts	0x04CE, r1
  nrk_activate_task (&TaskOne);
     7c4:	8c ea       	ldi	r24, 0xAC	; 172
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	0e 94 12 1b 	call	0x3624	; 0x3624 <nrk_activate_task>

  nrk_task_set_entry_function( &TaskTwo, Task2);
     7cc:	6a e1       	ldi	r22, 0x1A	; 26
     7ce:	73 e0       	ldi	r23, 0x03	; 3
     7d0:	89 e9       	ldi	r24, 0x99	; 153
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	67 ed       	ldi	r22, 0xD7	; 215
     7de:	74 e0       	ldi	r23, 0x04	; 4
     7e0:	89 e9       	ldi	r24, 0x99	; 153
     7e2:	97 e0       	ldi	r25, 0x07	; 7
     7e4:	0e 94 46 29 	call	0x528c	; 0x528c <nrk_task_set_stk>
  TaskTwo.prio = 2;
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	80 93 a1 07 	sts	0x07A1, r24
  TaskTwo.FirstActivation = TRUE;
     7ee:	c0 93 a0 07 	sts	0x07A0, r28
  TaskTwo.Type = BASIC_TASK;
     7f2:	c0 93 a2 07 	sts	0x07A2, r28
  TaskTwo.SchType = PREEMPTIVE;
     7f6:	c0 93 a3 07 	sts	0x07A3, r28
  TaskTwo.period.secs = 0;
     7fa:	10 92 a4 07 	sts	0x07A4, r1
     7fe:	10 92 a5 07 	sts	0x07A5, r1
     802:	10 92 a6 07 	sts	0x07A6, r1
     806:	10 92 a7 07 	sts	0x07A7, r1
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	95 e6       	ldi	r25, 0x65	; 101
     80e:	ad ec       	ldi	r26, 0xCD	; 205
     810:	bd e1       	ldi	r27, 0x1D	; 29
     812:	80 93 a8 07 	sts	0x07A8, r24
     816:	90 93 a9 07 	sts	0x07A9, r25
     81a:	a0 93 aa 07 	sts	0x07AA, r26
     81e:	b0 93 ab 07 	sts	0x07AB, r27
  TaskTwo.cpu_reserve.secs = 0;
     822:	10 92 ac 07 	sts	0x07AC, r1
     826:	10 92 ad 07 	sts	0x07AD, r1
     82a:	10 92 ae 07 	sts	0x07AE, r1
     82e:	10 92 af 07 	sts	0x07AF, r1
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     832:	c1 2c       	mov	r12, r1
     834:	21 ee       	ldi	r18, 0xE1	; 225
     836:	d2 2e       	mov	r13, r18
     838:	25 ef       	ldi	r18, 0xF5	; 245
     83a:	e2 2e       	mov	r14, r18
     83c:	25 e0       	ldi	r18, 0x05	; 5
     83e:	f2 2e       	mov	r15, r18
     840:	c0 92 b0 07 	sts	0x07B0, r12
     844:	d0 92 b1 07 	sts	0x07B1, r13
     848:	e0 92 b2 07 	sts	0x07B2, r14
     84c:	f0 92 b3 07 	sts	0x07B3, r15
  TaskTwo.offset.secs = 0;
     850:	10 92 b4 07 	sts	0x07B4, r1
     854:	10 92 b5 07 	sts	0x07B5, r1
     858:	10 92 b6 07 	sts	0x07B6, r1
     85c:	10 92 b7 07 	sts	0x07B7, r1
  TaskTwo.offset.nano_secs= 0;
     860:	10 92 b8 07 	sts	0x07B8, r1
     864:	10 92 b9 07 	sts	0x07B9, r1
     868:	10 92 ba 07 	sts	0x07BA, r1
     86c:	10 92 bb 07 	sts	0x07BB, r1
  nrk_activate_task (&TaskTwo);
     870:	89 e9       	ldi	r24, 0x99	; 153
     872:	97 e0       	ldi	r25, 0x07	; 7
     874:	0e 94 12 1b 	call	0x3624	; 0x3624 <nrk_activate_task>


  nrk_task_set_entry_function( &TaskThree, Task3);
     878:	6e e3       	ldi	r22, 0x3E	; 62
     87a:	73 e0       	ldi	r23, 0x03	; 3
     87c:	8b e5       	ldi	r24, 0x5B	; 91
     87e:	95 e0       	ldi	r25, 0x05	; 5
     880:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
     884:	40 e8       	ldi	r20, 0x80	; 128
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	6a e2       	ldi	r22, 0x2A	; 42
     88a:	74 e0       	ldi	r23, 0x04	; 4
     88c:	8b e5       	ldi	r24, 0x5B	; 91
     88e:	95 e0       	ldi	r25, 0x05	; 5
     890:	0e 94 46 29 	call	0x528c	; 0x528c <nrk_task_set_stk>
  TaskThree.prio = 3;
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	80 93 63 05 	sts	0x0563, r24
  TaskThree.FirstActivation = TRUE;
     89a:	c0 93 62 05 	sts	0x0562, r28
  TaskThree.Type = BASIC_TASK;
     89e:	c0 93 64 05 	sts	0x0564, r28
  TaskThree.SchType = PREEMPTIVE;
     8a2:	c0 93 65 05 	sts	0x0565, r28
  TaskThree.period.secs = 1;
     8a6:	80 92 66 05 	sts	0x0566, r8
     8aa:	90 92 67 05 	sts	0x0567, r9
     8ae:	a0 92 68 05 	sts	0x0568, r10
     8b2:	b0 92 69 05 	sts	0x0569, r11
  TaskThree.period.nano_secs = 0;
     8b6:	10 92 6a 05 	sts	0x056A, r1
     8ba:	10 92 6b 05 	sts	0x056B, r1
     8be:	10 92 6c 05 	sts	0x056C, r1
     8c2:	10 92 6d 05 	sts	0x056D, r1
  TaskThree.cpu_reserve.secs = 0;
     8c6:	10 92 6e 05 	sts	0x056E, r1
     8ca:	10 92 6f 05 	sts	0x056F, r1
     8ce:	10 92 70 05 	sts	0x0570, r1
     8d2:	10 92 71 05 	sts	0x0571, r1
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     8d6:	c0 92 72 05 	sts	0x0572, r12
     8da:	d0 92 73 05 	sts	0x0573, r13
     8de:	e0 92 74 05 	sts	0x0574, r14
     8e2:	f0 92 75 05 	sts	0x0575, r15
  TaskThree.offset.secs = 0;
     8e6:	10 92 76 05 	sts	0x0576, r1
     8ea:	10 92 77 05 	sts	0x0577, r1
     8ee:	10 92 78 05 	sts	0x0578, r1
     8f2:	10 92 79 05 	sts	0x0579, r1
  TaskThree.offset.nano_secs= 0;
     8f6:	10 92 7a 05 	sts	0x057A, r1
     8fa:	10 92 7b 05 	sts	0x057B, r1
     8fe:	10 92 7c 05 	sts	0x057C, r1
     902:	10 92 7d 05 	sts	0x057D, r1
  nrk_activate_task (&TaskThree);
     906:	8b e5       	ldi	r24, 0x5B	; 91
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	0e 94 12 1b 	call	0x3624	; 0x3624 <nrk_activate_task>


  nrk_task_set_entry_function( &TaskFour, Task4);
     90e:	62 e6       	ldi	r22, 0x62	; 98
     910:	73 e0       	ldi	r23, 0x03	; 3
     912:	85 e0       	ldi	r24, 0x05	; 5
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	69 e1       	ldi	r22, 0x19	; 25
     920:	77 e0       	ldi	r23, 0x07	; 7
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	0e 94 46 29 	call	0x528c	; 0x528c <nrk_task_set_stk>
  TaskFour.prio = 4;
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	80 93 0d 04 	sts	0x040D, r24
  TaskFour.FirstActivation = TRUE;
     930:	c0 93 0c 04 	sts	0x040C, r28
  TaskFour.Type = BASIC_TASK;
     934:	c0 93 0e 04 	sts	0x040E, r28
  TaskFour.SchType = PREEMPTIVE;
     938:	c0 93 0f 04 	sts	0x040F, r28
  TaskFour.period.secs = 2;
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	80 93 10 04 	sts	0x0410, r24
     948:	90 93 11 04 	sts	0x0411, r25
     94c:	a0 93 12 04 	sts	0x0412, r26
     950:	b0 93 13 04 	sts	0x0413, r27
  TaskFour.period.nano_secs = 0;
     954:	10 92 14 04 	sts	0x0414, r1
     958:	10 92 15 04 	sts	0x0415, r1
     95c:	10 92 16 04 	sts	0x0416, r1
     960:	10 92 17 04 	sts	0x0417, r1
  TaskFour.cpu_reserve.secs = 0;
     964:	10 92 18 04 	sts	0x0418, r1
     968:	10 92 19 04 	sts	0x0419, r1
     96c:	10 92 1a 04 	sts	0x041A, r1
     970:	10 92 1b 04 	sts	0x041B, r1
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     974:	c0 92 1c 04 	sts	0x041C, r12
     978:	d0 92 1d 04 	sts	0x041D, r13
     97c:	e0 92 1e 04 	sts	0x041E, r14
     980:	f0 92 1f 04 	sts	0x041F, r15
  TaskFour.offset.secs = 0;
     984:	10 92 20 04 	sts	0x0420, r1
     988:	10 92 21 04 	sts	0x0421, r1
     98c:	10 92 22 04 	sts	0x0422, r1
     990:	10 92 23 04 	sts	0x0423, r1
  TaskFour.offset.nano_secs= 0;
     994:	10 92 24 04 	sts	0x0424, r1
     998:	10 92 25 04 	sts	0x0425, r1
     99c:	10 92 26 04 	sts	0x0426, r1
     9a0:	10 92 27 04 	sts	0x0427, r1
  nrk_activate_task (&TaskFour);
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	94 e0       	ldi	r25, 0x04	; 4


}
     9a8:	cf 91       	pop	r28
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
  TaskFour.period.nano_secs = 0;
  TaskFour.cpu_reserve.secs = 0;
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskFour.offset.secs = 0;
  TaskFour.offset.nano_secs= 0;
  nrk_activate_task (&TaskFour);
     9ba:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <nrk_activate_task>

000009be <kill_stack>:


}

uint8_t kill_stack(uint8_t val)
{
     9be:	bf 92       	push	r11
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	2a 97       	sbiw	r28, 0x0a	; 10
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	b8 2e       	mov	r11, r24
     9e2:	fe 01       	movw	r30, r28
     9e4:	31 96       	adiw	r30, 0x01	; 1
char bad_memory[10];
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	91 93       	st	Z+, r25
     9ea:	9f 5f       	subi	r25, 0xFF	; 255
     9ec:	9a 30       	cpi	r25, 0x0A	; 10
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <kill_stack+0x2a>
     9f0:	6e 01       	movw	r12, r28
     9f2:	8b e0       	ldi	r24, 0x0B	; 11
     9f4:	c8 0e       	add	r12, r24
     9f6:	d1 1c       	adc	r13, r1
     9f8:	8e 01       	movw	r16, r28
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
     9fe:	33 ec       	ldi	r19, 0xC3	; 195
     a00:	e3 2e       	mov	r14, r19
     a02:	33 e0       	ldi	r19, 0x03	; 3
     a04:	f3 2e       	mov	r15, r19
     a06:	f8 01       	movw	r30, r16
     a08:	81 91       	ld	r24, Z+
     a0a:	8f 01       	movw	r16, r30
     a0c:	1f 92       	push	r1
     a0e:	8f 93       	push	r24
     a10:	ff 92       	push	r15
     a12:	ef 92       	push	r14
     a14:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0c 15       	cp	r16, r12
     a22:	1d 05       	cpc	r17, r13
     a24:	81 f7       	brne	.-32     	; 0xa06 <kill_stack+0x48>
   printf( "Die Stack %d\r\n",val );
     a26:	1f 92       	push	r1
     a28:	bf 92       	push	r11
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	33 e0       	ldi	r19, 0x03	; 3
     a2e:	3f 93       	push	r19
     a30:	2f 93       	push	r18
     a32:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
if(val>1) kill_stack(val-1);
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	fb 15       	cp	r31, r11
     a42:	20 f4       	brcc	.+8      	; 0xa4c <kill_stack+0x8e>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	8b 0d       	add	r24, r11
     a48:	0e 94 df 04 	call	0x9be	; 0x9be <kill_stack>
return 0;
}
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	2a 96       	adiw	r28, 0x0a	; 10
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	08 95       	ret

00000a6e <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     a6e:	90 91 41 01 	lds	r25, 0x0141
     a72:	9f 71       	andi	r25, 0x1F	; 31
     a74:	9f 31       	cpi	r25, 0x1F	; 31
     a76:	d9 f3       	breq	.-10     	; 0xa6e <rf_cmd>
		continue;
	TRX_STATE = cmd;
     a78:	80 93 42 01 	sts	0x0142, r24
     a7c:	08 95       	ret

00000a7e <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 c2 07 	sts	0x07C2, r24
     a84:	08 95       	ret

00000a86 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     a86:	10 92 c2 07 	sts	0x07C2, r1
     a8a:	08 95       	ret

00000a8c <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     a8c:	80 91 41 01 	lds	r24, 0x0141
     a90:	8f 71       	andi	r24, 0x1F	; 31
     a92:	8f 31       	cpi	r24, 0x1F	; 31
     a94:	d9 f3       	breq	.-10     	; 0xa8c <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     a96:	80 91 41 01 	lds	r24, 0x0141
     a9a:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     a9c:	e1 f0       	breq	.+56     	; 0xad6 <rf_power_down+0x4a>
     a9e:	8f 30       	cpi	r24, 0x0F	; 15
     aa0:	d1 f0       	breq	.+52     	; 0xad6 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     aa2:	80 91 41 01 	lds	r24, 0x0141
     aa6:	8f 71       	andi	r24, 0x1F	; 31
     aa8:	88 30       	cpi	r24, 0x08	; 8
     aaa:	31 f4       	brne	.+12     	; 0xab8 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     aac:	80 91 39 01 	lds	r24, 0x0139
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	80 93 39 01 	sts	0x0139, r24
     ab6:	0b c0       	rjmp	.+22     	; 0xace <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     abe:	80 91 41 01 	lds	r24, 0x0141
     ac2:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     ac4:	88 30       	cpi	r24, 0x08	; 8
     ac6:	d9 f7       	brne	.-10     	; 0xabe <rf_power_down+0x32>
     ac8:	f1 cf       	rjmp	.-30     	; 0xaac <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     aca:	8f 30       	cpi	r24, 0x0F	; 15
     acc:	21 f0       	breq	.+8      	; 0xad6 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     ace:	80 91 41 01 	lds	r24, 0x0141
     ad2:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     ad4:	d1 f7       	brne	.-12     	; 0xaca <rf_power_down+0x3e>
     ad6:	08 95       	ret

00000ad8 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     ad8:	80 91 41 01 	lds	r24, 0x0141
     adc:	8f 71       	andi	r24, 0x1F	; 31
     ade:	8f 31       	cpi	r24, 0x1F	; 31
     ae0:	d9 f3       	breq	.-10     	; 0xad8 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     ae2:	80 91 41 01 	lds	r24, 0x0141
     ae6:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     ae8:	11 f0       	breq	.+4      	; 0xaee <rf_power_up+0x16>
     aea:	8f 30       	cpi	r24, 0x0F	; 15
     aec:	51 f4       	brne	.+20     	; 0xb02 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     aee:	80 91 39 01 	lds	r24, 0x0139
     af2:	8d 7f       	andi	r24, 0xFD	; 253
     af4:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     af8:	80 91 41 01 	lds	r24, 0x0141
     afc:	8f 71       	andi	r24, 0x1F	; 31
     afe:	88 30       	cpi	r24, 0x08	; 8
     b00:	d9 f7       	brne	.-10     	; 0xaf8 <rf_power_up+0x20>
     b02:	08 95       	ret

00000b04 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     b04:	e5 e4       	ldi	r30, 0x45	; 69
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	90 81       	ld	r25, Z
     b0a:	90 7f       	andi	r25, 0xF0	; 240
     b0c:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     b0e:	90 81       	ld	r25, Z
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	89 2b       	or	r24, r25
     b14:	80 83       	st	Z, r24
     b16:	08 95       	ret

00000b18 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     b18:	e7 e5       	ldi	r30, 0x57	; 87
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	80 81       	ld	r24, Z
     b1e:	8d 7f       	andi	r24, 0xFD	; 253
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     b24:	e7 e5       	ldi	r30, 0x57	; 87
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	80 81       	ld	r24, Z
     b2a:	82 60       	ori	r24, 0x02	; 2
     b2c:	80 83       	st	Z, r24
     b2e:	08 95       	ret

00000b30 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     b30:	ee e6       	ldi	r30, 0x6E	; 110
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	80 81       	ld	r24, Z
     b36:	8f 7e       	andi	r24, 0xEF	; 239
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     b3c:	ee e6       	ldi	r30, 0x6E	; 110
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	80 81       	ld	r24, Z
     b42:	80 61       	ori	r24, 0x10	; 16
     b44:	80 83       	st	Z, r24
     b46:	08 95       	ret

00000b48 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     b48:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     b4c:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     b50:	90 93 cc 07 	sts	0x07CC, r25
     b54:	80 93 cb 07 	sts	0x07CB, r24
     b58:	08 95       	ret

00000b5a <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     b5a:	90 93 c6 07 	sts	0x07C6, r25
     b5e:	80 93 c5 07 	sts	0x07C5, r24
	PHY_CC_CCA &= ~(0x1F);
     b62:	e8 e4       	ldi	r30, 0x48	; 72
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	80 81       	ld	r24, Z
     b68:	80 7e       	andi	r24, 0xE0	; 224
     b6a:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     b6c:	80 81       	ld	r24, Z
     b6e:	68 2b       	or	r22, r24
     b70:	60 83       	st	Z, r22
     b72:	08 95       	ret

00000b74 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     b74:	90 93 03 04 	sts	0x0403, r25
     b78:	80 93 02 04 	sts	0x0402, r24
     b7c:	08 95       	ret

00000b7e <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     b7e:	90 93 01 04 	sts	0x0401, r25
     b82:	80 93 00 04 	sts	0x0400, r24
     b86:	08 95       	ret

00000b88 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     b8e:	70 e2       	ldi	r23, 0x20	; 32
     b90:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     b94:	70 ec       	ldi	r23, 0xC0	; 192
     b96:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     b9a:	60 62       	ori	r22, 0x20	; 32
     b9c:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     ba0:	65 ec       	ldi	r22, 0xC5	; 197
     ba2:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     ba6:	67 ea       	ldi	r22, 0xA7	; 167
     ba8:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     bac:	60 e8       	ldi	r22, 0x80	; 128
     bae:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     bb2:	20 93 60 01 	sts	0x0160, r18
     bb6:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     bba:	40 93 62 01 	sts	0x0162, r20
     bbe:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     bc2:	e6 e4       	ldi	r30, 0x46	; 70
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	c0 81       	ld	r28, Z
     bc8:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     bca:	60 81       	ld	r22, Z
     bcc:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     bce:	c2 95       	swap	r28
     bd0:	c6 95       	lsr	r28
     bd2:	c7 70       	andi	r28, 0x07	; 7
     bd4:	70 e4       	ldi	r23, 0x40	; 64
     bd6:	c7 9f       	mul	r28, r23
     bd8:	e0 01       	movw	r28, r0
     bda:	11 24       	eor	r1, r1
     bdc:	12 95       	swap	r17
     bde:	16 95       	lsr	r17
     be0:	13 70       	andi	r17, 0x03	; 3
     be2:	1c 2b       	or	r17, r28
     be4:	a2 95       	swap	r26
     be6:	a6 95       	lsr	r26
     be8:	a3 70       	andi	r26, 0x03	; 3
     bea:	70 e1       	ldi	r23, 0x10	; 16
     bec:	a7 9f       	mul	r26, r23
     bee:	d0 01       	movw	r26, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     bf4:	62 95       	swap	r22
     bf6:	66 95       	lsr	r22
     bf8:	63 70       	andi	r22, 0x03	; 3
     bfa:	a4 e0       	ldi	r26, 0x04	; 4
     bfc:	6a 9f       	mul	r22, r26
     bfe:	b0 01       	movw	r22, r0
     c00:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     c02:	16 2b       	or	r17, r22
     c04:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     c08:	60 81       	ld	r22, Z
     c0a:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     c0c:	72 95       	swap	r23
     c0e:	76 95       	lsr	r23
     c10:	73 70       	andi	r23, 0x03	; 3
     c12:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     c14:	62 95       	swap	r22
     c16:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     c18:	67 2b       	or	r22, r23
     c1a:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     c1e:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     c22:	6f ef       	ldi	r22, 0xFF	; 255
     c24:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     c28:	90 93 c6 07 	sts	0x07C6, r25
     c2c:	80 93 c5 07 	sts	0x07C5, r24
	rfSettings.txSeqNumber = 0;
     c30:	10 92 c7 07 	sts	0x07C7, r1
	rfSettings.ackReceived = 0;
     c34:	10 92 c8 07 	sts	0x07C8, r1
	rfSettings.panId = panId;
     c38:	50 93 ca 07 	sts	0x07CA, r21
     c3c:	40 93 c9 07 	sts	0x07C9, r20
	rfSettings.myAddr = myAddr;
     c40:	30 93 cc 07 	sts	0x07CC, r19
     c44:	20 93 cb 07 	sts	0x07CB, r18
	rfSettings.receiveOn = 0;
     c48:	10 92 cd 07 	sts	0x07CD, r1

	rf_ready = 1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 e7 07 	sts	0x07E7, r24
	rx_ready = 0;
     c52:	10 92 06 08 	sts	0x0806, r1
	tx_done = 0;
     c56:	10 92 d6 07 	sts	0x07D6, r1

	use_glossy = 0;
     c5a:	10 92 c2 07 	sts	0x07C2, r1

} // rf_init() 
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	08 95       	ret

00000c66 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <rf_cmd>

00000c6c <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     c6c:	86 e1       	ldi	r24, 0x16	; 22
     c6e:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <rf_cmd>

00000c72 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>
	rx_ready = 0;
     c78:	10 92 06 08 	sts	0x0806, r1
     c7c:	08 95       	ret

00000c7e <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     c7e:	3f 92       	push	r3
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     ca4:	80 91 e7 07 	lds	r24, 0x07E7
     ca8:	81 11       	cpse	r24, r1
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	0f c1       	rjmp	.+542    	; 0xece <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     cb2:	80 91 c7 07 	lds	r24, 0x07C7
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 c7 07 	sts	0x07C7, r24
	machead->fcf = fcf;
     cbc:	80 91 81 01 	lds	r24, 0x0181
     cc0:	80 7e       	andi	r24, 0xE0	; 224
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	90 fb       	bst	r25, 0
     cc6:	85 f9       	bld	r24, 5
     cc8:	8f 73       	andi	r24, 0x3F	; 63
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	80 93 81 01 	sts	0x0181, r24
     cd0:	88 e8       	ldi	r24, 0x88	; 136
     cd2:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     cd6:	80 91 c2 07 	lds	r24, 0x07C2
     cda:	88 23       	and	r24, r24
     cdc:	61 f0       	breq	.+24     	; 0xcf6 <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     ce4:	8a ea       	ldi	r24, 0xAA	; 170
     ce6:	9a ea       	ldi	r25, 0xAA	; 170
     ce8:	90 93 89 01 	sts	0x0189, r25
     cec:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     cf6:	80 91 c7 07 	lds	r24, 0x07C7
     cfa:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     cfe:	20 91 61 01 	lds	r18, 0x0161
     d02:	80 91 60 01 	lds	r24, 0x0160
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	92 2b       	or	r25, r18
     d0a:	90 93 89 01 	sts	0x0189, r25
     d0e:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     d12:	88 81       	ld	r24, Y
     d14:	99 81       	ldd	r25, Y+1	; 0x01
     d16:	90 93 87 01 	sts	0x0187, r25
     d1a:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     d1e:	20 91 63 01 	lds	r18, 0x0163
     d22:	80 91 62 01 	lds	r24, 0x0162
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	92 2b       	or	r25, r18
     d2a:	90 93 85 01 	sts	0x0185, r25
     d2e:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     d32:	4a 81       	ldd	r20, Y+2	; 0x02
     d34:	55 27       	eor	r21, r21
     d36:	47 fd       	sbrc	r20, 7
     d38:	50 95       	com	r21
     d3a:	6b 81       	ldd	r22, Y+3	; 0x03
     d3c:	7c 81       	ldd	r23, Y+4	; 0x04
     d3e:	8a e8       	ldi	r24, 0x8A	; 138
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 32 2c 	call	0x5864	; 0x5864 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	85 5f       	subi	r24, 0xF5	; 245
     d4a:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     d4e:	80 91 41 01 	lds	r24, 0x0141
     d52:	98 2f       	mov	r25, r24
     d54:	9f 71       	andi	r25, 0x1F	; 31
     d56:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     d58:	8f 70       	andi	r24, 0x0F	; 15
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	98 0f       	add	r25, r24
     d5e:	92 30       	cpi	r25, 0x02	; 2
     d60:	b0 f3       	brcs	.-20     	; 0xd4e <rf_tx_packet_repeat+0xd0>
     d62:	9f e1       	ldi	r25, 0x1F	; 31
     d64:	39 16       	cp	r3, r25
     d66:	99 f3       	breq	.-26     	; 0xd4e <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     d68:	98 ef       	ldi	r25, 0xF8	; 248
     d6a:	93 0d       	add	r25, r3
     d6c:	92 30       	cpi	r25, 0x02	; 2
     d6e:	18 f0       	brcs	.+6      	; 0xd76 <rf_tx_packet_repeat+0xf8>
     d70:	86 30       	cpi	r24, 0x06	; 6
     d72:	09 f0       	breq	.+2      	; 0xd76 <rf_tx_packet_repeat+0xf8>
     d74:	9b cf       	rjmp	.-202    	; 0xcac <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     d76:	86 e1       	ldi	r24, 0x16	; 22
     d78:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	81 11       	cpse	r24, r1
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     d82:	89 e0       	ldi	r24, 0x09	; 9
     d84:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>
	if(pRTI->ackRequest)
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	88 23       	and	r24, r24
     d8c:	91 f0       	breq	.+36     	; 0xdb2 <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
     d8e:	89 e1       	ldi	r24, 0x19	; 25
     d90:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     d96:	80 91 48 01 	lds	r24, 0x0148
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     da0:	80 91 41 01 	lds	r24, 0x0141
     da4:	87 ff       	sbrs	r24, 7
     da6:	fc cf       	rjmp	.-8      	; 0xda0 <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     da8:	80 91 41 01 	lds	r24, 0x0141
     dac:	86 ff       	sbrs	r24, 6
     dae:	7e cf       	rjmp	.-260    	; 0xcac <rf_tx_packet_repeat+0x2e>
     db0:	e8 cf       	rjmp	.-48     	; 0xd82 <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
     db2:	61 14       	cp	r6, r1
     db4:	71 04       	cpc	r7, r1
     db6:	99 f1       	breq	.+102    	; 0xe1e <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
     db8:	8e ec       	ldi	r24, 0xCE	; 206
     dba:	97 e0       	ldi	r25, 0x07	; 7
     dbc:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
		target_t.secs = curr_t.secs;
     dc0:	80 91 ce 07 	lds	r24, 0x07CE
     dc4:	90 91 cf 07 	lds	r25, 0x07CF
     dc8:	a0 91 d0 07 	lds	r26, 0x07D0
     dcc:	b0 91 d1 07 	lds	r27, 0x07D1
     dd0:	80 93 e8 07 	sts	0x07E8, r24
     dd4:	90 93 e9 07 	sts	0x07E9, r25
     dd8:	a0 93 ea 07 	sts	0x07EA, r26
     ddc:	b0 93 eb 07 	sts	0x07EB, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     de0:	d3 01       	movw	r26, r6
     de2:	20 e4       	ldi	r18, 0x40	; 64
     de4:	32 e4       	ldi	r19, 0x42	; 66
     de6:	4f e0       	ldi	r20, 0x0F	; 15
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 6d 2b 	call	0x56da	; 0x56da <__muluhisi3>
     dee:	00 91 d2 07 	lds	r16, 0x07D2
     df2:	10 91 d3 07 	lds	r17, 0x07D3
     df6:	20 91 d4 07 	lds	r18, 0x07D4
     dfa:	30 91 d5 07 	lds	r19, 0x07D5
     dfe:	60 0f       	add	r22, r16
     e00:	71 1f       	adc	r23, r17
     e02:	82 1f       	adc	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	60 93 ec 07 	sts	0x07EC, r22
     e0a:	70 93 ed 07 	sts	0x07ED, r23
     e0e:	80 93 ee 07 	sts	0x07EE, r24
     e12:	90 93 ef 07 	sts	0x07EF, r25
		nrk_time_compact_nanos(&target_t);
     e16:	88 ee       	ldi	r24, 0xE8	; 232
     e18:	97 e0       	ldi	r25, 0x07	; 7
     e1a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     e1e:	10 92 d6 07 	sts	0x07D6, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     e28:	41 2c       	mov	r4, r1
     e2a:	51 2c       	mov	r5, r1
     e2c:	80 91 d6 07 	lds	r24, 0x07D6
     e30:	81 11       	cpse	r24, r1
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <rf_tx_packet_repeat+0x1c6>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	48 1a       	sub	r4, r24
     e38:	58 0a       	sbc	r5, r24
     e3a:	98 ee       	ldi	r25, 0xE8	; 232
     e3c:	49 16       	cp	r4, r25
     e3e:	9d ef       	ldi	r25, 0xFD	; 253
     e40:	59 06       	cpc	r5, r25
     e42:	a1 f7       	brne	.-24     	; 0xe2c <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     e44:	61 14       	cp	r6, r1
     e46:	71 04       	cpc	r7, r1
     e48:	21 f4       	brne	.+8      	; 0xe52 <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	81 11       	cpse	r24, r1
     e4e:	2d c0       	rjmp	.+90     	; 0xeaa <rf_tx_packet_repeat+0x22c>
     e50:	34 c0       	rjmp	.+104    	; 0xeba <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
     e52:	8e ec       	ldi	r24, 0xCE	; 206
     e54:	97 e0       	ldi	r25, 0x07	; 7
     e56:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     e5a:	80 90 ce 07 	lds	r8, 0x07CE
     e5e:	90 90 cf 07 	lds	r9, 0x07CF
     e62:	a0 90 d0 07 	lds	r10, 0x07D0
     e66:	b0 90 d1 07 	lds	r11, 0x07D1
     e6a:	c0 90 d2 07 	lds	r12, 0x07D2
     e6e:	d0 90 d3 07 	lds	r13, 0x07D3
     e72:	e0 90 d4 07 	lds	r14, 0x07D4
     e76:	f0 90 d5 07 	lds	r15, 0x07D5
     e7a:	00 91 e8 07 	lds	r16, 0x07E8
     e7e:	10 91 e9 07 	lds	r17, 0x07E9
     e82:	20 91 ea 07 	lds	r18, 0x07EA
     e86:	30 91 eb 07 	lds	r19, 0x07EB
     e8a:	40 91 ec 07 	lds	r20, 0x07EC
     e8e:	50 91 ed 07 	lds	r21, 0x07ED
     e92:	60 91 ee 07 	lds	r22, 0x07EE
     e96:	70 91 ef 07 	lds	r23, 0x07EF
     e9a:	87 e0       	ldi	r24, 0x07	; 7
     e9c:	98 e0       	ldi	r25, 0x08	; 8
     e9e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <nrk_time_sub>
     ea2:	8f 3f       	cpi	r24, 0xFF	; 255
     ea4:	09 f0       	breq	.+2      	; 0xea8 <rf_tx_packet_repeat+0x22a>
     ea6:	bb cf       	rjmp	.-138    	; 0xe1e <rf_tx_packet_repeat+0x1a0>
     ea8:	d0 cf       	rjmp	.-96     	; 0xe4a <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     eaa:	80 91 42 01 	lds	r24, 0x0142
     eae:	82 95       	swap	r24
     eb0:	86 95       	lsr	r24
     eb2:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     eb4:	11 f0       	breq	.+4      	; 0xeba <rf_tx_packet_repeat+0x23c>
     eb6:	cf ef       	ldi	r28, 0xFF	; 255
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     eba:	88 ee       	ldi	r24, 0xE8	; 232
     ebc:	48 16       	cp	r4, r24
     ebe:	8d ef       	ldi	r24, 0xFD	; 253
     ec0:	58 06       	cpc	r5, r24
     ec2:	c9 f3       	breq	.-14     	; 0xeb6 <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     ec4:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     ec6:	83 2d       	mov	r24, r3
     ec8:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     ecc:	8c 2f       	mov	r24, r28
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	9f 90       	pop	r9
     ee4:	8f 90       	pop	r8
     ee6:	7f 90       	pop	r7
     ee8:	6f 90       	pop	r6
     eea:	5f 90       	pop	r5
     eec:	4f 90       	pop	r4
     eee:	3f 90       	pop	r3
     ef0:	08 95       	ret

00000ef2 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <rf_tx_packet_repeat>

00000efa <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     efe:	80 91 e7 07 	lds	r24, 0x07E7
     f02:	88 23       	and	r24, r24
     f04:	21 f1       	breq	.+72     	; 0xf4e <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     f06:	80 91 41 01 	lds	r24, 0x0141
     f0a:	c8 2f       	mov	r28, r24
     f0c:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	98 0f       	add	r25, r24
     f14:	92 30       	cpi	r25, 0x02	; 2
     f16:	b8 f3       	brcs	.-18     	; 0xf06 <rf_cca_check+0xc>
     f18:	cf 31       	cpi	r28, 0x1F	; 31
     f1a:	a9 f3       	breq	.-22     	; 0xf06 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     f1c:	c8 30       	cpi	r28, 0x08	; 8
     f1e:	11 f0       	breq	.+4      	; 0xf24 <rf_cca_check+0x2a>
     f20:	86 30       	cpi	r24, 0x06	; 6
     f22:	a9 f4       	brne	.+42     	; 0xf4e <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     f24:	86 e1       	ldi	r24, 0x16	; 22
     f26:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     f2a:	80 91 48 01 	lds	r24, 0x0148
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     f34:	80 91 41 01 	lds	r24, 0x0141
     f38:	87 ff       	sbrs	r24, 7
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     f3c:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     f40:	8c 2f       	mov	r24, r28
     f42:	0e 94 37 05 	call	0xa6e	; 0xa6e <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     f46:	d6 fb       	bst	r29, 6
     f48:	88 27       	eor	r24, r24
     f4a:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     f56:	80 91 e7 07 	lds	r24, 0x07E7
     f5a:	88 23       	and	r24, r24
     f5c:	09 f4       	brne	.+2      	; 0xf60 <rf_rx_packet_nonblock+0xa>
     f5e:	9f c0       	rjmp	.+318    	; 0x109e <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
     f60:	80 91 06 08 	lds	r24, 0x0806
     f64:	88 23       	and	r24, r24
     f66:	09 f4       	brne	.+2      	; 0xf6a <rf_rx_packet_nonblock+0x14>
     f68:	98 c0       	rjmp	.+304    	; 0x109a <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     f6a:	80 91 7b 01 	lds	r24, 0x017B
     f6e:	e0 91 c5 07 	lds	r30, 0x07C5
     f72:	f0 91 c6 07 	lds	r31, 0x07C6
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 97       	sbiw	r24, 0x02	; 2
     f7a:	24 81       	ldd	r18, Z+4	; 0x04
     f7c:	33 27       	eor	r19, r19
     f7e:	27 fd       	sbrc	r18, 7
     f80:	30 95       	com	r19
     f82:	28 17       	cp	r18, r24
     f84:	39 07       	cpc	r19, r25
     f86:	0c f4       	brge	.+2      	; 0xf8a <rf_rx_packet_nonblock+0x34>
     f88:	8a c0       	rjmp	.+276    	; 0x109e <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     f8a:	e0 91 c5 07 	lds	r30, 0x07C5
     f8e:	f0 91 c6 07 	lds	r31, 0x07C6
     f92:	80 91 82 01 	lds	r24, 0x0182
     f96:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     f98:	e0 91 c5 07 	lds	r30, 0x07C5
     f9c:	f0 91 c6 07 	lds	r31, 0x07C6
     fa0:	80 91 87 01 	lds	r24, 0x0187
     fa4:	90 91 88 01 	lds	r25, 0x0188
     fa8:	92 83       	std	Z+2, r25	; 0x02
     faa:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     fac:	e0 91 c5 07 	lds	r30, 0x07C5
     fb0:	f0 91 c6 07 	lds	r31, 0x07C6
     fb4:	80 91 7b 01 	lds	r24, 0x017B
     fb8:	8b 50       	subi	r24, 0x0B	; 11
     fba:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     fbc:	a0 91 c5 07 	lds	r26, 0x07C5
     fc0:	b0 91 c6 07 	lds	r27, 0x07C6
     fc4:	e0 91 c5 07 	lds	r30, 0x07C5
     fc8:	f0 91 c6 07 	lds	r31, 0x07C6
     fcc:	13 96       	adiw	r26, 0x03	; 3
     fce:	9c 91       	ld	r25, X
     fd0:	84 81       	ldd	r24, Z+4	; 0x04
     fd2:	89 17       	cp	r24, r25
     fd4:	3c f0       	brlt	.+14     	; 0xfe4 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     fd6:	e0 91 c5 07 	lds	r30, 0x07C5
     fda:	f0 91 c6 07 	lds	r31, 0x07C6
     fde:	83 81       	ldd	r24, Z+3	; 0x03
     fe0:	87 ff       	sbrs	r24, 7
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     fe4:	10 92 06 08 	sts	0x0806, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     fe8:	80 91 4c 01 	lds	r24, 0x014C
     fec:	8f 77       	andi	r24, 0x7F	; 127
     fee:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     ff2:	80 91 4c 01 	lds	r24, 0x014C
     ff6:	80 68       	ori	r24, 0x80	; 128
     ff8:	80 93 4c 01 	sts	0x014C, r24
     ffc:	50 c0       	rjmp	.+160    	; 0x109e <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     ffe:	a0 91 c5 07 	lds	r26, 0x07C5
    1002:	b0 91 c6 07 	lds	r27, 0x07C6
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1006:	e0 91 c5 07 	lds	r30, 0x07C5
    100a:	f0 91 c6 07 	lds	r31, 0x07C6
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	4c 91       	ld	r20, X
    1012:	55 27       	eor	r21, r21
    1014:	47 fd       	sbrc	r20, 7
    1016:	50 95       	com	r21
    1018:	69 e8       	ldi	r22, 0x89	; 137
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	85 81       	ldd	r24, Z+5	; 0x05
    101e:	96 81       	ldd	r25, Z+6	; 0x06
    1020:	0e 94 32 2c 	call	0x5864	; 0x5864 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1024:	e0 91 c5 07 	lds	r30, 0x07C5
    1028:	f0 91 c6 07 	lds	r31, 0x07C6
    102c:	80 91 80 01 	lds	r24, 0x0180
    1030:	85 fb       	bst	r24, 5
    1032:	88 27       	eor	r24, r24
    1034:	80 f9       	bld	r24, 0
    1036:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1038:	e0 91 c5 07 	lds	r30, 0x07C5
    103c:	f0 91 c6 07 	lds	r31, 0x07C6
    1040:	80 91 47 01 	lds	r24, 0x0147
    1044:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1046:	e0 91 c5 07 	lds	r30, 0x07C5
    104a:	f0 91 c6 07 	lds	r31, 0x07C6
    104e:	80 91 46 01 	lds	r24, 0x0146
    1052:	86 95       	lsr	r24
    1054:	86 95       	lsr	r24
    1056:	86 95       	lsr	r24
    1058:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    105a:	e0 91 c5 07 	lds	r30, 0x07C5
    105e:	f0 91 c6 07 	lds	r31, 0x07C6
    1062:	80 91 47 01 	lds	r24, 0x0147
    1066:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1068:	e0 91 c5 07 	lds	r30, 0x07C5
    106c:	f0 91 c6 07 	lds	r31, 0x07C6
    1070:	a0 91 7b 01 	lds	r26, 0x017B
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	a0 58       	subi	r26, 0x80	; 128
    1078:	be 4f       	sbci	r27, 0xFE	; 254
    107a:	8c 91       	ld	r24, X
    107c:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
    107e:	10 92 06 08 	sts	0x0806, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1082:	80 91 4c 01 	lds	r24, 0x014C
    1086:	8f 77       	andi	r24, 0x7F	; 127
    1088:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    108c:	80 91 4c 01 	lds	r24, 0x014C
    1090:	80 68       	ori	r24, 0x80	; 128
    1092:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    109e:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    10a0:	08 95       	ret

000010a2 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    10b4:	8f 91       	pop	r24
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 d6 07 	sts	0x07D6, r24
	IRQ_STATUS = (1 << TX_END);
    10d2:	80 e4       	ldi	r24, 0x40	; 64
    10d4:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    10d8:	8f 91       	pop	r24
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    10f6:	8f 91       	pop	r24
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1114:	8f 91       	pop	r24
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	0b b6       	in	r0, 0x3b	; 59
    112c:	0f 92       	push	r0
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    114c:	e0 91 02 04 	lds	r30, 0x0402
    1150:	f0 91 03 04 	lds	r31, 0x0403
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_59+0x3a>
		rx_start_func();
    1158:	09 95       	icall

	return;
}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0b be       	out	0x3b, r0	; 59
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1192:	8f 91       	pop	r24
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    11b0:	8f 91       	pop	r24
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    11bc:	e9 e4       	ldi	r30, 0x49	; 73
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	90 81       	ld	r25, Z
    11c2:	90 7f       	andi	r25, 0xF0	; 240
    11c4:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    11c6:	90 81       	ld	r25, Z
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	89 2b       	or	r24, r25
    11cc:	80 83       	st	Z, r24
    11ce:	08 95       	ret

000011d0 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    11d4:	08 95       	ret

000011d6 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    11d6:	08 95       	ret

000011d8 <rf_security_disable>:
}



void rf_security_disable()
{
    11d8:	08 95       	ret

000011da <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	08 95       	ret

000011de <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    11de:	80 91 c0 07 	lds	r24, 0x07C0
    11e2:	90 91 c1 07 	lds	r25, 0x07C1
    11e6:	08 95       	ret

000011e8 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret

000011ec <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    11ec:	08 95       	ret

000011ee <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	08 95       	ret

000011f2 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret

000011f6 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	08 95       	ret

000011fa <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    11fa:	08 95       	ret

000011fc <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    11fc:	08 95       	ret

000011fe <rf_test_mode>:
}



void rf_test_mode()
{
    11fe:	08 95       	ret

00001200 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1200:	08 95       	ret

00001202 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1202:	08 95       	ret

00001204 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1204:	08 95       	ret

00001206 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1206:	08 95       	ret

00001208 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1208:	08 95       	ret

0000120a <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f1 e0       	ldi	r31, 0x01	; 1
    120e:	80 81       	ld	r24, Z
    1210:	83 60       	ori	r24, 0x03	; 3
    1212:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1214:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1216:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1218:	8d b1       	in	r24, 0x0d	; 13
    121a:	80 6e       	ori	r24, 0xE0	; 224
    121c:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    121e:	8e b1       	in	r24, 0x0e	; 14
    1220:	80 6e       	ori	r24, 0xE0	; 224
    1222:	8e b9       	out	0x0e, r24	; 14
    1224:	08 95       	ret

00001226 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f1 e0       	ldi	r31, 0x01	; 1
    122a:	80 81       	ld	r24, Z
    122c:	83 60       	ori	r24, 0x03	; 3
    122e:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1230:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1232:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1234:	8d b1       	in	r24, 0x0d	; 13
    1236:	80 6e       	ori	r24, 0xE0	; 224
    1238:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    123a:	8e b1       	in	r24, 0x0e	; 14
    123c:	80 6e       	ori	r24, 0xE0	; 224
    123e:	8e b9       	out	0x0e, r24	; 14
    1240:	08 95       	ret

00001242 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	27 97       	sbiw	r28, 0x07	; 7
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1262:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1266:	e0 91 c5 07 	lds	r30, 0x07C5
    126a:	f0 91 c6 07 	lds	r31, 0x07C6
    126e:	c0 80       	ld	r12, Z
    1270:	d3 80       	ldd	r13, Z+3	; 0x03
    1272:	05 81       	ldd	r16, Z+5	; 0x05
    1274:	16 81       	ldd	r17, Z+6	; 0x06
    1276:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1278:	0e 94 ab 07 	call	0xf56	; 0xf56 <rf_rx_packet_nonblock>
	if (err < 1) {
    127c:	18 16       	cp	r1, r24
    127e:	1c f0       	brlt	.+6      	; 0x1286 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1280:	8f e0       	ldi	r24, 0x0F	; 15
    1282:	93 e0       	ldi	r25, 0x03	; 3
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1286:	f8 01       	movw	r30, r16
    1288:	f0 80       	ld	r15, Z
	if (ttl == 0) {
    128a:	f1 10       	cpse	r15, r1
    128c:	07 c0       	rjmp	.+14     	; 0x129c <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    128e:	8e e2       	ldi	r24, 0x2E	; 46
    1290:	93 e0       	ldi	r25, 0x03	; 3
    1292:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <puts>
#endif
		nrk_int_enable();
    1296:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
		return;
    129a:	32 c0       	rjmp	.+100    	; 0x1300 <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
    129c:	f5 e0       	ldi	r31, 0x05	; 5
    129e:	ff 12       	cpse	r15, r31
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 ca 2c 	call	0x5994	; 0x5994 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    12aa:	c8 01       	movw	r24, r16
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	8e 2d       	mov	r24, r14
    12b4:	99 27       	eor	r25, r25
    12b6:	87 fd       	sbrc	r24, 7
    12b8:	90 95       	com	r25
    12ba:	9f 93       	push	r25
    12bc:	ef 92       	push	r14
    12be:	1f 92       	push	r1
    12c0:	ff 92       	push	r15
    12c2:	1f 92       	push	r1
    12c4:	cf 92       	push	r12
    12c6:	80 e5       	ldi	r24, 0x50	; 80
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    12d2:	1d 83       	std	Y+5, r17	; 0x05
    12d4:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    12d6:	fa 94       	dec	r15
    12d8:	f8 01       	movw	r30, r16
    12da:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    12dc:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    12de:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    12e0:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    12ea:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 79 07 	call	0xef2	; 0xef2 <rf_tx_packet>
#endif
	return;
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
}
    1300:	27 96       	adiw	r28, 0x07	; 7
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	08 95       	ret

0000131e <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	0b b6       	in	r0, 0x3b	; 59
    132a:	0f 92       	push	r0
    132c:	2f 93       	push	r18
    132e:	3f 93       	push	r19
    1330:	4f 93       	push	r20
    1332:	5f 93       	push	r21
    1334:	6f 93       	push	r22
    1336:	7f 93       	push	r23
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 91 7b 01 	lds	r25, 0x017B
    134a:	89 17       	cp	r24, r25
    134c:	10 f4       	brcc	.+4      	; 0x1352 <__vector_60+0x34>
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	fa cf       	rjmp	.-12     	; 0x1346 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1352:	80 91 46 01 	lds	r24, 0x0146
    1356:	87 ff       	sbrs	r24, 7
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <__vector_60+0x44>
		rx_ready = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	80 93 06 08 	sts	0x0806, r24
    1360:	04 c0       	rjmp	.+8      	; 0x136a <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1362:	89 e7       	ldi	r24, 0x79	; 121
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1370:	80 91 46 01 	lds	r24, 0x0146
    1374:	87 ff       	sbrs	r24, 7
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1378:	80 91 c2 07 	lds	r24, 0x07C2
    137c:	81 11       	cpse	r24, r1
    137e:	0e 94 21 09 	call	0x1242	; 0x1242 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1382:	e0 91 00 04 	lds	r30, 0x0400
    1386:	f0 91 01 04 	lds	r31, 0x0401
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	09 f0       	breq	.+2      	; 0x1390 <__vector_60+0x72>
		rx_end_func();
    138e:	09 95       	icall

	return;
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    13b6:	e7 ed       	ldi	r30, 0xD7	; 215
    13b8:	f7 e0       	ldi	r31, 0x07	; 7
    13ba:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    13bc:	8c 91       	ld	r24, X
    13be:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    13c0:	8d 91       	ld	r24, X+
    13c2:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    13c6:	87 e0       	ldi	r24, 0x07	; 7
    13c8:	e7 3e       	cpi	r30, 0xE7	; 231
    13ca:	f8 07       	cpc	r31, r24
    13cc:	b9 f7       	brne	.-18     	; 0x13bc <aes_setkey+0x6>
    13ce:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    13d0:	10 92 3e 01 	sts	0x013E, r1
    13d4:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    13d8:	80 e8       	ldi	r24, 0x80	; 128
    13da:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    13de:	80 91 3d 01 	lds	r24, 0x013D
    13e2:	80 ff       	sbrs	r24, 0
    13e4:	fc cf       	rjmp	.-8      	; 0x13de <aes_setkey+0x28>
    13e6:	e0 ef       	ldi	r30, 0xF0	; 240
    13e8:	f7 e0       	ldi	r31, 0x07	; 7
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    13ea:	80 91 3f 01 	lds	r24, 0x013F
    13ee:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	e0 30       	cpi	r30, 0x00	; 0
    13f4:	f8 07       	cpc	r31, r24
    13f6:	c9 f7       	brne	.-14     	; 0x13ea <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
    13f8:	08 95       	ret

000013fa <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    13fa:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
    13fc:	66 23       	and	r22, r22
    13fe:	09 f4       	brne	.+2      	; 0x1402 <aes_encrypt+0x8>
    1400:	47 c0       	rjmp	.+142    	; 0x1490 <aes_encrypt+0x96>
    1402:	26 2f       	mov	r18, r22
    1404:	2f 70       	andi	r18, 0x0F	; 15
    1406:	09 f0       	breq	.+2      	; 0x140a <aes_encrypt+0x10>
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <aes_encrypt+0x96>
    140a:	e7 ed       	ldi	r30, 0xD7	; 215
    140c:	f7 e0       	ldi	r31, 0x07	; 7
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    140e:	21 91       	ld	r18, Z+
    1410:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1414:	27 e0       	ldi	r18, 0x07	; 7
    1416:	e7 3e       	cpi	r30, 0xE7	; 231
    1418:	f2 07       	cpc	r31, r18
    141a:	c9 f7       	brne	.-14     	; 0x140e <aes_encrypt+0x14>
    141c:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    141e:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1420:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1422:	20 e1       	ldi	r18, 0x10	; 16
    1424:	a2 9f       	mul	r26, r18
    1426:	a0 01       	movw	r20, r0
    1428:	11 24       	eor	r1, r1
    142a:	46 17       	cp	r20, r22
    142c:	57 07       	cpc	r21, r23
    142e:	74 f5       	brge	.+92     	; 0x148c <aes_encrypt+0x92>
      if(i==0)
    1430:	a1 11       	cpse	r26, r1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1434:	10 92 3c 01 	sts	0x013C, r1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    143a:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	48 0f       	add	r20, r24
    1444:	59 1f       	adc	r21, r25
    1446:	fa 01       	movw	r30, r20
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    144c:	e0 81       	ld	r30, Z
    144e:	e0 93 3e 01 	sts	0x013E, r30
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1456:	20 31       	cpi	r18, 0x10	; 16
    1458:	31 05       	cpc	r19, r1
    145a:	a9 f7       	brne	.-22     	; 0x1446 <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    145c:	20 91 3c 01 	lds	r18, 0x013C
    1460:	20 68       	ori	r18, 0x80	; 128
    1462:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1466:	20 91 3d 01 	lds	r18, 0x013D
    146a:	20 ff       	sbrs	r18, 0
    146c:	fc cf       	rjmp	.-8      	; 0x1466 <aes_encrypt+0x6c>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1472:	c0 91 3e 01 	lds	r28, 0x013E
    1476:	fa 01       	movw	r30, r20
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	c0 83       	st	Z, r28
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1482:	20 31       	cpi	r18, 0x10	; 16
    1484:	31 05       	cpc	r19, r1
    1486:	a9 f7       	brne	.-22     	; 0x1472 <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1488:	af 5f       	subi	r26, 0xFF	; 255
    148a:	cb cf       	rjmp	.-106    	; 0x1422 <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    149e:	61 30       	cpi	r22, 0x01	; 1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <aes_decrypt+0xe>
    14a2:	4f c0       	rjmp	.+158    	; 0x1542 <aes_decrypt+0xac>
    14a4:	26 2f       	mov	r18, r22
    14a6:	2f 70       	andi	r18, 0x0F	; 15
    14a8:	09 f0       	breq	.+2      	; 0x14ac <aes_decrypt+0x16>
    14aa:	4b c0       	rjmp	.+150    	; 0x1542 <aes_decrypt+0xac>
    14ac:	e0 ef       	ldi	r30, 0xF0	; 240
    14ae:	f7 e0       	ldi	r31, 0x07	; 7
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    14b0:	21 91       	ld	r18, Z+
    14b2:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    14b6:	28 e0       	ldi	r18, 0x08	; 8
    14b8:	e0 30       	cpi	r30, 0x00	; 0
    14ba:	f2 07       	cpc	r31, r18
    14bc:	c9 f7       	brne	.-14     	; 0x14b0 <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    14be:	62 95       	swap	r22
    14c0:	6f 70       	andi	r22, 0x0F	; 15
    14c2:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    14c4:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    14c6:	6f 3f       	cpi	r22, 0xFF	; 255
    14c8:	d1 f1       	breq	.+116    	; 0x153e <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    14ca:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    14ce:	20 e1       	ldi	r18, 0x10	; 16
    14d0:	62 02       	muls	r22, r18
    14d2:	a0 01       	movw	r20, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	e4 0f       	add	r30, r20
    14de:	f5 1f       	adc	r31, r21
    14e0:	df 01       	movw	r26, r30
    14e2:	a2 0f       	add	r26, r18
    14e4:	b3 1f       	adc	r27, r19
    14e6:	7c 91       	ld	r23, X
    14e8:	70 93 3e 01 	sts	0x013E, r23
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    14f0:	20 31       	cpi	r18, 0x10	; 16
    14f2:	31 05       	cpc	r19, r1
    14f4:	a9 f7       	brne	.-22     	; 0x14e0 <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    14f6:	20 91 3c 01 	lds	r18, 0x013C
    14fa:	20 68       	ori	r18, 0x80	; 128
    14fc:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1500:	20 91 3d 01 	lds	r18, 0x013D
    1504:	20 ff       	sbrs	r18, 0
    1506:	fc cf       	rjmp	.-8      	; 0x1500 <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1508:	40 51       	subi	r20, 0x10	; 16
    150a:	51 09       	sbc	r21, r1
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	48 0f       	add	r20, r24
    1512:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1514:	10 91 3e 01 	lds	r17, 0x013E
    1518:	df 01       	movw	r26, r30
    151a:	a2 0f       	add	r26, r18
    151c:	b3 1f       	adc	r27, r19
    151e:	1c 93       	st	X, r17
         if(i!=0)
    1520:	66 23       	and	r22, r22
    1522:	31 f0       	breq	.+12     	; 0x1530 <aes_decrypt+0x9a>
    1524:	ea 01       	movw	r28, r20
    1526:	c2 0f       	add	r28, r18
    1528:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
    152a:	78 81       	ld	r23, Y
    152c:	71 27       	eor	r23, r17
    152e:	7c 93       	st	X, r23
    1530:	2f 5f       	subi	r18, 0xFF	; 255
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1534:	20 31       	cpi	r18, 0x10	; 16
    1536:	31 05       	cpc	r19, r1
    1538:	69 f7       	brne	.-38     	; 0x1514 <aes_decrypt+0x7e>
    153a:	61 50       	subi	r22, 0x01	; 1
    153c:	c4 cf       	rjmp	.-120    	; 0x14c6 <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    154e:	80 91 c0 00 	lds	r24, 0x00C0
    1552:	87 ff       	sbrs	r24, 7
    1554:	fc cf       	rjmp	.-8      	; 0x154e <getc0>
    1556:	80 91 c0 00 	lds	r24, 0x00C0
    155a:	8f 77       	andi	r24, 0x7F	; 127
    155c:	80 93 c0 00 	sts	0x00C0, r24
    1560:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1564:	08 95       	ret

00001566 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1566:	90 91 c0 00 	lds	r25, 0x00C0
    156a:	95 ff       	sbrs	r25, 5
    156c:	fc cf       	rjmp	.-8      	; 0x1566 <putc0>
    156e:	90 91 c0 00 	lds	r25, 0x00C0
    1572:	9f 7d       	andi	r25, 0xDF	; 223
    1574:	90 93 c0 00 	sts	0x00C0, r25
    1578:	80 93 c6 00 	sts	0x00C6, r24
    157c:	08 95       	ret

0000157e <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	08 95       	ret

00001582 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	31 f4       	brne	.+12     	; 0x1592 <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1586:	80 91 c8 00 	lds	r24, 0x00C8
    158a:	87 fd       	sbrc	r24, 7
    158c:	07 c0       	rjmp	.+14     	; 0x159c <nrk_uart_data_ready+0x1a>
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	08 95       	ret
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
        }
if(uart_num==0)
    1592:	81 11       	cpse	r24, r1
    1594:	fc cf       	rjmp	.-8      	; 0x158e <nrk_uart_data_ready+0xc>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1596:	80 91 c0 00 	lds	r24, 0x00C0
    159a:	f7 cf       	rjmp	.-18     	; 0x158a <nrk_uart_data_ready+0x8>

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
    159e:	08 95       	ret

000015a0 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    15a4:	fc 01       	movw	r30, r24
    15a6:	24 91       	lpm	r18, Z
    15a8:	ec 01       	movw	r28, r24
    15aa:	21 96       	adiw	r28, 0x01	; 1
    15ac:	22 23       	and	r18, r18
    15ae:	51 f0       	breq	.+20     	; 0x15c4 <nrk_kprintf+0x24>
        putchar(c);
    15b0:	60 91 63 09 	lds	r22, 0x0963
    15b4:	70 91 64 09 	lds	r23, 0x0964
    15b8:	82 2f       	mov	r24, r18
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    15c0:	ce 01       	movw	r24, r28
    15c2:	f0 cf       	rjmp	.-32     	; 0x15a4 <nrk_kprintf+0x4>
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    15ce:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    15d0:	88 ef       	ldi	r24, 0xF8	; 248
    15d2:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    15d4:	80 ef       	ldi	r24, 0xF0	; 240
    15d6:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	8d b9       	out	0x0d, r24	; 13
    15dc:	08 95       	ret

000015de <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    15de:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <PORT_INIT>

000015e2 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    15e2:	8f 3f       	cpi	r24, 0xFF	; 255
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <nrk_gpio_set+0x6>
    15e6:	5c c0       	rjmp	.+184    	; 0x16a0 <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    15e8:	48 2f       	mov	r20, r24
    15ea:	47 70       	andi	r20, 0x07	; 7
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	47 30       	cpi	r20, 0x07	; 7
    15f0:	51 05       	cpc	r21, r1
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <nrk_gpio_set+0x14>
    15f4:	55 c0       	rjmp	.+170    	; 0x16a0 <nrk_gpio_set+0xbe>
    15f6:	fa 01       	movw	r30, r20
    15f8:	e0 57       	subi	r30, 0x70	; 112
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1606:	92 b1       	in	r25, 0x02	; 2
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	08 2e       	mov	r0, r24
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <nrk_gpio_set+0x30>
    1610:	22 0f       	add	r18, r18
    1612:	0a 94       	dec	r0
    1614:	ea f7       	brpl	.-6      	; 0x1610 <nrk_gpio_set+0x2e>
    1616:	92 2b       	or	r25, r18
    1618:	92 b9       	out	0x02, r25	; 2
    161a:	40 c0       	rjmp	.+128    	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    161c:	95 b1       	in	r25, 0x05	; 5
    161e:	21 e0       	ldi	r18, 0x01	; 1
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	08 2e       	mov	r0, r24
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <nrk_gpio_set+0x46>
    1626:	22 0f       	add	r18, r18
    1628:	0a 94       	dec	r0
    162a:	ea f7       	brpl	.-6      	; 0x1626 <nrk_gpio_set+0x44>
    162c:	92 2b       	or	r25, r18
    162e:	95 b9       	out	0x05, r25	; 5
    1630:	35 c0       	rjmp	.+106    	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1632:	98 b1       	in	r25, 0x08	; 8
    1634:	21 e0       	ldi	r18, 0x01	; 1
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	08 2e       	mov	r0, r24
    163a:	01 c0       	rjmp	.+2      	; 0x163e <nrk_gpio_set+0x5c>
    163c:	22 0f       	add	r18, r18
    163e:	0a 94       	dec	r0
    1640:	ea f7       	brpl	.-6      	; 0x163c <nrk_gpio_set+0x5a>
    1642:	92 2b       	or	r25, r18
    1644:	98 b9       	out	0x08, r25	; 8
    1646:	2a c0       	rjmp	.+84     	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1648:	9b b1       	in	r25, 0x0b	; 11
    164a:	21 e0       	ldi	r18, 0x01	; 1
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	08 2e       	mov	r0, r24
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <nrk_gpio_set+0x72>
    1652:	22 0f       	add	r18, r18
    1654:	0a 94       	dec	r0
    1656:	ea f7       	brpl	.-6      	; 0x1652 <nrk_gpio_set+0x70>
    1658:	92 2b       	or	r25, r18
    165a:	9b b9       	out	0x0b, r25	; 11
    165c:	1f c0       	rjmp	.+62     	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    165e:	9e b1       	in	r25, 0x0e	; 14
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	08 2e       	mov	r0, r24
    1666:	01 c0       	rjmp	.+2      	; 0x166a <nrk_gpio_set+0x88>
    1668:	22 0f       	add	r18, r18
    166a:	0a 94       	dec	r0
    166c:	ea f7       	brpl	.-6      	; 0x1668 <nrk_gpio_set+0x86>
    166e:	92 2b       	or	r25, r18
    1670:	9e b9       	out	0x0e, r25	; 14
    1672:	14 c0       	rjmp	.+40     	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1674:	91 b3       	in	r25, 0x11	; 17
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	08 2e       	mov	r0, r24
    167c:	01 c0       	rjmp	.+2      	; 0x1680 <nrk_gpio_set+0x9e>
    167e:	22 0f       	add	r18, r18
    1680:	0a 94       	dec	r0
    1682:	ea f7       	brpl	.-6      	; 0x167e <nrk_gpio_set+0x9c>
    1684:	92 2b       	or	r25, r18
    1686:	91 bb       	out	0x11, r25	; 17
    1688:	09 c0       	rjmp	.+18     	; 0x169c <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    168a:	94 b3       	in	r25, 0x14	; 20
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <nrk_gpio_set+0xb2>
    1692:	22 0f       	add	r18, r18
    1694:	8a 95       	dec	r24
    1696:	ea f7       	brpl	.-6      	; 0x1692 <nrk_gpio_set+0xb0>
    1698:	92 2b       	or	r25, r18
    169a:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    169e:	08 95       	ret
                default: return -1;
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    16a2:	08 95       	ret

000016a4 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    16a4:	8f 3f       	cpi	r24, 0xFF	; 255
    16a6:	09 f4       	brne	.+2      	; 0x16aa <nrk_gpio_clr+0x6>
    16a8:	57 c0       	rjmp	.+174    	; 0x1758 <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    16aa:	48 2f       	mov	r20, r24
    16ac:	47 70       	andi	r20, 0x07	; 7
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	47 30       	cpi	r20, 0x07	; 7
    16b2:	51 05       	cpc	r21, r1
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <nrk_gpio_clr+0x14>
    16b6:	50 c0       	rjmp	.+160    	; 0x1758 <nrk_gpio_clr+0xb4>
    16b8:	fa 01       	movw	r30, r20
    16ba:	e9 56       	subi	r30, 0x69	; 105
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	86 95       	lsr	r24
    16c0:	86 95       	lsr	r24
    16c2:	86 95       	lsr	r24
    16c4:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    16c8:	92 b1       	in	r25, 0x02	; 2
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	08 2e       	mov	r0, r24
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <nrk_gpio_clr+0x30>
    16d2:	22 0f       	add	r18, r18
    16d4:	0a 94       	dec	r0
    16d6:	ea f7       	brpl	.-6      	; 0x16d2 <nrk_gpio_clr+0x2e>
    16d8:	20 95       	com	r18
    16da:	29 23       	and	r18, r25
    16dc:	22 b9       	out	0x02, r18	; 2
    16de:	3a c0       	rjmp	.+116    	; 0x1754 <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    16e0:	95 b1       	in	r25, 0x05	; 5
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	08 2e       	mov	r0, r24
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <nrk_gpio_clr+0x48>
    16ea:	22 0f       	add	r18, r18
    16ec:	0a 94       	dec	r0
    16ee:	ea f7       	brpl	.-6      	; 0x16ea <nrk_gpio_clr+0x46>
    16f0:	20 95       	com	r18
    16f2:	29 23       	and	r18, r25
    16f4:	25 b9       	out	0x05, r18	; 5
    16f6:	2e c0       	rjmp	.+92     	; 0x1754 <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    16f8:	98 b1       	in	r25, 0x08	; 8
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	08 2e       	mov	r0, r24
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <nrk_gpio_clr+0x60>
    1702:	22 0f       	add	r18, r18
    1704:	0a 94       	dec	r0
    1706:	ea f7       	brpl	.-6      	; 0x1702 <nrk_gpio_clr+0x5e>
    1708:	20 95       	com	r18
    170a:	29 23       	and	r18, r25
    170c:	28 b9       	out	0x08, r18	; 8
    170e:	22 c0       	rjmp	.+68     	; 0x1754 <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1710:	9b b1       	in	r25, 0x0b	; 11
    1712:	21 e0       	ldi	r18, 0x01	; 1
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	08 2e       	mov	r0, r24
    1718:	01 c0       	rjmp	.+2      	; 0x171c <nrk_gpio_clr+0x78>
    171a:	22 0f       	add	r18, r18
    171c:	0a 94       	dec	r0
    171e:	ea f7       	brpl	.-6      	; 0x171a <nrk_gpio_clr+0x76>
    1720:	20 95       	com	r18
    1722:	29 23       	and	r18, r25
    1724:	2b b9       	out	0x0b, r18	; 11
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1728:	9e b1       	in	r25, 0x0e	; 14
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	08 2e       	mov	r0, r24
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <nrk_gpio_clr+0x90>
    1732:	22 0f       	add	r18, r18
    1734:	0a 94       	dec	r0
    1736:	ea f7       	brpl	.-6      	; 0x1732 <nrk_gpio_clr+0x8e>
    1738:	20 95       	com	r18
    173a:	29 23       	and	r18, r25
    173c:	2e b9       	out	0x0e, r18	; 14
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1740:	91 b3       	in	r25, 0x11	; 17
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	01 c0       	rjmp	.+2      	; 0x174a <nrk_gpio_clr+0xa6>
    1748:	22 0f       	add	r18, r18
    174a:	8a 95       	dec	r24
    174c:	ea f7       	brpl	.-6      	; 0x1748 <nrk_gpio_clr+0xa4>
    174e:	20 95       	com	r18
    1750:	29 23       	and	r18, r25
    1752:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1756:	08 95       	ret
                default: return -1;
    1758:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    175a:	08 95       	ret

0000175c <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    175c:	8f 3f       	cpi	r24, 0xFF	; 255
    175e:	21 f1       	breq	.+72     	; 0x17a8 <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    1760:	48 2f       	mov	r20, r24
    1762:	47 70       	andi	r20, 0x07	; 7
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	47 30       	cpi	r20, 0x07	; 7
    1768:	51 05       	cpc	r21, r1
    176a:	f0 f4       	brcc	.+60     	; 0x17a8 <nrk_gpio_get+0x4c>
    176c:	fa 01       	movw	r30, r20
    176e:	e2 56       	subi	r30, 0x62	; 98
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	86 95       	lsr	r24
    1774:	86 95       	lsr	r24
    1776:	86 95       	lsr	r24
    1778:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    177c:	20 b1       	in	r18, 0x00	; 0
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1780:	23 b1       	in	r18, 0x03	; 3
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1784:	26 b1       	in	r18, 0x06	; 6
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1788:	29 b1       	in	r18, 0x09	; 9
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    178c:	2c b1       	in	r18, 0x0c	; 12
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1790:	2f b1       	in	r18, 0x0f	; 15
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1794:	22 b3       	in	r18, 0x12	; 18
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <nrk_gpio_get+0x42>
    179a:	35 95       	asr	r19
    179c:	27 95       	ror	r18
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <nrk_gpio_get+0x3e>
    17a2:	82 2f       	mov	r24, r18
    17a4:	81 70       	andi	r24, 0x01	; 1
    17a6:	08 95       	ret
                default: return -1;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    17aa:	08 95       	ret

000017ac <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    17ac:	8f 3f       	cpi	r24, 0xFF	; 255
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <nrk_gpio_toggle+0x6>
    17b0:	ef c0       	rjmp	.+478    	; 0x1990 <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    17b2:	48 2f       	mov	r20, r24
    17b4:	47 70       	andi	r20, 0x07	; 7
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	47 30       	cpi	r20, 0x07	; 7
    17ba:	51 05       	cpc	r21, r1
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <nrk_gpio_toggle+0x14>
    17be:	e8 c0       	rjmp	.+464    	; 0x1990 <nrk_gpio_toggle+0x1e4>
    17c0:	fa 01       	movw	r30, r20
    17c2:	eb 55       	subi	r30, 0x5B	; 91
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	86 95       	lsr	r24
    17c8:	86 95       	lsr	r24
    17ca:	86 95       	lsr	r24
    17cc:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    17d0:	20 b1       	in	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	08 2e       	mov	r0, r24
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <nrk_gpio_toggle+0x30>
    17d8:	35 95       	asr	r19
    17da:	27 95       	ror	r18
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    17e0:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    17e2:	20 fd       	sbrc	r18, 0
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	08 2e       	mov	r0, r24
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <nrk_gpio_toggle+0x44>
    17ee:	22 0f       	add	r18, r18
    17f0:	0a 94       	dec	r0
    17f2:	ea f7       	brpl	.-6      	; 0x17ee <nrk_gpio_toggle+0x42>
    17f4:	92 2b       	or	r25, r18
    17f6:	92 b9       	out	0x02, r25	; 2
    17f8:	1e c0       	rjmp	.+60     	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	08 2e       	mov	r0, r24
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <nrk_gpio_toggle+0x58>
    1802:	22 0f       	add	r18, r18
    1804:	0a 94       	dec	r0
    1806:	ea f7       	brpl	.-6      	; 0x1802 <nrk_gpio_toggle+0x56>
    1808:	20 95       	com	r18
    180a:	29 23       	and	r18, r25
    180c:	22 b9       	out	0x02, r18	; 2
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1810:	23 b1       	in	r18, 0x03	; 3
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	08 2e       	mov	r0, r24
    1816:	02 c0       	rjmp	.+4      	; 0x181c <nrk_gpio_toggle+0x70>
    1818:	35 95       	asr	r19
    181a:	27 95       	ror	r18
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1820:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1822:	20 fd       	sbrc	r18, 0
    1824:	0a c0       	rjmp	.+20     	; 0x183a <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	01 c0       	rjmp	.+2      	; 0x182e <nrk_gpio_toggle+0x82>
    182c:	22 0f       	add	r18, r18
    182e:	8a 95       	dec	r24
    1830:	ea f7       	brpl	.-6      	; 0x182c <nrk_gpio_toggle+0x80>
    1832:	92 2b       	or	r25, r18
    1834:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    183a:	21 e0       	ldi	r18, 0x01	; 1
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	08 2e       	mov	r0, r24
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <nrk_gpio_toggle+0x98>
    1842:	22 0f       	add	r18, r18
    1844:	0a 94       	dec	r0
    1846:	ea f7       	brpl	.-6      	; 0x1842 <nrk_gpio_toggle+0x96>
    1848:	20 95       	com	r18
    184a:	29 23       	and	r18, r25
    184c:	25 b9       	out	0x05, r18	; 5
    184e:	f3 cf       	rjmp	.-26     	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1850:	26 b1       	in	r18, 0x06	; 6
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	08 2e       	mov	r0, r24
    1856:	02 c0       	rjmp	.+4      	; 0x185c <nrk_gpio_toggle+0xb0>
    1858:	35 95       	asr	r19
    185a:	27 95       	ror	r18
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1860:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1862:	20 fd       	sbrc	r18, 0
    1864:	0a c0       	rjmp	.+20     	; 0x187a <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	08 2e       	mov	r0, r24
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <nrk_gpio_toggle+0xc4>
    186e:	22 0f       	add	r18, r18
    1870:	0a 94       	dec	r0
    1872:	ea f7       	brpl	.-6      	; 0x186e <nrk_gpio_toggle+0xc2>
    1874:	92 2b       	or	r25, r18
    1876:	98 b9       	out	0x08, r25	; 8
    1878:	de cf       	rjmp	.-68     	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	08 2e       	mov	r0, r24
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <nrk_gpio_toggle+0xd8>
    1882:	22 0f       	add	r18, r18
    1884:	0a 94       	dec	r0
    1886:	ea f7       	brpl	.-6      	; 0x1882 <nrk_gpio_toggle+0xd6>
    1888:	20 95       	com	r18
    188a:	29 23       	and	r18, r25
    188c:	28 b9       	out	0x08, r18	; 8
    188e:	d3 cf       	rjmp	.-90     	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1890:	29 b1       	in	r18, 0x09	; 9
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	08 2e       	mov	r0, r24
    1896:	02 c0       	rjmp	.+4      	; 0x189c <nrk_gpio_toggle+0xf0>
    1898:	35 95       	asr	r19
    189a:	27 95       	ror	r18
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    18a0:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    18a2:	20 fd       	sbrc	r18, 0
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	08 2e       	mov	r0, r24
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <nrk_gpio_toggle+0x104>
    18ae:	22 0f       	add	r18, r18
    18b0:	0a 94       	dec	r0
    18b2:	ea f7       	brpl	.-6      	; 0x18ae <nrk_gpio_toggle+0x102>
    18b4:	92 2b       	or	r25, r18
    18b6:	9b b9       	out	0x0b, r25	; 11
    18b8:	be cf       	rjmp	.-132    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	08 2e       	mov	r0, r24
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <nrk_gpio_toggle+0x118>
    18c2:	22 0f       	add	r18, r18
    18c4:	0a 94       	dec	r0
    18c6:	ea f7       	brpl	.-6      	; 0x18c2 <nrk_gpio_toggle+0x116>
    18c8:	20 95       	com	r18
    18ca:	29 23       	and	r18, r25
    18cc:	2b b9       	out	0x0b, r18	; 11
    18ce:	b3 cf       	rjmp	.-154    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    18d0:	2c b1       	in	r18, 0x0c	; 12
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	08 2e       	mov	r0, r24
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <nrk_gpio_toggle+0x130>
    18d8:	35 95       	asr	r19
    18da:	27 95       	ror	r18
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    18e0:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    18e2:	20 fd       	sbrc	r18, 0
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    18e6:	21 e0       	ldi	r18, 0x01	; 1
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	08 2e       	mov	r0, r24
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <nrk_gpio_toggle+0x144>
    18ee:	22 0f       	add	r18, r18
    18f0:	0a 94       	dec	r0
    18f2:	ea f7       	brpl	.-6      	; 0x18ee <nrk_gpio_toggle+0x142>
    18f4:	92 2b       	or	r25, r18
    18f6:	9e b9       	out	0x0e, r25	; 14
    18f8:	9e cf       	rjmp	.-196    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	08 2e       	mov	r0, r24
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <nrk_gpio_toggle+0x158>
    1902:	22 0f       	add	r18, r18
    1904:	0a 94       	dec	r0
    1906:	ea f7       	brpl	.-6      	; 0x1902 <nrk_gpio_toggle+0x156>
    1908:	20 95       	com	r18
    190a:	29 23       	and	r18, r25
    190c:	2e b9       	out	0x0e, r18	; 14
    190e:	93 cf       	rjmp	.-218    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1910:	2f b1       	in	r18, 0x0f	; 15
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	08 2e       	mov	r0, r24
    1916:	02 c0       	rjmp	.+4      	; 0x191c <nrk_gpio_toggle+0x170>
    1918:	35 95       	asr	r19
    191a:	27 95       	ror	r18
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1920:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1922:	20 fd       	sbrc	r18, 0
    1924:	0a c0       	rjmp	.+20     	; 0x193a <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	08 2e       	mov	r0, r24
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <nrk_gpio_toggle+0x184>
    192e:	22 0f       	add	r18, r18
    1930:	0a 94       	dec	r0
    1932:	ea f7       	brpl	.-6      	; 0x192e <nrk_gpio_toggle+0x182>
    1934:	92 2b       	or	r25, r18
    1936:	91 bb       	out	0x11, r25	; 17
    1938:	7e cf       	rjmp	.-260    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	08 2e       	mov	r0, r24
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <nrk_gpio_toggle+0x198>
    1942:	22 0f       	add	r18, r18
    1944:	0a 94       	dec	r0
    1946:	ea f7       	brpl	.-6      	; 0x1942 <nrk_gpio_toggle+0x196>
    1948:	20 95       	com	r18
    194a:	29 23       	and	r18, r25
    194c:	21 bb       	out	0x11, r18	; 17
    194e:	73 cf       	rjmp	.-282    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1950:	22 b3       	in	r18, 0x12	; 18
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	08 2e       	mov	r0, r24
    1956:	02 c0       	rjmp	.+4      	; 0x195c <nrk_gpio_toggle+0x1b0>
    1958:	35 95       	asr	r19
    195a:	27 95       	ror	r18
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1960:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1962:	20 fd       	sbrc	r18, 0
    1964:	0a c0       	rjmp	.+20     	; 0x197a <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	08 2e       	mov	r0, r24
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <nrk_gpio_toggle+0x1c4>
    196e:	22 0f       	add	r18, r18
    1970:	0a 94       	dec	r0
    1972:	ea f7       	brpl	.-6      	; 0x196e <nrk_gpio_toggle+0x1c2>
    1974:	92 2b       	or	r25, r18
    1976:	94 bb       	out	0x14, r25	; 20
    1978:	5e cf       	rjmp	.-324    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	08 2e       	mov	r0, r24
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <nrk_gpio_toggle+0x1d8>
    1982:	22 0f       	add	r18, r18
    1984:	0a 94       	dec	r0
    1986:	ea f7       	brpl	.-6      	; 0x1982 <nrk_gpio_toggle+0x1d6>
    1988:	20 95       	com	r18
    198a:	29 23       	and	r18, r25
    198c:	24 bb       	out	0x14, r18	; 20
    198e:	53 cf       	rjmp	.-346    	; 0x1836 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    1990:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1992:	08 95       	ret

00001994 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1994:	8f 3f       	cpi	r24, 0xFF	; 255
    1996:	09 f4       	brne	.+2      	; 0x199a <nrk_gpio_direction+0x6>
    1998:	be c0       	rjmp	.+380    	; 0x1b16 <nrk_gpio_direction+0x182>
    199a:	48 2f       	mov	r20, r24
    199c:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    199e:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    19a0:	61 11       	cpse	r22, r1
    19a2:	60 c0       	rjmp	.+192    	; 0x1a64 <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    19a4:	47 30       	cpi	r20, 0x07	; 7
    19a6:	51 05       	cpc	r21, r1
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <nrk_gpio_direction+0x18>
    19aa:	b5 c0       	rjmp	.+362    	; 0x1b16 <nrk_gpio_direction+0x182>
    19ac:	fa 01       	movw	r30, r20
    19ae:	e4 55       	subi	r30, 0x54	; 84
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	86 95       	lsr	r24
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    19bc:	91 b1       	in	r25, 0x01	; 1
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	08 2e       	mov	r0, r24
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <nrk_gpio_direction+0x34>
    19c6:	22 0f       	add	r18, r18
    19c8:	0a 94       	dec	r0
    19ca:	ea f7       	brpl	.-6      	; 0x19c6 <nrk_gpio_direction+0x32>
    19cc:	20 95       	com	r18
    19ce:	29 23       	and	r18, r25
    19d0:	21 b9       	out	0x01, r18	; 1
    19d2:	9f c0       	rjmp	.+318    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    19d4:	94 b1       	in	r25, 0x04	; 4
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	08 2e       	mov	r0, r24
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <nrk_gpio_direction+0x4c>
    19de:	22 0f       	add	r18, r18
    19e0:	0a 94       	dec	r0
    19e2:	ea f7       	brpl	.-6      	; 0x19de <nrk_gpio_direction+0x4a>
    19e4:	20 95       	com	r18
    19e6:	29 23       	and	r18, r25
    19e8:	24 b9       	out	0x04, r18	; 4
    19ea:	93 c0       	rjmp	.+294    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    19ec:	97 b1       	in	r25, 0x07	; 7
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	08 2e       	mov	r0, r24
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <nrk_gpio_direction+0x64>
    19f6:	22 0f       	add	r18, r18
    19f8:	0a 94       	dec	r0
    19fa:	ea f7       	brpl	.-6      	; 0x19f6 <nrk_gpio_direction+0x62>
    19fc:	20 95       	com	r18
    19fe:	29 23       	and	r18, r25
    1a00:	27 b9       	out	0x07, r18	; 7
    1a02:	87 c0       	rjmp	.+270    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1a04:	9a b1       	in	r25, 0x0a	; 10
    1a06:	21 e0       	ldi	r18, 0x01	; 1
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	08 2e       	mov	r0, r24
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <nrk_gpio_direction+0x7c>
    1a0e:	22 0f       	add	r18, r18
    1a10:	0a 94       	dec	r0
    1a12:	ea f7       	brpl	.-6      	; 0x1a0e <nrk_gpio_direction+0x7a>
    1a14:	20 95       	com	r18
    1a16:	29 23       	and	r18, r25
    1a18:	2a b9       	out	0x0a, r18	; 10
    1a1a:	7b c0       	rjmp	.+246    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1a1c:	9d b1       	in	r25, 0x0d	; 13
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	08 2e       	mov	r0, r24
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <nrk_gpio_direction+0x94>
    1a26:	22 0f       	add	r18, r18
    1a28:	0a 94       	dec	r0
    1a2a:	ea f7       	brpl	.-6      	; 0x1a26 <nrk_gpio_direction+0x92>
    1a2c:	20 95       	com	r18
    1a2e:	29 23       	and	r18, r25
    1a30:	2d b9       	out	0x0d, r18	; 13
    1a32:	6f c0       	rjmp	.+222    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1a34:	90 b3       	in	r25, 0x10	; 16
    1a36:	21 e0       	ldi	r18, 0x01	; 1
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	08 2e       	mov	r0, r24
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <nrk_gpio_direction+0xac>
    1a3e:	22 0f       	add	r18, r18
    1a40:	0a 94       	dec	r0
    1a42:	ea f7       	brpl	.-6      	; 0x1a3e <nrk_gpio_direction+0xaa>
    1a44:	20 95       	com	r18
    1a46:	29 23       	and	r18, r25
    1a48:	20 bb       	out	0x10, r18	; 16
    1a4a:	63 c0       	rjmp	.+198    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1a4c:	93 b3       	in	r25, 0x13	; 19
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	08 2e       	mov	r0, r24
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <nrk_gpio_direction+0xc4>
    1a56:	22 0f       	add	r18, r18
    1a58:	0a 94       	dec	r0
    1a5a:	ea f7       	brpl	.-6      	; 0x1a56 <nrk_gpio_direction+0xc2>
    1a5c:	20 95       	com	r18
    1a5e:	29 23       	and	r18, r25
    1a60:	23 bb       	out	0x13, r18	; 19
    1a62:	57 c0       	rjmp	.+174    	; 0x1b12 <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1a64:	47 30       	cpi	r20, 0x07	; 7
    1a66:	51 05       	cpc	r21, r1
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <nrk_gpio_direction+0xd8>
    1a6a:	55 c0       	rjmp	.+170    	; 0x1b16 <nrk_gpio_direction+0x182>
    1a6c:	fa 01       	movw	r30, r20
    1a6e:	ed 54       	subi	r30, 0x4D	; 77
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	86 95       	lsr	r24
    1a74:	86 95       	lsr	r24
    1a76:	86 95       	lsr	r24
    1a78:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1a7c:	91 b1       	in	r25, 0x01	; 1
    1a7e:	21 e0       	ldi	r18, 0x01	; 1
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	08 2e       	mov	r0, r24
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <nrk_gpio_direction+0xf4>
    1a86:	22 0f       	add	r18, r18
    1a88:	0a 94       	dec	r0
    1a8a:	ea f7       	brpl	.-6      	; 0x1a86 <nrk_gpio_direction+0xf2>
    1a8c:	92 2b       	or	r25, r18
    1a8e:	91 b9       	out	0x01, r25	; 1
    1a90:	40 c0       	rjmp	.+128    	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1a92:	94 b1       	in	r25, 0x04	; 4
    1a94:	21 e0       	ldi	r18, 0x01	; 1
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	08 2e       	mov	r0, r24
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <nrk_gpio_direction+0x10a>
    1a9c:	22 0f       	add	r18, r18
    1a9e:	0a 94       	dec	r0
    1aa0:	ea f7       	brpl	.-6      	; 0x1a9c <nrk_gpio_direction+0x108>
    1aa2:	92 2b       	or	r25, r18
    1aa4:	94 b9       	out	0x04, r25	; 4
    1aa6:	35 c0       	rjmp	.+106    	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1aa8:	97 b1       	in	r25, 0x07	; 7
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	08 2e       	mov	r0, r24
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <nrk_gpio_direction+0x120>
    1ab2:	22 0f       	add	r18, r18
    1ab4:	0a 94       	dec	r0
    1ab6:	ea f7       	brpl	.-6      	; 0x1ab2 <nrk_gpio_direction+0x11e>
    1ab8:	92 2b       	or	r25, r18
    1aba:	97 b9       	out	0x07, r25	; 7
    1abc:	2a c0       	rjmp	.+84     	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1abe:	9a b1       	in	r25, 0x0a	; 10
    1ac0:	21 e0       	ldi	r18, 0x01	; 1
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	08 2e       	mov	r0, r24
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <nrk_gpio_direction+0x136>
    1ac8:	22 0f       	add	r18, r18
    1aca:	0a 94       	dec	r0
    1acc:	ea f7       	brpl	.-6      	; 0x1ac8 <nrk_gpio_direction+0x134>
    1ace:	92 2b       	or	r25, r18
    1ad0:	9a b9       	out	0x0a, r25	; 10
    1ad2:	1f c0       	rjmp	.+62     	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1ad4:	9d b1       	in	r25, 0x0d	; 13
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	08 2e       	mov	r0, r24
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <nrk_gpio_direction+0x14c>
    1ade:	22 0f       	add	r18, r18
    1ae0:	0a 94       	dec	r0
    1ae2:	ea f7       	brpl	.-6      	; 0x1ade <nrk_gpio_direction+0x14a>
    1ae4:	92 2b       	or	r25, r18
    1ae6:	9d b9       	out	0x0d, r25	; 13
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1aea:	90 b3       	in	r25, 0x10	; 16
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	08 2e       	mov	r0, r24
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <nrk_gpio_direction+0x162>
    1af4:	22 0f       	add	r18, r18
    1af6:	0a 94       	dec	r0
    1af8:	ea f7       	brpl	.-6      	; 0x1af4 <nrk_gpio_direction+0x160>
    1afa:	92 2b       	or	r25, r18
    1afc:	90 bb       	out	0x10, r25	; 16
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1b00:	93 b3       	in	r25, 0x13	; 19
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <nrk_gpio_direction+0x176>
    1b08:	22 0f       	add	r18, r18
    1b0a:	8a 95       	dec	r24
    1b0c:	ea f7       	brpl	.-6      	; 0x1b08 <nrk_gpio_direction+0x174>
    1b0e:	92 2b       	or	r25, r18
    1b10:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1b14:	08 95       	ret
                        default: return -1;
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1b18:	08 95       	ret

00001b1a <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1b1e:	80 b1       	in	r24, 0x00	; 0
    1b20:	86 95       	lsr	r24
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	89 27       	eor	r24, r25
    1b28:	08 95       	ret
	} 
return -1;
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
}
    1b2c:	08 95       	ret

00001b2e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	11 f4       	brne	.+4      	; 0x1b36 <nrk_led_toggle+0x8>
    1b32:	83 e2       	ldi	r24, 0x23	; 35
    1b34:	0d c0       	rjmp	.+26     	; 0x1b50 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <nrk_led_toggle+0x12>
    1b3c:	8b e2       	ldi	r24, 0x2B	; 43
    1b3e:	08 c0       	rjmp	.+16     	; 0x1b50 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	91 05       	cpc	r25, r1
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <nrk_led_toggle+0x1c>
    1b46:	83 e3       	ldi	r24, 0x33	; 51
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1b4a:	03 97       	sbiw	r24, 0x03	; 3
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <nrk_led_toggle+0x2a>
    1b4e:	8b e3       	ldi	r24, 0x3B	; 59
    1b50:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <nrk_gpio_toggle>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	08 95       	ret
return -1;
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
}
    1b5a:	08 95       	ret

00001b5c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <nrk_led_clr+0x8>
    1b60:	83 e2       	ldi	r24, 0x23	; 35
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	11 f4       	brne	.+4      	; 0x1b6e <nrk_led_clr+0x12>
    1b6a:	8b e2       	ldi	r24, 0x2B	; 43
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	91 05       	cpc	r25, r1
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <nrk_led_clr+0x1c>
    1b74:	83 e3       	ldi	r24, 0x33	; 51
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1b78:	03 97       	sbiw	r24, 0x03	; 3
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <nrk_led_clr+0x2a>
    1b7c:	8b e3       	ldi	r24, 0x3B	; 59
    1b7e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <nrk_gpio_set>
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	08 95       	ret
return -1;
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
}
    1b88:	08 95       	ret

00001b8a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <nrk_led_set+0x8>
    1b8e:	83 e2       	ldi	r24, 0x23	; 35
    1b90:	0d c0       	rjmp	.+26     	; 0x1bac <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <nrk_led_set+0x12>
    1b98:	8b e2       	ldi	r24, 0x2B	; 43
    1b9a:	08 c0       	rjmp	.+16     	; 0x1bac <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <nrk_led_set+0x1c>
    1ba2:	83 e3       	ldi	r24, 0x33	; 51
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1ba6:	03 97       	sbiw	r24, 0x03	; 3
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <nrk_led_set+0x2a>
    1baa:	8b e3       	ldi	r24, 0x3B	; 59
    1bac:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <nrk_gpio_clr>
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	08 95       	ret
return -1;
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
}
    1bb6:	08 95       	ret

00001bb8 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1bb8:	88 23       	and	r24, r24
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <nrk_gpio_pullups+0xa>
    1bbc:	85 b7       	in	r24, 0x35	; 53
    1bbe:	8f 7e       	andi	r24, 0xEF	; 239
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    1bc2:	85 b7       	in	r24, 0x35	; 53
    1bc4:	80 61       	ori	r24, 0x10	; 16
    1bc6:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	08 95       	ret

00001bcc <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    1bcc:	90 91 c8 00 	lds	r25, 0x00C8
    1bd0:	95 ff       	sbrs	r25, 5
    1bd2:	fc cf       	rjmp	.-8      	; 0x1bcc <putc1>
    1bd4:	80 93 ce 00 	sts	0x00CE, r24
    1bd8:	08 95       	ret

00001bda <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1bda:	90 93 c5 00 	sts	0x00C5, r25
    1bde:	80 93 c4 00 	sts	0x00C4, r24
    1be2:	86 e0       	ldi	r24, 0x06	; 6
    1be4:	80 93 c2 00 	sts	0x00C2, r24
    1be8:	e1 ec       	ldi	r30, 0xC1	; 193
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8b 7f       	andi	r24, 0xFB	; 251
    1bf0:	80 83       	st	Z, r24
    1bf2:	a0 ec       	ldi	r26, 0xC0	; 192
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	8c 91       	ld	r24, X
    1bf8:	82 60       	ori	r24, 0x02	; 2
    1bfa:	8c 93       	st	X, r24
ENABLE_UART0();
    1bfc:	80 81       	ld	r24, Z
    1bfe:	88 61       	ori	r24, 0x18	; 24
    1c00:	80 83       	st	Z, r24
    1c02:	08 95       	ret

00001c04 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1c04:	90 93 cd 00 	sts	0x00CD, r25
    1c08:	80 93 cc 00 	sts	0x00CC, r24
    1c0c:	86 e0       	ldi	r24, 0x06	; 6
    1c0e:	80 93 ca 00 	sts	0x00CA, r24
    1c12:	e9 ec       	ldi	r30, 0xC9	; 201
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8b 7f       	andi	r24, 0xFB	; 251
    1c1a:	80 83       	st	Z, r24
    1c1c:	a8 ec       	ldi	r26, 0xC8	; 200
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	8c 91       	ld	r24, X
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	8c 93       	st	X, r24
ENABLE_UART1();
    1c26:	80 81       	ld	r24, Z
    1c28:	88 61       	ori	r24, 0x18	; 24
    1c2a:	80 83       	st	Z, r24
    1c2c:	08 95       	ret

00001c2e <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1c2e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1c32:	67 ea       	ldi	r22, 0xA7	; 167
    1c34:	7a e0       	ldi	r23, 0x0A	; 10
    1c36:	83 eb       	ldi	r24, 0xB3	; 179
    1c38:	9a e0       	ldi	r25, 0x0A	; 10
    1c3a:	0e 94 3b 2c 	call	0x5876	; 0x5876 <fdevopen>
    1c3e:	90 93 64 09 	sts	0x0964, r25
    1c42:	80 93 63 09 	sts	0x0963, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1c46:	67 ea       	ldi	r22, 0xA7	; 167
    1c48:	7a e0       	ldi	r23, 0x0A	; 10
    1c4a:	83 eb       	ldi	r24, 0xB3	; 179
    1c4c:	9a e0       	ldi	r25, 0x0A	; 10
    1c4e:	0e 94 3b 2c 	call	0x5876	; 0x5876 <fdevopen>
    1c52:	90 93 62 09 	sts	0x0962, r25
    1c56:	80 93 61 09 	sts	0x0961, r24
    1c5a:	08 95       	ret

00001c5c <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1c5c:	80 91 c8 00 	lds	r24, 0x00C8
    1c60:	87 ff       	sbrs	r24, 7
    1c62:	fc cf       	rjmp	.-8      	; 0x1c5c <getc1>
    1c64:	80 91 c8 00 	lds	r24, 0x00C8
    1c68:	8f 77       	andi	r24, 0x7F	; 127
    1c6a:	80 93 c8 00 	sts	0x00C8, r24
    1c6e:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1c72:	08 95       	ret

00001c74 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	c9 f7       	brne	.-14     	; 0x1c74 <halWait>

} // halWait
    1c82:	08 95       	ret

00001c84 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1c84:	0c 94 8a 2d 	jmp	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>

00001c88 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    1c88:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__eewr_byte_m128rfa1>
}
    1c8c:	08 95       	ret

00001c8e <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1ca4:	f8 2e       	mov	r15, r24
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1cb0:	e8 2e       	mov	r14, r24
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1cbc:	08 2f       	mov	r16, r24
    1cbe:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1cc8:	18 2f       	mov	r17, r24
    1cca:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1ccc:	84 e0       	ldi	r24, 0x04	; 4
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    1cd4:	9e 2d       	mov	r25, r14
    1cd6:	9f 0d       	add	r25, r15
ct+=buf[2];
    1cd8:	90 0f       	add	r25, r16
ct+=buf[3];
    1cda:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    1cdc:	89 13       	cpse	r24, r25
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <read_eeprom_mac_address+0x56>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	08 95       	ret

00001cf4 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1cfa:	85 e0       	ldi	r24, 0x05	; 5
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1d02:	88 83       	st	Y, r24
return NRK_OK;
}
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	60 81       	ld	r22, Z
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	08 95       	ret

00001d1c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1d2a:	88 83       	st	Y, r24
  return NRK_OK;
}
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	c8 e0       	ldi	r28, 0x08	; 8
    1d40:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1d42:	ce 01       	movw	r24, r28
    1d44:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1d48:	f8 01       	movw	r30, r16
    1d4a:	81 93       	st	Z+, r24
    1d4c:	8f 01       	movw	r16, r30
    1d4e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1d50:	c8 31       	cpi	r28, 0x18	; 24
    1d52:	d1 05       	cpc	r29, r1
    1d54:	b1 f7       	brne	.-20     	; 0x1d42 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	8c 01       	movw	r16, r24
    1d6c:	c8 e0       	ldi	r28, 0x08	; 8
    1d6e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1d70:	f8 01       	movw	r30, r16
    1d72:	61 91       	ld	r22, Z+
    1d74:	8f 01       	movw	r16, r30
    1d76:	ce 01       	movw	r24, r28
    1d78:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__eewr_byte_m128rfa1>
    1d7c:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1d7e:	c8 31       	cpi	r28, 0x18	; 24
    1d80:	d1 05       	cpc	r29, r1
    1d82:	b1 f7       	brne	.-20     	; 0x1d70 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	08 95       	ret

00001d90 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1d96:	87 e0       	ldi	r24, 0x07	; 7
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__eerd_byte_m128rfa1>
    1d9e:	88 83       	st	Y, r24
  return NRK_OK;
}
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1da8:	fc 01       	movw	r30, r24
    1daa:	60 81       	ld	r22, Z
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	08 95       	ret

00001db8 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1db8:	f8 94       	cli
    1dba:	08 95       	ret

00001dbc <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1dbc:	78 94       	sei
    1dbe:	08 95       	ret

00001dc0 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1dc0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    1dc4:	ff cf       	rjmp	.-2      	; 0x1dc4 <nrk_halt+0x4>

00001dc6 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	a3 97       	sbiw	r28, 0x23	; 35
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1dda:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_signal_create>
    1dde:	80 93 ee 08 	sts	0x08EE, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1de2:	8f 3f       	cpi	r24, 0xFF	; 255
    1de4:	21 f4       	brne	.+8      	; 0x1dee <nrk_init+0x28>
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	8e e0       	ldi	r24, 0x0E	; 14
    1dea:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1dee:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1df2:	80 ff       	sbrs	r24, 0
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <nrk_init+0x38>
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    1dfe:	0e 94 21 29 	call	0x5242	; 0x5242 <nrk_watchdog_check>
    1e02:	8f 3f       	cpi	r24, 0xFF	; 255
    1e04:	31 f4       	brne	.+12     	; 0x1e12 <nrk_init+0x4c>
	{
    	nrk_watchdog_disable();
    1e06:	0e 94 04 29 	call	0x5208	; 0x5208 <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	80 e1       	ldi	r24, 0x10	; 16
    1e0e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    1e12:	0e 94 12 29 	call	0x5224	; 0x5224 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1e16:	10 92 f1 08 	sts	0x08F1, r1
    nrk_cur_task_TCB = NULL;
    1e1a:	10 92 ff 08 	sts	0x08FF, r1
    1e1e:	10 92 fe 08 	sts	0x08FE, r1
    
    nrk_high_ready_TCB = NULL;
    1e22:	10 92 f0 08 	sts	0x08F0, r1
    1e26:	10 92 ef 08 	sts	0x08EF, r1
    nrk_high_ready_prio = 0; 
    1e2a:	10 92 00 09 	sts	0x0900, r1

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    1e2e:	0e 94 9d 10 	call	0x213a	; 0x213a <nrk_stats_reset>
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1e32:	10 92 fd 08 	sts	0x08FD, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	80 93 ea 08 	sts	0x08EA, r24
    nrk_sem_list[i].value=-1;
    1e3c:	80 93 ec 08 	sts	0x08EC, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1e40:	80 93 eb 08 	sts	0x08EB, r24
    1e44:	eb e1       	ldi	r30, 0x1B	; 27
    1e46:	f8 e0       	ldi	r31, 0x08	; 8
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1e48:	93 e6       	ldi	r25, 0x63	; 99
    1e4a:	90 83       	st	Z, r25
    1e4c:	df 01       	movw	r26, r30
    1e4e:	12 97       	sbiw	r26, 0x02	; 2
        nrk_task_TCB[i].task_ID = -1; 
    1e50:	8c 93       	st	X, r24
    1e52:	bb 96       	adiw	r30, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    1e54:	28 e0       	ldi	r18, 0x08	; 8
    1e56:	e2 3f       	cpi	r30, 0xF2	; 242
    1e58:	f2 07       	cpc	r31, r18
    1e5a:	b9 f7       	brne	.-18     	; 0x1e4a <nrk_init+0x84>
    1e5c:	ea e3       	ldi	r30, 0x3A	; 58
    1e5e:	f9 e0       	ldi	r31, 0x09	; 9
    1e60:	cf 01       	movw	r24, r30
    1e62:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1e64:	94 83       	std	Z+4, r25	; 0x04
    1e66:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1e68:	f7 83       	std	Z+7, r31	; 0x07
    1e6a:	e6 83       	std	Z+6, r30	; 0x06
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1e6c:	29 e0       	ldi	r18, 0x09	; 9
    1e6e:	83 35       	cpi	r24, 0x53	; 83
    1e70:	92 07       	cpc	r25, r18
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <nrk_init+0xb2>
    1e74:	fc 01       	movw	r30, r24
    1e76:	f4 cf       	rjmp	.-24     	; 0x1e60 <nrk_init+0x9a>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1e78:	10 92 3c 09 	sts	0x093C, r1
    1e7c:	10 92 3b 09 	sts	0x093B, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1e80:	10 92 57 09 	sts	0x0957, r1
    1e84:	10 92 56 09 	sts	0x0956, r1
	_head_node = NULL;
    1e88:	10 92 f4 08 	sts	0x08F4, r1
    1e8c:	10 92 f3 08 	sts	0x08F3, r1
	_free_node = &_nrk_readyQ[0];
    1e90:	8a e3       	ldi	r24, 0x3A	; 58
    1e92:	99 e0       	ldi	r25, 0x09	; 9
    1e94:	90 93 10 08 	sts	0x0810, r25
    1e98:	80 93 0f 08 	sts	0x080F, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1e9c:	68 e7       	ldi	r22, 0x78	; 120
    1e9e:	70 e2       	ldi	r23, 0x20	; 32
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	69 e9       	ldi	r22, 0x99	; 153
    1eae:	76 e0       	ldi	r23, 0x06	; 6
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	0e 94 46 29 	call	0x528c	; 0x528c <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1eb8:	85 e5       	ldi	r24, 0x55	; 85
    1eba:	80 93 99 06 	sts	0x0699, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1ebe:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1ec0:	1c 86       	std	Y+12, r1	; 0x0c
    1ec2:	1d 86       	std	Y+13, r1	; 0x0d
    1ec4:	1e 86       	std	Y+14, r1	; 0x0e
    1ec6:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1ec8:	18 8a       	std	Y+16, r1	; 0x10
    1eca:	19 8a       	std	Y+17, r1	; 0x11
    1ecc:	1a 8a       	std	Y+18, r1	; 0x12
    1ece:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1ed0:	1c 8a       	std	Y+20, r1	; 0x14
    1ed2:	1d 8a       	std	Y+21, r1	; 0x15
    1ed4:	1e 8a       	std	Y+22, r1	; 0x16
    1ed6:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1ed8:	18 8e       	std	Y+24, r1	; 0x18
    1eda:	19 8e       	std	Y+25, r1	; 0x19
    1edc:	1a 8e       	std	Y+26, r1	; 0x1a
    1ede:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1ee0:	1c 8e       	std	Y+28, r1	; 0x1c
    1ee2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ee4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ee6:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1ee8:	18 a2       	std	Y+32, r1	; 0x20
    1eea:	19 a2       	std	Y+33, r1	; 0x21
    1eec:	1a a2       	std	Y+34, r1	; 0x22
    1eee:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	0e 94 12 1b 	call	0x3624	; 0x3624 <nrk_activate_task>
	
}
    1f02:	a3 96       	adiw	r28, 0x23	; 35
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <nrk_start>:




void nrk_start (void)
{
    1f14:	c9 e1       	ldi	r28, 0x19	; 25
    1f16:	d8 e0       	ldi	r29, 0x08	; 8
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1f18:	f1 2c       	mov	r15, r1
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1f1a:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	d8 12       	cpse	r13, r24
    1f20:	21 c0       	rjmp	.+66     	; 0x1f64 <nrk_start+0x50>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1f22:	f3 94       	inc	r15
    1f24:	ab 96       	adiw	r28, 0x2b	; 43
    1f26:	95 e0       	ldi	r25, 0x05	; 5
    1f28:	f9 12       	cpse	r15, r25
    1f2a:	f7 cf       	rjmp	.-18     	; 0x1f1a <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1f2c:	0e 94 0f 1a 	call	0x341e	; 0x341e <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1f30:	9b e2       	ldi	r25, 0x2B	; 43
    1f32:	89 02       	muls	r24, r25
    1f34:	f0 01       	movw	r30, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	ef 5e       	subi	r30, 0xEF	; 239
    1f3a:	f7 4f       	sbci	r31, 0xF7	; 247
    1f3c:	82 85       	ldd	r24, Z+10	; 0x0a
    1f3e:	80 93 00 09 	sts	0x0900, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1f42:	f0 93 ff 08 	sts	0x08FF, r31
    1f46:	e0 93 fe 08 	sts	0x08FE, r30
    1f4a:	f0 93 f0 08 	sts	0x08F0, r31
    1f4e:	e0 93 ef 08 	sts	0x08EF, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1f52:	80 93 f1 08 	sts	0x08F1, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1f56:	0e 94 ca 29 	call	0x5394	; 0x5394 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1f5a:	0e 94 b4 29 	call	0x5368	; 0x5368 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1f5e:	0e 94 ce 29 	call	0x539c	; 0x539c <nrk_start_high_ready_task>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <nrk_start+0x78>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    1f64:	09 e1       	ldi	r16, 0x19	; 25
    1f66:	18 e0       	ldi	r17, 0x08	; 8
    1f68:	e1 2c       	mov	r14, r1
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1f6a:	fe 14       	cp	r15, r14
    1f6c:	41 f0       	breq	.+16     	; 0x1f7e <nrk_start+0x6a>
    1f6e:	f8 01       	movw	r30, r16
    1f70:	80 81       	ld	r24, Z
    1f72:	d8 12       	cpse	r13, r24
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <nrk_start+0x6a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1f76:	6d 2d       	mov	r22, r13
    1f78:	85 e0       	ldi	r24, 0x05	; 5
    1f7a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1f7e:	e3 94       	inc	r14
    1f80:	05 5d       	subi	r16, 0xD5	; 213
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	f5 e0       	ldi	r31, 0x05	; 5
    1f86:	ef 12       	cpse	r14, r31
    1f88:	f0 cf       	rjmp	.-32     	; 0x1f6a <nrk_start+0x56>
    1f8a:	cb cf       	rjmp	.-106    	; 0x1f22 <nrk_start+0xe>
    1f8c:	ff cf       	rjmp	.-2      	; 0x1f8c <nrk_start+0x78>

00001f8e <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	1f 92       	push	r1
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	5c 01       	movw	r10, r24
    1faa:	6b 01       	movw	r12, r22
    1fac:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1fae:	dc 01       	movw	r26, r24
    1fb0:	19 96       	adiw	r26, 0x09	; 9
    1fb2:	8c 91       	ld	r24, X
    1fb4:	19 97       	sbiw	r26, 0x09	; 9
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    1fba:	80 91 ed 08 	lds	r24, 0x08ED
    1fbe:	8c 93       	st	X, r24
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1fc2:	f5 01       	movw	r30, r10
    1fc4:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1fc6:	80 91 ed 08 	lds	r24, 0x08ED
    1fca:	85 30       	cpi	r24, 0x05	; 5
    1fcc:	20 f0       	brcs	.+8      	; 0x1fd6 <nrk_TCB_init+0x48>
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	87 e0       	ldi	r24, 0x07	; 7
    1fd2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1fd6:	d5 01       	movw	r26, r10
    1fd8:	19 96       	adiw	r26, 0x09	; 9
    1fda:	8c 91       	ld	r24, X
    1fdc:	82 30       	cpi	r24, 0x02	; 2
    1fde:	29 f0       	breq	.+10     	; 0x1fea <nrk_TCB_init+0x5c>
    1fe0:	80 91 ed 08 	lds	r24, 0x08ED
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 ed 08 	sts	0x08ED, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1fea:	80 91 ed 08 	lds	r24, 0x08ED
    1fee:	81 11       	cpse	r24, r1
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <nrk_TCB_init+0x6a>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 ed 08 	sts	0x08ED, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1ff8:	f5 01       	movw	r30, r10
    1ffa:	30 81       	ld	r19, Z
    1ffc:	2b e2       	ldi	r18, 0x2B	; 43
    1ffe:	32 03       	mulsu	r19, r18
    2000:	f0 01       	movw	r30, r0
    2002:	11 24       	eor	r1, r1
    2004:	ef 5e       	subi	r30, 0xEF	; 239
    2006:	f7 4f       	sbci	r31, 0xF7	; 247
    2008:	d1 82       	std	Z+1, r13	; 0x01
    200a:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    200c:	d5 01       	movw	r26, r10
    200e:	18 96       	adiw	r26, 0x08	; 8
    2010:	8c 91       	ld	r24, X
    2012:	18 97       	sbiw	r26, 0x08	; 8
    2014:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2016:	3c 91       	ld	r19, X
    2018:	32 03       	mulsu	r19, r18
    201a:	f0 01       	movw	r30, r0
    201c:	11 24       	eor	r1, r1
    201e:	ef 5e       	subi	r30, 0xEF	; 239
    2020:	f7 4f       	sbci	r31, 0xF7	; 247
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2026:	3c 91       	ld	r19, X
    2028:	32 03       	mulsu	r19, r18
    202a:	f0 01       	movw	r30, r0
    202c:	11 24       	eor	r1, r1
    202e:	ef 5e       	subi	r30, 0xEF	; 239
    2030:	f7 4f       	sbci	r31, 0xF7	; 247
    2032:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2034:	0c 91       	ld	r16, X
    2036:	02 03       	mulsu	r16, r18
    2038:	80 01       	movw	r16, r0
    203a:	11 24       	eor	r1, r1
    203c:	0f 5e       	subi	r16, 0xEF	; 239
    203e:	17 4f       	sbci	r17, 0xF7	; 247
    2040:	f8 01       	movw	r30, r16
    2042:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2044:	c5 01       	movw	r24, r10
    2046:	0b 96       	adiw	r24, 0x0b	; 11
    2048:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_nrk_time_to_ticks_long>
    204c:	d8 01       	movw	r26, r16
    204e:	91 96       	adiw	r26, 0x21	; 33
    2050:	6d 93       	st	X+, r22
    2052:	7d 93       	st	X+, r23
    2054:	8d 93       	st	X+, r24
    2056:	9c 93       	st	X, r25
    2058:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    205a:	f5 01       	movw	r30, r10
    205c:	83 85       	ldd	r24, Z+11	; 0x0b
    205e:	94 85       	ldd	r25, Z+12	; 0x0c
    2060:	a5 85       	ldd	r26, Z+13	; 0x0d
    2062:	b6 85       	ldd	r27, Z+14	; 0x0e
    2064:	88 33       	cpi	r24, 0x38	; 56
    2066:	99 48       	sbci	r25, 0x89	; 137
    2068:	a1 44       	sbci	r26, 0x41	; 65
    206a:	b1 05       	cpc	r27, r1
    206c:	28 f0       	brcs	.+10     	; 0x2078 <nrk_TCB_init+0xea>
    206e:	d5 01       	movw	r26, r10
    2070:	6c 91       	ld	r22, X
    2072:	86 e1       	ldi	r24, 0x16	; 22
    2074:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2078:	f5 01       	movw	r30, r10
    207a:	00 81       	ld	r16, Z
    207c:	11 27       	eor	r17, r17
    207e:	07 fd       	sbrc	r16, 7
    2080:	10 95       	com	r17
    2082:	c5 01       	movw	r24, r10
    2084:	4b 96       	adiw	r24, 0x1b	; 27
    2086:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_nrk_time_to_ticks_long>
    208a:	4b e2       	ldi	r20, 0x2B	; 43
    208c:	40 9f       	mul	r20, r16
    208e:	f0 01       	movw	r30, r0
    2090:	41 9f       	mul	r20, r17
    2092:	f0 0d       	add	r31, r0
    2094:	11 24       	eor	r1, r1
    2096:	ef 5e       	subi	r30, 0xEF	; 239
    2098:	f7 4f       	sbci	r31, 0xF7	; 247
    209a:	65 8b       	std	Z+21, r22	; 0x15
    209c:	76 8b       	std	Z+22, r23	; 0x16
    209e:	87 8b       	std	Z+23, r24	; 0x17
    20a0:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    20a2:	d5 01       	movw	r26, r10
    20a4:	2c 91       	ld	r18, X
    20a6:	24 03       	mulsu	r18, r20
    20a8:	60 01       	movw	r12, r0
    20aa:	11 24       	eor	r1, r1
    20ac:	f6 01       	movw	r30, r12
    20ae:	ef 5e       	subi	r30, 0xEF	; 239
    20b0:	f7 4f       	sbci	r31, 0xF7	; 247
    20b2:	6f 01       	movw	r12, r30
    20b4:	05 89       	ldd	r16, Z+21	; 0x15
    20b6:	16 89       	ldd	r17, Z+22	; 0x16
    20b8:	27 89       	ldd	r18, Z+23	; 0x17
    20ba:	30 8d       	ldd	r19, Z+24	; 0x18
    20bc:	81 a1       	ldd	r24, Z+33	; 0x21
    20be:	92 a1       	ldd	r25, Z+34	; 0x22
    20c0:	a3 a1       	ldd	r26, Z+35	; 0x23
    20c2:	b4 a1       	ldd	r27, Z+36	; 0x24
    20c4:	08 0f       	add	r16, r24
    20c6:	19 1f       	adc	r17, r25
    20c8:	2a 1f       	adc	r18, r26
    20ca:	3b 1f       	adc	r19, r27
    20cc:	01 8f       	std	Z+25, r16	; 0x19
    20ce:	12 8f       	std	Z+26, r17	; 0x1a
    20d0:	23 8f       	std	Z+27, r18	; 0x1b
    20d2:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    20d4:	c5 01       	movw	r24, r10
    20d6:	43 96       	adiw	r24, 0x13	; 19
    20d8:	49 83       	std	Y+1, r20	; 0x01
    20da:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_nrk_time_to_ticks_long>
    20de:	f6 01       	movw	r30, r12
    20e0:	65 a3       	std	Z+37, r22	; 0x25
    20e2:	76 a3       	std	Z+38, r23	; 0x26
    20e4:	87 a3       	std	Z+39, r24	; 0x27
    20e6:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    20e8:	d5 01       	movw	r26, r10
    20ea:	2c 91       	ld	r18, X
    20ec:	49 81       	ldd	r20, Y+1	; 0x01
    20ee:	24 03       	mulsu	r18, r20
    20f0:	f0 01       	movw	r30, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	ef 5e       	subi	r30, 0xEF	; 239
    20f6:	f7 4f       	sbci	r31, 0xF7	; 247
    20f8:	85 a1       	ldd	r24, Z+37	; 0x25
    20fa:	96 a1       	ldd	r25, Z+38	; 0x26
    20fc:	a7 a1       	ldd	r26, Z+39	; 0x27
    20fe:	b0 a5       	ldd	r27, Z+40	; 0x28
    2100:	85 8f       	std	Z+29, r24	; 0x1d
    2102:	96 8f       	std	Z+30, r25	; 0x1e
    2104:	a7 8f       	std	Z+31, r26	; 0x1f
    2106:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	92 a7       	std	Z+42, r25	; 0x2a
    210e:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2110:	f3 82       	std	Z+3, r15	; 0x03
    2112:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	df 90       	pop	r13
    2128:	cf 90       	pop	r12
    212a:	bf 90       	pop	r11
    212c:	af 90       	pop	r10
    212e:	08 95       	ret

00002130 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2130:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <_nrk_scheduler>

00002134 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2134:	85 e6       	ldi	r24, 0x65	; 101
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	08 95       	ret

0000213a <nrk_stats_reset>:
#include <nrk_error.h>
#include <stdio.h>

#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    213e:	10 92 cf 04 	sts	0x04CF, r1
    2142:	10 92 d0 04 	sts	0x04D0, r1
    2146:	10 92 d1 04 	sts	0x04D1, r1
    214a:	10 92 d2 04 	sts	0x04D2, r1
    _nrk_stats_sleep_time.nano_secs=0;
    214e:	10 92 d3 04 	sts	0x04D3, r1
    2152:	10 92 d4 04 	sts	0x04D4, r1
    2156:	10 92 d5 04 	sts	0x04D5, r1
    215a:	10 92 d6 04 	sts	0x04D6, r1
    215e:	e2 e0       	ldi	r30, 0x02	; 2
    2160:	f6 e0       	ldi	r31, 0x06	; 6
    2162:	af e1       	ldi	r26, 0x1F	; 31
    2164:	b6 e0       	ldi	r27, 0x06	; 6
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        cur_task_stats[i].total_ticks=0;
    2166:	10 82       	st	Z, r1
    2168:	11 82       	std	Z+1, r1	; 0x01
    216a:	12 82       	std	Z+2, r1	; 0x02
    216c:	13 82       	std	Z+3, r1	; 0x03
        cur_task_stats[i].max_exec_ticks=0;
    216e:	10 86       	std	Z+8, r1	; 0x08
    2170:	11 86       	std	Z+9, r1	; 0x09
    2172:	12 86       	std	Z+10, r1	; 0x0a
    2174:	13 86       	std	Z+11, r1	; 0x0b
        cur_task_stats[i].min_exec_ticks=0;
    2176:	14 82       	std	Z+4, r1	; 0x04
    2178:	15 82       	std	Z+5, r1	; 0x05
    217a:	16 82       	std	Z+6, r1	; 0x06
    217c:	17 82       	std	Z+7, r1	; 0x07
        cur_task_stats[i].last_exec_ticks=0;
    217e:	14 86       	std	Z+12, r1	; 0x0c
    2180:	15 86       	std	Z+13, r1	; 0x0d
    2182:	16 86       	std	Z+14, r1	; 0x0e
    2184:	17 86       	std	Z+15, r1	; 0x0f
        cur_task_stats[i].swapped_in=0;
    2186:	10 8a       	std	Z+16, r1	; 0x10
    2188:	11 8a       	std	Z+17, r1	; 0x11
    218a:	12 8a       	std	Z+18, r1	; 0x12
    218c:	13 8a       	std	Z+19, r1	; 0x13
        cur_task_stats[i].preempted=0;
    218e:	10 8e       	std	Z+24, r1	; 0x18
    2190:	11 8e       	std	Z+25, r1	; 0x19
    2192:	12 8e       	std	Z+26, r1	; 0x1a
    2194:	13 8e       	std	Z+27, r1	; 0x1b
    2196:	ed 01       	movw	r28, r26
    2198:	21 97       	sbiw	r28, 0x01	; 1
        cur_task_stats[i].violations=0;
    219a:	18 82       	st	Y, r1
        cur_task_stats[i].overflow=0;
    219c:	1c 92       	st	X, r1
    219e:	7e 96       	adiw	r30, 0x1e	; 30
    21a0:	5e 96       	adiw	r26, 0x1e	; 30
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    _nrk_stats_sleep_time.nano_secs=0;
    for(i=0; i<NRK_MAX_TASKS; i++ )
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	e8 39       	cpi	r30, 0x98	; 152
    21a6:	f8 07       	cpc	r31, r24
    21a8:	f1 f6       	brne	.-68     	; 0x2166 <nrk_stats_reset+0x2c>
        cur_task_stats[i].preempted=0;
        cur_task_stats[i].violations=0;
        cur_task_stats[i].overflow=0;
    }

}
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    21b4:	e3 ed       	ldi	r30, 0xD3	; 211
    21b6:	f4 e0       	ldi	r31, 0x04	; 4
    21b8:	a8 2f       	mov	r26, r24
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	23 eb       	ldi	r18, 0xB3	; 179
    21be:	36 ee       	ldi	r19, 0xE6	; 230
    21c0:	4e e0       	ldi	r20, 0x0E	; 14
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	0e 94 6d 2b 	call	0x56da	; 0x56da <__muluhisi3>
    21c8:	00 81       	ld	r16, Z
    21ca:	11 81       	ldd	r17, Z+1	; 0x01
    21cc:	22 81       	ldd	r18, Z+2	; 0x02
    21ce:	33 81       	ldd	r19, Z+3	; 0x03
    21d0:	60 0f       	add	r22, r16
    21d2:	71 1f       	adc	r23, r17
    21d4:	82 1f       	adc	r24, r18
    21d6:	93 1f       	adc	r25, r19
    21d8:	60 83       	st	Z, r22
    21da:	71 83       	std	Z+1, r23	; 0x01
    21dc:	82 83       	std	Z+2, r24	; 0x02
    21de:	93 83       	std	Z+3, r25	; 0x03
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    21e0:	8f ec       	ldi	r24, 0xCF	; 207
    21e2:	94 e0       	ldi	r25, 0x04	; 4
}
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16

void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    21e8:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <nrk_time_compact_nanos>

000021ec <nrk_stats_get_deep_sleep>:
}

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    t->secs=_nrk_stats_sleep_time.secs;
    21ec:	40 91 cf 04 	lds	r20, 0x04CF
    21f0:	50 91 d0 04 	lds	r21, 0x04D0
    21f4:	60 91 d1 04 	lds	r22, 0x04D1
    21f8:	70 91 d2 04 	lds	r23, 0x04D2
    21fc:	fc 01       	movw	r30, r24
    21fe:	40 83       	st	Z, r20
    2200:	51 83       	std	Z+1, r21	; 0x01
    2202:	62 83       	std	Z+2, r22	; 0x02
    2204:	73 83       	std	Z+3, r23	; 0x03
    t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    2206:	40 91 d3 04 	lds	r20, 0x04D3
    220a:	50 91 d4 04 	lds	r21, 0x04D4
    220e:	60 91 d5 04 	lds	r22, 0x04D5
    2212:	70 91 d6 04 	lds	r23, 0x04D6
    2216:	44 83       	std	Z+4, r20	; 0x04
    2218:	55 83       	std	Z+5, r21	; 0x05
    221a:	66 83       	std	Z+6, r22	; 0x06
    221c:	77 83       	std	Z+7, r23	; 0x07
    221e:	08 95       	ret

00002220 <_nrk_stats_add_violation>:
}

void _nrk_stats_add_violation(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2220:	9e e1       	ldi	r25, 0x1E	; 30
    2222:	89 9f       	mul	r24, r25
    2224:	f0 01       	movw	r30, r0
    2226:	11 24       	eor	r1, r1
    2228:	ee 5f       	subi	r30, 0xFE	; 254
    222a:	f9 4f       	sbci	r31, 0xF9	; 249
    222c:	85 8d       	ldd	r24, Z+29	; 0x1d
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	39 f0       	breq	.+14     	; 0x2240 <_nrk_stats_add_violation+0x20>
    cur_task_stats[task_id].violations++;
    2232:	84 8d       	ldd	r24, Z+28	; 0x1c
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	84 8f       	std	Z+28, r24	; 0x1c
    if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    2238:	8f 3f       	cpi	r24, 0xFF	; 255
    223a:	11 f4       	brne	.+4      	; 0x2240 <_nrk_stats_add_violation+0x20>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	85 8f       	std	Z+29, r24	; 0x1d
    2240:	08 95       	ret

00002242 <_nrk_stats_task_start>:


// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    2242:	9e e1       	ldi	r25, 0x1E	; 30
    2244:	89 9f       	mul	r24, r25
    2246:	f0 01       	movw	r30, r0
    2248:	11 24       	eor	r1, r1
    224a:	ee 5f       	subi	r30, 0xFE	; 254
    224c:	f9 4f       	sbci	r31, 0xF9	; 249
    224e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	b9 f0       	breq	.+46     	; 0x2282 <_nrk_stats_task_start+0x40>
    cur_task_stats[task_id].cur_ticks=0;
    2254:	14 8a       	std	Z+20, r1	; 0x14
    2256:	15 8a       	std	Z+21, r1	; 0x15
    2258:	16 8a       	std	Z+22, r1	; 0x16
    225a:	17 8a       	std	Z+23, r1	; 0x17
    cur_task_stats[task_id].swapped_in++;
    225c:	40 89       	ldd	r20, Z+16	; 0x10
    225e:	51 89       	ldd	r21, Z+17	; 0x11
    2260:	62 89       	ldd	r22, Z+18	; 0x12
    2262:	73 89       	ldd	r23, Z+19	; 0x13
    2264:	4f 5f       	subi	r20, 0xFF	; 255
    2266:	5f 4f       	sbci	r21, 0xFF	; 255
    2268:	6f 4f       	sbci	r22, 0xFF	; 255
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	40 8b       	std	Z+16, r20	; 0x10
    226e:	51 8b       	std	Z+17, r21	; 0x11
    2270:	62 8b       	std	Z+18, r22	; 0x12
    2272:	73 8b       	std	Z+19, r23	; 0x13
    if(cur_task_stats[task_id].swapped_in==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    2274:	4e 3f       	cpi	r20, 0xFE	; 254
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	6f 4f       	sbci	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	11 f4       	brne	.+4      	; 0x2282 <_nrk_stats_task_start+0x40>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	85 8f       	std	Z+29, r24	; 0x1d
    2282:	08 95       	ret

00002284 <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    2284:	cf 92       	push	r12
    2286:	df 92       	push	r13
    2288:	ef 92       	push	r14
    228a:	ff 92       	push	r15
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	c6 2e       	mov	r12, r22
    if( cur_task_stats[task_id].overflow==1) return;
    2292:	9e e1       	ldi	r25, 0x1E	; 30
    2294:	89 9f       	mul	r24, r25
    2296:	f0 01       	movw	r30, r0
    2298:	11 24       	eor	r1, r1
    229a:	ee 5f       	subi	r30, 0xFE	; 254
    229c:	f9 4f       	sbci	r31, 0xF9	; 249
    229e:	85 8d       	ldd	r24, Z+29	; 0x1d
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	71 f1       	breq	.+92     	; 0x2300 <_nrk_stats_task_preempted+0x7c>
    cur_task_stats[task_id].preempted++;
    22a4:	40 8d       	ldd	r20, Z+24	; 0x18
    22a6:	51 8d       	ldd	r21, Z+25	; 0x19
    22a8:	62 8d       	ldd	r22, Z+26	; 0x1a
    22aa:	73 8d       	ldd	r23, Z+27	; 0x1b
    22ac:	4f 5f       	subi	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	6f 4f       	sbci	r22, 0xFF	; 255
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	40 8f       	std	Z+24, r20	; 0x18
    22b6:	51 8f       	std	Z+25, r21	; 0x19
    22b8:	62 8f       	std	Z+26, r22	; 0x1a
    22ba:	73 8f       	std	Z+27, r23	; 0x1b
    cur_task_stats[task_id].cur_ticks+=ticks;
    22bc:	d1 2c       	mov	r13, r1
    22be:	e1 2c       	mov	r14, r1
    22c0:	f1 2c       	mov	r15, r1
    22c2:	04 89       	ldd	r16, Z+20	; 0x14
    22c4:	15 89       	ldd	r17, Z+21	; 0x15
    22c6:	26 89       	ldd	r18, Z+22	; 0x16
    22c8:	37 89       	ldd	r19, Z+23	; 0x17
    22ca:	0c 0d       	add	r16, r12
    22cc:	1d 1d       	adc	r17, r13
    22ce:	2e 1d       	adc	r18, r14
    22d0:	3f 1d       	adc	r19, r15
    22d2:	04 8b       	std	Z+20, r16	; 0x14
    22d4:	15 8b       	std	Z+21, r17	; 0x15
    22d6:	26 8b       	std	Z+22, r18	; 0x16
    22d8:	37 8b       	std	Z+23, r19	; 0x17
    cur_task_stats[task_id].total_ticks+=ticks;
    22da:	00 81       	ld	r16, Z
    22dc:	11 81       	ldd	r17, Z+1	; 0x01
    22de:	22 81       	ldd	r18, Z+2	; 0x02
    22e0:	33 81       	ldd	r19, Z+3	; 0x03
    22e2:	0c 0d       	add	r16, r12
    22e4:	1d 1d       	adc	r17, r13
    22e6:	2e 1d       	adc	r18, r14
    22e8:	3f 1d       	adc	r19, r15
    22ea:	00 83       	st	Z, r16
    22ec:	11 83       	std	Z+1, r17	; 0x01
    22ee:	22 83       	std	Z+2, r18	; 0x02
    22f0:	33 83       	std	Z+3, r19	; 0x03
    if(cur_task_stats[task_id].preempted==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    22f2:	4e 3f       	cpi	r20, 0xFE	; 254
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	6f 4f       	sbci	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	11 f4       	brne	.+4      	; 0x2300 <_nrk_stats_task_preempted+0x7c>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	85 8f       	std	Z+29, r24	; 0x1d
}
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	08 95       	ret

0000230e <_nrk_stats_task_suspend>:

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    if( cur_task_stats[task_id].overflow==1) return;
    231e:	e8 2f       	mov	r30, r24
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	9e e1       	ldi	r25, 0x1E	; 30
    2324:	89 9f       	mul	r24, r25
    2326:	d0 01       	movw	r26, r0
    2328:	11 24       	eor	r1, r1
    232a:	ae 5f       	subi	r26, 0xFE	; 254
    232c:	b9 4f       	sbci	r27, 0xF9	; 249
    232e:	5d 96       	adiw	r26, 0x1d	; 29
    2330:	8c 91       	ld	r24, X
    2332:	5d 97       	sbiw	r26, 0x1d	; 29
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	09 f4       	brne	.+2      	; 0x233a <_nrk_stats_task_suspend+0x2c>
    2338:	5a c0       	rjmp	.+180    	; 0x23ee <_nrk_stats_task_suspend+0xe0>
    cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    233a:	c6 2e       	mov	r12, r22
    233c:	d1 2c       	mov	r13, r1
    233e:	e1 2c       	mov	r14, r1
    2340:	f1 2c       	mov	r15, r1
    2342:	54 96       	adiw	r26, 0x14	; 20
    2344:	4d 91       	ld	r20, X+
    2346:	5d 91       	ld	r21, X+
    2348:	6d 91       	ld	r22, X+
    234a:	7c 91       	ld	r23, X
    234c:	57 97       	sbiw	r26, 0x17	; 23
    234e:	4c 0d       	add	r20, r12
    2350:	5d 1d       	adc	r21, r13
    2352:	6e 1d       	adc	r22, r14
    2354:	7f 1d       	adc	r23, r15
    2356:	1c 96       	adiw	r26, 0x0c	; 12
    2358:	4d 93       	st	X+, r20
    235a:	5d 93       	st	X+, r21
    235c:	6d 93       	st	X+, r22
    235e:	7c 93       	st	X, r23
    2360:	1f 97       	sbiw	r26, 0x0f	; 15
    cur_task_stats[task_id].total_ticks+=ticks;
    2362:	0d 91       	ld	r16, X+
    2364:	1d 91       	ld	r17, X+
    2366:	2d 91       	ld	r18, X+
    2368:	3c 91       	ld	r19, X
    236a:	13 97       	sbiw	r26, 0x03	; 3
    236c:	0c 0d       	add	r16, r12
    236e:	1d 1d       	adc	r17, r13
    2370:	2e 1d       	adc	r18, r14
    2372:	3f 1d       	adc	r19, r15
    2374:	0d 93       	st	X+, r16
    2376:	1d 93       	st	X+, r17
    2378:	2d 93       	st	X+, r18
    237a:	3c 93       	st	X, r19
    237c:	13 97       	sbiw	r26, 0x03	; 3

    if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks)
    237e:	14 96       	adiw	r26, 0x04	; 4
    2380:	8d 91       	ld	r24, X+
    2382:	9d 91       	ld	r25, X+
    2384:	0d 90       	ld	r0, X+
    2386:	bc 91       	ld	r27, X
    2388:	a0 2d       	mov	r26, r0
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	29 f0       	breq	.+10     	; 0x239c <_nrk_stats_task_suspend+0x8e>
    2392:	48 17       	cp	r20, r24
    2394:	59 07       	cpc	r21, r25
    2396:	6a 07       	cpc	r22, r26
    2398:	7b 07       	cpc	r23, r27
    239a:	80 f4       	brcc	.+32     	; 0x23bc <_nrk_stats_task_suspend+0xae>
        cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    239c:	8e e1       	ldi	r24, 0x1E	; 30
    239e:	8e 9f       	mul	r24, r30
    23a0:	e0 01       	movw	r28, r0
    23a2:	8f 9f       	mul	r24, r31
    23a4:	d0 0d       	add	r29, r0
    23a6:	11 24       	eor	r1, r1
    23a8:	ce 5f       	subi	r28, 0xFE	; 254
    23aa:	d9 4f       	sbci	r29, 0xF9	; 249
    23ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    23b0:	ae 85       	ldd	r26, Y+14	; 0x0e
    23b2:	bf 85       	ldd	r27, Y+15	; 0x0f
    23b4:	8c 83       	std	Y+4, r24	; 0x04
    23b6:	9d 83       	std	Y+5, r25	; 0x05
    23b8:	ae 83       	std	Y+6, r26	; 0x06
    23ba:	bf 83       	std	Y+7, r27	; 0x07

    if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    23bc:	8e e1       	ldi	r24, 0x1E	; 30
    23be:	8e 9f       	mul	r24, r30
    23c0:	e0 01       	movw	r28, r0
    23c2:	8f 9f       	mul	r24, r31
    23c4:	d0 0d       	add	r29, r0
    23c6:	11 24       	eor	r1, r1
    23c8:	ce 5f       	subi	r28, 0xFE	; 254
    23ca:	d9 4f       	sbci	r29, 0xF9	; 249
    23cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    23d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    23d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    23d4:	48 85       	ldd	r20, Y+8	; 0x08
    23d6:	59 85       	ldd	r21, Y+9	; 0x09
    23d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    23da:	7b 85       	ldd	r23, Y+11	; 0x0b
    23dc:	48 17       	cp	r20, r24
    23de:	59 07       	cpc	r21, r25
    23e0:	6a 07       	cpc	r22, r26
    23e2:	7b 07       	cpc	r23, r27
    23e4:	20 f4       	brcc	.+8      	; 0x23ee <_nrk_stats_task_suspend+0xe0>
        cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    23e6:	88 87       	std	Y+8, r24	; 0x08
    23e8:	99 87       	std	Y+9, r25	; 0x09
    23ea:	aa 87       	std	Y+10, r26	; 0x0a
    23ec:	bb 87       	std	Y+11, r27	; 0x0b

}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	08 95       	ret

00002400 <nrk_stats_display_pid>:



void nrk_stats_display_pid(uint8_t pid)
{
    2400:	8f 92       	push	r8
    2402:	9f 92       	push	r9
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	28 97       	sbiw	r28, 0x08	; 8
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	18 2f       	mov	r17, r24
    nrk_time_t t;

    nrk_kprintf( PSTR( " Task ID: "));
    242a:	86 ea       	ldi	r24, 0xA6	; 166
    242c:	92 e0       	ldi	r25, 0x02	; 2
    242e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    printf( "%d",pid );
    2432:	a1 2e       	mov	r10, r17
    2434:	b1 2c       	mov	r11, r1
    2436:	1f 92       	push	r1
    2438:	1f 93       	push	r17
    243a:	22 e9       	ldi	r18, 0x92	; 146
    243c:	33 e0       	ldi	r19, 0x03	; 3
    243e:	3f 93       	push	r19
    2440:	2f 93       	push	r18
    2442:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    if(pid==NRK_IDLE_TASK_ID)
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	11 11       	cpse	r17, r1
    2450:	52 c0       	rjmp	.+164    	; 0x24f6 <nrk_stats_display_pid+0xf6>
    {
        nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    2452:	8b e8       	ldi	r24, 0x8B	; 139
    2454:	92 e0       	ldi	r25, 0x02	; 2
    2456:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
        nrk_time_get(&t);
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
        printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2462:	6d 81       	ldd	r22, Y+5	; 0x05
    2464:	7e 81       	ldd	r23, Y+6	; 0x06
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	98 85       	ldd	r25, Y+8	; 0x08
    246a:	e0 e4       	ldi	r30, 0x40	; 64
    246c:	ce 2e       	mov	r12, r30
    246e:	e2 e4       	ldi	r30, 0x42	; 66
    2470:	de 2e       	mov	r13, r30
    2472:	ef e0       	ldi	r30, 0x0F	; 15
    2474:	ee 2e       	mov	r14, r30
    2476:	f1 2c       	mov	r15, r1
    2478:	a7 01       	movw	r20, r14
    247a:	96 01       	movw	r18, r12
    247c:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    2480:	5f 93       	push	r21
    2482:	4f 93       	push	r20
    2484:	3f 93       	push	r19
    2486:	2f 93       	push	r18
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	8f 93       	push	r24
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	8f 93       	push	r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	8f 93       	push	r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	8f 93       	push	r24
    2498:	05 e9       	ldi	r16, 0x95	; 149
    249a:	13 e0       	ldi	r17, 0x03	; 3
    249c:	1f 93       	push	r17
    249e:	0f 93       	push	r16
    24a0:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
        nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    24a4:	8a e6       	ldi	r24, 0x6A	; 106
    24a6:	92 e0       	ldi	r25, 0x02	; 2
    24a8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
        //t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
        //printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
        printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    24ac:	60 91 d3 04 	lds	r22, 0x04D3
    24b0:	70 91 d4 04 	lds	r23, 0x04D4
    24b4:	80 91 d5 04 	lds	r24, 0x04D5
    24b8:	90 91 d6 04 	lds	r25, 0x04D6
    24bc:	a7 01       	movw	r20, r14
    24be:	96 01       	movw	r18, r12
    24c0:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    24c4:	5f 93       	push	r21
    24c6:	4f 93       	push	r20
    24c8:	3f 93       	push	r19
    24ca:	2f 93       	push	r18
    24cc:	80 91 d2 04 	lds	r24, 0x04D2
    24d0:	8f 93       	push	r24
    24d2:	80 91 d1 04 	lds	r24, 0x04D1
    24d6:	8f 93       	push	r24
    24d8:	80 91 d0 04 	lds	r24, 0x04D0
    24dc:	8f 93       	push	r24
    24de:	80 91 cf 04 	lds	r24, 0x04CF
    24e2:	8f 93       	push	r24
    24e4:	1f 93       	push	r17
    24e6:	0f 93       	push	r16
    24e8:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    }
    nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    24f6:	89 e5       	ldi	r24, 0x59	; 89
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    24fe:	8e e1       	ldi	r24, 0x1E	; 30
    2500:	8a 9d       	mul	r24, r10
    2502:	80 01       	movw	r16, r0
    2504:	8b 9d       	mul	r24, r11
    2506:	10 0d       	add	r17, r0
    2508:	11 24       	eor	r1, r1
    250a:	0e 5f       	subi	r16, 0xFE	; 254
    250c:	19 4f       	sbci	r17, 0xF9	; 249
    250e:	f8 01       	movw	r30, r16
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_nrk_ticks_to_time>
    251c:	29 83       	std	Y+1, r18	; 0x01
    251e:	3a 83       	std	Y+2, r19	; 0x02
    2520:	4b 83       	std	Y+3, r20	; 0x03
    2522:	5c 83       	std	Y+4, r21	; 0x04
    2524:	6d 83       	std	Y+5, r22	; 0x05
    2526:	7e 83       	std	Y+6, r23	; 0x06
    2528:	8f 83       	std	Y+7, r24	; 0x07
    252a:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    252c:	6d 81       	ldd	r22, Y+5	; 0x05
    252e:	7e 81       	ldd	r23, Y+6	; 0x06
    2530:	8f 81       	ldd	r24, Y+7	; 0x07
    2532:	98 85       	ldd	r25, Y+8	; 0x08
    2534:	20 e4       	ldi	r18, 0x40	; 64
    2536:	c2 2e       	mov	r12, r18
    2538:	22 e4       	ldi	r18, 0x42	; 66
    253a:	d2 2e       	mov	r13, r18
    253c:	2f e0       	ldi	r18, 0x0F	; 15
    253e:	e2 2e       	mov	r14, r18
    2540:	f1 2c       	mov	r15, r1
    2542:	a7 01       	movw	r20, r14
    2544:	96 01       	movw	r18, r12
    2546:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    254a:	5f 93       	push	r21
    254c:	4f 93       	push	r20
    254e:	3f 93       	push	r19
    2550:	2f 93       	push	r18
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	8f 93       	push	r24
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	8f 93       	push	r24
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	8f 93       	push	r24
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	8f 93       	push	r24
    2562:	35 e9       	ldi	r19, 0x95	; 149
    2564:	a3 2e       	mov	r10, r19
    2566:	33 e0       	ldi	r19, 0x03	; 3
    2568:	b3 2e       	mov	r11, r19
    256a:	bf 92       	push	r11
    256c:	af 92       	push	r10
    256e:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    2572:	8e e3       	ldi	r24, 0x3E	; 62
    2574:	92 e0       	ldi	r25, 0x02	; 2
    2576:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    257a:	f8 01       	movw	r30, r16
    257c:	64 81       	ldd	r22, Z+4	; 0x04
    257e:	75 81       	ldd	r23, Z+5	; 0x05
    2580:	86 81       	ldd	r24, Z+6	; 0x06
    2582:	97 81       	ldd	r25, Z+7	; 0x07
    2584:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_nrk_ticks_to_time>
    2588:	29 83       	std	Y+1, r18	; 0x01
    258a:	3a 83       	std	Y+2, r19	; 0x02
    258c:	4b 83       	std	Y+3, r20	; 0x03
    258e:	5c 83       	std	Y+4, r21	; 0x04
    2590:	6d 83       	std	Y+5, r22	; 0x05
    2592:	7e 83       	std	Y+6, r23	; 0x06
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    2598:	6d 81       	ldd	r22, Y+5	; 0x05
    259a:	7e 81       	ldd	r23, Y+6	; 0x06
    259c:	8f 81       	ldd	r24, Y+7	; 0x07
    259e:	98 85       	ldd	r25, Y+8	; 0x08
    25a0:	a7 01       	movw	r20, r14
    25a2:	96 01       	movw	r18, r12
    25a4:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    25a8:	5f 93       	push	r21
    25aa:	4f 93       	push	r20
    25ac:	3f 93       	push	r19
    25ae:	2f 93       	push	r18
    25b0:	8c 81       	ldd	r24, Y+4	; 0x04
    25b2:	8f 93       	push	r24
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	8f 93       	push	r24
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	8f 93       	push	r24
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	8f 93       	push	r24
    25c0:	45 ea       	ldi	r20, 0xA5	; 165
    25c2:	84 2e       	mov	r8, r20
    25c4:	43 e0       	ldi	r20, 0x03	; 3
    25c6:	94 2e       	mov	r9, r20
    25c8:	9f 92       	push	r9
    25ca:	8f 92       	push	r8
    25cc:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    25d0:	f8 01       	movw	r30, r16
    25d2:	64 85       	ldd	r22, Z+12	; 0x0c
    25d4:	75 85       	ldd	r23, Z+13	; 0x0d
    25d6:	86 85       	ldd	r24, Z+14	; 0x0e
    25d8:	97 85       	ldd	r25, Z+15	; 0x0f
    25da:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_nrk_ticks_to_time>
    25de:	29 83       	std	Y+1, r18	; 0x01
    25e0:	3a 83       	std	Y+2, r19	; 0x02
    25e2:	4b 83       	std	Y+3, r20	; 0x03
    25e4:	5c 83       	std	Y+4, r21	; 0x04
    25e6:	6d 83       	std	Y+5, r22	; 0x05
    25e8:	7e 83       	std	Y+6, r23	; 0x06
    25ea:	8f 83       	std	Y+7, r24	; 0x07
    25ec:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    25ee:	6d 81       	ldd	r22, Y+5	; 0x05
    25f0:	7e 81       	ldd	r23, Y+6	; 0x06
    25f2:	8f 81       	ldd	r24, Y+7	; 0x07
    25f4:	98 85       	ldd	r25, Y+8	; 0x08
    25f6:	a7 01       	movw	r20, r14
    25f8:	96 01       	movw	r18, r12
    25fa:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    25fe:	5f 93       	push	r21
    2600:	4f 93       	push	r20
    2602:	3f 93       	push	r19
    2604:	2f 93       	push	r18
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	8f 93       	push	r24
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	8f 93       	push	r24
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	8f 93       	push	r24
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	8f 93       	push	r24
    2616:	9f 92       	push	r9
    2618:	8f 92       	push	r8
    261a:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    261e:	f8 01       	movw	r30, r16
    2620:	60 85       	ldd	r22, Z+8	; 0x08
    2622:	71 85       	ldd	r23, Z+9	; 0x09
    2624:	82 85       	ldd	r24, Z+10	; 0x0a
    2626:	93 85       	ldd	r25, Z+11	; 0x0b
    2628:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_nrk_ticks_to_time>
    262c:	29 83       	std	Y+1, r18	; 0x01
    262e:	3a 83       	std	Y+2, r19	; 0x02
    2630:	4b 83       	std	Y+3, r20	; 0x03
    2632:	5c 83       	std	Y+4, r21	; 0x04
    2634:	6d 83       	std	Y+5, r22	; 0x05
    2636:	7e 83       	std	Y+6, r23	; 0x06
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	98 87       	std	Y+8, r25	; 0x08
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    263c:	6d 81       	ldd	r22, Y+5	; 0x05
    263e:	7e 81       	ldd	r23, Y+6	; 0x06
    2640:	8f 81       	ldd	r24, Y+7	; 0x07
    2642:	98 85       	ldd	r25, Y+8	; 0x08
    2644:	a7 01       	movw	r20, r14
    2646:	96 01       	movw	r18, r12
    2648:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    264c:	5f 93       	push	r21
    264e:	4f 93       	push	r20
    2650:	3f 93       	push	r19
    2652:	2f 93       	push	r18
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	8f 93       	push	r24
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	8f 93       	push	r24
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	8f 93       	push	r24
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	8f 93       	push	r24
    2664:	bf 92       	push	r11
    2666:	af 92       	push	r10
    2668:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	8e e2       	ldi	r24, 0x2E	; 46
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].swapped_in );
    267e:	f8 01       	movw	r30, r16
    2680:	70 96       	adiw	r30, 0x10	; 16
    2682:	83 81       	ldd	r24, Z+3	; 0x03
    2684:	8f 93       	push	r24
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	8f 93       	push	r24
    268a:	81 81       	ldd	r24, Z+1	; 0x01
    268c:	8f 93       	push	r24
    268e:	f8 01       	movw	r30, r16
    2690:	80 89       	ldd	r24, Z+16	; 0x10
    2692:	8f 93       	push	r24
    2694:	57 eb       	ldi	r21, 0xB7	; 183
    2696:	e5 2e       	mov	r14, r21
    2698:	53 e0       	ldi	r21, 0x03	; 3
    269a:	f5 2e       	mov	r15, r21
    269c:	ff 92       	push	r15
    269e:	ef 92       	push	r14
    26a0:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    26a4:	8b e1       	ldi	r24, 0x1B	; 27
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].preempted);
    26ac:	f8 01       	movw	r30, r16
    26ae:	78 96       	adiw	r30, 0x18	; 24
    26b0:	83 81       	ldd	r24, Z+3	; 0x03
    26b2:	8f 93       	push	r24
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	8f 93       	push	r24
    26b8:	81 81       	ldd	r24, Z+1	; 0x01
    26ba:	8f 93       	push	r24
    26bc:	f8 01       	movw	r30, r16
    26be:	80 8d       	ldd	r24, Z+24	; 0x18
    26c0:	8f 93       	push	r24
    26c2:	ff 92       	push	r15
    26c4:	ef 92       	push	r14
    26c6:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].violations);
    26d2:	f8 01       	movw	r30, r16
    26d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    26d6:	1f 92       	push	r1
    26d8:	8f 93       	push	r24
    26da:	6b eb       	ldi	r22, 0xBB	; 187
    26dc:	e6 2e       	mov	r14, r22
    26de:	63 e0       	ldi	r22, 0x03	; 3
    26e0:	f6 2e       	mov	r15, r22
    26e2:	ff 92       	push	r15
    26e4:	ef 92       	push	r14
    26e6:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    26ea:	85 ee       	ldi	r24, 0xE5	; 229
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].overflow);
    26f2:	f8 01       	movw	r30, r16
    26f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    26f6:	1f 92       	push	r1
    26f8:	8f 93       	push	r24
    26fa:	ff 92       	push	r15
    26fc:	ef 92       	push	r14
    26fe:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    nrk_kprintf( PSTR("\r\n") );
    2702:	82 ee       	ldi	r24, 0xE2	; 226
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61

}
    2714:	28 96       	adiw	r28, 0x08	; 8
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	df 90       	pop	r13
    272e:	cf 90       	pop	r12
    2730:	bf 90       	pop	r11
    2732:	af 90       	pop	r10
    2734:	9f 90       	pop	r9
    2736:	8f 90       	pop	r8
    2738:	08 95       	ret

0000273a <nrk_stats_display_all>:


void nrk_stats_display_all()
{
    273a:	cf 93       	push	r28
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    273c:	85 ec       	ldi	r24, 0xC5	; 197
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2744:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_stats_display_pid(i);
    2746:	8c 2f       	mov	r24, r28
    2748:	0e 94 00 12 	call	0x2400	; 0x2400 <nrk_stats_display_pid>
void nrk_stats_display_all()
{
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));

    for(i=0; i<NRK_MAX_TASKS; i++ )
    274c:	cf 5f       	subi	r28, 0xFF	; 255
    274e:	c5 30       	cpi	r28, 0x05	; 5
    2750:	d1 f7       	brne	.-12     	; 0x2746 <nrk_stats_display_all+0xc>
        nrk_stats_display_pid(i);
}
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <nrk_stats_get>:


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    2756:	db 01       	movw	r26, r22
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    2758:	85 30       	cpi	r24, 0x05	; 5
    275a:	08 f0       	brcs	.+2      	; 0x275e <nrk_stats_get+0x8>
    275c:	54 c0       	rjmp	.+168    	; 0x2806 <nrk_stats_get+0xb0>

    t->total_ticks=cur_task_stats[pid].total_ticks;
    275e:	9e e1       	ldi	r25, 0x1E	; 30
    2760:	89 9f       	mul	r24, r25
    2762:	f0 01       	movw	r30, r0
    2764:	11 24       	eor	r1, r1
    2766:	ee 5f       	subi	r30, 0xFE	; 254
    2768:	f9 4f       	sbci	r31, 0xF9	; 249
    276a:	40 81       	ld	r20, Z
    276c:	51 81       	ldd	r21, Z+1	; 0x01
    276e:	62 81       	ldd	r22, Z+2	; 0x02
    2770:	73 81       	ldd	r23, Z+3	; 0x03
    2772:	4d 93       	st	X+, r20
    2774:	5d 93       	st	X+, r21
    2776:	6d 93       	st	X+, r22
    2778:	7c 93       	st	X, r23
    277a:	13 97       	sbiw	r26, 0x03	; 3
    t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    277c:	44 81       	ldd	r20, Z+4	; 0x04
    277e:	55 81       	ldd	r21, Z+5	; 0x05
    2780:	66 81       	ldd	r22, Z+6	; 0x06
    2782:	77 81       	ldd	r23, Z+7	; 0x07
    2784:	14 96       	adiw	r26, 0x04	; 4
    2786:	4d 93       	st	X+, r20
    2788:	5d 93       	st	X+, r21
    278a:	6d 93       	st	X+, r22
    278c:	7c 93       	st	X, r23
    278e:	17 97       	sbiw	r26, 0x07	; 7
    t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    2790:	40 85       	ldd	r20, Z+8	; 0x08
    2792:	51 85       	ldd	r21, Z+9	; 0x09
    2794:	62 85       	ldd	r22, Z+10	; 0x0a
    2796:	73 85       	ldd	r23, Z+11	; 0x0b
    2798:	18 96       	adiw	r26, 0x08	; 8
    279a:	4d 93       	st	X+, r20
    279c:	5d 93       	st	X+, r21
    279e:	6d 93       	st	X+, r22
    27a0:	7c 93       	st	X, r23
    27a2:	1b 97       	sbiw	r26, 0x0b	; 11
    t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    27a4:	44 85       	ldd	r20, Z+12	; 0x0c
    27a6:	55 85       	ldd	r21, Z+13	; 0x0d
    27a8:	66 85       	ldd	r22, Z+14	; 0x0e
    27aa:	77 85       	ldd	r23, Z+15	; 0x0f
    27ac:	1c 96       	adiw	r26, 0x0c	; 12
    27ae:	4d 93       	st	X+, r20
    27b0:	5d 93       	st	X+, r21
    27b2:	6d 93       	st	X+, r22
    27b4:	7c 93       	st	X, r23
    27b6:	1f 97       	sbiw	r26, 0x0f	; 15
    t->swapped_in=cur_task_stats[pid].swapped_in;
    27b8:	40 89       	ldd	r20, Z+16	; 0x10
    27ba:	51 89       	ldd	r21, Z+17	; 0x11
    27bc:	62 89       	ldd	r22, Z+18	; 0x12
    27be:	73 89       	ldd	r23, Z+19	; 0x13
    27c0:	50 96       	adiw	r26, 0x10	; 16
    27c2:	4d 93       	st	X+, r20
    27c4:	5d 93       	st	X+, r21
    27c6:	6d 93       	st	X+, r22
    27c8:	7c 93       	st	X, r23
    27ca:	53 97       	sbiw	r26, 0x13	; 19
    t->cur_ticks=cur_task_stats[pid].cur_ticks;
    27cc:	44 89       	ldd	r20, Z+20	; 0x14
    27ce:	55 89       	ldd	r21, Z+21	; 0x15
    27d0:	66 89       	ldd	r22, Z+22	; 0x16
    27d2:	77 89       	ldd	r23, Z+23	; 0x17
    27d4:	54 96       	adiw	r26, 0x14	; 20
    27d6:	4d 93       	st	X+, r20
    27d8:	5d 93       	st	X+, r21
    27da:	6d 93       	st	X+, r22
    27dc:	7c 93       	st	X, r23
    27de:	57 97       	sbiw	r26, 0x17	; 23
    t->preempted=cur_task_stats[pid].preempted;
    27e0:	40 8d       	ldd	r20, Z+24	; 0x18
    27e2:	51 8d       	ldd	r21, Z+25	; 0x19
    27e4:	62 8d       	ldd	r22, Z+26	; 0x1a
    27e6:	73 8d       	ldd	r23, Z+27	; 0x1b
    27e8:	58 96       	adiw	r26, 0x18	; 24
    27ea:	4d 93       	st	X+, r20
    27ec:	5d 93       	st	X+, r21
    27ee:	6d 93       	st	X+, r22
    27f0:	7c 93       	st	X, r23
    27f2:	5b 97       	sbiw	r26, 0x1b	; 27
    t->violations=cur_task_stats[pid].violations;
    27f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    27f6:	5c 96       	adiw	r26, 0x1c	; 28
    27f8:	8c 93       	st	X, r24
    27fa:	5c 97       	sbiw	r26, 0x1c	; 28
    t->overflow=cur_task_stats[pid].overflow;
    27fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    27fe:	5d 96       	adiw	r26, 0x1d	; 29
    2800:	8c 93       	st	X, r24

    return NRK_OK;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	08 95       	ret
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    2806:	8f ef       	ldi	r24, 0xFF	; 255
    t->preempted=cur_task_stats[pid].preempted;
    t->violations=cur_task_stats[pid].violations;
    t->overflow=cur_task_stats[pid].overflow;

    return NRK_OK;
}
    2808:	08 95       	ret

0000280a <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    280a:	e0 91 fe 08 	lds	r30, 0x08FE
    280e:	f0 91 ff 08 	lds	r31, 0x08FF
    2812:	84 87       	std	Z+12, r24	; 0x0c
    2814:	08 95       	ret

00002816 <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2816:	e0 91 fe 08 	lds	r30, 0x08FE
    281a:	f0 91 ff 08 	lds	r31, 0x08FF
}
    281e:	84 85       	ldd	r24, Z+12	; 0x0c
    2820:	08 95       	ret

00002822 <_nrk_log_error>:

#ifdef NRK_LOG_ERRORS
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	d8 2f       	mov	r29, r24
    2828:	c6 2f       	mov	r28, r22

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	92 e0       	ldi	r25, 0x02	; 2
    282e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <nrk_eeprom_read_byte>
    error_cnt++;
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    if(error_cnt==255) error_cnt=0;
    2834:	8f 3f       	cpi	r24, 0xFF	; 255
    2836:	19 f0       	breq	.+6      	; 0x283e <_nrk_log_error+0x1c>
void _nrk_log_error(uint8_t error_num, uint8_t error_task)
{

    // 1) Load error cnt and add 1
    error_cnt=nrk_eeprom_read_byte(NRK_ERROR_EEPROM_INDEX);
    error_cnt++;
    2838:	80 93 04 04 	sts	0x0404, r24
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <_nrk_log_error+0x20>
    if(error_cnt==255) error_cnt=0;
    283e:	10 92 04 04 	sts	0x0404, r1
    // 2) write error
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6),error_num);
    2842:	20 91 04 04 	lds	r18, 0x0404
    2846:	36 e0       	ldi	r19, 0x06	; 6
    2848:	23 9f       	mul	r18, r19
    284a:	c0 01       	movw	r24, r0
    284c:	11 24       	eor	r1, r1
    284e:	6d 2f       	mov	r22, r29
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	9d 4f       	sbci	r25, 0xFD	; 253
    2854:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+1),error_task);
    2858:	80 91 04 04 	lds	r24, 0x0404
    285c:	46 e0       	ldi	r20, 0x06	; 6
    285e:	84 9f       	mul	r24, r20
    2860:	c0 01       	movw	r24, r0
    2862:	11 24       	eor	r1, r1
    2864:	6c 2f       	mov	r22, r28
    2866:	8e 5f       	subi	r24, 0xFE	; 254
    2868:	9d 4f       	sbci	r25, 0xFD	; 253
    286a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    286e:	20 91 04 04 	lds	r18, 0x0404
    2872:	80 91 f5 08 	lds	r24, 0x08F5
    2876:	90 91 f6 08 	lds	r25, 0x08F6
    287a:	a0 91 f7 08 	lds	r26, 0x08F7
    287e:	b0 91 f8 08 	lds	r27, 0x08F8
    2882:	6b 2f       	mov	r22, r27
    2884:	77 27       	eor	r23, r23
    2886:	88 27       	eor	r24, r24
    2888:	99 27       	eor	r25, r25
    288a:	46 e0       	ldi	r20, 0x06	; 6
    288c:	24 9f       	mul	r18, r20
    288e:	90 01       	movw	r18, r0
    2890:	11 24       	eor	r1, r1
    2892:	c9 01       	movw	r24, r18
    2894:	8d 5f       	subi	r24, 0xFD	; 253
    2896:	9d 4f       	sbci	r25, 0xFD	; 253
    2898:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    289c:	20 91 04 04 	lds	r18, 0x0404
    28a0:	80 91 f5 08 	lds	r24, 0x08F5
    28a4:	90 91 f6 08 	lds	r25, 0x08F6
    28a8:	a0 91 f7 08 	lds	r26, 0x08F7
    28ac:	b0 91 f8 08 	lds	r27, 0x08F8
    28b0:	bd 01       	movw	r22, r26
    28b2:	88 27       	eor	r24, r24
    28b4:	99 27       	eor	r25, r25
    28b6:	46 e0       	ldi	r20, 0x06	; 6
    28b8:	24 9f       	mul	r18, r20
    28ba:	90 01       	movw	r18, r0
    28bc:	11 24       	eor	r1, r1
    28be:	c9 01       	movw	r24, r18
    28c0:	8c 5f       	subi	r24, 0xFC	; 252
    28c2:	9d 4f       	sbci	r25, 0xFD	; 253
    28c4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    28c8:	20 91 04 04 	lds	r18, 0x0404
    28cc:	80 91 f5 08 	lds	r24, 0x08F5
    28d0:	90 91 f6 08 	lds	r25, 0x08F6
    28d4:	a0 91 f7 08 	lds	r26, 0x08F7
    28d8:	b0 91 f8 08 	lds	r27, 0x08F8
    28dc:	69 2f       	mov	r22, r25
    28de:	7a 2f       	mov	r23, r26
    28e0:	8b 2f       	mov	r24, r27
    28e2:	99 27       	eor	r25, r25
    28e4:	46 e0       	ldi	r20, 0x06	; 6
    28e6:	24 9f       	mul	r18, r20
    28e8:	90 01       	movw	r18, r0
    28ea:	11 24       	eor	r1, r1
    28ec:	c9 01       	movw	r24, r18
    28ee:	8b 5f       	subi	r24, 0xFB	; 251
    28f0:	9d 4f       	sbci	r25, 0xFD	; 253
    28f2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    28f6:	80 91 04 04 	lds	r24, 0x0404
    28fa:	26 e0       	ldi	r18, 0x06	; 6
    28fc:	82 9f       	mul	r24, r18
    28fe:	c0 01       	movw	r24, r0
    2900:	11 24       	eor	r1, r1
    2902:	60 91 f5 08 	lds	r22, 0x08F5
    2906:	8a 5f       	subi	r24, 0xFA	; 250
    2908:	9d 4f       	sbci	r25, 0xFD	; 253
    290a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    290e:	60 91 04 04 	lds	r22, 0x0404
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	92 e0       	ldi	r25, 0x02	; 2
}
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+2),(nrk_system_time.secs>>24)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+3),(nrk_system_time.secs>>16)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+4),(nrk_system_time.secs>>8)&0xff);
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX+1+((uint16_t)error_cnt*6+5),(nrk_system_time.secs)&0xff);
    // 3) write error cnt back
    nrk_eeprom_write_byte(NRK_ERROR_EEPROM_INDEX,error_cnt);
    291a:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <nrk_eeprom_write_byte>

0000291e <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    291e:	20 91 98 06 	lds	r18, 0x0698
    2922:	22 23       	and	r18, r18
    2924:	41 f0       	breq	.+16     	; 0x2936 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2926:	fb 01       	movw	r30, r22
    2928:	20 83       	st	Z, r18
    *task_id = error_task;
    292a:	20 91 aa 04 	lds	r18, 0x04AA
    292e:	fc 01       	movw	r30, r24
    2930:	20 83       	st	Z, r18
    return 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2936:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2938:	08 95       	ret

0000293a <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    293a:	80 91 98 06 	lds	r24, 0x0698
    293e:	88 23       	and	r24, r24
    2940:	09 f4       	brne	.+2      	; 0x2944 <nrk_error_print+0xa>
    2942:	8d c0       	rjmp	.+282    	; 0x2a5e <nrk_error_print+0x124>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2944:	8d ed       	ldi	r24, 0xDD	; 221
    2946:	94 e0       	ldi	r25, 0x04	; 4
    2948:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
        printf ("%d", error_task);
    294c:	80 91 aa 04 	lds	r24, 0x04AA
    2950:	1f 92       	push	r1
    2952:	8f 93       	push	r24
    2954:	82 e9       	ldi	r24, 0x92	; 146
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	9f 93       	push	r25
    295a:	8f 93       	push	r24
    295c:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
        nrk_kprintf (PSTR ("): "));
    2960:	89 ed       	ldi	r24, 0xD9	; 217
    2962:	94 e0       	ldi	r25, 0x04	; 4
    2964:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	80 91 98 06 	lds	r24, 0x0698
    2974:	88 31       	cpi	r24, 0x18	; 24
    2976:	10 f0       	brcs	.+4      	; 0x297c <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    2978:	10 92 98 06 	sts	0x0698, r1
        switch (error_num)
    297c:	80 91 98 06 	lds	r24, 0x0698
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	fc 01       	movw	r30, r24
    2984:	31 97       	sbiw	r30, 0x01	; 1
    2986:	e6 31       	cpi	r30, 0x16	; 22
    2988:	f1 05       	cpc	r31, r1
    298a:	08 f0       	brcs	.+2      	; 0x298e <nrk_error_print+0x54>
    298c:	46 c0       	rjmp	.+140    	; 0x2a1a <nrk_error_print+0xe0>
    298e:	e6 54       	subi	r30, 0x46	; 70
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2996:	8d e9       	ldi	r24, 0x9D	; 157
    2998:	94 e0       	ldi	r25, 0x04	; 4
    299a:	41 c0       	rjmp	.+130    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    299c:	86 e7       	ldi	r24, 0x76	; 118
    299e:	94 e0       	ldi	r25, 0x04	; 4
    29a0:	3e c0       	rjmp	.+124    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    29a2:	82 e6       	ldi	r24, 0x62	; 98
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	3b c0       	rjmp	.+118    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    29a8:	8c e4       	ldi	r24, 0x4C	; 76
    29aa:	94 e0       	ldi	r25, 0x04	; 4
    29ac:	38 c0       	rjmp	.+112    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    29ae:	81 e3       	ldi	r24, 0x31	; 49
    29b0:	94 e0       	ldi	r25, 0x04	; 4
    29b2:	35 c0       	rjmp	.+106    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    29b4:	8b e1       	ldi	r24, 0x1B	; 27
    29b6:	94 e0       	ldi	r25, 0x04	; 4
    29b8:	32 c0       	rjmp	.+100    	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    29ba:	83 e0       	ldi	r24, 0x03	; 3
    29bc:	94 e0       	ldi	r25, 0x04	; 4
    29be:	2f c0       	rjmp	.+94     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    29c0:	80 ef       	ldi	r24, 0xF0	; 240
    29c2:	93 e0       	ldi	r25, 0x03	; 3
    29c4:	2c c0       	rjmp	.+88     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    29c6:	8d ed       	ldi	r24, 0xDD	; 221
    29c8:	93 e0       	ldi	r25, 0x03	; 3
    29ca:	29 c0       	rjmp	.+82     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    29cc:	8f eb       	ldi	r24, 0xBF	; 191
    29ce:	93 e0       	ldi	r25, 0x03	; 3
    29d0:	26 c0       	rjmp	.+76     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    29d2:	8a e9       	ldi	r24, 0x9A	; 154
    29d4:	93 e0       	ldi	r25, 0x03	; 3
    29d6:	23 c0       	rjmp	.+70     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    29d8:	8e e8       	ldi	r24, 0x8E	; 142
    29da:	93 e0       	ldi	r25, 0x03	; 3
    29dc:	20 c0       	rjmp	.+64     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    29de:	83 e7       	ldi	r24, 0x73	; 115
    29e0:	93 e0       	ldi	r25, 0x03	; 3
    29e2:	1d c0       	rjmp	.+58     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    29e4:	84 e6       	ldi	r24, 0x64	; 100
    29e6:	93 e0       	ldi	r25, 0x03	; 3
    29e8:	1a c0       	rjmp	.+52     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    29ea:	80 e5       	ldi	r24, 0x50	; 80
    29ec:	93 e0       	ldi	r25, 0x03	; 3
    29ee:	17 c0       	rjmp	.+46     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    29f0:	8f e3       	ldi	r24, 0x3F	; 63
    29f2:	93 e0       	ldi	r25, 0x03	; 3
    29f4:	14 c0       	rjmp	.+40     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    29f6:	8b e2       	ldi	r24, 0x2B	; 43
    29f8:	93 e0       	ldi	r25, 0x03	; 3
    29fa:	11 c0       	rjmp	.+34     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    29fc:	8b e0       	ldi	r24, 0x0B	; 11
    29fe:	93 e0       	ldi	r25, 0x03	; 3
    2a00:	0e c0       	rjmp	.+28     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2a02:	83 ef       	ldi	r24, 0xF3	; 243
    2a04:	92 e0       	ldi	r25, 0x02	; 2
    2a06:	0b c0       	rjmp	.+22     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2a08:	88 ed       	ldi	r24, 0xD8	; 216
    2a0a:	92 e0       	ldi	r25, 0x02	; 2
    2a0c:	08 c0       	rjmp	.+16     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2a0e:	87 ec       	ldi	r24, 0xC7	; 199
    2a10:	92 e0       	ldi	r25, 0x02	; 2
    2a12:	05 c0       	rjmp	.+10     	; 0x2a1e <nrk_error_print+0xe4>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2a14:	88 eb       	ldi	r24, 0xB8	; 184
    2a16:	92 e0       	ldi	r25, 0x02	; 2
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <nrk_error_print+0xe4>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2a1a:	81 eb       	ldi	r24, 0xB1	; 177
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>
        }
        putchar ('\r');
    2a22:	60 91 63 09 	lds	r22, 0x0963
    2a26:	70 91 64 09 	lds	r23, 0x0964
    2a2a:	8d e0       	ldi	r24, 0x0D	; 13
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
        putchar ('\n');
    2a32:	60 91 63 09 	lds	r22, 0x0963
    2a36:	70 91 64 09 	lds	r23, 0x0964
    2a3a:	8a e0       	ldi	r24, 0x0A	; 10
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
                        ::);
#endif

#ifdef NRK_REBOOT_ON_ERROR
        // wait for watchdog to kick in
        if(error_num!=NRK_WATCHDOG_ERROR && error_num!=NRK_BOD_ERROR && error_num!=NRK_EXT_RST_ERROR)
    2a42:	80 91 98 06 	lds	r24, 0x0698
    2a46:	80 31       	cpi	r24, 0x10	; 16
    2a48:	41 f0       	breq	.+16     	; 0x2a5a <nrk_error_print+0x120>
    2a4a:	83 51       	subi	r24, 0x13	; 19
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	28 f0       	brcs	.+10     	; 0x2a5a <nrk_error_print+0x120>
        {
            nrk_watchdog_enable();
    2a50:	0e 94 12 29 	call	0x5224	; 0x5224 <nrk_watchdog_enable>
            nrk_int_disable();
    2a54:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    2a58:	ff cf       	rjmp	.-2      	; 0x2a58 <nrk_error_print+0x11e>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2a5a:	10 92 98 06 	sts	0x0698, r1
    return t;
}
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	08 95       	ret

00002a62 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2a62:	80 93 98 06 	sts	0x0698, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2a66:	e0 91 fe 08 	lds	r30, 0x08FE
    2a6a:	f0 91 ff 08 	lds	r31, 0x08FF
    2a6e:	60 85       	ldd	r22, Z+8	; 0x08
    2a70:	60 93 aa 04 	sts	0x04AA, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    2a74:	0e 94 11 14 	call	0x2822	; 0x2822 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2a78:	0c 94 9d 14 	jmp	0x293a	; 0x293a <nrk_error_print>

00002a7c <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    2a7c:	cf 93       	push	r28
    2a7e:	c8 2f       	mov	r28, r24
    error_num = n;
    2a80:	80 93 98 06 	sts	0x0698, r24
    error_task = task;
    2a84:	60 93 aa 04 	sts	0x04AA, r22

#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
    2a88:	0e 94 11 14 	call	0x2822	; 0x2822 <_nrk_log_error>
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2a8c:	0e 94 9d 14 	call	0x293a	; 0x293a <nrk_error_print>
    asm volatile("jmp 0x0000\n\t" ::);
#endif

#ifdef NRK_REBOOT_ON_ERROR
    // wait for watchdog to kick in
    if(n!=NRK_WATCHDOG_ERROR && n!=NRK_BOD_ERROR && n!=NRK_EXT_RST_ERROR)
    2a90:	c0 31       	cpi	r28, 0x10	; 16
    2a92:	41 f0       	breq	.+16     	; 0x2aa4 <nrk_kernel_error_add+0x28>
    2a94:	c3 51       	subi	r28, 0x13	; 19
    2a96:	c2 30       	cpi	r28, 0x02	; 2
    2a98:	28 f0       	brcs	.+10     	; 0x2aa4 <nrk_kernel_error_add+0x28>
    {
        nrk_watchdog_enable();
    2a9a:	0e 94 12 29 	call	0x5224	; 0x5224 <nrk_watchdog_enable>
        nrk_int_disable();
    2a9e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    2aa2:	ff cf       	rjmp	.-2      	; 0x2aa2 <nrk_kernel_error_add+0x26>
#endif  /*  */




}
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <pause>:
    }

}

void pause()
{
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	1f 92       	push	r1
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2ab2:	19 82       	std	Y+1, r1	; 0x01
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	84 36       	cpi	r24, 0x64	; 100
    2ab8:	40 f4       	brcc	.+16     	; 0x2aca <pause+0x22>
        nrk_spin_wait_us (2000);
    2aba:	80 ed       	ldi	r24, 0xD0	; 208
    2abc:	97 e0       	ldi	r25, 0x07	; 7
    2abe:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	f5 cf       	rjmp	.-22     	; 0x2ab4 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2aca:	0f 90       	pop	r0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	08 95       	ret

00002ad2 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <nrk_led_set>
    pause();
    2ada:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
    pause();
    2ade:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
    pause();
    2ae2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
    nrk_led_clr(GREEN_LED);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    pause();
    2aee:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <pause>

00002af2 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <nrk_led_set>
    pause();
    2afa:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
    nrk_led_clr(GREEN_LED);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    pause();
    2b06:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <pause>

00002b0a <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <blink_morse_code_error+0xc>
    2b16:	1f 92       	push	r1
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2b1c:	1f 92       	push	r1
    2b1e:	8f 93       	push	r24
    2b20:	82 e9       	ldi	r24, 0x92	; 146
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	8e 01       	movw	r16, r28
    2b2a:	0f 5f       	subi	r16, 0xFF	; 255
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	1f 93       	push	r17
    2b30:	0f 93       	push	r16
    2b32:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <sprintf>

    for(i=0; i<strlen(str); i++ )
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	f1 2c       	mov	r15, r1
    2b44:	f8 01       	movw	r30, r16
    2b46:	01 90       	ld	r0, Z+
    2b48:	00 20       	and	r0, r0
    2b4a:	e9 f7       	brne	.-6      	; 0x2b46 <blink_morse_code_error+0x3c>
    2b4c:	31 97       	sbiw	r30, 0x01	; 1
    2b4e:	e0 1b       	sub	r30, r16
    2b50:	f1 0b       	sbc	r31, r17
    2b52:	8f 2d       	mov	r24, r15
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	8e 17       	cp	r24, r30
    2b58:	9f 07       	cpc	r25, r31
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <blink_morse_code_error+0x54>
    2b5c:	5c c0       	rjmp	.+184    	; 0x2c16 <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    2b5e:	f8 01       	movw	r30, r16
    2b60:	e8 0f       	add	r30, r24
    2b62:	f9 1f       	adc	r31, r25
    2b64:	80 81       	ld	r24, Z
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	fc 01       	movw	r30, r24
    2b6a:	f0 97       	sbiw	r30, 0x30	; 48
    2b6c:	ea 30       	cpi	r30, 0x0A	; 10
    2b6e:	f1 05       	cpc	r31, r1
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <blink_morse_code_error+0x6a>
    2b72:	49 c0       	rjmp	.+146    	; 0x2c06 <blink_morse_code_error+0xfc>
    2b74:	e0 53       	subi	r30, 0x30	; 48
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	0c 94 09 2c 	jmp	0x5812	; 0x5812 <__tablejump2__>
        {
        case '0':
            blink_dash();
    2b7c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2b82:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dash();
    2b86:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2b8a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2b8e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2b92:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            break;
    2b96:	37 c0       	rjmp	.+110    	; 0x2c06 <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    2b98:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2b9c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2ba0:	f4 cf       	rjmp	.-24     	; 0x2b8a <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2ba2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2ba6:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2baa:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bae:	ef cf       	rjmp	.-34     	; 0x2b8e <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2bb0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2bb4:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2bb8:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            blink_dot();
    2bbc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bc0:	e8 cf       	rjmp	.-48     	; 0x2b92 <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2bc2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2bc8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dot();
    2bcc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2bd2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2bd6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dot();
    2bda:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bde:	06 c0       	rjmp	.+12     	; 0x2bec <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2be0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2be4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2be8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dot();
    2bec:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2bf2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2bf6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2bfa:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dash();
    2bfe:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <blink_dash>
            blink_dot();
    2c02:	0e 94 79 15 	call	0x2af2	; 0x2af2 <blink_dot>
            break;
        }
        pause();
    2c06:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
        pause();
    2c0a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
        pause();
    2c0e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2c12:	f3 94       	inc	r15
    2c14:	97 cf       	rjmp	.-210    	; 0x2b44 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	08 95       	ret

00002c28 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2c28:	6f 92       	push	r6
    2c2a:	7f 92       	push	r7
    2c2c:	8f 92       	push	r8
    2c2e:	9f 92       	push	r9
    2c30:	af 92       	push	r10
    2c32:	bf 92       	push	r11
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2c44:	89 ee       	ldi	r24, 0xE9	; 233
    2c46:	94 e0       	ldi	r25, 0x04	; 4
    2c48:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2c4c:	e0 91 fe 08 	lds	r30, 0x08FE
    2c50:	f0 91 ff 08 	lds	r31, 0x08FF
    2c54:	20 85       	ldd	r18, Z+8	; 0x08
    2c56:	82 2f       	mov	r24, r18
    2c58:	99 27       	eor	r25, r25
    2c5a:	87 fd       	sbrc	r24, 7
    2c5c:	90 95       	com	r25
    2c5e:	9f 93       	push	r25
    2c60:	2f 93       	push	r18
    2c62:	8e eb       	ldi	r24, 0xBE	; 190
    2c64:	93 e0       	ldi	r25, 0x03	; 3
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2c6e:	e0 91 fe 08 	lds	r30, 0x08FE
    2c72:	f0 91 ff 08 	lds	r31, 0x08FF
    2c76:	c2 81       	ldd	r28, Z+2	; 0x02
    2c78:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	82 ef       	ldi	r24, 0xF2	; 242
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    2c82:	9f 93       	push	r25
    2c84:	8f 93       	push	r24
    2c86:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    printf( "canary = %x ",*stkc );
    2c8a:	88 81       	ld	r24, Y
    2c8c:	1f 92       	push	r1
    2c8e:	8f 93       	push	r24
    2c90:	87 ec       	ldi	r24, 0xC7	; 199
    2c92:	93 e0       	ldi	r25, 0x03	; 3
    2c94:	9f 93       	push	r25
    2c96:	8f 93       	push	r24
    2c98:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2c9c:	e0 91 fe 08 	lds	r30, 0x08FE
    2ca0:	f0 91 ff 08 	lds	r31, 0x08FF
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2ca4:	81 81       	ldd	r24, Z+1	; 0x01
    2ca6:	8f 93       	push	r24
    2ca8:	80 81       	ld	r24, Z
    2caa:	8f 93       	push	r24
    2cac:	84 ed       	ldi	r24, 0xD4	; 212
    2cae:	93 e0       	ldi	r25, 0x03	; 3
    2cb0:	9f 93       	push	r25
    2cb2:	8f 93       	push	r24
    2cb4:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2cb8:	80 91 ff 08 	lds	r24, 0x08FF
    2cbc:	8f 93       	push	r24
    2cbe:	80 91 fe 08 	lds	r24, 0x08FE
    2cc2:	8f 93       	push	r24
    2cc4:	8e ed       	ldi	r24, 0xDE	; 222
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    2cc8:	9f 93       	push	r25
    2cca:	8f 93       	push	r24
    2ccc:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    2cd0:	c1 e1       	ldi	r28, 0x11	; 17
    2cd2:	d8 e0       	ldi	r29, 0x08	; 8
    2cd4:	ed b7       	in	r30, 0x3d	; 61
    2cd6:	fe b7       	in	r31, 0x3e	; 62
    2cd8:	74 96       	adiw	r30, 0x14	; 20
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	fe bf       	out	0x3e, r31	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	ed bf       	out	0x3d, r30	; 61
    2ce4:	00 e0       	ldi	r16, 0x00	; 0
    2ce6:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2ce8:	8e ee       	ldi	r24, 0xEE	; 238
    2cea:	68 2e       	mov	r6, r24
    2cec:	83 e0       	ldi	r24, 0x03	; 3
    2cee:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2cf0:	97 ec       	ldi	r25, 0xC7	; 199
    2cf2:	89 2e       	mov	r8, r25
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2cf8:	24 ed       	ldi	r18, 0xD4	; 212
    2cfa:	a2 2e       	mov	r10, r18
    2cfc:	23 e0       	ldi	r18, 0x03	; 3
    2cfe:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2d00:	3e ed       	ldi	r19, 0xDE	; 222
    2d02:	c3 2e       	mov	r12, r19
    2d04:	33 e0       	ldi	r19, 0x03	; 3
    2d06:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2d08:	ea 80       	ldd	r14, Y+2	; 0x02
    2d0a:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2d0c:	ff 92       	push	r15
    2d0e:	ef 92       	push	r14
    2d10:	1f 93       	push	r17
    2d12:	0f 93       	push	r16
    2d14:	7f 92       	push	r7
    2d16:	6f 92       	push	r6
    2d18:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
        printf( "canary = %x ",*stkc );
    2d1c:	f7 01       	movw	r30, r14
    2d1e:	80 81       	ld	r24, Z
    2d20:	1f 92       	push	r1
    2d22:	8f 93       	push	r24
    2d24:	9f 92       	push	r9
    2d26:	8f 92       	push	r8
    2d28:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	8f 93       	push	r24
    2d30:	88 81       	ld	r24, Y
    2d32:	8f 93       	push	r24
    2d34:	bf 92       	push	r11
    2d36:	af 92       	push	r10
    2d38:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	df 92       	push	r13
    2d42:	cf 92       	push	r12
    2d44:	0e 94 b8 2c 	call	0x5970	; 0x5970 <printf>
    2d48:	0f 5f       	subi	r16, 0xFF	; 255
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2d4e:	ed b7       	in	r30, 0x3d	; 61
    2d50:	fe b7       	in	r31, 0x3e	; 62
    2d52:	72 96       	adiw	r30, 0x12	; 18
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	fe bf       	out	0x3e, r31	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	ed bf       	out	0x3d, r30	; 61
    2d5e:	05 30       	cpi	r16, 0x05	; 5
    2d60:	11 05       	cpc	r17, r1
    2d62:	91 f6       	brne	.-92     	; 0x2d08 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	bf 90       	pop	r11
    2d76:	af 90       	pop	r10
    2d78:	9f 90       	pop	r9
    2d7a:	8f 90       	pop	r8
    2d7c:	7f 90       	pop	r7
    2d7e:	6f 90       	pop	r6
    2d80:	08 95       	ret

00002d82 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2d86:	e0 91 fe 08 	lds	r30, 0x08FE
    2d8a:	f0 91 ff 08 	lds	r31, 0x08FF
    2d8e:	c2 81       	ldd	r28, Z+2	; 0x02
    2d90:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2d92:	88 81       	ld	r24, Y
    2d94:	85 35       	cpi	r24, 0x55	; 85
    2d96:	39 f0       	breq	.+14     	; 0x2da6 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2d98:	0e 94 14 16 	call	0x2c28	; 0x2c28 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2da2:	85 e5       	ldi	r24, 0x55	; 85
    2da4:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2da6:	e0 91 fe 08 	lds	r30, 0x08FE
    2daa:	f0 91 ff 08 	lds	r31, 0x08FF
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	81 15       	cp	r24, r1
    2db4:	92 44       	sbci	r25, 0x42	; 66
    2db6:	38 f0       	brcs	.+14     	; 0x2dc6 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2db8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2dbc:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2dc2:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <nrk_error_add>




#endif
}
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	08 95       	ret

00002dcc <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2dcc:	2b e2       	ldi	r18, 0x2B	; 43
    2dce:	82 02       	muls	r24, r18
    2dd0:	f0 01       	movw	r30, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	ef 5e       	subi	r30, 0xEF	; 239
    2dd6:	f7 4f       	sbci	r31, 0xF7	; 247
    2dd8:	a2 81       	ldd	r26, Z+2	; 0x02
    2dda:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2ddc:	8c 91       	ld	r24, X
    2dde:	85 35       	cpi	r24, 0x55	; 85
    2de0:	19 f0       	breq	.+6      	; 0x2de8 <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    2de2:	85 e5       	ldi	r24, 0x55	; 85
    2de4:	8c 93       	st	X, r24
    2de6:	08 c0       	rjmp	.+16     	; 0x2df8 <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2de8:	80 81       	ld	r24, Z
    2dea:	91 81       	ldd	r25, Z+1	; 0x01
    2dec:	81 15       	cp	r24, r1
    2dee:	92 44       	sbci	r25, 0x42	; 66
    2df0:	28 f0       	brcs	.+10     	; 0x2dfc <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2df2:	82 e1       	ldi	r24, 0x12	; 18
    2df4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <nrk_error_add>
        return NRK_ERROR;
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	08 95       	ret
    }
#endif
    return NRK_OK;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
}
    2dfe:	08 95       	ret

00002e00 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2e04:	00 91 57 05 	lds	r16, 0x0557
    2e08:	10 91 58 05 	lds	r17, 0x0558
    2e0c:	20 91 59 05 	lds	r18, 0x0559
    2e10:	30 91 5a 05 	lds	r19, 0x055A
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	b9 01       	movw	r22, r18
    2e1a:	a8 01       	movw	r20, r16
    2e1c:	08 2e       	mov	r0, r24
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <nrk_signal_create+0x28>
    2e20:	76 95       	lsr	r23
    2e22:	67 95       	ror	r22
    2e24:	57 95       	ror	r21
    2e26:	47 95       	ror	r20
    2e28:	0a 94       	dec	r0
    2e2a:	d2 f7       	brpl	.-12     	; 0x2e20 <nrk_signal_create+0x20>
    2e2c:	40 fd       	sbrc	r20, 0
    2e2e:	19 c0       	rjmp	.+50     	; 0x2e62 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	60 e0       	ldi	r22, 0x00	; 0
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	08 2e       	mov	r0, r24
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <nrk_signal_create+0x44>
    2e3c:	44 0f       	add	r20, r20
    2e3e:	55 1f       	adc	r21, r21
    2e40:	66 1f       	adc	r22, r22
    2e42:	77 1f       	adc	r23, r23
    2e44:	0a 94       	dec	r0
    2e46:	d2 f7       	brpl	.-12     	; 0x2e3c <nrk_signal_create+0x3c>
    2e48:	40 2b       	or	r20, r16
    2e4a:	51 2b       	or	r21, r17
    2e4c:	62 2b       	or	r22, r18
    2e4e:	73 2b       	or	r23, r19
    2e50:	40 93 57 05 	sts	0x0557, r20
    2e54:	50 93 58 05 	sts	0x0558, r21
    2e58:	60 93 59 05 	sts	0x0559, r22
    2e5c:	70 93 5a 05 	sts	0x055A, r23
			return i;
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <nrk_signal_create+0x6c>
    2e62:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2e64:	80 32       	cpi	r24, 0x20	; 32
    2e66:	91 05       	cpc	r25, r1
    2e68:	b9 f6       	brne	.-82     	; 0x2e18 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2e6a:	8f ef       	ldi	r24, 0xFF	; 255


}
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret

00002e72 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2e72:	e0 91 fe 08 	lds	r30, 0x08FE
    2e76:	f0 91 ff 08 	lds	r31, 0x08FF
    2e7a:	65 85       	ldd	r22, Z+13	; 0x0d
    2e7c:	76 85       	ldd	r23, Z+14	; 0x0e
    2e7e:	87 85       	ldd	r24, Z+15	; 0x0f
    2e80:	90 89       	ldd	r25, Z+16	; 0x10
}
    2e82:	08 95       	ret

00002e84 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	1f 92       	push	r1
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2e9a:	c1 2c       	mov	r12, r1
    2e9c:	d1 2c       	mov	r13, r1
    2e9e:	76 01       	movw	r14, r12
    2ea0:	c3 94       	inc	r12
    2ea2:	08 2e       	mov	r0, r24
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <nrk_signal_delete+0x2a>
    2ea6:	cc 0c       	add	r12, r12
    2ea8:	dd 1c       	adc	r13, r13
    2eaa:	ee 1c       	adc	r14, r14
    2eac:	ff 1c       	adc	r15, r15
    2eae:	0a 94       	dec	r0
    2eb0:	d2 f7       	brpl	.-12     	; 0x2ea6 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2eb2:	40 91 57 05 	lds	r20, 0x0557
    2eb6:	50 91 58 05 	lds	r21, 0x0558
    2eba:	60 91 59 05 	lds	r22, 0x0559
    2ebe:	70 91 5a 05 	lds	r23, 0x055A
    2ec2:	4c 21       	and	r20, r12
    2ec4:	5d 21       	and	r21, r13
    2ec6:	6e 21       	and	r22, r14
    2ec8:	7f 21       	and	r23, r15
    2eca:	45 2b       	or	r20, r21
    2ecc:	46 2b       	or	r20, r22
    2ece:	47 2b       	or	r20, r23
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <nrk_signal_delete+0x50>
    2ed2:	63 c0       	rjmp	.+198    	; 0x2f9a <nrk_signal_delete+0x116>

	nrk_int_disable();
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    2eda:	ea e1       	ldi	r30, 0x1A	; 26
    2edc:	f8 e0       	ldi	r31, 0x08	; 8
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2ede:	97 01       	movw	r18, r14
    2ee0:	86 01       	movw	r16, r12
    2ee2:	00 95       	com	r16
    2ee4:	10 95       	com	r17
    2ee6:	20 95       	com	r18
    2ee8:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	df 01       	movw	r26, r30
    2ef0:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2ef2:	4c 91       	ld	r20, X
    2ef4:	4f 3f       	cpi	r20, 0xFF	; 255
    2ef6:	49 f1       	breq	.+82     	; 0x2f4a <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2ef8:	44 81       	ldd	r20, Z+4	; 0x04
    2efa:	55 81       	ldd	r21, Z+5	; 0x05
    2efc:	66 81       	ldd	r22, Z+6	; 0x06
    2efe:	77 81       	ldd	r23, Z+7	; 0x07
    2f00:	4c 15       	cp	r20, r12
    2f02:	5d 05       	cpc	r21, r13
    2f04:	6e 05       	cpc	r22, r14
    2f06:	7f 05       	cpc	r23, r15
    2f08:	41 f4       	brne	.+16     	; 0x2f1a <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2f0a:	10 86       	std	Z+8, r1	; 0x08
    2f0c:	11 86       	std	Z+9, r1	; 0x09
    2f0e:	12 86       	std	Z+10, r1	; 0x0a
    2f10:	13 86       	std	Z+11, r1	; 0x0b
    2f12:	df 01       	movw	r26, r30
    2f14:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    2f16:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2f18:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f1a:	44 81       	ldd	r20, Z+4	; 0x04
    2f1c:	55 81       	ldd	r21, Z+5	; 0x05
    2f1e:	66 81       	ldd	r22, Z+6	; 0x06
    2f20:	77 81       	ldd	r23, Z+7	; 0x07
    2f22:	40 23       	and	r20, r16
    2f24:	51 23       	and	r21, r17
    2f26:	62 23       	and	r22, r18
    2f28:	73 23       	and	r23, r19
    2f2a:	44 83       	std	Z+4, r20	; 0x04
    2f2c:	55 83       	std	Z+5, r21	; 0x05
    2f2e:	66 83       	std	Z+6, r22	; 0x06
    2f30:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f32:	40 85       	ldd	r20, Z+8	; 0x08
    2f34:	51 85       	ldd	r21, Z+9	; 0x09
    2f36:	62 85       	ldd	r22, Z+10	; 0x0a
    2f38:	73 85       	ldd	r23, Z+11	; 0x0b
    2f3a:	40 23       	and	r20, r16
    2f3c:	51 23       	and	r21, r17
    2f3e:	62 23       	and	r22, r18
    2f40:	73 23       	and	r23, r19
    2f42:	40 87       	std	Z+8, r20	; 0x08
    2f44:	51 87       	std	Z+9, r21	; 0x09
    2f46:	62 87       	std	Z+10, r22	; 0x0a
    2f48:	73 87       	std	Z+11, r23	; 0x0b
    2f4a:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2f4c:	48 e0       	ldi	r20, 0x08	; 8
    2f4e:	e1 3f       	cpi	r30, 0xF1	; 241
    2f50:	f4 07       	cpc	r31, r20
    2f52:	69 f6       	brne	.-102    	; 0x2eee <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2f54:	4e ef       	ldi	r20, 0xFE	; 254
    2f56:	5f ef       	ldi	r21, 0xFF	; 255
    2f58:	6f ef       	ldi	r22, 0xFF	; 255
    2f5a:	7f ef       	ldi	r23, 0xFF	; 255
    2f5c:	04 c0       	rjmp	.+8      	; 0x2f66 <nrk_signal_delete+0xe2>
    2f5e:	44 0f       	add	r20, r20
    2f60:	55 1f       	adc	r21, r21
    2f62:	66 1f       	adc	r22, r22
    2f64:	77 1f       	adc	r23, r23
    2f66:	8a 95       	dec	r24
    2f68:	d2 f7       	brpl	.-12     	; 0x2f5e <nrk_signal_delete+0xda>
    2f6a:	80 91 57 05 	lds	r24, 0x0557
    2f6e:	90 91 58 05 	lds	r25, 0x0558
    2f72:	a0 91 59 05 	lds	r26, 0x0559
    2f76:	b0 91 5a 05 	lds	r27, 0x055A
    2f7a:	84 23       	and	r24, r20
    2f7c:	95 23       	and	r25, r21
    2f7e:	a6 23       	and	r26, r22
    2f80:	b7 23       	and	r27, r23
    2f82:	80 93 57 05 	sts	0x0557, r24
    2f86:	90 93 58 05 	sts	0x0558, r25
    2f8a:	a0 93 59 05 	sts	0x0559, r26
    2f8e:	b0 93 5a 05 	sts	0x055A, r27
	nrk_int_enable();
    2f92:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>

	return NRK_OK;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2f9a:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2f9c:	0f 90       	pop	r0
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	ff 90       	pop	r15
    2fa8:	ef 90       	pop	r14
    2faa:	df 90       	pop	r13
    2fac:	cf 90       	pop	r12
    2fae:	08 95       	ret

00002fb0 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	04 c0       	rjmp	.+8      	; 0x2fc6 <nrk_signal_unregister+0x16>
    2fbe:	44 0f       	add	r20, r20
    2fc0:	55 1f       	adc	r21, r21
    2fc2:	66 1f       	adc	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	8a 95       	dec	r24
    2fc8:	d2 f7       	brpl	.-12     	; 0x2fbe <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2fca:	e0 91 fe 08 	lds	r30, 0x08FE
    2fce:	f0 91 ff 08 	lds	r31, 0x08FF
    2fd2:	85 85       	ldd	r24, Z+13	; 0x0d
    2fd4:	96 85       	ldd	r25, Z+14	; 0x0e
    2fd6:	a7 85       	ldd	r26, Z+15	; 0x0f
    2fd8:	b0 89       	ldd	r27, Z+16	; 0x10
    2fda:	8a 01       	movw	r16, r20
    2fdc:	9b 01       	movw	r18, r22
    2fde:	08 23       	and	r16, r24
    2fe0:	19 23       	and	r17, r25
    2fe2:	2a 23       	and	r18, r26
    2fe4:	3b 23       	and	r19, r27
    2fe6:	01 2b       	or	r16, r17
    2fe8:	02 2b       	or	r16, r18
    2fea:	03 2b       	or	r16, r19
    2fec:	d1 f0       	breq	.+52     	; 0x3022 <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2fee:	40 95       	com	r20
    2ff0:	50 95       	com	r21
    2ff2:	60 95       	com	r22
    2ff4:	70 95       	com	r23
    2ff6:	84 23       	and	r24, r20
    2ff8:	95 23       	and	r25, r21
    2ffa:	a6 23       	and	r26, r22
    2ffc:	b7 23       	and	r27, r23
    2ffe:	85 87       	std	Z+13, r24	; 0x0d
    3000:	96 87       	std	Z+14, r25	; 0x0e
    3002:	a7 87       	std	Z+15, r26	; 0x0f
    3004:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3006:	81 89       	ldd	r24, Z+17	; 0x11
    3008:	92 89       	ldd	r25, Z+18	; 0x12
    300a:	a3 89       	ldd	r26, Z+19	; 0x13
    300c:	b4 89       	ldd	r27, Z+20	; 0x14
    300e:	84 23       	and	r24, r20
    3010:	95 23       	and	r25, r21
    3012:	a6 23       	and	r26, r22
    3014:	b7 23       	and	r27, r23
    3016:	81 8b       	std	Z+17, r24	; 0x11
    3018:	92 8b       	std	Z+18, r25	; 0x12
    301a:	a3 8b       	std	Z+19, r26	; 0x13
    301c:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3022:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    302a:	40 91 57 05 	lds	r20, 0x0557
    302e:	50 91 58 05 	lds	r21, 0x0558
    3032:	60 91 59 05 	lds	r22, 0x0559
    3036:	70 91 5a 05 	lds	r23, 0x055A
    303a:	08 2e       	mov	r0, r24
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <nrk_signal_register+0x1c>
    303e:	76 95       	lsr	r23
    3040:	67 95       	ror	r22
    3042:	57 95       	ror	r21
    3044:	47 95       	ror	r20
    3046:	0a 94       	dec	r0
    3048:	d2 f7       	brpl	.-12     	; 0x303e <nrk_signal_register+0x14>
    304a:	40 ff       	sbrs	r20, 0
    304c:	1d c0       	rjmp	.+58     	; 0x3088 <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    304e:	e0 91 fe 08 	lds	r30, 0x08FE
    3052:	f0 91 ff 08 	lds	r31, 0x08FF
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	04 c0       	rjmp	.+8      	; 0x3068 <nrk_signal_register+0x3e>
    3060:	44 0f       	add	r20, r20
    3062:	55 1f       	adc	r21, r21
    3064:	66 1f       	adc	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	8a 95       	dec	r24
    306a:	d2 f7       	brpl	.-12     	; 0x3060 <nrk_signal_register+0x36>
    306c:	85 85       	ldd	r24, Z+13	; 0x0d
    306e:	96 85       	ldd	r25, Z+14	; 0x0e
    3070:	a7 85       	ldd	r26, Z+15	; 0x0f
    3072:	b0 89       	ldd	r27, Z+16	; 0x10
    3074:	84 2b       	or	r24, r20
    3076:	95 2b       	or	r25, r21
    3078:	a6 2b       	or	r26, r22
    307a:	b7 2b       	or	r27, r23
    307c:	85 87       	std	Z+13, r24	; 0x0d
    307e:	96 87       	std	Z+14, r25	; 0x0e
    3080:	a7 87       	std	Z+15, r26	; 0x0f
    3082:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	08 95       	ret
	}
            
	return NRK_ERROR;
    3088:	8f ef       	ldi	r24, 0xFF	; 255
}
    308a:	08 95       	ret

0000308c <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    309a:	c1 2c       	mov	r12, r1
    309c:	d1 2c       	mov	r13, r1
    309e:	76 01       	movw	r14, r12
    30a0:	c3 94       	inc	r12
    30a2:	04 c0       	rjmp	.+8      	; 0x30ac <nrk_event_signal+0x20>
    30a4:	cc 0c       	add	r12, r12
    30a6:	dd 1c       	adc	r13, r13
    30a8:	ee 1c       	adc	r14, r14
    30aa:	ff 1c       	adc	r15, r15
    30ac:	8a 95       	dec	r24
    30ae:	d2 f7       	brpl	.-12     	; 0x30a4 <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    30b0:	80 91 57 05 	lds	r24, 0x0557
    30b4:	90 91 58 05 	lds	r25, 0x0558
    30b8:	a0 91 59 05 	lds	r26, 0x0559
    30bc:	b0 91 5a 05 	lds	r27, 0x055A
    30c0:	8c 21       	and	r24, r12
    30c2:	9d 21       	and	r25, r13
    30c4:	ae 21       	and	r26, r14
    30c6:	bf 21       	and	r27, r15
    30c8:	89 2b       	or	r24, r25
    30ca:	8a 2b       	or	r24, r26
    30cc:	8b 2b       	or	r24, r27
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <nrk_event_signal+0x48>
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	44 c0       	rjmp	.+136    	; 0x315c <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    30d4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    30d8:	e8 e1       	ldi	r30, 0x18	; 24
    30da:	f8 e0       	ldi	r31, 0x08	; 8
    30dc:	ca e1       	ldi	r28, 0x1A	; 26
    30de:	d8 e0       	ldi	r29, 0x08	; 8

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    30e0:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    30e2:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    30e4:	80 81       	ld	r24, Z
    30e6:	81 30       	cpi	r24, 0x01	; 1
    30e8:	b9 f4       	brne	.+46     	; 0x3118 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    30ea:	82 85       	ldd	r24, Z+10	; 0x0a
    30ec:	93 85       	ldd	r25, Z+11	; 0x0b
    30ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    30f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    30f2:	8c 21       	and	r24, r12
    30f4:	9d 21       	and	r25, r13
    30f6:	ae 21       	and	r26, r14
    30f8:	bf 21       	and	r27, r15
    30fa:	89 2b       	or	r24, r25
    30fc:	8a 2b       	or	r24, r26
    30fe:	8b 2b       	or	r24, r27
    3100:	59 f0       	breq	.+22     	; 0x3118 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3102:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    3104:	16 86       	std	Z+14, r1	; 0x0e
    3106:	17 86       	std	Z+15, r1	; 0x0f
    3108:	10 8a       	std	Z+16, r1	; 0x10
    310a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    310c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    310e:	c2 86       	std	Z+10, r12	; 0x0a
    3110:	d3 86       	std	Z+11, r13	; 0x0b
    3112:	e4 86       	std	Z+12, r14	; 0x0c
    3114:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3116:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3118:	80 81       	ld	r24, Z
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	a1 f4       	brne	.+40     	; 0x3146 <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    311e:	82 85       	ldd	r24, Z+10	; 0x0a
    3120:	93 85       	ldd	r25, Z+11	; 0x0b
    3122:	a4 85       	ldd	r26, Z+12	; 0x0c
    3124:	b5 85       	ldd	r27, Z+13	; 0x0d
    3126:	8c 15       	cp	r24, r12
    3128:	9d 05       	cpc	r25, r13
    312a:	ae 05       	cpc	r26, r14
    312c:	bf 05       	cpc	r27, r15
    312e:	59 f4       	brne	.+22     	; 0x3146 <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3130:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    3132:	16 86       	std	Z+14, r1	; 0x0e
    3134:	17 86       	std	Z+15, r1	; 0x0f
    3136:	10 8a       	std	Z+16, r1	; 0x10
    3138:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    313a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    313c:	12 86       	std	Z+10, r1	; 0x0a
    313e:	13 86       	std	Z+11, r1	; 0x0b
    3140:	14 86       	std	Z+12, r1	; 0x0c
    3142:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3144:	11 e0       	ldi	r17, 0x01	; 1
    3146:	bb 96       	adiw	r30, 0x2b	; 43
    3148:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    314a:	88 e0       	ldi	r24, 0x08	; 8
    314c:	ef 3e       	cpi	r30, 0xEF	; 239
    314e:	f8 07       	cpc	r31, r24
    3150:	49 f6       	brne	.-110    	; 0x30e4 <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3152:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
	if(event_occured)
    3156:	11 11       	cpse	r17, r1
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    315a:	82 e0       	ldi	r24, 0x02	; 2
    315c:	0e 94 05 14 	call	0x280a	; 0x280a <_nrk_errno_set>
	return NRK_ERROR;
    3160:	8f ef       	ldi	r24, 0xFF	; 255
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    3164:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	08 95       	ret

00003176 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    317a:	e0 91 fe 08 	lds	r30, 0x08FE
    317e:	f0 91 ff 08 	lds	r31, 0x08FF
    3182:	05 85       	ldd	r16, Z+13	; 0x0d
    3184:	16 85       	ldd	r17, Z+14	; 0x0e
    3186:	27 85       	ldd	r18, Z+15	; 0x0f
    3188:	30 89       	ldd	r19, Z+16	; 0x10
    318a:	06 23       	and	r16, r22
    318c:	17 23       	and	r17, r23
    318e:	28 23       	and	r18, r24
    3190:	39 23       	and	r19, r25
    3192:	01 2b       	or	r16, r17
    3194:	02 2b       	or	r16, r18
    3196:	03 2b       	or	r16, r19
    3198:	19 f1       	breq	.+70     	; 0x31e0 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    319a:	61 8b       	std	Z+17, r22	; 0x11
    319c:	72 8b       	std	Z+18, r23	; 0x12
    319e:	83 8b       	std	Z+19, r24	; 0x13
    31a0:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    31a2:	21 e0       	ldi	r18, 0x01	; 1
    31a4:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	00 90 ee 08 	lds	r0, 0x08EE
    31ae:	04 c0       	rjmp	.+8      	; 0x31b8 <nrk_event_wait+0x42>
    31b0:	b6 95       	lsr	r27
    31b2:	a7 95       	ror	r26
    31b4:	97 95       	ror	r25
    31b6:	87 95       	ror	r24
    31b8:	0a 94       	dec	r0
    31ba:	d2 f7       	brpl	.-12     	; 0x31b0 <nrk_event_wait+0x3a>
    31bc:	80 ff       	sbrs	r24, 0
    31be:	03 c0       	rjmp	.+6      	; 0x31c6 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    31c0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <nrk_wait_until_nw>
    31c4:	04 c0       	rjmp	.+8      	; 0x31ce <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 4e 1c 	call	0x389c	; 0x389c <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    31ce:	e0 91 fe 08 	lds	r30, 0x08FE
    31d2:	f0 91 ff 08 	lds	r31, 0x08FF
    31d6:	61 89       	ldd	r22, Z+17	; 0x11
    31d8:	72 89       	ldd	r23, Z+18	; 0x12
    31da:	83 89       	ldd	r24, Z+19	; 0x13
    31dc:	94 89       	ldd	r25, Z+20	; 0x14
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	08 95       	ret

000031ec <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	08 95       	ret

000031f2 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    31f2:	21 e0       	ldi	r18, 0x01	; 1
    31f4:	8a 5e       	subi	r24, 0xEA	; 234
    31f6:	98 40       	sbci	r25, 0x08	; 8
    31f8:	09 f4       	brne	.+2      	; 0x31fc <nrk_get_resource_index+0xa>
    31fa:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    31fc:	82 2f       	mov	r24, r18
    31fe:	81 95       	neg	r24
    3200:	08 95       	ret

00003202 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3202:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3206:	8f 3f       	cpi	r24, 0xFF	; 255
    3208:	11 f4       	brne	.+4      	; 0x320e <nrk_sem_query+0xc>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	03 c0       	rjmp	.+6      	; 0x3214 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	29 f4       	brne	.+10     	; 0x321c <nrk_sem_query+0x1a>
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	0e 94 05 14 	call	0x280a	; 0x280a <_nrk_errno_set>
    3218:	8f ef       	ldi	r24, 0xFF	; 255
    321a:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    321c:	99 27       	eor	r25, r25
    321e:	87 fd       	sbrc	r24, 7
    3220:	90 95       	com	r25
    3222:	fc 01       	movw	r30, r24
    3224:	ee 0f       	add	r30, r30
    3226:	ff 1f       	adc	r31, r31
    3228:	e8 0f       	add	r30, r24
    322a:	f9 1f       	adc	r31, r25
    322c:	e4 51       	subi	r30, 0x14	; 20
    322e:	f7 4f       	sbci	r31, 0xF7	; 247
    3230:	80 81       	ld	r24, Z
}
    3232:	08 95       	ret

00003234 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	1f 92       	push	r1
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3246:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    324a:	8f 3f       	cpi	r24, 0xFF	; 255
    324c:	11 f4       	brne	.+4      	; 0x3252 <nrk_sem_pend+0x1e>
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	03 c0       	rjmp	.+6      	; 0x3258 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	29 f4       	brne	.+10     	; 0x3260 <nrk_sem_pend+0x2c>
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	0e 94 05 14 	call	0x280a	; 0x280a <_nrk_errno_set>
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	3f c0       	rjmp	.+126    	; 0x32de <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	e8 2e       	mov	r14, r24
    326a:	ff 24       	eor	r15, r15
    326c:	e7 fc       	sbrc	r14, 7
    326e:	f0 94       	com	r15
    3270:	87 01       	movw	r16, r14
    3272:	00 0f       	add	r16, r16
    3274:	11 1f       	adc	r17, r17
    3276:	f8 01       	movw	r30, r16
    3278:	ee 0d       	add	r30, r14
    327a:	ff 1d       	adc	r31, r15
    327c:	e4 51       	subi	r30, 0x14	; 20
    327e:	f7 4f       	sbci	r31, 0xF7	; 247
    3280:	90 81       	ld	r25, Z
    3282:	91 11       	cpse	r25, r1
    3284:	16 c0       	rjmp	.+44     	; 0x32b2 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3286:	e0 91 fe 08 	lds	r30, 0x08FE
    328a:	f0 91 ff 08 	lds	r31, 0x08FF
    328e:	97 81       	ldd	r25, Z+7	; 0x07
    3290:	92 60       	ori	r25, 0x02	; 2
    3292:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3294:	99 27       	eor	r25, r25
    3296:	87 fd       	sbrc	r24, 7
    3298:	90 95       	com	r25
    329a:	a9 2f       	mov	r26, r25
    329c:	b9 2f       	mov	r27, r25
    329e:	81 8b       	std	Z+17, r24	; 0x11
    32a0:	92 8b       	std	Z+18, r25	; 0x12
    32a2:	a3 8b       	std	Z+19, r26	; 0x13
    32a4:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    32a6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
		nrk_wait_until_ticks(0);
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 4e 1c 	call	0x389c	; 0x389c <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    32b2:	0e 0d       	add	r16, r14
    32b4:	1f 1d       	adc	r17, r15
    32b6:	f8 01       	movw	r30, r16
    32b8:	e4 51       	subi	r30, 0x14	; 20
    32ba:	f7 4f       	sbci	r31, 0xF7	; 247
    32bc:	80 81       	ld	r24, Z
    32be:	81 50       	subi	r24, 0x01	; 1
    32c0:	80 83       	st	Z, r24
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    32c2:	e0 91 fe 08 	lds	r30, 0x08FE
    32c6:	f0 91 ff 08 	lds	r31, 0x08FF
    32ca:	d8 01       	movw	r26, r16
    32cc:	a5 51       	subi	r26, 0x15	; 21
    32ce:	b7 4f       	sbci	r27, 0xF7	; 247
    32d0:	8c 91       	ld	r24, X
    32d2:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    32d8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>

	return NRK_OK;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
}
    32de:	0f 90       	pop	r0
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	08 95       	ret

000032ee <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    32ee:	cf 92       	push	r12
    32f0:	df 92       	push	r13
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	1f 92       	push	r1
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3304:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3308:	8f 3f       	cpi	r24, 0xFF	; 255
    330a:	11 f4       	brne	.+4      	; 0x3310 <nrk_sem_post+0x22>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <nrk_sem_post+0x28>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	29 f4       	brne	.+10     	; 0x331e <nrk_sem_post+0x30>
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	0e 94 05 14 	call	0x280a	; 0x280a <_nrk_errno_set>
    331a:	8f ef       	ldi	r24, 0xFF	; 255
    331c:	4d c0       	rjmp	.+154    	; 0x33b8 <nrk_sem_post+0xca>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    331e:	48 2f       	mov	r20, r24
    3320:	55 27       	eor	r21, r21
    3322:	47 fd       	sbrc	r20, 7
    3324:	50 95       	com	r21
    3326:	9a 01       	movw	r18, r20
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	24 0f       	add	r18, r20
    332e:	35 1f       	adc	r19, r21
    3330:	89 01       	movw	r16, r18
    3332:	04 51       	subi	r16, 0x14	; 20
    3334:	17 4f       	sbci	r17, 0xF7	; 247
    3336:	f9 01       	movw	r30, r18
    3338:	e6 51       	subi	r30, 0x16	; 22
    333a:	f7 4f       	sbci	r31, 0xF7	; 247
    333c:	d8 01       	movw	r26, r16
    333e:	4c 91       	ld	r20, X
    3340:	90 81       	ld	r25, Z
    3342:	49 17       	cp	r20, r25
    3344:	c4 f5       	brge	.+112    	; 0x33b6 <nrk_sem_post+0xc8>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>

		nrk_sem_list[id].value++;
    334c:	f8 01       	movw	r30, r16
    334e:	90 81       	ld	r25, Z
    3350:	9f 5f       	subi	r25, 0xFF	; 255
    3352:	90 83       	st	Z, r25
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3354:	e0 91 fe 08 	lds	r30, 0x08FE
    3358:	f0 91 ff 08 	lds	r31, 0x08FF
    335c:	14 82       	std	Z+4, r1	; 0x04
    335e:	e8 e1       	ldi	r30, 0x18	; 24
    3360:	f8 e0       	ldi	r31, 0x08	; 8
    3362:	0a e1       	ldi	r16, 0x1A	; 26
    3364:	18 e0       	ldi	r17, 0x08	; 8

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	c8 2e       	mov	r12, r24
    336a:	dd 24       	eor	r13, r13
    336c:	c7 fc       	sbrc	r12, 7
    336e:	d0 94       	com	r13
    3370:	ed 2c       	mov	r14, r13
    3372:	fd 2c       	mov	r15, r13
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3374:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3376:	30 81       	ld	r19, Z
    3378:	32 30       	cpi	r19, 0x02	; 2
    337a:	a1 f4       	brne	.+40     	; 0x33a4 <nrk_sem_post+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    337c:	42 85       	ldd	r20, Z+10	; 0x0a
    337e:	53 85       	ldd	r21, Z+11	; 0x0b
    3380:	64 85       	ldd	r22, Z+12	; 0x0c
    3382:	75 85       	ldd	r23, Z+13	; 0x0d
    3384:	4c 15       	cp	r20, r12
    3386:	5d 05       	cpc	r21, r13
    3388:	6e 05       	cpc	r22, r14
    338a:	7f 05       	cpc	r23, r15
    338c:	59 f4       	brne	.+22     	; 0x33a4 <nrk_sem_post+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    338e:	d8 01       	movw	r26, r16
    3390:	2c 93       	st	X, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    3392:	16 86       	std	Z+14, r1	; 0x0e
    3394:	17 86       	std	Z+15, r1	; 0x0f
    3396:	10 8a       	std	Z+16, r1	; 0x10
    3398:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    339a:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    339c:	12 86       	std	Z+10, r1	; 0x0a
    339e:	13 86       	std	Z+11, r1	; 0x0b
    33a0:	14 86       	std	Z+12, r1	; 0x0c
    33a2:	15 86       	std	Z+13, r1	; 0x0d
    33a4:	bb 96       	adiw	r30, 0x2b	; 43
    33a6:	05 5d       	subi	r16, 0xD5	; 213
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    33aa:	b8 e0       	ldi	r27, 0x08	; 8
    33ac:	ef 3e       	cpi	r30, 0xEF	; 239
    33ae:	fb 07       	cpc	r31, r27
    33b0:	11 f7       	brne	.-60     	; 0x3376 <nrk_sem_post+0x88>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    33b2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
	}
		
return NRK_OK;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
}
    33b8:	0f 90       	pop	r0
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	08 95       	ret

000033cc <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    33cc:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    33d0:	8f 3f       	cpi	r24, 0xFF	; 255
    33d2:	11 f4       	brne	.+4      	; 0x33d8 <nrk_sem_delete+0xc>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	29 f4       	brne	.+10     	; 0x33e6 <nrk_sem_delete+0x1a>
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	0e 94 05 14 	call	0x280a	; 0x280a <_nrk_errno_set>
    33e2:	8f ef       	ldi	r24, 0xFF	; 255
    33e4:	08 95       	ret

	nrk_sem_list[id].count=-1;
    33e6:	99 27       	eor	r25, r25
    33e8:	87 fd       	sbrc	r24, 7
    33ea:	90 95       	com	r25
    33ec:	9c 01       	movw	r18, r24
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	28 0f       	add	r18, r24
    33f4:	39 1f       	adc	r19, r25
    33f6:	f9 01       	movw	r30, r18
    33f8:	e6 51       	subi	r30, 0x16	; 22
    33fa:	f7 4f       	sbci	r31, 0xF7	; 247
    33fc:	8f ef       	ldi	r24, 0xFF	; 255
    33fe:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3400:	f9 01       	movw	r30, r18
    3402:	e4 51       	subi	r30, 0x14	; 20
    3404:	f7 4f       	sbci	r31, 0xF7	; 247
    3406:	80 83       	st	Z, r24
	nrk_sem_list[id].resource_ceiling=-1;
    3408:	f9 01       	movw	r30, r18
    340a:	e5 51       	subi	r30, 0x15	; 21
    340c:	f7 4f       	sbci	r31, 0xF7	; 247
    340e:	80 83       	st	Z, r24
	_nrk_resource_cnt--;
    3410:	80 91 fd 08 	lds	r24, 0x08FD
    3414:	81 50       	subi	r24, 0x01	; 1
    3416:	80 93 fd 08 	sts	0x08FD, r24
return NRK_OK;
    341a:	81 e0       	ldi	r24, 0x01	; 1
}
    341c:	08 95       	ret

0000341e <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    341e:	e0 91 f3 08 	lds	r30, 0x08F3
    3422:	f0 91 f4 08 	lds	r31, 0x08F4
}
    3426:	80 81       	ld	r24, Z
    3428:	08 95       	ret

0000342a <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    342a:	e0 91 f3 08 	lds	r30, 0x08F3
    342e:	f0 91 f4 08 	lds	r31, 0x08F4
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3432:	30 97       	sbiw	r30, 0x00	; 0
    3434:	21 f0       	breq	.+8      	; 0x343e <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3436:	03 80       	ldd	r0, Z+3	; 0x03
    3438:	f4 81       	ldd	r31, Z+4	; 0x04
    343a:	e0 2d       	mov	r30, r0
    343c:	fa cf       	rjmp	.-12     	; 0x3432 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    343e:	08 95       	ret

00003440 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3450:	e0 91 0f 08 	lds	r30, 0x080F
    3454:	f0 91 10 08 	lds	r31, 0x0810
    3458:	30 97       	sbiw	r30, 0x00	; 0
    345a:	09 f4       	brne	.+2      	; 0x345e <nrk_add_to_readyQ+0x1e>
    345c:	8a c0       	rjmp	.+276    	; 0x3572 <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    345e:	40 91 f3 08 	lds	r20, 0x08F3
    3462:	50 91 f4 08 	lds	r21, 0x08F4
    CurNode = _free_node;

    if (_head_node != NULL)
    3466:	41 15       	cp	r20, r1
    3468:	51 05       	cpc	r21, r1
    346a:	09 f4       	brne	.+2      	; 0x346e <nrk_add_to_readyQ+0x2e>
    346c:	46 c0       	rjmp	.+140    	; 0x34fa <nrk_add_to_readyQ+0xba>
    346e:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3470:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3472:	69 2f       	mov	r22, r25
    3474:	78 2f       	mov	r23, r24
    3476:	76 03       	mulsu	r23, r22
    3478:	90 01       	movw	r18, r0
    347a:	11 24       	eor	r1, r1
    347c:	2f 5e       	subi	r18, 0xEF	; 239
    347e:	37 4f       	sbci	r19, 0xF7	; 247
    3480:	89 01       	movw	r16, r18
    3482:	06 5f       	subi	r16, 0xF6	; 246
    3484:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3486:	79 01       	movw	r14, r18
    3488:	c4 e0       	ldi	r28, 0x04	; 4
    348a:	ec 0e       	add	r14, r28
    348c:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    348e:	25 5f       	subi	r18, 0xF5	; 245
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3492:	6c 91       	ld	r22, X
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	96 9f       	mul	r25, r22
    3498:	e0 01       	movw	r28, r0
    349a:	97 9f       	mul	r25, r23
    349c:	d0 0d       	add	r29, r0
    349e:	11 24       	eor	r1, r1
    34a0:	cf 5e       	subi	r28, 0xEF	; 239
    34a2:	d7 4f       	sbci	r29, 0xF7	; 247
    34a4:	dc 80       	ldd	r13, Y+4	; 0x04
    34a6:	dd 20       	and	r13, r13
    34a8:	29 f0       	breq	.+10     	; 0x34b4 <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    34aa:	db 84       	ldd	r13, Y+11	; 0x0b
    34ac:	e8 01       	movw	r28, r16
    34ae:	c8 80       	ld	r12, Y
    34b0:	dc 14       	cp	r13, r12
    34b2:	28 f1       	brcs	.+74     	; 0x34fe <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    34b4:	e7 01       	movw	r28, r14
    34b6:	d8 80       	ld	r13, Y
    34b8:	dd 20       	and	r13, r13
    34ba:	61 f0       	breq	.+24     	; 0x34d4 <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    34bc:	96 9f       	mul	r25, r22
    34be:	e0 01       	movw	r28, r0
    34c0:	97 9f       	mul	r25, r23
    34c2:	d0 0d       	add	r29, r0
    34c4:	11 24       	eor	r1, r1
    34c6:	cf 5e       	subi	r28, 0xEF	; 239
    34c8:	d7 4f       	sbci	r29, 0xF7	; 247
    34ca:	da 84       	ldd	r13, Y+10	; 0x0a
    34cc:	e9 01       	movw	r28, r18
    34ce:	c8 80       	ld	r12, Y
    34d0:	dc 14       	cp	r13, r12
    34d2:	a8 f0       	brcs	.+42     	; 0x34fe <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    34d4:	96 9f       	mul	r25, r22
    34d6:	e0 01       	movw	r28, r0
    34d8:	97 9f       	mul	r25, r23
    34da:	d0 0d       	add	r29, r0
    34dc:	11 24       	eor	r1, r1
    34de:	cf 5e       	subi	r28, 0xEF	; 239
    34e0:	d7 4f       	sbci	r29, 0xF7	; 247
    34e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    34e4:	e8 01       	movw	r28, r16
    34e6:	68 81       	ld	r22, Y
    34e8:	76 17       	cp	r23, r22
    34ea:	48 f0       	brcs	.+18     	; 0x34fe <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    34ec:	13 96       	adiw	r26, 0x03	; 3
    34ee:	0d 90       	ld	r0, X+
    34f0:	bc 91       	ld	r27, X
    34f2:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    34f4:	10 97       	sbiw	r26, 0x00	; 0
    34f6:	69 f6       	brne	.-102    	; 0x3492 <nrk_add_to_readyQ+0x52>
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <nrk_add_to_readyQ+0xbe>
    34fa:	a0 e0       	ldi	r26, 0x00	; 0
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    34fe:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3500:	c3 81       	ldd	r28, Z+3	; 0x03
    3502:	d4 81       	ldd	r29, Z+4	; 0x04
    3504:	d0 93 10 08 	sts	0x0810, r29
    3508:	c0 93 0f 08 	sts	0x080F, r28

    if (NextNode == _head_node)
    350c:	a4 17       	cp	r26, r20
    350e:	b5 07       	cpc	r27, r21
    3510:	b1 f4       	brne	.+44     	; 0x353e <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    3512:	10 97       	sbiw	r26, 0x00	; 0
    3514:	49 f0       	breq	.+18     	; 0x3528 <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    3516:	b4 83       	std	Z+4, r27	; 0x04
    3518:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    351a:	12 82       	std	Z+2, r1	; 0x02
    351c:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    351e:	12 96       	adiw	r26, 0x02	; 2
    3520:	fc 93       	st	X, r31
    3522:	ee 93       	st	-X, r30
    3524:	11 97       	sbiw	r26, 0x01	; 1
    3526:	06 c0       	rjmp	.+12     	; 0x3534 <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    3528:	14 82       	std	Z+4, r1	; 0x04
    352a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    352c:	12 82       	std	Z+2, r1	; 0x02
    352e:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3530:	fa 83       	std	Y+2, r31	; 0x02
    3532:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3534:	f0 93 f4 08 	sts	0x08F4, r31
    3538:	e0 93 f3 08 	sts	0x08F3, r30
    353c:	1a c0       	rjmp	.+52     	; 0x3572 <nrk_add_to_readyQ+0x132>
    353e:	11 96       	adiw	r26, 0x01	; 1
    3540:	8d 91       	ld	r24, X+
    3542:	9c 91       	ld	r25, X
    3544:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    3546:	ac 17       	cp	r26, r28
    3548:	bd 07       	cpc	r27, r29
    354a:	59 f0       	breq	.+22     	; 0x3562 <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    354c:	92 83       	std	Z+2, r25	; 0x02
    354e:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3550:	b4 83       	std	Z+4, r27	; 0x04
    3552:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3554:	11 96       	adiw	r26, 0x01	; 1
    3556:	cd 91       	ld	r28, X+
    3558:	dc 91       	ld	r29, X
    355a:	12 97       	sbiw	r26, 0x02	; 2
    355c:	fc 83       	std	Y+4, r31	; 0x04
    355e:	eb 83       	std	Y+3, r30	; 0x03
    3560:	04 c0       	rjmp	.+8      	; 0x356a <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3562:	14 82       	std	Z+4, r1	; 0x04
    3564:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3566:	92 83       	std	Z+2, r25	; 0x02
    3568:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    356a:	12 96       	adiw	r26, 0x02	; 2
    356c:	fc 93       	st	X, r31
    356e:	ee 93       	st	-X, r30
    3570:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	df 90       	pop	r13
    3580:	cf 90       	pop	r12
    3582:	08 95       	ret

00003584 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3588:	e0 91 f3 08 	lds	r30, 0x08F3
    358c:	f0 91 f4 08 	lds	r31, 0x08F4
    3590:	30 97       	sbiw	r30, 0x00	; 0
    3592:	09 f4       	brne	.+2      	; 0x3596 <nrk_rem_from_readyQ+0x12>
    3594:	44 c0       	rjmp	.+136    	; 0x361e <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3596:	99 27       	eor	r25, r25
    3598:	87 fd       	sbrc	r24, 7
    359a:	90 95       	com	r25
    359c:	20 81       	ld	r18, Z
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	28 17       	cp	r18, r24
    35a2:	39 07       	cpc	r19, r25
    35a4:	81 f4       	brne	.+32     	; 0x35c6 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    35a6:	a3 81       	ldd	r26, Z+3	; 0x03
    35a8:	b4 81       	ldd	r27, Z+4	; 0x04
    35aa:	b0 93 f4 08 	sts	0x08F4, r27
    35ae:	a0 93 f3 08 	sts	0x08F3, r26
        _head_node->Prev = NULL;
    35b2:	12 96       	adiw	r26, 0x02	; 2
    35b4:	1c 92       	st	X, r1
    35b6:	1e 92       	st	-X, r1
    35b8:	11 97       	sbiw	r26, 0x01	; 1
    35ba:	18 c0       	rjmp	.+48     	; 0x35ec <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    35bc:	03 80       	ldd	r0, Z+3	; 0x03
    35be:	f4 81       	ldd	r31, Z+4	; 0x04
    35c0:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    35c2:	30 97       	sbiw	r30, 0x00	; 0
    35c4:	61 f1       	breq	.+88     	; 0x361e <nrk_rem_from_readyQ+0x9a>
    35c6:	20 81       	ld	r18, Z
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	28 17       	cp	r18, r24
    35cc:	39 07       	cpc	r19, r25
    35ce:	b1 f7       	brne	.-20     	; 0x35bc <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    35d0:	c1 81       	ldd	r28, Z+1	; 0x01
    35d2:	d2 81       	ldd	r29, Z+2	; 0x02
    35d4:	83 81       	ldd	r24, Z+3	; 0x03
    35d6:	94 81       	ldd	r25, Z+4	; 0x04
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    35dc:	a3 81       	ldd	r26, Z+3	; 0x03
    35de:	b4 81       	ldd	r27, Z+4	; 0x04
    35e0:	10 97       	sbiw	r26, 0x00	; 0
    35e2:	21 f0       	breq	.+8      	; 0x35ec <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    35e4:	12 96       	adiw	r26, 0x02	; 2
    35e6:	dc 93       	st	X, r29
    35e8:	ce 93       	st	-X, r28
    35ea:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    35ec:	a0 91 0f 08 	lds	r26, 0x080F
    35f0:	b0 91 10 08 	lds	r27, 0x0810
    35f4:	10 97       	sbiw	r26, 0x00	; 0
    35f6:	39 f4       	brne	.+14     	; 0x3606 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    35f8:	f0 93 10 08 	sts	0x0810, r31
    35fc:	e0 93 0f 08 	sts	0x080F, r30
        _free_node->Next = NULL;
    3600:	14 82       	std	Z+4, r1	; 0x04
    3602:	13 82       	std	Z+3, r1	; 0x03
    3604:	0a c0       	rjmp	.+20     	; 0x361a <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3606:	b4 83       	std	Z+4, r27	; 0x04
    3608:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    360a:	12 96       	adiw	r26, 0x02	; 2
    360c:	fc 93       	st	X, r31
    360e:	ee 93       	st	-X, r30
    3610:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3612:	f0 93 10 08 	sts	0x0810, r31
    3616:	e0 93 0f 08 	sts	0x080F, r30
    }
    _free_node->Prev = NULL;
    361a:	12 82       	std	Z+2, r1	; 0x02
    361c:	11 82       	std	Z+1, r1	; 0x01
}
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3632:	4b 81       	ldd	r20, Y+3	; 0x03
    3634:	5c 81       	ldd	r21, Y+4	; 0x04
    3636:	69 81       	ldd	r22, Y+1	; 0x01
    3638:	7a 81       	ldd	r23, Y+2	; 0x02
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	0e 94 65 29 	call	0x52ca	; 0x52ca <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3642:	2f 81       	ldd	r18, Y+7	; 0x07
    3644:	22 23       	and	r18, r18
    3646:	71 f0       	breq	.+28     	; 0x3664 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3648:	4b 81       	ldd	r20, Y+3	; 0x03
    364a:	5c 81       	ldd	r21, Y+4	; 0x04
    364c:	e1 2c       	mov	r14, r1
    364e:	f1 2c       	mov	r15, r1
    3650:	00 e0       	ldi	r16, 0x00	; 0
    3652:	10 e0       	ldi	r17, 0x00	; 0
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	bc 01       	movw	r22, r24
    365a:	ce 01       	movw	r24, r28
    365c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3660:	1f 82       	std	Y+7, r1	; 0x07
    3662:	0c c0       	rjmp	.+24     	; 0x367c <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3664:	e8 81       	ld	r30, Y
    3666:	2b e2       	ldi	r18, 0x2B	; 43
    3668:	e2 02       	muls	r30, r18
    366a:	f0 01       	movw	r30, r0
    366c:	11 24       	eor	r1, r1
    366e:	ef 5e       	subi	r30, 0xEF	; 239
    3670:	f7 4f       	sbci	r31, 0xF7	; 247
    3672:	21 85       	ldd	r18, Z+9	; 0x09
    3674:	23 30       	cpi	r18, 0x03	; 3
    3676:	b9 f4       	brne	.+46     	; 0x36a6 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    367c:	e8 81       	ld	r30, Y
    367e:	8b e2       	ldi	r24, 0x2B	; 43
    3680:	e8 02       	muls	r30, r24
    3682:	f0 01       	movw	r30, r0
    3684:	11 24       	eor	r1, r1
    3686:	ef 5e       	subi	r30, 0xEF	; 239
    3688:	f7 4f       	sbci	r31, 0xF7	; 247
    368a:	45 89       	ldd	r20, Z+21	; 0x15
    368c:	56 89       	ldd	r21, Z+22	; 0x16
    368e:	67 89       	ldd	r22, Z+23	; 0x17
    3690:	70 8d       	ldd	r23, Z+24	; 0x18
    3692:	45 2b       	or	r20, r21
    3694:	46 2b       	or	r20, r22
    3696:	47 2b       	or	r20, r23
    3698:	41 f4       	brne	.+16     	; 0x36aa <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    369e:	88 81       	ld	r24, Y
    36a0:	0e 94 20 1a 	call	0x3440	; 0x3440 <nrk_add_to_readyQ>
    36a4:	02 c0       	rjmp	.+4      	; 0x36aa <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    36a6:	8f ef       	ldi	r24, 0xFF	; 255
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
}
    36ac:	df 91       	pop	r29
    36ae:	cf 91       	pop	r28
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	ff 90       	pop	r15
    36b6:	ef 90       	pop	r14
    36b8:	08 95       	ret

000036ba <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    36ba:	1f 93       	push	r17
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	28 97       	sbiw	r28, 0x08	; 8
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	29 83       	std	Y+1, r18	; 0x01
    36d2:	3a 83       	std	Y+2, r19	; 0x02
    36d4:	4b 83       	std	Y+3, r20	; 0x03
    36d6:	5c 83       	std	Y+4, r21	; 0x04
    36d8:	6d 83       	std	Y+5, r22	; 0x05
    36da:	7e 83       	std	Y+6, r23	; 0x06
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    36e0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    36e4:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    36e8:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    36ea:	ce 01       	movw	r24, r28
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    36f2:	63 30       	cpi	r22, 0x03	; 3
    36f4:	71 05       	cpc	r23, r1
    36f6:	98 f0       	brcs	.+38     	; 0x371e <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    36f8:	e0 91 fe 08 	lds	r30, 0x08FE
    36fc:	f0 91 ff 08 	lds	r31, 0x08FF
    3700:	21 2f       	mov	r18, r17
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	26 0f       	add	r18, r22
    3706:	37 1f       	adc	r19, r23
    3708:	c9 01       	movw	r24, r18
    370a:	a0 e0       	ldi	r26, 0x00	; 0
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	85 8b       	std	Z+21, r24	; 0x15
    3710:	96 8b       	std	Z+22, r25	; 0x16
    3712:	a7 8b       	std	Z+23, r26	; 0x17
    3714:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3716:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>

    return NRK_OK;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    371e:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3720:	28 96       	adiw	r28, 0x08	; 8
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	08 95       	ret

00003734 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3734:	0e 94 37 29 	call	0x526e	; 0x526e <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3738:	e0 91 fe 08 	lds	r30, 0x08FE
    373c:	f0 91 ff 08 	lds	r31, 0x08FF
    3740:	85 81       	ldd	r24, Z+5	; 0x05
    3742:	81 11       	cpse	r24, r1
    3744:	f7 cf       	rjmp	.-18     	; 0x3734 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3746:	08 95       	ret

00003748 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3748:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    374a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    374e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3752:	e0 91 fe 08 	lds	r30, 0x08FE
    3756:	f0 91 ff 08 	lds	r31, 0x08FF
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	92 a7       	std	Z+42, r25	; 0x2a
    3760:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3766:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    376a:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    376c:	88 3f       	cpi	r24, 0xF8	; 248
    376e:	88 f4       	brcc	.+34     	; 0x3792 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3770:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    3774:	2c 2f       	mov	r18, r28
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	2f 5f       	subi	r18, 0xFF	; 255
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	48 2f       	mov	r20, r24
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	24 17       	cp	r18, r20
    3782:	35 07       	cpc	r19, r21
    3784:	34 f4       	brge	.+12     	; 0x3792 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    3786:	82 e0       	ldi	r24, 0x02	; 2
    3788:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    378a:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    378e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3792:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3796:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	cf 91       	pop	r28
    379e:	08 95       	ret

000037a0 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    37a0:	e0 91 fe 08 	lds	r30, 0x08FE
    37a4:	f0 91 ff 08 	lds	r31, 0x08FF
    37a8:	80 85       	ldd	r24, Z+8	; 0x08
    37aa:	0e 94 c2 1a 	call	0x3584	; 0x3584 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    37ae:	e0 91 fe 08 	lds	r30, 0x08FE
    37b2:	f0 91 ff 08 	lds	r31, 0x08FF
    37b6:	84 e0       	ldi	r24, 0x04	; 4
    37b8:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    37ba:	0e 94 a4 1b 	call	0x3748	; 0x3748 <nrk_wait_until_next_period>
    return NRK_OK;
}
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	08 95       	ret

000037c2 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    37c8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_stack_check>

    if (p == 0)
    37cc:	20 97       	sbiw	r28, 0x00	; 0
    37ce:	11 f4       	brne	.+4      	; 0x37d4 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    37d0:	c1 e0       	ldi	r28, 0x01	; 1
    37d2:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    37d4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    37d8:	e0 91 fe 08 	lds	r30, 0x08FE
    37dc:	f0 91 ff 08 	lds	r31, 0x08FF
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    37e4:	d2 a7       	std	Z+42, r29	; 0x2a
    37e6:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    37e8:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    37ec:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    37ee:	88 3f       	cpi	r24, 0xF8	; 248
    37f0:	88 f4       	brcc	.+34     	; 0x3814 <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    37f2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    37f6:	2c 2f       	mov	r18, r28
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	2f 5f       	subi	r18, 0xFF	; 255
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	48 2f       	mov	r20, r24
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	24 17       	cp	r18, r20
    3804:	35 07       	cpc	r19, r21
    3806:	34 f4       	brge	.+12     	; 0x3814 <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    380c:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3810:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3814:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3818:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	08 95       	ret

00003824 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3830:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3834:	e0 91 fe 08 	lds	r30, 0x08FE
    3838:	f0 91 ff 08 	lds	r31, 0x08FF
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3840:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    3844:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3846:	e0 91 fe 08 	lds	r30, 0x08FE
    384a:	f0 91 ff 08 	lds	r31, 0x08FF
    384e:	c8 2f       	mov	r28, r24
    3850:	d0 e0       	ldi	r29, 0x00	; 0
    3852:	ae 01       	movw	r20, r28
    3854:	40 0f       	add	r20, r16
    3856:	51 1f       	adc	r21, r17
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	45 8b       	std	Z+21, r20	; 0x15
    385e:	56 8b       	std	Z+22, r21	; 0x16
    3860:	67 8b       	std	Z+23, r22	; 0x17
    3862:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3864:	87 ef       	ldi	r24, 0xF7	; 247
    3866:	8f 15       	cp	r24, r15
    3868:	70 f0       	brcs	.+28     	; 0x3886 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    386a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    386e:	21 96       	adiw	r28, 0x01	; 1
    3870:	28 2f       	mov	r18, r24
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	c2 17       	cp	r28, r18
    3876:	d3 07       	cpc	r29, r19
    3878:	34 f4       	brge	.+12     	; 0x3886 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    387a:	82 e0       	ldi	r24, 0x02	; 2
    387c:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    387e:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);
    3882:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3886:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    388a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	08 95       	ret

0000389c <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    38a2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    38a6:	e0 91 fe 08 	lds	r30, 0x08FE
    38aa:	f0 91 ff 08 	lds	r31, 0x08FF
    38ae:	21 e0       	ldi	r18, 0x01	; 1
    38b0:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    38b2:	ce 01       	movw	r24, r28
    38b4:	a0 e0       	ldi	r26, 0x00	; 0
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	85 8b       	std	Z+21, r24	; 0x15
    38ba:	96 8b       	std	Z+22, r25	; 0x16
    38bc:	a7 8b       	std	Z+23, r26	; 0x17
    38be:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    38c0:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    38c4:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    38c6:	88 3f       	cpi	r24, 0xF8	; 248
    38c8:	88 f4       	brcc	.+34     	; 0x38ec <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38ca:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    38ce:	2c 2f       	mov	r18, r28
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	2f 5f       	subi	r18, 0xFF	; 255
    38d4:	3f 4f       	sbci	r19, 0xFF	; 255
    38d6:	48 2f       	mov	r20, r24
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	24 17       	cp	r18, r20
    38dc:	35 07       	cpc	r19, r21
    38de:	34 f4       	brge	.+12     	; 0x38ec <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    38e0:	82 e0       	ldi	r24, 0x02	; 2
    38e2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    38e4:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);
    38e8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    38ec:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    38f0:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	08 95       	ret

000038fc <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    38fc:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    38fe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3902:	e0 91 fe 08 	lds	r30, 0x08FE
    3906:	f0 91 ff 08 	lds	r31, 0x08FF
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    390e:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3910:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    3914:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3916:	88 3f       	cpi	r24, 0xF8	; 248
    3918:	88 f4       	brcc	.+34     	; 0x393c <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    391a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    391e:	2c 2f       	mov	r18, r28
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	2f 5f       	subi	r18, 0xFF	; 255
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	48 2f       	mov	r20, r24
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	24 17       	cp	r18, r20
    392c:	35 07       	cpc	r19, r21
    392e:	34 f4       	brge	.+12     	; 0x393c <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3930:	82 e0       	ldi	r24, 0x02	; 2
    3932:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3934:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);
    3938:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    393c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3940:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	cf 91       	pop	r28
    3948:	08 95       	ret

0000394a <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	28 97       	sbiw	r28, 0x08	; 8
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	29 83       	std	Y+1, r18	; 0x01
    3962:	3a 83       	std	Y+2, r19	; 0x02
    3964:	4b 83       	std	Y+3, r20	; 0x03
    3966:	5c 83       	std	Y+4, r21	; 0x04
    3968:	6d 83       	std	Y+5, r22	; 0x05
    396a:	7e 83       	std	Y+6, r23	; 0x06
    396c:	8f 83       	std	Y+7, r24	; 0x07
    396e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3970:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_stack_check>

    nrk_int_disable ();
    3974:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3978:	e0 91 fe 08 	lds	r30, 0x08FE
    397c:	f0 91 ff 08 	lds	r31, 0x08FF
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	92 a7       	std	Z+42, r25	; 0x2a
    398a:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    398c:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    3990:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3992:	ce 01       	movw	r24, r28
    3994:	01 96       	adiw	r24, 0x01	; 1
    3996:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    399a:	e0 91 fe 08 	lds	r30, 0x08FE
    399e:	f0 91 ff 08 	lds	r31, 0x08FF
    39a2:	61 0f       	add	r22, r17
    39a4:	71 1d       	adc	r23, r1
    39a6:	81 1d       	adc	r24, r1
    39a8:	91 1d       	adc	r25, r1
    39aa:	65 8b       	std	Z+21, r22	; 0x15
    39ac:	76 8b       	std	Z+22, r23	; 0x16
    39ae:	87 8b       	std	Z+23, r24	; 0x17
    39b0:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    39b2:	18 3f       	cpi	r17, 0xF8	; 248
    39b4:	88 f4       	brcc	.+34     	; 0x39d8 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    39b6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    39ba:	21 2f       	mov	r18, r17
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	2f 5f       	subi	r18, 0xFF	; 255
    39c0:	3f 4f       	sbci	r19, 0xFF	; 255
    39c2:	48 2f       	mov	r20, r24
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	24 17       	cp	r18, r20
    39c8:	35 07       	cpc	r19, r21
    39ca:	34 f4       	brge	.+12     	; 0x39d8 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    39cc:	82 e0       	ldi	r24, 0x02	; 2
    39ce:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    39d0:	80 93 01 06 	sts	0x0601, r24
            _nrk_set_next_wakeup (timer);
    39d4:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    39d8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    39dc:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	28 96       	adiw	r28, 0x08	; 8
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	08 95       	ret

000039f6 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    39f6:	8f 92       	push	r8
    39f8:	9f 92       	push	r9
    39fa:	af 92       	push	r10
    39fc:	bf 92       	push	r11
    39fe:	cf 92       	push	r12
    3a00:	df 92       	push	r13
    3a02:	ef 92       	push	r14
    3a04:	ff 92       	push	r15
    3a06:	0f 93       	push	r16
    3a08:	1f 93       	push	r17
    3a0a:	cf 93       	push	r28
    3a0c:	df 93       	push	r29
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	60 97       	sbiw	r28, 0x10	; 16
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	29 87       	std	Y+9, r18	; 0x09
    3a20:	3a 87       	std	Y+10, r19	; 0x0a
    3a22:	4b 87       	std	Y+11, r20	; 0x0b
    3a24:	5c 87       	std	Y+12, r21	; 0x0c
    3a26:	6d 87       	std	Y+13, r22	; 0x0d
    3a28:	7e 87       	std	Y+14, r23	; 0x0e
    3a2a:	8f 87       	std	Y+15, r24	; 0x0f
    3a2c:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3a2e:	ce 01       	movw	r24, r28
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3a36:	89 80       	ldd	r8, Y+1	; 0x01
    3a38:	9a 80       	ldd	r9, Y+2	; 0x02
    3a3a:	ab 80       	ldd	r10, Y+3	; 0x03
    3a3c:	bc 80       	ldd	r11, Y+4	; 0x04
    3a3e:	cd 80       	ldd	r12, Y+5	; 0x05
    3a40:	de 80       	ldd	r13, Y+6	; 0x06
    3a42:	ef 80       	ldd	r14, Y+7	; 0x07
    3a44:	f8 84       	ldd	r15, Y+8	; 0x08
    3a46:	09 85       	ldd	r16, Y+9	; 0x09
    3a48:	1a 85       	ldd	r17, Y+10	; 0x0a
    3a4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a4c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a4e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a50:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a52:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a54:	78 89       	ldd	r23, Y+16	; 0x10
    3a56:	ce 01       	movw	r24, r28
    3a58:	09 96       	adiw	r24, 0x09	; 9
    3a5a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a60:	61 f0       	breq	.+24     	; 0x3a7a <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3a62:	29 85       	ldd	r18, Y+9	; 0x09
    3a64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a66:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a68:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a70:	98 89       	ldd	r25, Y+16	; 0x10
    3a72:	0e 94 a5 1c 	call	0x394a	; 0x394a <nrk_wait>

    return NRK_OK;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	01 c0       	rjmp	.+2      	; 0x3a7c <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3a7a:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3a7c:	60 96       	adiw	r28, 0x10	; 16
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	cf 90       	pop	r12
    3a98:	bf 90       	pop	r11
    3a9a:	af 90       	pop	r10
    3a9c:	9f 90       	pop	r9
    3a9e:	8f 90       	pop	r8
    3aa0:	08 95       	ret

00003aa2 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3aa2:	e0 91 fe 08 	lds	r30, 0x08FE
    3aa6:	f0 91 ff 08 	lds	r31, 0x08FF
}
    3aaa:	80 85       	ldd	r24, Z+8	; 0x08
    3aac:	08 95       	ret

00003aae <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3aae:	cf 92       	push	r12
    3ab0:	df 92       	push	r13
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3abc:	1c 82       	std	Y+4, r1	; 0x04
    3abe:	1d 82       	std	Y+5, r1	; 0x05
    3ac0:	1e 82       	std	Y+6, r1	; 0x06
    3ac2:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3ac4:	40 91 f5 08 	lds	r20, 0x08F5
    3ac8:	50 91 f6 08 	lds	r21, 0x08F6
    3acc:	60 91 f7 08 	lds	r22, 0x08F7
    3ad0:	70 91 f8 08 	lds	r23, 0x08F8
    3ad4:	48 83       	st	Y, r20
    3ad6:	59 83       	std	Y+1, r21	; 0x01
    3ad8:	6a 83       	std	Y+2, r22	; 0x02
    3ada:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3adc:	c0 90 f9 08 	lds	r12, 0x08F9
    3ae0:	d0 90 fa 08 	lds	r13, 0x08FA
    3ae4:	e0 90 fb 08 	lds	r14, 0x08FB
    3ae8:	f0 90 fc 08 	lds	r15, 0x08FC
    3aec:	cc 82       	std	Y+4, r12	; 0x04
    3aee:	dd 82       	std	Y+5, r13	; 0x05
    3af0:	ee 82       	std	Y+6, r14	; 0x06
    3af2:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3af4:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    3af8:	a8 2f       	mov	r26, r24
    3afa:	b0 e0       	ldi	r27, 0x00	; 0
    3afc:	23 eb       	ldi	r18, 0xB3	; 179
    3afe:	36 ee       	ldi	r19, 0xE6	; 230
    3b00:	4e e0       	ldi	r20, 0x0E	; 14
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	0e 94 6d 2b 	call	0x56da	; 0x56da <__muluhisi3>
    3b08:	6c 0d       	add	r22, r12
    3b0a:	7d 1d       	adc	r23, r13
    3b0c:	8e 1d       	adc	r24, r14
    3b0e:	9f 1d       	adc	r25, r15
    3b10:	6c 83       	std	Y+4, r22	; 0x04
    3b12:	7d 83       	std	Y+5, r23	; 0x05
    3b14:	8e 83       	std	Y+6, r24	; 0x06
    3b16:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3b18:	4c 81       	ldd	r20, Y+4	; 0x04
    3b1a:	5d 81       	ldd	r21, Y+5	; 0x05
    3b1c:	6e 81       	ldd	r22, Y+6	; 0x06
    3b1e:	7f 81       	ldd	r23, Y+7	; 0x07
    3b20:	41 15       	cp	r20, r1
    3b22:	8a ec       	ldi	r24, 0xCA	; 202
    3b24:	58 07       	cpc	r21, r24
    3b26:	8a e9       	ldi	r24, 0x9A	; 154
    3b28:	68 07       	cpc	r22, r24
    3b2a:	8b e3       	ldi	r24, 0x3B	; 59
    3b2c:	78 07       	cpc	r23, r24
    3b2e:	a0 f0       	brcs	.+40     	; 0x3b58 <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3b30:	5a 5c       	subi	r21, 0xCA	; 202
    3b32:	6a 49       	sbci	r22, 0x9A	; 154
    3b34:	7b 43       	sbci	r23, 0x3B	; 59
    3b36:	4c 83       	std	Y+4, r20	; 0x04
    3b38:	5d 83       	std	Y+5, r21	; 0x05
    3b3a:	6e 83       	std	Y+6, r22	; 0x06
    3b3c:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    3b3e:	48 81       	ld	r20, Y
    3b40:	59 81       	ldd	r21, Y+1	; 0x01
    3b42:	6a 81       	ldd	r22, Y+2	; 0x02
    3b44:	7b 81       	ldd	r23, Y+3	; 0x03
    3b46:	4f 5f       	subi	r20, 0xFF	; 255
    3b48:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4a:	6f 4f       	sbci	r22, 0xFF	; 255
    3b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4e:	48 83       	st	Y, r20
    3b50:	59 83       	std	Y+1, r21	; 0x01
    3b52:	6a 83       	std	Y+2, r22	; 0x02
    3b54:	7b 83       	std	Y+3, r23	; 0x03
    3b56:	e0 cf       	rjmp	.-64     	; 0x3b18 <nrk_time_get+0x6a>
    }

}
    3b58:	df 91       	pop	r29
    3b5a:	cf 91       	pop	r28
    3b5c:	ff 90       	pop	r15
    3b5e:	ef 90       	pop	r14
    3b60:	df 90       	pop	r13
    3b62:	cf 90       	pop	r12
    3b64:	08 95       	ret

00003b66 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3b66:	8f 92       	push	r8
    3b68:	9f 92       	push	r9
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	60 97       	sbiw	r28, 0x10	; 16
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	fc 01       	movw	r30, r24
    3b90:	09 83       	std	Y+1, r16	; 0x01
    3b92:	1a 83       	std	Y+2, r17	; 0x02
    3b94:	2b 83       	std	Y+3, r18	; 0x03
    3b96:	3c 83       	std	Y+4, r19	; 0x04
    3b98:	4d 83       	std	Y+5, r20	; 0x05
    3b9a:	5e 83       	std	Y+6, r21	; 0x06
    3b9c:	6f 83       	std	Y+7, r22	; 0x07
    3b9e:	78 87       	std	Y+8, r23	; 0x08
    3ba0:	89 86       	std	Y+9, r8	; 0x09
    3ba2:	9a 86       	std	Y+10, r9	; 0x0a
    3ba4:	ab 86       	std	Y+11, r10	; 0x0b
    3ba6:	bc 86       	std	Y+12, r11	; 0x0c
    3ba8:	cd 86       	std	Y+13, r12	; 0x0d
    3baa:	de 86       	std	Y+14, r13	; 0x0e
    3bac:	ef 86       	std	Y+15, r14	; 0x0f
    3bae:	f8 8a       	std	Y+16, r15	; 0x10
    3bb0:	89 80       	ldd	r8, Y+1	; 0x01
    3bb2:	9a 80       	ldd	r9, Y+2	; 0x02
    3bb4:	ab 80       	ldd	r10, Y+3	; 0x03
    3bb6:	bc 80       	ldd	r11, Y+4	; 0x04
    3bb8:	0d 81       	ldd	r16, Y+5	; 0x05
    3bba:	1e 81       	ldd	r17, Y+6	; 0x06
    3bbc:	2f 81       	ldd	r18, Y+7	; 0x07
    3bbe:	38 85       	ldd	r19, Y+8	; 0x08
    3bc0:	c9 84       	ldd	r12, Y+9	; 0x09
    3bc2:	da 84       	ldd	r13, Y+10	; 0x0a
    3bc4:	eb 84       	ldd	r14, Y+11	; 0x0b
    3bc6:	fc 84       	ldd	r15, Y+12	; 0x0c
    3bc8:	4d 85       	ldd	r20, Y+13	; 0x0d
    3bca:	5e 85       	ldd	r21, Y+14	; 0x0e
    3bcc:	6f 85       	ldd	r22, Y+15	; 0x0f
    3bce:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3bd0:	8c 14       	cp	r8, r12
    3bd2:	9d 04       	cpc	r9, r13
    3bd4:	ae 04       	cpc	r10, r14
    3bd6:	bf 04       	cpc	r11, r15
    3bd8:	08 f4       	brcc	.+2      	; 0x3bdc <nrk_time_sub+0x76>
    3bda:	3f c0       	rjmp	.+126    	; 0x3c5a <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    3bdc:	c8 14       	cp	r12, r8
    3bde:	d9 04       	cpc	r13, r9
    3be0:	ea 04       	cpc	r14, r10
    3be2:	fb 04       	cpc	r15, r11
    3be4:	91 f4       	brne	.+36     	; 0x3c0a <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3be6:	04 17       	cp	r16, r20
    3be8:	15 07       	cpc	r17, r21
    3bea:	26 07       	cpc	r18, r22
    3bec:	37 07       	cpc	r19, r23
    3bee:	a8 f1       	brcs	.+106    	; 0x3c5a <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3bf0:	04 1b       	sub	r16, r20
    3bf2:	15 0b       	sbc	r17, r21
    3bf4:	26 0b       	sbc	r18, r22
    3bf6:	37 0b       	sbc	r19, r23
    3bf8:	04 83       	std	Z+4, r16	; 0x04
    3bfa:	15 83       	std	Z+5, r17	; 0x05
    3bfc:	26 83       	std	Z+6, r18	; 0x06
    3bfe:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    3c00:	10 82       	st	Z, r1
    3c02:	11 82       	std	Z+1, r1	; 0x01
    3c04:	12 82       	std	Z+2, r1	; 0x02
    3c06:	13 82       	std	Z+3, r1	; 0x03
    3c08:	26 c0       	rjmp	.+76     	; 0x3c56 <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3c0a:	04 17       	cp	r16, r20
    3c0c:	15 07       	cpc	r17, r21
    3c0e:	26 07       	cpc	r18, r22
    3c10:	37 07       	cpc	r19, r23
    3c12:	88 f4       	brcc	.+34     	; 0x3c36 <nrk_time_sub+0xd0>
{
	high.secs--;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	88 1a       	sub	r8, r24
    3c18:	91 08       	sbc	r9, r1
    3c1a:	a1 08       	sbc	r10, r1
    3c1c:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3c1e:	8c 18       	sub	r8, r12
    3c20:	9d 08       	sbc	r9, r13
    3c22:	ae 08       	sbc	r10, r14
    3c24:	bf 08       	sbc	r11, r15
    3c26:	80 82       	st	Z, r8
    3c28:	91 82       	std	Z+1, r9	; 0x01
    3c2a:	a2 82       	std	Z+2, r10	; 0x02
    3c2c:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3c2e:	16 53       	subi	r17, 0x36	; 54
    3c30:	25 46       	sbci	r18, 0x65	; 101
    3c32:	34 4c       	sbci	r19, 0xC4	; 196
    3c34:	08 c0       	rjmp	.+16     	; 0x3c46 <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3c36:	8c 18       	sub	r8, r12
    3c38:	9d 08       	sbc	r9, r13
    3c3a:	ae 08       	sbc	r10, r14
    3c3c:	bf 08       	sbc	r11, r15
    3c3e:	80 82       	st	Z, r8
    3c40:	91 82       	std	Z+1, r9	; 0x01
    3c42:	a2 82       	std	Z+2, r10	; 0x02
    3c44:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3c46:	04 1b       	sub	r16, r20
    3c48:	15 0b       	sbc	r17, r21
    3c4a:	26 0b       	sbc	r18, r22
    3c4c:	37 0b       	sbc	r19, r23
    3c4e:	04 83       	std	Z+4, r16	; 0x04
    3c50:	15 83       	std	Z+5, r17	; 0x05
    3c52:	26 83       	std	Z+6, r18	; 0x06
    3c54:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	01 c0       	rjmp	.+2      	; 0x3c5c <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3c5c:	60 96       	adiw	r28, 0x10	; 16
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	ff 90       	pop	r15
    3c72:	ef 90       	pop	r14
    3c74:	df 90       	pop	r13
    3c76:	cf 90       	pop	r12
    3c78:	bf 90       	pop	r11
    3c7a:	af 90       	pop	r10
    3c7c:	9f 90       	pop	r9
    3c7e:	8f 90       	pop	r8
    3c80:	08 95       	ret

00003c82 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3c82:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3c84:	44 81       	ldd	r20, Z+4	; 0x04
    3c86:	55 81       	ldd	r21, Z+5	; 0x05
    3c88:	66 81       	ldd	r22, Z+6	; 0x06
    3c8a:	77 81       	ldd	r23, Z+7	; 0x07
    3c8c:	41 15       	cp	r20, r1
    3c8e:	8a ec       	ldi	r24, 0xCA	; 202
    3c90:	58 07       	cpc	r21, r24
    3c92:	8a e9       	ldi	r24, 0x9A	; 154
    3c94:	68 07       	cpc	r22, r24
    3c96:	8b e3       	ldi	r24, 0x3B	; 59
    3c98:	78 07       	cpc	r23, r24
    3c9a:	a0 f0       	brcs	.+40     	; 0x3cc4 <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3c9c:	5a 5c       	subi	r21, 0xCA	; 202
    3c9e:	6a 49       	sbci	r22, 0x9A	; 154
    3ca0:	7b 43       	sbci	r23, 0x3B	; 59
    3ca2:	44 83       	std	Z+4, r20	; 0x04
    3ca4:	55 83       	std	Z+5, r21	; 0x05
    3ca6:	66 83       	std	Z+6, r22	; 0x06
    3ca8:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3caa:	40 81       	ld	r20, Z
    3cac:	51 81       	ldd	r21, Z+1	; 0x01
    3cae:	62 81       	ldd	r22, Z+2	; 0x02
    3cb0:	73 81       	ldd	r23, Z+3	; 0x03
    3cb2:	4f 5f       	subi	r20, 0xFF	; 255
    3cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb6:	6f 4f       	sbci	r22, 0xFF	; 255
    3cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cba:	40 83       	st	Z, r20
    3cbc:	51 83       	std	Z+1, r21	; 0x01
    3cbe:	62 83       	std	Z+2, r22	; 0x02
    3cc0:	73 83       	std	Z+3, r23	; 0x03
    3cc2:	e0 cf       	rjmp	.-64     	; 0x3c84 <nrk_time_compact_nanos+0x2>
    }
}
    3cc4:	08 95       	ret

00003cc6 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3cc6:	8f 92       	push	r8
    3cc8:	9f 92       	push	r9
    3cca:	af 92       	push	r10
    3ccc:	bf 92       	push	r11
    3cce:	cf 92       	push	r12
    3cd0:	df 92       	push	r13
    3cd2:	ef 92       	push	r14
    3cd4:	ff 92       	push	r15
    3cd6:	0f 93       	push	r16
    3cd8:	1f 93       	push	r17
    3cda:	cf 93       	push	r28
    3cdc:	df 93       	push	r29
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	60 97       	sbiw	r28, 0x10	; 16
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	09 83       	std	Y+1, r16	; 0x01
    3cf0:	1a 83       	std	Y+2, r17	; 0x02
    3cf2:	2b 83       	std	Y+3, r18	; 0x03
    3cf4:	3c 83       	std	Y+4, r19	; 0x04
    3cf6:	4d 83       	std	Y+5, r20	; 0x05
    3cf8:	5e 83       	std	Y+6, r21	; 0x06
    3cfa:	6f 83       	std	Y+7, r22	; 0x07
    3cfc:	78 87       	std	Y+8, r23	; 0x08
    3cfe:	89 86       	std	Y+9, r8	; 0x09
    3d00:	9a 86       	std	Y+10, r9	; 0x0a
    3d02:	ab 86       	std	Y+11, r10	; 0x0b
    3d04:	bc 86       	std	Y+12, r11	; 0x0c
    3d06:	cd 86       	std	Y+13, r12	; 0x0d
    3d08:	de 86       	std	Y+14, r13	; 0x0e
    3d0a:	ef 86       	std	Y+15, r14	; 0x0f
    3d0c:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3d0e:	49 85       	ldd	r20, Y+9	; 0x09
    3d10:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d16:	09 81       	ldd	r16, Y+1	; 0x01
    3d18:	1a 81       	ldd	r17, Y+2	; 0x02
    3d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d1e:	40 0f       	add	r20, r16
    3d20:	51 1f       	adc	r21, r17
    3d22:	62 1f       	adc	r22, r18
    3d24:	73 1f       	adc	r23, r19
    3d26:	fc 01       	movw	r30, r24
    3d28:	40 83       	st	Z, r20
    3d2a:	51 83       	std	Z+1, r21	; 0x01
    3d2c:	62 83       	std	Z+2, r22	; 0x02
    3d2e:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3d30:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d32:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d34:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d36:	78 89       	ldd	r23, Y+16	; 0x10
    3d38:	0d 81       	ldd	r16, Y+5	; 0x05
    3d3a:	1e 81       	ldd	r17, Y+6	; 0x06
    3d3c:	2f 81       	ldd	r18, Y+7	; 0x07
    3d3e:	38 85       	ldd	r19, Y+8	; 0x08
    3d40:	40 0f       	add	r20, r16
    3d42:	51 1f       	adc	r21, r17
    3d44:	62 1f       	adc	r22, r18
    3d46:	73 1f       	adc	r23, r19
    3d48:	44 83       	std	Z+4, r20	; 0x04
    3d4a:	55 83       	std	Z+5, r21	; 0x05
    3d4c:	66 83       	std	Z+6, r22	; 0x06
    3d4e:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3d50:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <nrk_time_compact_nanos>
return NRK_OK;
}
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	60 96       	adiw	r28, 0x10	; 16
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	ff 90       	pop	r15
    3d6c:	ef 90       	pop	r14
    3d6e:	df 90       	pop	r13
    3d70:	cf 90       	pop	r12
    3d72:	bf 90       	pop	r11
    3d74:	af 90       	pop	r10
    3d76:	9f 90       	pop	r9
    3d78:	8f 90       	pop	r8
    3d7a:	08 95       	ret

00003d7c <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3d7c:	60 93 f5 08 	sts	0x08F5, r22
    3d80:	70 93 f6 08 	sts	0x08F6, r23
    3d84:	80 93 f7 08 	sts	0x08F7, r24
    3d88:	90 93 f8 08 	sts	0x08F8, r25
  nrk_system_time.nano_secs=nano_secs;
    3d8c:	20 93 f9 08 	sts	0x08F9, r18
    3d90:	30 93 fa 08 	sts	0x08FA, r19
    3d94:	40 93 fb 08 	sts	0x08FB, r20
    3d98:	50 93 fc 08 	sts	0x08FC, r21
    3d9c:	08 95       	ret

00003d9e <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3d9e:	2f 92       	push	r2
    3da0:	3f 92       	push	r3
    3da2:	4f 92       	push	r4
    3da4:	5f 92       	push	r5
    3da6:	6f 92       	push	r6
    3da8:	7f 92       	push	r7
    3daa:	8f 92       	push	r8
    3dac:	9f 92       	push	r9
    3dae:	af 92       	push	r10
    3db0:	bf 92       	push	r11
    3db2:	cf 92       	push	r12
    3db4:	df 92       	push	r13
    3db6:	ef 92       	push	r14
    3db8:	ff 92       	push	r15
    3dba:	0f 93       	push	r16
    3dbc:	1f 93       	push	r17
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	62 97       	sbiw	r28, 0x12	; 18
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	4d 90       	ld	r4, X+
    3dd6:	5d 90       	ld	r5, X+
    3dd8:	6d 90       	ld	r6, X+
    3dda:	7c 90       	ld	r7, X
    3ddc:	13 97       	sbiw	r26, 0x03	; 3
    3dde:	14 96       	adiw	r26, 0x04	; 4
    3de0:	6d 91       	ld	r22, X+
    3de2:	7d 91       	ld	r23, X+
    3de4:	8d 91       	ld	r24, X+
    3de6:	9c 91       	ld	r25, X
    3de8:	17 97       	sbiw	r26, 0x07	; 7
    3dea:	41 14       	cp	r4, r1
    3dec:	51 04       	cpc	r5, r1
    3dee:	61 04       	cpc	r6, r1
    3df0:	71 04       	cpc	r7, r1
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <_nrk_time_to_ticks+0x58>
    3df4:	6c c0       	rjmp	.+216    	; 0x3ece <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3df6:	b2 e4       	ldi	r27, 0x42	; 66
    3df8:	4b 16       	cp	r4, r27
    3dfa:	51 04       	cpc	r5, r1
    3dfc:	61 04       	cpc	r6, r1
    3dfe:	71 04       	cpc	r7, r1
    3e00:	08 f0       	brcs	.+2      	; 0x3e04 <_nrk_time_to_ticks+0x66>
    3e02:	6d c0       	rjmp	.+218    	; 0x3ede <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3e04:	7b 01       	movw	r14, r22
    3e06:	8c 01       	movw	r16, r24
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	a9 01       	movw	r20, r18
    3e0e:	69 83       	std	Y+1, r22	; 0x01
    3e10:	fa 82       	std	Y+2, r15	; 0x02
    3e12:	0b 83       	std	Y+3, r16	; 0x03
    3e14:	1c 83       	std	Y+4, r17	; 0x04
    3e16:	2d 83       	std	Y+5, r18	; 0x05
    3e18:	3e 83       	std	Y+6, r19	; 0x06
    3e1a:	4f 83       	std	Y+7, r20	; 0x07
    3e1c:	58 87       	std	Y+8, r21	; 0x08
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e0       	ldi	r27, 0x00	; 0
    3e22:	19 8a       	std	Y+17, r1	; 0x11
    3e24:	1a 8a       	std	Y+18, r1	; 0x12
    3e26:	31 2c       	mov	r3, r1
    3e28:	81 2c       	mov	r8, r1
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	e0 e0       	ldi	r30, 0x00	; 0
    3e2e:	91 2c       	mov	r9, r1
    3e30:	9d 01       	movw	r18, r26
    3e32:	49 89       	ldd	r20, Y+17	; 0x11
    3e34:	5a 89       	ldd	r21, Y+18	; 0x12
    3e36:	63 2d       	mov	r22, r3
    3e38:	78 2d       	mov	r23, r8
    3e3a:	8f 2f       	mov	r24, r31
    3e3c:	9e 2f       	mov	r25, r30
    3e3e:	a9 80       	ldd	r10, Y+1	; 0x01
    3e40:	ba 80       	ldd	r11, Y+2	; 0x02
    3e42:	cb 80       	ldd	r12, Y+3	; 0x03
    3e44:	dc 80       	ldd	r13, Y+4	; 0x04
    3e46:	ed 80       	ldd	r14, Y+5	; 0x05
    3e48:	fe 80       	ldd	r15, Y+6	; 0x06
    3e4a:	0f 81       	ldd	r16, Y+7	; 0x07
    3e4c:	18 85       	ldd	r17, Y+8	; 0x08
    3e4e:	0e 94 0f 2c 	call	0x581e	; 0x581e <__adddi3>
    3e52:	22 2e       	mov	r2, r18
    3e54:	39 87       	std	Y+9, r19	; 0x09
    3e56:	4a 87       	std	Y+10, r20	; 0x0a
    3e58:	5b 87       	std	Y+11, r21	; 0x0b
    3e5a:	6c 87       	std	Y+12, r22	; 0x0c
    3e5c:	7d 87       	std	Y+13, r23	; 0x0d
    3e5e:	8e 87       	std	Y+14, r24	; 0x0e
    3e60:	9f 87       	std	Y+15, r25	; 0x0f
    3e62:	9d 01       	movw	r18, r26
    3e64:	49 89       	ldd	r20, Y+17	; 0x11
    3e66:	5a 89       	ldd	r21, Y+18	; 0x12
    3e68:	63 2d       	mov	r22, r3
    3e6a:	78 2d       	mov	r23, r8
    3e6c:	8f 2f       	mov	r24, r31
    3e6e:	9e 2f       	mov	r25, r30
    3e70:	36 53       	subi	r19, 0x36	; 54
    3e72:	45 46       	sbci	r20, 0x65	; 101
    3e74:	54 4c       	sbci	r21, 0xC4	; 196
    3e76:	6f 4f       	sbci	r22, 0xFF	; 255
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7e:	d9 01       	movw	r26, r18
    3e80:	49 8b       	std	Y+17, r20	; 0x11
    3e82:	5a 8b       	std	Y+18, r21	; 0x12
    3e84:	36 2e       	mov	r3, r22
    3e86:	87 2e       	mov	r8, r23
    3e88:	f8 2f       	mov	r31, r24
    3e8a:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3e8c:	49 2d       	mov	r20, r9
    3e8e:	50 e0       	ldi	r21, 0x00	; 0
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	70 e0       	ldi	r23, 0x00	; 0
    3e94:	44 15       	cp	r20, r4
    3e96:	55 05       	cpc	r21, r5
    3e98:	66 05       	cpc	r22, r6
    3e9a:	77 05       	cpc	r23, r7
    3e9c:	10 f4       	brcc	.+4      	; 0x3ea2 <_nrk_time_to_ticks+0x104>
    3e9e:	93 94       	inc	r9
    3ea0:	c7 cf       	rjmp	.-114    	; 0x3e30 <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3ea2:	83 eb       	ldi	r24, 0xB3	; 179
    3ea4:	a8 2e       	mov	r10, r24
    3ea6:	96 ee       	ldi	r25, 0xE6	; 230
    3ea8:	b9 2e       	mov	r11, r25
    3eaa:	2e e0       	ldi	r18, 0x0E	; 14
    3eac:	c2 2e       	mov	r12, r18
    3eae:	d1 2c       	mov	r13, r1
    3eb0:	e1 2c       	mov	r14, r1
    3eb2:	f1 2c       	mov	r15, r1
    3eb4:	00 e0       	ldi	r16, 0x00	; 0
    3eb6:	10 e0       	ldi	r17, 0x00	; 0
    3eb8:	22 2d       	mov	r18, r2
    3eba:	39 85       	ldd	r19, Y+9	; 0x09
    3ebc:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ebe:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ec0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ec2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ec4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ec6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ec8:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__udivdi3>
    3ecc:	06 c0       	rjmp	.+12     	; 0x3eda <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3ece:	23 eb       	ldi	r18, 0xB3	; 179
    3ed0:	36 ee       	ldi	r19, 0xE6	; 230
    3ed2:	4e e0       	ldi	r20, 0x0E	; 14
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    3eda:	c9 01       	movw	r24, r18
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3ee2:	62 96       	adiw	r28, 0x12	; 18
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	f8 94       	cli
    3ee8:	de bf       	out	0x3e, r29	; 62
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	cd bf       	out	0x3d, r28	; 61
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	ff 90       	pop	r15
    3ef8:	ef 90       	pop	r14
    3efa:	df 90       	pop	r13
    3efc:	cf 90       	pop	r12
    3efe:	bf 90       	pop	r11
    3f00:	af 90       	pop	r10
    3f02:	9f 90       	pop	r9
    3f04:	8f 90       	pop	r8
    3f06:	7f 90       	pop	r7
    3f08:	6f 90       	pop	r6
    3f0a:	5f 90       	pop	r5
    3f0c:	4f 90       	pop	r4
    3f0e:	3f 90       	pop	r3
    3f10:	2f 90       	pop	r2
    3f12:	08 95       	ret

00003f14 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3f14:	cf 92       	push	r12
    3f16:	df 92       	push	r13
    3f18:	ef 92       	push	r14
    3f1a:	ff 92       	push	r15
    3f1c:	cf 93       	push	r28
    3f1e:	df 93       	push	r29
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	28 97       	sbiw	r28, 0x08	; 8
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3f30:	6b 01       	movw	r12, r22
    3f32:	7c 01       	movw	r14, r24
    3f34:	3a e0       	ldi	r19, 0x0A	; 10
    3f36:	f6 94       	lsr	r15
    3f38:	e7 94       	ror	r14
    3f3a:	d7 94       	ror	r13
    3f3c:	c7 94       	ror	r12
    3f3e:	3a 95       	dec	r19
    3f40:	d1 f7       	brne	.-12     	; 0x3f36 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3f42:	c9 82       	std	Y+1, r12	; 0x01
    3f44:	da 82       	std	Y+2, r13	; 0x02
    3f46:	eb 82       	std	Y+3, r14	; 0x03
    3f48:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	33 70       	andi	r19, 0x03	; 3
    3f50:	44 27       	eor	r20, r20
    3f52:	55 27       	eor	r21, r21
    3f54:	63 eb       	ldi	r22, 0xB3	; 179
    3f56:	76 ee       	ldi	r23, 0xE6	; 230
    3f58:	8e e0       	ldi	r24, 0x0E	; 14
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__mulsi3>

return t;
    3f60:	6d 83       	std	Y+5, r22	; 0x05
    3f62:	7e 83       	std	Y+6, r23	; 0x06
    3f64:	8f 83       	std	Y+7, r24	; 0x07
    3f66:	98 87       	std	Y+8, r25	; 0x08
    3f68:	2c 2d       	mov	r18, r12
    3f6a:	3a 81       	ldd	r19, Y+2	; 0x02
    3f6c:	4b 81       	ldd	r20, Y+3	; 0x03
    3f6e:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3f70:	28 96       	adiw	r28, 0x08	; 8
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	df 91       	pop	r29
    3f7e:	cf 91       	pop	r28
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	df 90       	pop	r13
    3f86:	cf 90       	pop	r12
    3f88:	08 95       	ret

00003f8a <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3f8a:	2f 92       	push	r2
    3f8c:	3f 92       	push	r3
    3f8e:	4f 92       	push	r4
    3f90:	5f 92       	push	r5
    3f92:	6f 92       	push	r6
    3f94:	7f 92       	push	r7
    3f96:	8f 92       	push	r8
    3f98:	9f 92       	push	r9
    3f9a:	af 92       	push	r10
    3f9c:	bf 92       	push	r11
    3f9e:	cf 92       	push	r12
    3fa0:	df 92       	push	r13
    3fa2:	ef 92       	push	r14
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	62 97       	sbiw	r28, 0x12	; 18
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	4d 90       	ld	r4, X+
    3fc2:	5d 90       	ld	r5, X+
    3fc4:	6d 90       	ld	r6, X+
    3fc6:	7c 90       	ld	r7, X
    3fc8:	13 97       	sbiw	r26, 0x03	; 3
    3fca:	14 96       	adiw	r26, 0x04	; 4
    3fcc:	6d 91       	ld	r22, X+
    3fce:	7d 91       	ld	r23, X+
    3fd0:	8d 91       	ld	r24, X+
    3fd2:	9c 91       	ld	r25, X
    3fd4:	17 97       	sbiw	r26, 0x07	; 7
    3fd6:	41 14       	cp	r4, r1
    3fd8:	51 04       	cpc	r5, r1
    3fda:	61 04       	cpc	r6, r1
    3fdc:	71 04       	cpc	r7, r1
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <_nrk_time_to_ticks_long+0x58>
    3fe0:	66 c0       	rjmp	.+204    	; 0x40ae <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    3fe2:	7b 01       	movw	r14, r22
    3fe4:	8c 01       	movw	r16, r24
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	a9 01       	movw	r20, r18
    3fec:	69 83       	std	Y+1, r22	; 0x01
    3fee:	fa 82       	std	Y+2, r15	; 0x02
    3ff0:	0b 83       	std	Y+3, r16	; 0x03
    3ff2:	1c 83       	std	Y+4, r17	; 0x04
    3ff4:	2d 83       	std	Y+5, r18	; 0x05
    3ff6:	3e 83       	std	Y+6, r19	; 0x06
    3ff8:	4f 83       	std	Y+7, r20	; 0x07
    3ffa:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3ffc:	a0 e0       	ldi	r26, 0x00	; 0
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	19 8a       	std	Y+17, r1	; 0x11
    4002:	1a 8a       	std	Y+18, r1	; 0x12
    4004:	31 2c       	mov	r3, r1
    4006:	81 2c       	mov	r8, r1
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	e0 e0       	ldi	r30, 0x00	; 0
    400c:	91 2c       	mov	r9, r1
    400e:	9d 01       	movw	r18, r26
    4010:	49 89       	ldd	r20, Y+17	; 0x11
    4012:	5a 89       	ldd	r21, Y+18	; 0x12
    4014:	63 2d       	mov	r22, r3
    4016:	78 2d       	mov	r23, r8
    4018:	8f 2f       	mov	r24, r31
    401a:	9e 2f       	mov	r25, r30
    401c:	a9 80       	ldd	r10, Y+1	; 0x01
    401e:	ba 80       	ldd	r11, Y+2	; 0x02
    4020:	cb 80       	ldd	r12, Y+3	; 0x03
    4022:	dc 80       	ldd	r13, Y+4	; 0x04
    4024:	ed 80       	ldd	r14, Y+5	; 0x05
    4026:	fe 80       	ldd	r15, Y+6	; 0x06
    4028:	0f 81       	ldd	r16, Y+7	; 0x07
    402a:	18 85       	ldd	r17, Y+8	; 0x08
    402c:	0e 94 0f 2c 	call	0x581e	; 0x581e <__adddi3>
    4030:	22 2e       	mov	r2, r18
    4032:	39 87       	std	Y+9, r19	; 0x09
    4034:	4a 87       	std	Y+10, r20	; 0x0a
    4036:	5b 87       	std	Y+11, r21	; 0x0b
    4038:	6c 87       	std	Y+12, r22	; 0x0c
    403a:	7d 87       	std	Y+13, r23	; 0x0d
    403c:	8e 87       	std	Y+14, r24	; 0x0e
    403e:	9f 87       	std	Y+15, r25	; 0x0f
    4040:	9d 01       	movw	r18, r26
    4042:	49 89       	ldd	r20, Y+17	; 0x11
    4044:	5a 89       	ldd	r21, Y+18	; 0x12
    4046:	63 2d       	mov	r22, r3
    4048:	78 2d       	mov	r23, r8
    404a:	8f 2f       	mov	r24, r31
    404c:	9e 2f       	mov	r25, r30
    404e:	36 53       	subi	r19, 0x36	; 54
    4050:	45 46       	sbci	r20, 0x65	; 101
    4052:	54 4c       	sbci	r21, 0xC4	; 196
    4054:	6f 4f       	sbci	r22, 0xFF	; 255
    4056:	7f 4f       	sbci	r23, 0xFF	; 255
    4058:	8f 4f       	sbci	r24, 0xFF	; 255
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	d9 01       	movw	r26, r18
    405e:	49 8b       	std	Y+17, r20	; 0x11
    4060:	5a 8b       	std	Y+18, r21	; 0x12
    4062:	36 2e       	mov	r3, r22
    4064:	87 2e       	mov	r8, r23
    4066:	f8 2f       	mov	r31, r24
    4068:	e9 2f       	mov	r30, r25
    406a:	49 2d       	mov	r20, r9
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	44 15       	cp	r20, r4
    4074:	55 05       	cpc	r21, r5
    4076:	66 05       	cpc	r22, r6
    4078:	77 05       	cpc	r23, r7
    407a:	10 f4       	brcc	.+4      	; 0x4080 <_nrk_time_to_ticks_long+0xf6>
    407c:	93 94       	inc	r9
    407e:	c7 cf       	rjmp	.-114    	; 0x400e <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4080:	43 eb       	ldi	r20, 0xB3	; 179
    4082:	a4 2e       	mov	r10, r20
    4084:	56 ee       	ldi	r21, 0xE6	; 230
    4086:	b5 2e       	mov	r11, r21
    4088:	6e e0       	ldi	r22, 0x0E	; 14
    408a:	c6 2e       	mov	r12, r22
    408c:	d1 2c       	mov	r13, r1
    408e:	e1 2c       	mov	r14, r1
    4090:	f1 2c       	mov	r15, r1
    4092:	00 e0       	ldi	r16, 0x00	; 0
    4094:	10 e0       	ldi	r17, 0x00	; 0
    4096:	22 2d       	mov	r18, r2
    4098:	39 85       	ldd	r19, Y+9	; 0x09
    409a:	4a 85       	ldd	r20, Y+10	; 0x0a
    409c:	5b 85       	ldd	r21, Y+11	; 0x0b
    409e:	6c 85       	ldd	r22, Y+12	; 0x0c
    40a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    40a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    40a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    40a6:	0e 94 ac 2b 	call	0x5758	; 0x5758 <__udivdi3>
    40aa:	ca 01       	movw	r24, r20
    40ac:	07 c0       	rjmp	.+14     	; 0x40bc <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    40ae:	23 eb       	ldi	r18, 0xB3	; 179
    40b0:	36 ee       	ldi	r19, 0xE6	; 230
    40b2:	4e e0       	ldi	r20, 0x0E	; 14
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    40ba:	ca 01       	movw	r24, r20
}
return ticks;
}
    40bc:	b9 01       	movw	r22, r18
    40be:	62 96       	adiw	r28, 0x12	; 18
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	f8 94       	cli
    40c4:	de bf       	out	0x3e, r29	; 62
    40c6:	0f be       	out	0x3f, r0	; 63
    40c8:	cd bf       	out	0x3d, r28	; 61
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	ff 90       	pop	r15
    40d4:	ef 90       	pop	r14
    40d6:	df 90       	pop	r13
    40d8:	cf 90       	pop	r12
    40da:	bf 90       	pop	r11
    40dc:	af 90       	pop	r10
    40de:	9f 90       	pop	r9
    40e0:	8f 90       	pop	r8
    40e2:	7f 90       	pop	r7
    40e4:	6f 90       	pop	r6
    40e6:	5f 90       	pop	r5
    40e8:	4f 90       	pop	r4
    40ea:	3f 90       	pop	r3
    40ec:	2f 90       	pop	r2
    40ee:	08 95       	ret

000040f0 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    40f0:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    40f2:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    40f4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    40f8:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_nrk_get_next_wakeup>
    40fc:	84 30       	cpi	r24, 0x04	; 4
    40fe:	28 f4       	brcc	.+10     	; 0x410a <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4100:	d0 93 f2 08 	sts	0x08F2, r29
	    nrk_idle();
    4104:	0e 94 37 29 	call	0x526e	; 0x526e <nrk_idle>
    4108:	08 c0       	rjmp	.+16     	; 0x411a <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    410a:	8a e0       	ldi	r24, 0x0A	; 10
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4112:	c0 93 f2 08 	sts	0x08F2, r28
	    nrk_sleep();
    4116:	0e 94 2b 29 	call	0x5256	; 0x5256 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    411a:	80 91 99 06 	lds	r24, 0x0699
    411e:	85 35       	cpi	r24, 0x55	; 85
    4120:	19 f0       	breq	.+6      	; 0x4128 <nrk_idle_task+0x38>
    4122:	88 e0       	ldi	r24, 0x08	; 8
    4124:	0e 94 31 15 	call	0x2a62	; 0x2a62 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4128:	80 91 7e 41 	lds	r24, 0x417E
    412c:	85 35       	cpi	r24, 0x55	; 85
    412e:	11 f3       	breq	.-60     	; 0x40f4 <nrk_idle_task+0x4>
    4130:	88 e0       	ldi	r24, 0x08	; 8
    4132:	0e 94 31 15 	call	0x2a62	; 0x2a62 <nrk_error_add>
    4136:	de cf       	rjmp	.-68     	; 0x40f4 <nrk_idle_task+0x4>

00004138 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4138:	2f 92       	push	r2
    413a:	3f 92       	push	r3
    413c:	4f 92       	push	r4
    413e:	5f 92       	push	r5
    4140:	6f 92       	push	r6
    4142:	7f 92       	push	r7
    4144:	8f 92       	push	r8
    4146:	9f 92       	push	r9
    4148:	af 92       	push	r10
    414a:	bf 92       	push	r11
    414c:	cf 92       	push	r12
    414e:	df 92       	push	r13
    4150:	ef 92       	push	r14
    4152:	ff 92       	push	r15
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	27 97       	sbiw	r28, 0x07	; 7
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    416c:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    4170:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    start_time_stamp=_nrk_high_speed_timer_get();
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4174:	8a ef       	ldi	r24, 0xFA	; 250
    4176:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    417a:	0e 94 28 29 	call	0x5250	; 0x5250 <nrk_watchdog_reset>
#endif

#ifdef NRK_SW_WDT
    _nrk_sw_wdt_check();
    417e:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <_nrk_sw_wdt_check>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4182:	10 91 01 06 	lds	r17, 0x0601
    4186:	a1 2f       	mov	r26, r17
    4188:	b0 e0       	ldi	r27, 0x00	; 0
    418a:	23 eb       	ldi	r18, 0xB3	; 179
    418c:	36 ee       	ldi	r19, 0xE6	; 230
    418e:	4e e0       	ldi	r20, 0x0E	; 14
    4190:	50 e0       	ldi	r21, 0x00	; 0
    4192:	0e 94 6d 2b 	call	0x56da	; 0x56da <__muluhisi3>
    4196:	6b 01       	movw	r12, r22
    4198:	7c 01       	movw	r14, r24
    419a:	40 91 f9 08 	lds	r20, 0x08F9
    419e:	50 91 fa 08 	lds	r21, 0x08FA
    41a2:	60 91 fb 08 	lds	r22, 0x08FB
    41a6:	70 91 fc 08 	lds	r23, 0x08FC
    41aa:	c4 0e       	add	r12, r20
    41ac:	d5 1e       	adc	r13, r21
    41ae:	e6 1e       	adc	r14, r22
    41b0:	f7 1e       	adc	r15, r23
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    41b2:	c7 01       	movw	r24, r14
    41b4:	b6 01       	movw	r22, r12
    41b6:	23 eb       	ldi	r18, 0xB3	; 179
    41b8:	36 ee       	ldi	r19, 0xE6	; 230
    41ba:	4e e0       	ldi	r20, 0x0E	; 14
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    41c2:	c6 1a       	sub	r12, r22
    41c4:	d7 0a       	sbc	r13, r23
    41c6:	e8 0a       	sbc	r14, r24
    41c8:	f9 0a       	sbc	r15, r25
    41ca:	c0 92 f9 08 	sts	0x08F9, r12
    41ce:	d0 92 fa 08 	sts	0x08FA, r13
    41d2:	e0 92 fb 08 	sts	0x08FB, r14
    41d6:	f0 92 fc 08 	sts	0x08FC, r15

#ifdef NRK_STATS_TRACKER
    if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
    41da:	e0 91 fe 08 	lds	r30, 0x08FE
    41de:	f0 91 ff 08 	lds	r31, 0x08FF
    41e2:	80 85       	ldd	r24, Z+8	; 0x08
    41e4:	81 11       	cpse	r24, r1
    41e6:	30 c0       	rjmp	.+96     	; 0x4248 <__stack+0x49>
    {
        if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
    41e8:	80 91 f2 08 	lds	r24, 0x08F2
    41ec:	82 30       	cpi	r24, 0x02	; 2
    41ee:	19 f4       	brne	.+6      	; 0x41f6 <_nrk_scheduler+0xbe>
    41f0:	81 2f       	mov	r24, r17
    41f2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_nrk_stats_sleep>
        _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    41f6:	e0 91 fe 08 	lds	r30, 0x08FE
    41fa:	f0 91 ff 08 	lds	r31, 0x08FF
    41fe:	60 91 01 06 	lds	r22, 0x0601
    4202:	80 85       	ldd	r24, Z+8	; 0x08
    4204:	0e 94 42 11 	call	0x2284	; 0x2284 <_nrk_stats_task_preempted>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    4208:	e0 91 fe 08 	lds	r30, 0x08FE
    420c:	f0 91 ff 08 	lds	r31, 0x08FF
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	80 85       	ldd	r24, Z+8	; 0x08
    4214:	0e 94 87 11 	call	0x230e	; 0x230e <_nrk_stats_task_suspend>
    4218:	80 91 f9 08 	lds	r24, 0x08F9
    421c:	90 91 fa 08 	lds	r25, 0x08FA
    4220:	a0 91 fb 08 	lds	r26, 0x08FB
    4224:	b0 91 fc 08 	lds	r27, 0x08FC
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4228:	40 91 f5 08 	lds	r20, 0x08F5
    422c:	50 91 f6 08 	lds	r21, 0x08F6
    4230:	60 91 f7 08 	lds	r22, 0x08F7
    4234:	70 91 f8 08 	lds	r23, 0x08F8

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4238:	e3 eb       	ldi	r30, 0xB3	; 179
    423a:	8e 2e       	mov	r8, r30
    423c:	e6 ee       	ldi	r30, 0xE6	; 230
    423e:	9e 2e       	mov	r9, r30
    4240:	ee e0       	ldi	r30, 0x0E	; 14
    4242:	ae 2e       	mov	r10, r30
    4244:	b1 2c       	mov	r11, r1
    4246:	07 c0       	rjmp	.+14     	; 0x4256 <__stack+0x57>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    4248:	95 81       	ldd	r25, Z+5	; 0x05
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    424a:	61 2f       	mov	r22, r17
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    424c:	91 11       	cpse	r25, r1
    424e:	e2 cf       	rjmp	.-60     	; 0x4214 <__stack+0x15>
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4250:	0e 94 42 11 	call	0x2284	; 0x2284 <_nrk_stats_task_preempted>
    4254:	e1 cf       	rjmp	.-62     	; 0x4218 <__stack+0x19>
    4256:	6a 01       	movw	r12, r20
    4258:	7b 01       	movw	r14, r22
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	c3 1a       	sub	r12, r19
    425e:	d3 0a       	sbc	r13, r19
    4260:	e3 0a       	sbc	r14, r19
    4262:	f3 0a       	sbc	r15, r19
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4264:	81 15       	cp	r24, r1
    4266:	ea ec       	ldi	r30, 0xCA	; 202
    4268:	9e 07       	cpc	r25, r30
    426a:	ea e9       	ldi	r30, 0x9A	; 154
    426c:	ae 07       	cpc	r26, r30
    426e:	eb e3       	ldi	r30, 0x3B	; 59
    4270:	be 07       	cpc	r27, r30
    4272:	c8 f0       	brcs	.+50     	; 0x42a6 <__stack+0xa7>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4274:	2c 01       	movw	r4, r24
    4276:	3d 01       	movw	r6, r26
    4278:	2a ec       	ldi	r18, 0xCA	; 202
    427a:	52 1a       	sub	r5, r18
    427c:	2a e9       	ldi	r18, 0x9A	; 154
    427e:	62 0a       	sbc	r6, r18
    4280:	2b e3       	ldi	r18, 0x3B	; 59
    4282:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4284:	c3 01       	movw	r24, r6
    4286:	b2 01       	movw	r22, r4
    4288:	a5 01       	movw	r20, r10
    428a:	94 01       	movw	r18, r8
    428c:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    4290:	a3 01       	movw	r20, r6
    4292:	92 01       	movw	r18, r4
    4294:	26 1b       	sub	r18, r22
    4296:	37 0b       	sbc	r19, r23
    4298:	48 0b       	sbc	r20, r24
    429a:	59 0b       	sbc	r21, r25
    429c:	da 01       	movw	r26, r20
    429e:	c9 01       	movw	r24, r18
    42a0:	b7 01       	movw	r22, r14
    42a2:	a6 01       	movw	r20, r12
    42a4:	d8 cf       	rjmp	.-80     	; 0x4256 <__stack+0x57>
    42a6:	40 93 f5 08 	sts	0x08F5, r20
    42aa:	50 93 f6 08 	sts	0x08F6, r21
    42ae:	60 93 f7 08 	sts	0x08F7, r22
    42b2:	70 93 f8 08 	sts	0x08F8, r23
    42b6:	80 93 f9 08 	sts	0x08F9, r24
    42ba:	90 93 fa 08 	sts	0x08FA, r25
    42be:	a0 93 fb 08 	sts	0x08FB, r26
    42c2:	b0 93 fc 08 	sts	0x08FC, r27
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    42c6:	e0 91 fe 08 	lds	r30, 0x08FE
    42ca:	f0 91 ff 08 	lds	r31, 0x08FF
    42ce:	85 81       	ldd	r24, Z+5	; 0x05
    42d0:	88 23       	and	r24, r24
    42d2:	39 f1       	breq	.+78     	; 0x4322 <__stack+0x123>
    42d4:	81 85       	ldd	r24, Z+9	; 0x09
    42d6:	84 30       	cpi	r24, 0x04	; 4
    42d8:	21 f1       	breq	.+72     	; 0x4322 <__stack+0x123>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    42da:	87 81       	ldd	r24, Z+7	; 0x07
    42dc:	82 30       	cpi	r24, 0x02	; 2
    42de:	29 f0       	breq	.+10     	; 0x42ea <__stack+0xeb>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    42e0:	88 23       	and	r24, r24
    42e2:	41 f0       	breq	.+16     	; 0x42f4 <__stack+0xf5>
    42e4:	86 81       	ldd	r24, Z+6	; 0x06
    42e6:	81 11       	cpse	r24, r1
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <__stack+0xef>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    42ea:	85 e0       	ldi	r24, 0x05	; 5
    42ec:	01 c0       	rjmp	.+2      	; 0x42f0 <__stack+0xf1>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    42ee:	83 e0       	ldi	r24, 0x03	; 3
    42f0:	81 87       	std	Z+9, r24	; 0x09
    42f2:	14 c0       	rjmp	.+40     	; 0x431c <__stack+0x11d>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    42f4:	83 e0       	ldi	r24, 0x03	; 3
    42f6:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    42f8:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    42fa:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    42fc:	85 89       	ldd	r24, Z+21	; 0x15
    42fe:	96 89       	ldd	r25, Z+22	; 0x16
    4300:	a7 89       	ldd	r26, Z+23	; 0x17
    4302:	b0 8d       	ldd	r27, Z+24	; 0x18
    4304:	89 2b       	or	r24, r25
    4306:	8a 2b       	or	r24, r26
    4308:	8b 2b       	or	r24, r27
    430a:	41 f4       	brne	.+16     	; 0x431c <__stack+0x11d>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    430c:	81 8d       	ldd	r24, Z+25	; 0x19
    430e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4310:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4312:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4314:	85 8b       	std	Z+21, r24	; 0x15
    4316:	96 8b       	std	Z+22, r25	; 0x16
    4318:	a7 8b       	std	Z+23, r26	; 0x17
    431a:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    431c:	80 85       	ldd	r24, Z+8	; 0x08
    431e:	0e 94 c2 1a 	call	0x3584	; 0x3584 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4322:	e0 91 fe 08 	lds	r30, 0x08FE
    4326:	f0 91 ff 08 	lds	r31, 0x08FF
    432a:	85 a1       	ldd	r24, Z+37	; 0x25
    432c:	96 a1       	ldd	r25, Z+38	; 0x26
    432e:	a7 a1       	ldd	r26, Z+39	; 0x27
    4330:	b0 a5       	ldd	r27, Z+40	; 0x28
    4332:	89 2b       	or	r24, r25
    4334:	8a 2b       	or	r24, r26
    4336:	8b 2b       	or	r24, r27
    4338:	09 f4       	brne	.+2      	; 0x433c <__stack+0x13d>
    433a:	4e c0       	rjmp	.+156    	; 0x43d8 <__stack+0x1d9>
    433c:	80 85       	ldd	r24, Z+8	; 0x08
    433e:	88 23       	and	r24, r24
    4340:	09 f4       	brne	.+2      	; 0x4344 <__stack+0x145>
    4342:	4a c0       	rjmp	.+148    	; 0x43d8 <__stack+0x1d9>
    4344:	91 85       	ldd	r25, Z+9	; 0x09
    4346:	94 30       	cpi	r25, 0x04	; 4
    4348:	09 f4       	brne	.+2      	; 0x434c <__stack+0x14d>
    434a:	46 c0       	rjmp	.+140    	; 0x43d8 <__stack+0x1d9>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    434c:	05 8d       	ldd	r16, Z+29	; 0x1d
    434e:	16 8d       	ldd	r17, Z+30	; 0x1e
    4350:	27 8d       	ldd	r18, Z+31	; 0x1f
    4352:	30 a1       	ldd	r19, Z+32	; 0x20
    4354:	40 91 01 06 	lds	r20, 0x0601
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	04 17       	cp	r16, r20
    4360:	15 07       	cpc	r17, r21
    4362:	26 07       	cpc	r18, r22
    4364:	37 07       	cpc	r19, r23
    4366:	98 f4       	brcc	.+38     	; 0x438e <__stack+0x18f>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    4368:	0e 94 10 11 	call	0x2220	; 0x2220 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    436c:	e0 91 fe 08 	lds	r30, 0x08FE
    4370:	f0 91 ff 08 	lds	r31, 0x08FF
    4374:	60 85       	ldd	r22, Z+8	; 0x08
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    437c:	e0 91 fe 08 	lds	r30, 0x08FE
    4380:	f0 91 ff 08 	lds	r31, 0x08FF
    4384:	15 8e       	std	Z+29, r1	; 0x1d
    4386:	16 8e       	std	Z+30, r1	; 0x1e
    4388:	17 8e       	std	Z+31, r1	; 0x1f
    438a:	10 a2       	std	Z+32, r1	; 0x20
    438c:	08 c0       	rjmp	.+16     	; 0x439e <__stack+0x19f>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    438e:	04 1b       	sub	r16, r20
    4390:	15 0b       	sbc	r17, r21
    4392:	26 0b       	sbc	r18, r22
    4394:	37 0b       	sbc	r19, r23
    4396:	05 8f       	std	Z+29, r16	; 0x1d
    4398:	16 8f       	std	Z+30, r17	; 0x1e
    439a:	27 8f       	std	Z+31, r18	; 0x1f
    439c:	30 a3       	std	Z+32, r19	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    439e:	e0 91 fe 08 	lds	r30, 0x08FE
    43a2:	f0 91 ff 08 	lds	r31, 0x08FF
    43a6:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    43a8:	45 8d       	ldd	r20, Z+29	; 0x1d
    43aa:	56 8d       	ldd	r21, Z+30	; 0x1e
    43ac:	67 8d       	ldd	r22, Z+31	; 0x1f
    43ae:	70 a1       	ldd	r23, Z+32	; 0x20
    43b0:	45 2b       	or	r20, r21
    43b2:	46 2b       	or	r20, r22
    43b4:	47 2b       	or	r20, r23
    43b6:	81 f4       	brne	.+32     	; 0x43d8 <__stack+0x1d9>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    43b8:	81 2f       	mov	r24, r17
    43ba:	0e 94 10 11 	call	0x2220	; 0x2220 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    43be:	61 2f       	mov	r22, r17
    43c0:	83 e0       	ldi	r24, 0x03	; 3
    43c2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    43c6:	e0 91 fe 08 	lds	r30, 0x08FE
    43ca:	f0 91 ff 08 	lds	r31, 0x08FF
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    43d2:	81 2f       	mov	r24, r17
    43d4:	0e 94 c2 1a 	call	0x3584	; 0x3584 <nrk_rem_from_readyQ>
    43d8:	09 e1       	ldi	r16, 0x19	; 25
    43da:	18 e0       	ldi	r17, 0x08	; 8
    43dc:	3a e1       	ldi	r19, 0x1A	; 26
    43de:	23 2e       	mov	r2, r19
    43e0:	38 e0       	ldi	r19, 0x08	; 8
    43e2:	33 2e       	mov	r3, r19
    43e4:	46 e2       	ldi	r20, 0x26	; 38
    43e6:	a4 2e       	mov	r10, r20
    43e8:	48 e0       	ldi	r20, 0x08	; 8
    43ea:	b4 2e       	mov	r11, r20
    43ec:	28 e1       	ldi	r18, 0x18	; 24
    43ee:	38 e0       	ldi	r19, 0x08	; 8
    43f0:	3a 83       	std	Y+2, r19	; 0x02
    43f2:	29 83       	std	Y+1, r18	; 0x01
    43f4:	47 e1       	ldi	r20, 0x17	; 23
    43f6:	58 e0       	ldi	r21, 0x08	; 8
    43f8:	5c 83       	std	Y+4, r21	; 0x04
    43fa:	4b 83       	std	Y+3, r20	; 0x03
    43fc:	56 e1       	ldi	r21, 0x16	; 22
    43fe:	85 2e       	mov	r8, r21
    4400:	58 e0       	ldi	r21, 0x08	; 8
    4402:	95 2e       	mov	r9, r21
    4404:	80 e6       	ldi	r24, 0x60	; 96
    4406:	9a ee       	ldi	r25, 0xEA	; 234
    4408:	9f 83       	std	Y+7, r25	; 0x07
    440a:	8e 83       	std	Y+6, r24	; 0x06
    440c:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    440e:	d8 01       	movw	r26, r16
    4410:	8c 91       	ld	r24, X
    4412:	8f 3f       	cpi	r24, 0xFF	; 255
    4414:	09 f4       	brne	.+2      	; 0x4418 <__stack+0x219>
    4416:	2a c1       	rjmp	.+596    	; 0x466c <__stack+0x46d>
        nrk_task_TCB[task_ID].suspend_flag=0;
    4418:	f4 01       	movw	r30, r8
    441a:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    441c:	8c 91       	ld	r24, X
    441e:	88 23       	and	r24, r24
    4420:	09 f4       	brne	.+2      	; 0x4424 <__stack+0x225>
    4422:	6a c0       	rjmp	.+212    	; 0x44f8 <__stack+0x2f9>
    4424:	d1 01       	movw	r26, r2
    4426:	8c 91       	ld	r24, X
    4428:	84 30       	cpi	r24, 0x04	; 4
    442a:	09 f4       	brne	.+2      	; 0x442e <__stack+0x22f>
    442c:	65 c0       	rjmp	.+202    	; 0x44f8 <__stack+0x2f9>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    442e:	f5 01       	movw	r30, r10
    4430:	c0 80       	ld	r12, Z
    4432:	d1 80       	ldd	r13, Z+1	; 0x01
    4434:	e2 80       	ldd	r14, Z+2	; 0x02
    4436:	f3 80       	ldd	r15, Z+3	; 0x03
    4438:	60 91 01 06 	lds	r22, 0x0601
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	c6 16       	cp	r12, r22
    4444:	d7 06       	cpc	r13, r23
    4446:	e8 06       	cpc	r14, r24
    4448:	f9 06       	cpc	r15, r25
    444a:	48 f0       	brcs	.+18     	; 0x445e <__stack+0x25f>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    444c:	c6 1a       	sub	r12, r22
    444e:	d7 0a       	sbc	r13, r23
    4450:	e8 0a       	sbc	r14, r24
    4452:	f9 0a       	sbc	r15, r25
    4454:	c0 82       	st	Z, r12
    4456:	d1 82       	std	Z+1, r13	; 0x01
    4458:	e2 82       	std	Z+2, r14	; 0x02
    445a:	f3 82       	std	Z+3, r15	; 0x03
    445c:	05 c0       	rjmp	.+10     	; 0x4468 <__stack+0x269>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    445e:	f5 01       	movw	r30, r10
    4460:	10 82       	st	Z, r1
    4462:	11 82       	std	Z+1, r1	; 0x01
    4464:	12 82       	std	Z+2, r1	; 0x02
    4466:	13 82       	std	Z+3, r1	; 0x03
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4468:	d8 01       	movw	r26, r16
    446a:	51 96       	adiw	r26, 0x11	; 17
    446c:	cd 90       	ld	r12, X+
    446e:	dd 90       	ld	r13, X+
    4470:	ed 90       	ld	r14, X+
    4472:	fc 90       	ld	r15, X
    4474:	54 97       	sbiw	r26, 0x14	; 20
    4476:	c6 16       	cp	r12, r22
    4478:	d7 06       	cpc	r13, r23
    447a:	e8 06       	cpc	r14, r24
    447c:	f9 06       	cpc	r15, r25
    447e:	50 f0       	brcs	.+20     	; 0x4494 <__stack+0x295>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4480:	c6 1a       	sub	r12, r22
    4482:	d7 0a       	sbc	r13, r23
    4484:	e8 0a       	sbc	r14, r24
    4486:	f9 0a       	sbc	r15, r25
    4488:	f8 01       	movw	r30, r16
    448a:	c1 8a       	std	Z+17, r12	; 0x11
    448c:	d2 8a       	std	Z+18, r13	; 0x12
    448e:	e3 8a       	std	Z+19, r14	; 0x13
    4490:	f4 8a       	std	Z+20, r15	; 0x14
    4492:	21 c0       	rjmp	.+66     	; 0x44d6 <__stack+0x2d7>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4494:	d8 01       	movw	r26, r16
    4496:	59 96       	adiw	r26, 0x19	; 25
    4498:	2d 91       	ld	r18, X+
    449a:	3d 91       	ld	r19, X+
    449c:	4d 91       	ld	r20, X+
    449e:	5c 91       	ld	r21, X
    44a0:	5c 97       	sbiw	r26, 0x1c	; 28
    44a2:	62 17       	cp	r22, r18
    44a4:	73 07       	cpc	r23, r19
    44a6:	84 07       	cpc	r24, r20
    44a8:	95 07       	cpc	r25, r21
    44aa:	60 f4       	brcc	.+24     	; 0x44c4 <__stack+0x2c5>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    44ac:	69 01       	movw	r12, r18
    44ae:	7a 01       	movw	r14, r20
    44b0:	c6 1a       	sub	r12, r22
    44b2:	d7 0a       	sbc	r13, r23
    44b4:	e8 0a       	sbc	r14, r24
    44b6:	f9 0a       	sbc	r15, r25
    44b8:	f8 01       	movw	r30, r16
    44ba:	c1 8a       	std	Z+17, r12	; 0x11
    44bc:	d2 8a       	std	Z+18, r13	; 0x12
    44be:	e3 8a       	std	Z+19, r14	; 0x13
    44c0:	f4 8a       	std	Z+20, r15	; 0x14
    44c2:	09 c0       	rjmp	.+18     	; 0x44d6 <__stack+0x2d7>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    44c4:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodsi4>
    44c8:	d8 01       	movw	r26, r16
    44ca:	51 96       	adiw	r26, 0x11	; 17
    44cc:	6d 93       	st	X+, r22
    44ce:	7d 93       	st	X+, r23
    44d0:	8d 93       	st	X+, r24
    44d2:	9c 93       	st	X, r25
    44d4:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    44d6:	f8 01       	movw	r30, r16
    44d8:	81 89       	ldd	r24, Z+17	; 0x11
    44da:	92 89       	ldd	r25, Z+18	; 0x12
    44dc:	a3 89       	ldd	r26, Z+19	; 0x13
    44de:	b4 89       	ldd	r27, Z+20	; 0x14
    44e0:	89 2b       	or	r24, r25
    44e2:	8a 2b       	or	r24, r26
    44e4:	8b 2b       	or	r24, r27
    44e6:	41 f4       	brne	.+16     	; 0x44f8 <__stack+0x2f9>
    44e8:	81 8d       	ldd	r24, Z+25	; 0x19
    44ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    44ec:	a3 8d       	ldd	r26, Z+27	; 0x1b
    44ee:	b4 8d       	ldd	r27, Z+28	; 0x1c
    44f0:	81 8b       	std	Z+17, r24	; 0x11
    44f2:	92 8b       	std	Z+18, r25	; 0x12
    44f4:	a3 8b       	std	Z+19, r26	; 0x13
    44f6:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    44f8:	d1 01       	movw	r26, r2
    44fa:	8c 91       	ld	r24, X
    44fc:	83 30       	cpi	r24, 0x03	; 3
    44fe:	09 f0       	breq	.+2      	; 0x4502 <__stack+0x303>
    4500:	b5 c0       	rjmp	.+362    	; 0x466c <__stack+0x46d>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4502:	f5 01       	movw	r30, r10
    4504:	80 81       	ld	r24, Z
    4506:	91 81       	ldd	r25, Z+1	; 0x01
    4508:	a2 81       	ldd	r26, Z+2	; 0x02
    450a:	b3 81       	ldd	r27, Z+3	; 0x03
    450c:	89 2b       	or	r24, r25
    450e:	8a 2b       	or	r24, r26
    4510:	8b 2b       	or	r24, r27
    4512:	09 f0       	breq	.+2      	; 0x4516 <__stack+0x317>
    4514:	96 c0       	rjmp	.+300    	; 0x4642 <__stack+0x443>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4516:	a9 81       	ldd	r26, Y+1	; 0x01
    4518:	ba 81       	ldd	r27, Y+2	; 0x02
    451a:	8c 91       	ld	r24, X
    451c:	88 23       	and	r24, r24
    451e:	b9 f0       	breq	.+46     	; 0x454e <__stack+0x34f>
    4520:	eb 81       	ldd	r30, Y+3	; 0x03
    4522:	fc 81       	ldd	r31, Y+4	; 0x04
    4524:	80 81       	ld	r24, Z
    4526:	88 23       	and	r24, r24
    4528:	91 f0       	breq	.+36     	; 0x454e <__stack+0x34f>
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	a0 e0       	ldi	r26, 0x00	; 0
    4530:	b0 e0       	ldi	r27, 0x00	; 0
    4532:	00 90 ee 08 	lds	r0, 0x08EE
    4536:	04 c0       	rjmp	.+8      	; 0x4540 <__stack+0x341>
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	aa 1f       	adc	r26, r26
    453e:	bb 1f       	adc	r27, r27
    4540:	0a 94       	dec	r0
    4542:	d2 f7       	brpl	.-12     	; 0x4538 <__stack+0x339>
    4544:	f8 01       	movw	r30, r16
    4546:	81 87       	std	Z+9, r24	; 0x09
    4548:	92 87       	std	Z+10, r25	; 0x0a
    454a:	a3 87       	std	Z+11, r26	; 0x0b
    454c:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    454e:	a9 81       	ldd	r26, Y+1	; 0x01
    4550:	ba 81       	ldd	r27, Y+2	; 0x02
    4552:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4554:	eb 81       	ldd	r30, Y+3	; 0x03
    4556:	fc 81       	ldd	r31, Y+4	; 0x04
    4558:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    455a:	d4 01       	movw	r26, r8
    455c:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    455e:	f5 01       	movw	r30, r10
    4560:	84 89       	ldd	r24, Z+20	; 0x14
    4562:	95 89       	ldd	r25, Z+21	; 0x15
    4564:	d8 01       	movw	r26, r16
    4566:	5d 96       	adiw	r26, 0x1d	; 29
    4568:	4d 91       	ld	r20, X+
    456a:	5d 91       	ld	r21, X+
    456c:	6d 91       	ld	r22, X+
    456e:	7c 91       	ld	r23, X
    4570:	90 97       	sbiw	r26, 0x20	; 32
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4572:	f8 01       	movw	r30, r16
    4574:	45 8b       	std	Z+21, r20	; 0x15
    4576:	56 8b       	std	Z+22, r21	; 0x16
    4578:	67 8b       	std	Z+23, r22	; 0x17
    457a:	70 8f       	std	Z+24, r23	; 0x18
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	29 f5       	brne	.+74     	; 0x45ca <__stack+0x3cb>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4580:	e2 e0       	ldi	r30, 0x02	; 2
    4582:	d1 01       	movw	r26, r2
    4584:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4586:	f8 01       	movw	r30, r16
    4588:	81 89       	ldd	r24, Z+17	; 0x11
    458a:	92 89       	ldd	r25, Z+18	; 0x12
    458c:	a3 89       	ldd	r26, Z+19	; 0x13
    458e:	b4 89       	ldd	r27, Z+20	; 0x14
    4590:	f5 01       	movw	r30, r10
    4592:	80 83       	st	Z, r24
    4594:	91 83       	std	Z+1, r25	; 0x01
    4596:	a2 83       	std	Z+2, r26	; 0x02
    4598:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    459a:	f8 01       	movw	r30, r16
    459c:	81 8d       	ldd	r24, Z+25	; 0x19
    459e:	92 8d       	ldd	r25, Z+26	; 0x1a
    45a0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    45a2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    45a4:	89 2b       	or	r24, r25
    45a6:	8a 2b       	or	r24, r26
    45a8:	8b 2b       	or	r24, r27
    45aa:	59 f4       	brne	.+22     	; 0x45c2 <__stack+0x3c3>
    45ac:	2a ef       	ldi	r18, 0xFA	; 250
    45ae:	c2 2e       	mov	r12, r18
    45b0:	d1 2c       	mov	r13, r1
    45b2:	e1 2c       	mov	r14, r1
    45b4:	f1 2c       	mov	r15, r1
    45b6:	d5 01       	movw	r26, r10
    45b8:	cd 92       	st	X+, r12
    45ba:	dd 92       	st	X+, r13
    45bc:	ed 92       	st	X+, r14
    45be:	fc 92       	st	X, r15
    45c0:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    45c2:	8d 81       	ldd	r24, Y+5	; 0x05
    45c4:	0e 94 20 1a 	call	0x3440	; 0x3440 <nrk_add_to_readyQ>
    45c8:	3c c0       	rjmp	.+120    	; 0x4642 <__stack+0x443>
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    45ca:	d5 01       	movw	r26, r10
    45cc:	54 96       	adiw	r26, 0x14	; 20
    45ce:	4d 90       	ld	r4, X+
    45d0:	5c 90       	ld	r5, X
    45d2:	55 97       	sbiw	r26, 0x15	; 21
    45d4:	b1 e0       	ldi	r27, 0x01	; 1
    45d6:	4b 1a       	sub	r4, r27
    45d8:	51 08       	sbc	r5, r1
    45da:	61 2c       	mov	r6, r1
    45dc:	71 2c       	mov	r7, r1
    45de:	61 8d       	ldd	r22, Z+25	; 0x19
    45e0:	72 8d       	ldd	r23, Z+26	; 0x1a
    45e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    45e4:	94 8d       	ldd	r25, Z+28	; 0x1c
    45e6:	a3 01       	movw	r20, r6
    45e8:	92 01       	movw	r18, r4
    45ea:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__mulsi3>
    45ee:	f5 01       	movw	r30, r10
    45f0:	60 83       	st	Z, r22
    45f2:	71 83       	std	Z+1, r23	; 0x01
    45f4:	82 83       	std	Z+2, r24	; 0x02
    45f6:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    45f8:	d8 01       	movw	r26, r16
    45fa:	59 96       	adiw	r26, 0x19	; 25
    45fc:	cd 90       	ld	r12, X+
    45fe:	dd 90       	ld	r13, X+
    4600:	ed 90       	ld	r14, X+
    4602:	fc 90       	ld	r15, X
    4604:	5c 97       	sbiw	r26, 0x1c	; 28
    4606:	c7 01       	movw	r24, r14
    4608:	b6 01       	movw	r22, r12
    460a:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__mulsi3>
    460e:	f8 01       	movw	r30, r16
    4610:	61 8b       	std	Z+17, r22	; 0x11
    4612:	72 8b       	std	Z+18, r23	; 0x12
    4614:	83 8b       	std	Z+19, r24	; 0x13
    4616:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4618:	cd 28       	or	r12, r13
    461a:	ce 28       	or	r12, r14
    461c:	cf 28       	or	r12, r15
    461e:	59 f4       	brne	.+22     	; 0x4636 <__stack+0x437>
    4620:	9a ef       	ldi	r25, 0xFA	; 250
    4622:	c9 2e       	mov	r12, r25
    4624:	d1 2c       	mov	r13, r1
    4626:	e1 2c       	mov	r14, r1
    4628:	f1 2c       	mov	r15, r1
    462a:	d5 01       	movw	r26, r10
    462c:	cd 92       	st	X+, r12
    462e:	dd 92       	st	X+, r13
    4630:	ed 92       	st	X+, r14
    4632:	fc 92       	st	X, r15
    4634:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    4636:	cc 24       	eor	r12, r12
    4638:	c3 94       	inc	r12
    463a:	d1 2c       	mov	r13, r1
    463c:	f5 01       	movw	r30, r10
    463e:	d5 8a       	std	Z+21, r13	; 0x15
    4640:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4642:	f5 01       	movw	r30, r10
    4644:	80 81       	ld	r24, Z
    4646:	91 81       	ldd	r25, Z+1	; 0x01
    4648:	a2 81       	ldd	r26, Z+2	; 0x02
    464a:	b3 81       	ldd	r27, Z+3	; 0x03
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	a1 05       	cpc	r26, r1
    4650:	b1 05       	cpc	r27, r1
    4652:	61 f0       	breq	.+24     	; 0x466c <__stack+0x46d>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4654:	ce 80       	ldd	r12, Y+6	; 0x06
    4656:	df 80       	ldd	r13, Y+7	; 0x07
    4658:	a6 01       	movw	r20, r12
    465a:	60 e0       	ldi	r22, 0x00	; 0
    465c:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    465e:	84 17       	cp	r24, r20
    4660:	95 07       	cpc	r25, r21
    4662:	a6 07       	cpc	r26, r22
    4664:	b7 07       	cpc	r27, r23
    4666:	10 f4       	brcc	.+4      	; 0x466c <__stack+0x46d>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4668:	9f 83       	std	Y+7, r25	; 0x07
    466a:	8e 83       	std	Y+6, r24	; 0x06
    466c:	2d 81       	ldd	r18, Y+5	; 0x05
    466e:	2f 5f       	subi	r18, 0xFF	; 255
    4670:	2d 83       	std	Y+5, r18	; 0x05
    4672:	05 5d       	subi	r16, 0xD5	; 213
    4674:	1f 4f       	sbci	r17, 0xFF	; 255
    4676:	3b e2       	ldi	r19, 0x2B	; 43
    4678:	23 0e       	add	r2, r19
    467a:	31 1c       	adc	r3, r1
    467c:	4b e2       	ldi	r20, 0x2B	; 43
    467e:	a4 0e       	add	r10, r20
    4680:	b1 1c       	adc	r11, r1
    4682:	89 81       	ldd	r24, Y+1	; 0x01
    4684:	9a 81       	ldd	r25, Y+2	; 0x02
    4686:	8b 96       	adiw	r24, 0x2b	; 43
    4688:	9a 83       	std	Y+2, r25	; 0x02
    468a:	89 83       	std	Y+1, r24	; 0x01
    468c:	ab 81       	ldd	r26, Y+3	; 0x03
    468e:	bc 81       	ldd	r27, Y+4	; 0x04
    4690:	9b 96       	adiw	r26, 0x2b	; 43
    4692:	bc 83       	std	Y+4, r27	; 0x04
    4694:	ab 83       	std	Y+3, r26	; 0x03
    4696:	bb e2       	ldi	r27, 0x2B	; 43
    4698:	8b 0e       	add	r8, r27
    469a:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    469c:	25 30       	cpi	r18, 0x05	; 5
    469e:	09 f0       	breq	.+2      	; 0x46a2 <__stack+0x4a3>
    46a0:	b6 ce       	rjmp	.-660    	; 0x440e <__stack+0x20f>
        }
    }


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
    46a2:	e0 91 fe 08 	lds	r30, 0x08FE
    46a6:	f0 91 ff 08 	lds	r31, 0x08FF
    46aa:	80 85       	ldd	r24, Z+8	; 0x08
    46ac:	0e 94 21 11 	call	0x2242	; 0x2242 <_nrk_stats_task_start>
#endif
    task_ID = nrk_get_high_ready_task_ID();
    46b0:	0e 94 0f 1a 	call	0x341e	; 0x341e <nrk_get_high_ready_task_ID>
    46b4:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    46b6:	2b e2       	ldi	r18, 0x2B	; 43
    46b8:	82 02       	muls	r24, r18
    46ba:	f0 01       	movw	r30, r0
    46bc:	11 24       	eor	r1, r1
    46be:	ef 5e       	subi	r30, 0xEF	; 239
    46c0:	f7 4f       	sbci	r31, 0xF7	; 247
    46c2:	82 85       	ldd	r24, Z+10	; 0x0a
    46c4:	80 93 00 09 	sts	0x0900, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    46c8:	f0 93 f0 08 	sts	0x08F0, r31
    46cc:	e0 93 ef 08 	sts	0x08EF, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    46d0:	ff 20       	and	r15, r15
    46d2:	31 f1       	breq	.+76     	; 0x4720 <__stack+0x521>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    46d4:	45 a1       	ldd	r20, Z+37	; 0x25
    46d6:	56 a1       	ldd	r21, Z+38	; 0x26
    46d8:	67 a1       	ldd	r22, Z+39	; 0x27
    46da:	70 a5       	ldd	r23, Z+40	; 0x28
    46dc:	45 2b       	or	r20, r21
    46de:	46 2b       	or	r20, r22
    46e0:	47 2b       	or	r20, r23
    46e2:	a1 f0       	breq	.+40     	; 0x470c <__stack+0x50d>
    46e4:	45 8d       	ldd	r20, Z+29	; 0x1d
    46e6:	56 8d       	ldd	r21, Z+30	; 0x1e
    46e8:	67 8d       	ldd	r22, Z+31	; 0x1f
    46ea:	70 a1       	ldd	r23, Z+32	; 0x20
    46ec:	4a 3f       	cpi	r20, 0xFA	; 250
    46ee:	51 05       	cpc	r21, r1
    46f0:	61 05       	cpc	r22, r1
    46f2:	71 05       	cpc	r23, r1
    46f4:	58 f4       	brcc	.+22     	; 0x470c <__stack+0x50d>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    46f6:	ce 80       	ldd	r12, Y+6	; 0x06
    46f8:	df 80       	ldd	r13, Y+7	; 0x07
    46fa:	86 01       	movw	r16, r12
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	40 17       	cp	r20, r16
    4702:	51 07       	cpc	r21, r17
    4704:	62 07       	cpc	r22, r18
    4706:	73 07       	cpc	r23, r19
    4708:	60 f5       	brcc	.+88     	; 0x4762 <__stack+0x563>
    470a:	07 c0       	rjmp	.+14     	; 0x471a <__stack+0x51b>
    470c:	2e 81       	ldd	r18, Y+6	; 0x06
    470e:	3f 81       	ldd	r19, Y+7	; 0x07
    4710:	2b 3f       	cpi	r18, 0xFB	; 251
    4712:	31 05       	cpc	r19, r1
    4714:	30 f1       	brcs	.+76     	; 0x4762 <__stack+0x563>
    4716:	4a ef       	ldi	r20, 0xFA	; 250
    4718:	50 e0       	ldi	r21, 0x00	; 0
    471a:	5f 83       	std	Y+7, r21	; 0x07
    471c:	4e 83       	std	Y+6, r20	; 0x06
    471e:	21 c0       	rjmp	.+66     	; 0x4762 <__stack+0x563>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4720:	ae 81       	ldd	r26, Y+6	; 0x06
    4722:	bf 81       	ldd	r27, Y+7	; 0x07
    4724:	a4 30       	cpi	r26, 0x04	; 4
    4726:	b1 05       	cpc	r27, r1
    4728:	e0 f0       	brcs	.+56     	; 0x4762 <__stack+0x563>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    472a:	9d 01       	movw	r18, r26
    472c:	23 50       	subi	r18, 0x03	; 3
    472e:	31 09       	sbc	r19, r1
    4730:	2a 3f       	cpi	r18, 0xFA	; 250
    4732:	31 05       	cpc	r19, r1
    4734:	40 f4       	brcc	.+16     	; 0x4746 <__stack+0x547>
    4736:	3f 83       	std	Y+7, r19	; 0x07
    4738:	2e 83       	std	Y+6, r18	; 0x06
    473a:	22 30       	cpi	r18, 0x02	; 2
    473c:	31 05       	cpc	r19, r1
    473e:	88 f4       	brcc	.+34     	; 0x4762 <__stack+0x563>
    4740:	22 e0       	ldi	r18, 0x02	; 2
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	0c c0       	rjmp	.+24     	; 0x475e <__stack+0x55f>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4746:	4e 81       	ldd	r20, Y+6	; 0x06
    4748:	5f 81       	ldd	r21, Y+7	; 0x07
    474a:	4d 3f       	cpi	r20, 0xFD	; 253
    474c:	51 05       	cpc	r21, r1
    474e:	29 f0       	breq	.+10     	; 0x475a <__stack+0x55b>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4750:	aa ef       	ldi	r26, 0xFA	; 250
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	bf 83       	std	Y+7, r27	; 0x07
    4756:	ae 83       	std	Y+6, r26	; 0x06
    4758:	04 c0       	rjmp	.+8      	; 0x4762 <__stack+0x563>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    475a:	27 ef       	ldi	r18, 0xF7	; 247
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	3f 83       	std	Y+7, r19	; 0x07
    4760:	2e 83       	std	Y+6, r18	; 0x06
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4762:	80 93 f1 08 	sts	0x08F1, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4766:	f0 93 ff 08 	sts	0x08FF, r31
    476a:	e0 93 fe 08 	sts	0x08FE, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    476e:	3e 81       	ldd	r19, Y+6	; 0x06
    4770:	30 93 01 06 	sts	0x0601, r19

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4774:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    4778:	28 2f       	mov	r18, r24
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	2f 5f       	subi	r18, 0xFF	; 255
    477e:	3f 4f       	sbci	r19, 0xFF	; 255
    4780:	ce 80       	ldd	r12, Y+6	; 0x06
    4782:	df 80       	ldd	r13, Y+7	; 0x07
    4784:	2c 15       	cp	r18, r12
    4786:	3d 05       	cpc	r19, r13
    4788:	58 f0       	brcs	.+22     	; 0x47a0 <__stack+0x5a1>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    478a:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_nrk_os_timer_get>
    478e:	c8 2e       	mov	r12, r24
    4790:	d1 2c       	mov	r13, r1
    4792:	96 01       	movw	r18, r12
    4794:	2e 5f       	subi	r18, 0xFE	; 254
    4796:	3f 4f       	sbci	r19, 0xFF	; 255
    4798:	3f 83       	std	Y+7, r19	; 0x07
    479a:	2e 83       	std	Y+6, r18	; 0x06
        _nrk_prev_timer_val=next_wake;
    479c:	20 93 01 06 	sts	0x0601, r18
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    47a0:	f1 10       	cpse	r15, r1
    47a2:	10 92 f2 08 	sts	0x08F2, r1

    _nrk_set_next_wakeup(next_wake);
    47a6:	8e 81       	ldd	r24, Y+6	; 0x06
    47a8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    47ac:	0e 94 c3 29 	call	0x5386	; 0x5386 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    47b0:	27 96       	adiw	r28, 0x07	; 7
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	f8 94       	cli
    47b6:	de bf       	out	0x3e, r29	; 62
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	cd bf       	out	0x3d, r28	; 61
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	0f 91       	pop	r16
    47c4:	ff 90       	pop	r15
    47c6:	ef 90       	pop	r14
    47c8:	df 90       	pop	r13
    47ca:	cf 90       	pop	r12
    47cc:	bf 90       	pop	r11
    47ce:	af 90       	pop	r10
    47d0:	9f 90       	pop	r9
    47d2:	8f 90       	pop	r8
    47d4:	7f 90       	pop	r7
    47d6:	6f 90       	pop	r6
    47d8:	5f 90       	pop	r5
    47da:	4f 90       	pop	r4
    47dc:	3f 90       	pop	r3
    47de:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    47e0:	0c 94 ce 29 	jmp	0x539c	; 0x539c <nrk_start_high_ready_task>

000047e4 <_nrk_sw_wdt_check>:
#include <stdio.h>

#ifdef NRK_SW_WDT

void _nrk_sw_wdt_check()
{
    47e4:	3f 92       	push	r3
    47e6:	4f 92       	push	r4
    47e8:	5f 92       	push	r5
    47ea:	6f 92       	push	r6
    47ec:	7f 92       	push	r7
    47ee:	8f 92       	push	r8
    47f0:	9f 92       	push	r9
    47f2:	af 92       	push	r10
    47f4:	bf 92       	push	r11
    47f6:	cf 92       	push	r12
    47f8:	df 92       	push	r13
    47fa:	ef 92       	push	r14
    47fc:	ff 92       	push	r15
    47fe:	0f 93       	push	r16
    4800:	1f 93       	push	r17
    4802:	cf 93       	push	r28
    4804:	df 93       	push	r29
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
    480a:	60 97       	sbiw	r28, 0x10	; 16
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	f8 94       	cli
    4810:	de bf       	out	0x3e, r29	; 62
    4812:	0f be       	out	0x3f, r0	; 63
    4814:	cd bf       	out	0x3d, r28	; 61
    uint8_t i;
    nrk_time_t now;
    nrk_time_t sub;
    nrk_time_get(&now);
    4816:	ce 01       	movw	r24, r28
    4818:	09 96       	adiw	r24, 0x09	; 9
    481a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
    481e:	83 e0       	ldi	r24, 0x03	; 3
    4820:	48 2e       	mov	r4, r24
    4822:	89 e0       	ldi	r24, 0x09	; 9
    4824:	58 2e       	mov	r5, r24
    4826:	61 2c       	mov	r6, r1
    4828:	71 2c       	mov	r7, r1
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
    {
        if(sw_wdts[i].active==1 && (nrk_time_sub(&sub,sw_wdts[i].next_period,now)==NRK_ERROR))
    482a:	93 e1       	ldi	r25, 0x13	; 19
    482c:	39 2e       	mov	r3, r25
    482e:	f2 01       	movw	r30, r4
    4830:	80 81       	ld	r24, Z
    4832:	81 30       	cpi	r24, 0x01	; 1
    4834:	61 f5       	brne	.+88     	; 0x488e <_nrk_sw_wdt_check+0xaa>
    4836:	36 9c       	mul	r3, r6
    4838:	f0 01       	movw	r30, r0
    483a:	37 9c       	mul	r3, r7
    483c:	f0 0d       	add	r31, r0
    483e:	11 24       	eor	r1, r1
    4840:	e4 5f       	subi	r30, 0xF4	; 244
    4842:	f6 4f       	sbci	r31, 0xF6	; 246
    4844:	89 84       	ldd	r8, Y+9	; 0x09
    4846:	9a 84       	ldd	r9, Y+10	; 0x0a
    4848:	ab 84       	ldd	r10, Y+11	; 0x0b
    484a:	bc 84       	ldd	r11, Y+12	; 0x0c
    484c:	cd 84       	ldd	r12, Y+13	; 0x0d
    484e:	de 84       	ldd	r13, Y+14	; 0x0e
    4850:	ef 84       	ldd	r14, Y+15	; 0x0f
    4852:	f8 88       	ldd	r15, Y+16	; 0x10
    4854:	00 81       	ld	r16, Z
    4856:	11 81       	ldd	r17, Z+1	; 0x01
    4858:	22 81       	ldd	r18, Z+2	; 0x02
    485a:	33 81       	ldd	r19, Z+3	; 0x03
    485c:	44 81       	ldd	r20, Z+4	; 0x04
    485e:	55 81       	ldd	r21, Z+5	; 0x05
    4860:	66 81       	ldd	r22, Z+6	; 0x06
    4862:	77 81       	ldd	r23, Z+7	; 0x07
    4864:	ce 01       	movw	r24, r28
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <nrk_time_sub>
    486c:	8f 3f       	cpi	r24, 0xFF	; 255
    486e:	79 f4       	brne	.+30     	; 0x488e <_nrk_sw_wdt_check+0xaa>
        {
            nrk_kernel_error_add(NRK_SW_WATCHDOG_ERROR,i );
    4870:	66 2d       	mov	r22, r6
    4872:	85 e1       	ldi	r24, 0x15	; 21
    4874:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
    4878:	f2 01       	movw	r30, r4
    487a:	32 97       	sbiw	r30, 0x02	; 2
            if(sw_wdts[i].error_func==NULL)
    487c:	01 90       	ld	r0, Z+
    487e:	f0 81       	ld	r31, Z
    4880:	e0 2d       	mov	r30, r0
    4882:	30 97       	sbiw	r30, 0x00	; 0
    4884:	19 f4       	brne	.+6      	; 0x488c <_nrk_sw_wdt_check+0xa8>
                // if hw wtd set, this will reboot node
                nrk_halt();
    4886:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <nrk_halt>
    488a:	01 c0       	rjmp	.+2      	; 0x488e <_nrk_sw_wdt_check+0xaa>
            else
                sw_wdts[i].error_func();
    488c:	09 95       	icall
    488e:	ff ef       	ldi	r31, 0xFF	; 255
    4890:	6f 1a       	sub	r6, r31
    4892:	7f 0a       	sbc	r7, r31
    4894:	83 e1       	ldi	r24, 0x13	; 19
    4896:	48 0e       	add	r4, r24
    4898:	51 1c       	adc	r5, r1
{
    uint8_t i;
    nrk_time_t now;
    nrk_time_t sub;
    nrk_time_get(&now);
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
    489a:	e3 e0       	ldi	r30, 0x03	; 3
    489c:	6e 16       	cp	r6, r30
    489e:	71 04       	cpc	r7, r1
    48a0:	31 f6       	brne	.-116    	; 0x482e <_nrk_sw_wdt_check+0x4a>
                sw_wdts[i].error_func();
            // call func
        }
    }

}
    48a2:	60 96       	adiw	r28, 0x10	; 16
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	ff 90       	pop	r15
    48b8:	ef 90       	pop	r14
    48ba:	df 90       	pop	r13
    48bc:	cf 90       	pop	r12
    48be:	bf 90       	pop	r11
    48c0:	af 90       	pop	r10
    48c2:	9f 90       	pop	r9
    48c4:	8f 90       	pop	r8
    48c6:	7f 90       	pop	r7
    48c8:	6f 90       	pop	r6
    48ca:	5f 90       	pop	r5
    48cc:	4f 90       	pop	r4
    48ce:	3f 90       	pop	r3
    48d0:	08 95       	ret

000048d2 <_nrk_sw_wdt_init>:

void _nrk_sw_wdt_init()
{
    uint8_t i;
    for(i=0; i<NRK_MAX_SW_WDT; i++ )
        sw_wdts[i].active=0;
    48d2:	10 92 03 09 	sts	0x0903, r1
    48d6:	10 92 16 09 	sts	0x0916, r1
    48da:	10 92 29 09 	sts	0x0929, r1
    48de:	08 95       	ret

000048e0 <nrk_sw_wdt_init>:
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    48e0:	db 01       	movw	r26, r22
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    48e2:	83 30       	cpi	r24, 0x03	; 3
    48e4:	f0 f4       	brcc	.+60     	; 0x4922 <nrk_sw_wdt_init+0x42>
    sw_wdts[id].error_func=func;
    48e6:	93 e1       	ldi	r25, 0x13	; 19
    48e8:	89 9f       	mul	r24, r25
    48ea:	f0 01       	movw	r30, r0
    48ec:	11 24       	eor	r1, r1
    48ee:	ef 5f       	subi	r30, 0xFF	; 255
    48f0:	f6 4f       	sbci	r31, 0xF6	; 246
    48f2:	51 83       	std	Z+1, r21	; 0x01
    48f4:	40 83       	st	Z, r20
    sw_wdts[id].period.secs=period->secs;
    48f6:	4d 91       	ld	r20, X+
    48f8:	5d 91       	ld	r21, X+
    48fa:	6d 91       	ld	r22, X+
    48fc:	7c 91       	ld	r23, X
    48fe:	13 97       	sbiw	r26, 0x03	; 3
    4900:	43 83       	std	Z+3, r20	; 0x03
    4902:	54 83       	std	Z+4, r21	; 0x04
    4904:	65 83       	std	Z+5, r22	; 0x05
    4906:	76 83       	std	Z+6, r23	; 0x06
    sw_wdts[id].period.nano_secs=period->nano_secs;
    4908:	14 96       	adiw	r26, 0x04	; 4
    490a:	4d 91       	ld	r20, X+
    490c:	5d 91       	ld	r21, X+
    490e:	6d 91       	ld	r22, X+
    4910:	7c 91       	ld	r23, X
    4912:	17 97       	sbiw	r26, 0x07	; 7
    4914:	47 83       	std	Z+7, r20	; 0x07
    4916:	50 87       	std	Z+8, r21	; 0x08
    4918:	61 87       	std	Z+9, r22	; 0x09
    491a:	72 87       	std	Z+10, r23	; 0x0a
    sw_wdts[id].active=0;
    491c:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	08 95       	ret
        sw_wdts[i].active=0;
}

int8_t nrk_sw_wdt_init(uint8_t id, nrk_time_t *period, void *func)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    4922:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].error_func=func;
    sw_wdts[id].period.secs=period->secs;
    sw_wdts[id].period.nano_secs=period->nano_secs;
    sw_wdts[id].active=0;
    return NRK_OK;
}
    4924:	08 95       	ret

00004926 <nrk_sw_wdt_update>:

int8_t nrk_sw_wdt_update(uint8_t id)
{
    4926:	cf 92       	push	r12
    4928:	df 92       	push	r13
    492a:	ef 92       	push	r14
    492c:	ff 92       	push	r15
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62
    493a:	28 97       	sbiw	r28, 0x08	; 8
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	18 2f       	mov	r17, r24
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    4948:	83 30       	cpi	r24, 0x03	; 3
    494a:	a0 f5       	brcc	.+104    	; 0x49b4 <nrk_sw_wdt_update+0x8e>
    nrk_time_get(&now);
    494c:	ce 01       	movw	r24, r28
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    4954:	23 e1       	ldi	r18, 0x13	; 19
    4956:	12 9f       	mul	r17, r18
    4958:	c0 01       	movw	r24, r0
    495a:	11 24       	eor	r1, r1
    495c:	8c 01       	movw	r16, r24
    495e:	0f 5f       	subi	r16, 0xFF	; 255
    4960:	16 4f       	sbci	r17, 0xF6	; 246
    4962:	f8 01       	movw	r30, r16
    4964:	43 81       	ldd	r20, Z+3	; 0x03
    4966:	54 81       	ldd	r21, Z+4	; 0x04
    4968:	65 81       	ldd	r22, Z+5	; 0x05
    496a:	76 81       	ldd	r23, Z+6	; 0x06
    496c:	c9 80       	ldd	r12, Y+1	; 0x01
    496e:	da 80       	ldd	r13, Y+2	; 0x02
    4970:	eb 80       	ldd	r14, Y+3	; 0x03
    4972:	fc 80       	ldd	r15, Y+4	; 0x04
    4974:	4c 0d       	add	r20, r12
    4976:	5d 1d       	adc	r21, r13
    4978:	6e 1d       	adc	r22, r14
    497a:	7f 1d       	adc	r23, r15
    497c:	43 87       	std	Z+11, r20	; 0x0b
    497e:	54 87       	std	Z+12, r21	; 0x0c
    4980:	65 87       	std	Z+13, r22	; 0x0d
    4982:	76 87       	std	Z+14, r23	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    4984:	47 81       	ldd	r20, Z+7	; 0x07
    4986:	50 85       	ldd	r21, Z+8	; 0x08
    4988:	61 85       	ldd	r22, Z+9	; 0x09
    498a:	72 85       	ldd	r23, Z+10	; 0x0a
    498c:	cd 80       	ldd	r12, Y+5	; 0x05
    498e:	de 80       	ldd	r13, Y+6	; 0x06
    4990:	ef 80       	ldd	r14, Y+7	; 0x07
    4992:	f8 84       	ldd	r15, Y+8	; 0x08
    4994:	4c 0d       	add	r20, r12
    4996:	5d 1d       	adc	r21, r13
    4998:	6e 1d       	adc	r22, r14
    499a:	7f 1d       	adc	r23, r15
    499c:	47 87       	std	Z+15, r20	; 0x0f
    499e:	50 8b       	std	Z+16, r21	; 0x10
    49a0:	61 8b       	std	Z+17, r22	; 0x11
    49a2:	72 8b       	std	Z+18, r23	; 0x12
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    49a4:	84 5f       	subi	r24, 0xF4	; 244
    49a6:	96 4f       	sbci	r25, 0xF6	; 246
    49a8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <nrk_time_compact_nanos>
    sw_wdts[id].active=1;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	f8 01       	movw	r30, r16
    49b0:	82 83       	std	Z+2, r24	; 0x02
    return NRK_OK;
    49b2:	01 c0       	rjmp	.+2      	; 0x49b6 <nrk_sw_wdt_update+0x90>
}

int8_t nrk_sw_wdt_update(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    nrk_time_compact_nanos(&(sw_wdts[id].next_period));
    sw_wdts[id].active=1;
    return NRK_OK;
}
    49b6:	28 96       	adiw	r28, 0x08	; 8
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	f8 94       	cli
    49bc:	de bf       	out	0x3e, r29	; 62
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	cd bf       	out	0x3d, r28	; 61
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	ff 90       	pop	r15
    49cc:	ef 90       	pop	r14
    49ce:	df 90       	pop	r13
    49d0:	cf 90       	pop	r12
    49d2:	08 95       	ret

000049d4 <nrk_sw_wdt_start>:

int8_t nrk_sw_wdt_start(uint8_t id)
{
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
    49e0:	28 97       	sbiw	r28, 0x08	; 8
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	f8 94       	cli
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	cd bf       	out	0x3d, r28	; 61
    49ec:	18 2f       	mov	r17, r24
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    49ee:	83 30       	cpi	r24, 0x03	; 3
    49f0:	68 f5       	brcc	.+90     	; 0x4a4c <nrk_sw_wdt_start+0x78>
    nrk_time_get(&now);
    49f2:	ce 01       	movw	r24, r28
    49f4:	01 96       	adiw	r24, 0x01	; 1
    49f6:	0e 94 57 1d 	call	0x3aae	; 0x3aae <nrk_time_get>
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    49fa:	83 e1       	ldi	r24, 0x13	; 19
    49fc:	18 9f       	mul	r17, r24
    49fe:	f0 01       	movw	r30, r0
    4a00:	11 24       	eor	r1, r1
    4a02:	ef 5f       	subi	r30, 0xFF	; 255
    4a04:	f6 4f       	sbci	r31, 0xF6	; 246
    4a06:	43 81       	ldd	r20, Z+3	; 0x03
    4a08:	54 81       	ldd	r21, Z+4	; 0x04
    4a0a:	65 81       	ldd	r22, Z+5	; 0x05
    4a0c:	76 81       	ldd	r23, Z+6	; 0x06
    4a0e:	09 81       	ldd	r16, Y+1	; 0x01
    4a10:	1a 81       	ldd	r17, Y+2	; 0x02
    4a12:	2b 81       	ldd	r18, Y+3	; 0x03
    4a14:	3c 81       	ldd	r19, Y+4	; 0x04
    4a16:	40 0f       	add	r20, r16
    4a18:	51 1f       	adc	r21, r17
    4a1a:	62 1f       	adc	r22, r18
    4a1c:	73 1f       	adc	r23, r19
    4a1e:	43 87       	std	Z+11, r20	; 0x0b
    4a20:	54 87       	std	Z+12, r21	; 0x0c
    4a22:	65 87       	std	Z+13, r22	; 0x0d
    4a24:	76 87       	std	Z+14, r23	; 0x0e
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    4a26:	47 81       	ldd	r20, Z+7	; 0x07
    4a28:	50 85       	ldd	r21, Z+8	; 0x08
    4a2a:	61 85       	ldd	r22, Z+9	; 0x09
    4a2c:	72 85       	ldd	r23, Z+10	; 0x0a
    4a2e:	0d 81       	ldd	r16, Y+5	; 0x05
    4a30:	1e 81       	ldd	r17, Y+6	; 0x06
    4a32:	2f 81       	ldd	r18, Y+7	; 0x07
    4a34:	38 85       	ldd	r19, Y+8	; 0x08
    4a36:	40 0f       	add	r20, r16
    4a38:	51 1f       	adc	r21, r17
    4a3a:	62 1f       	adc	r22, r18
    4a3c:	73 1f       	adc	r23, r19
    4a3e:	47 87       	std	Z+15, r20	; 0x0f
    4a40:	50 8b       	std	Z+16, r21	; 0x10
    4a42:	61 8b       	std	Z+17, r22	; 0x11
    4a44:	72 8b       	std	Z+18, r23	; 0x12
    sw_wdts[id].active=1;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	82 83       	std	Z+2, r24	; 0x02

    return NRK_OK;
    4a4a:	01 c0       	rjmp	.+2      	; 0x4a4e <nrk_sw_wdt_start+0x7a>
}

int8_t nrk_sw_wdt_start(uint8_t id)
{
    nrk_time_t now;
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    4a4c:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].next_period.secs=now.secs+sw_wdts[id].period.secs;
    sw_wdts[id].next_period.nano_secs=now.nano_secs+sw_wdts[id].period.nano_secs;
    sw_wdts[id].active=1;

    return NRK_OK;
}
    4a4e:	28 96       	adiw	r28, 0x08	; 8
    4a50:	0f b6       	in	r0, 0x3f	; 63
    4a52:	f8 94       	cli
    4a54:	de bf       	out	0x3e, r29	; 62
    4a56:	0f be       	out	0x3f, r0	; 63
    4a58:	cd bf       	out	0x3d, r28	; 61
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	1f 91       	pop	r17
    4a60:	0f 91       	pop	r16
    4a62:	08 95       	ret

00004a64 <nrk_sw_wdt_stop>:

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    4a64:	83 30       	cpi	r24, 0x03	; 3
    4a66:	48 f4       	brcc	.+18     	; 0x4a7a <nrk_sw_wdt_stop+0x16>
    sw_wdts[id].active=0;
    4a68:	93 e1       	ldi	r25, 0x13	; 19
    4a6a:	89 9f       	mul	r24, r25
    4a6c:	f0 01       	movw	r30, r0
    4a6e:	11 24       	eor	r1, r1
    4a70:	ef 5f       	subi	r30, 0xFF	; 255
    4a72:	f6 4f       	sbci	r31, 0xF6	; 246
    4a74:	12 82       	std	Z+2, r1	; 0x02
    return NRK_OK;
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	08 95       	ret
    return NRK_OK;
}

int8_t nrk_sw_wdt_stop(uint8_t id)
{
    if(id>=NRK_MAX_SW_WDT) return NRK_ERROR;
    4a7a:	8f ef       	ldi	r24, 0xFF	; 255
    sw_wdts[id].active=0;
    return NRK_OK;
}
    4a7c:	08 95       	ret

00004a7e <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	00 97       	sbiw	r24, 0x00	; 0
    4a9a:	89 f7       	brne	.-30     	; 0x4a7e <nrk_spin_wait_us>

}
    4a9c:	08 95       	ret

00004a9e <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4a9e:	10 92 21 01 	sts	0x0121, r1
    4aa2:	08 95       	ret

00004aa4 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4aa4:	89 e0       	ldi	r24, 0x09	; 9
    4aa6:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4aaa:	8d e8       	ldi	r24, 0x8D	; 141
    4aac:	9c e3       	ldi	r25, 0x3C	; 60
    4aae:	90 93 29 01 	sts	0x0129, r25
    4ab2:	80 93 28 01 	sts	0x0128, r24
    4ab6:	08 95       	ret

00004ab8 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4ab8:	10 92 25 01 	sts	0x0125, r1
    4abc:	10 92 24 01 	sts	0x0124, r1
    4ac0:	08 95       	ret

00004ac2 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	00 d0       	rcall	.+0      	; 0x4ac8 <_nrk_precision_os_timer_get+0x6>
    4ac8:	cd b7       	in	r28, 0x3d	; 61
    4aca:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4acc:	80 91 24 01 	lds	r24, 0x0124
    4ad0:	90 91 25 01 	lds	r25, 0x0125
    4ad4:	9a 83       	std	Y+2, r25	; 0x02
    4ad6:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4ad8:	89 81       	ldd	r24, Y+1	; 0x01
    4ada:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4adc:	0f 90       	pop	r0
    4ade:	0f 90       	pop	r0
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	08 95       	ret

00004ae6 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4ae6:	10 92 81 00 	sts	0x0081, r1
    4aea:	08 95       	ret

00004aec <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	80 93 81 00 	sts	0x0081, r24
    4af2:	08 95       	ret

00004af4 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4af4:	83 b5       	in	r24, 0x23	; 35
    4af6:	81 60       	ori	r24, 0x01	; 1
    4af8:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4afa:	10 92 85 00 	sts	0x0085, r1
    4afe:	10 92 84 00 	sts	0x0084, r1
    4b02:	08 95       	ret

00004b04 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <_nrk_high_speed_timer_get+0x6>
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4b0e:	80 91 84 00 	lds	r24, 0x0084
    4b12:	90 91 85 00 	lds	r25, 0x0085
    4b16:	9a 83       	std	Y+2, r25	; 0x02
    4b18:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	df 91       	pop	r29
    4b24:	cf 91       	pop	r28
    4b26:	08 95       	ret

00004b28 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4b28:	cf 92       	push	r12
    4b2a:	df 92       	push	r13
    4b2c:	ef 92       	push	r14
    4b2e:	ff 92       	push	r15
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4b34:	ec 01       	movw	r28, r24
    4b36:	cc 0f       	add	r28, r28
    4b38:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4b3a:	c9 37       	cpi	r28, 0x79	; 121
    4b3c:	8f ef       	ldi	r24, 0xFF	; 255
    4b3e:	d8 07       	cpc	r29, r24
    4b40:	10 f0       	brcs	.+4      	; 0x4b46 <nrk_high_speed_timer_wait+0x1e>
    4b42:	c0 e0       	ldi	r28, 0x00	; 0
    4b44:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4b46:	6b 01       	movw	r12, r22
    4b48:	e1 2c       	mov	r14, r1
    4b4a:	f1 2c       	mov	r15, r1
    4b4c:	cc 0e       	add	r12, r28
    4b4e:	dd 1e       	adc	r13, r29
    4b50:	e1 1c       	adc	r14, r1
    4b52:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	c8 16       	cp	r12, r24
    4b58:	d1 04       	cpc	r13, r1
    4b5a:	e8 06       	cpc	r14, r24
    4b5c:	f1 04       	cpc	r15, r1
    4b5e:	40 f0       	brcs	.+16     	; 0x4b70 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	e8 1a       	sub	r14, r24
    4b64:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    4b66:	0e 94 82 25 	call	0x4b04	; 0x4b04 <_nrk_high_speed_timer_get>
    4b6a:	c8 17       	cp	r28, r24
    4b6c:	d9 07       	cpc	r29, r25
    4b6e:	d8 f3       	brcs	.-10     	; 0x4b66 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4b70:	0e 94 82 25 	call	0x4b04	; 0x4b04 <_nrk_high_speed_timer_get>
    4b74:	8c 15       	cp	r24, r12
    4b76:	9d 05       	cpc	r25, r13
    4b78:	d8 f3       	brcs	.-10     	; 0x4b70 <nrk_high_speed_timer_wait+0x48>
}
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	ff 90       	pop	r15
    4b80:	ef 90       	pop	r14
    4b82:	df 90       	pop	r13
    4b84:	cf 90       	pop	r12
    4b86:	08 95       	ret

00004b88 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4b88:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4b8c:	e0 e7       	ldi	r30, 0x70	; 112
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	80 81       	ld	r24, Z
    4b92:	8d 7f       	andi	r24, 0xFD	; 253
    4b94:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4b96:	80 81       	ld	r24, Z
    4b98:	8e 7f       	andi	r24, 0xFE	; 254
    4b9a:	80 83       	st	Z, r24
    4b9c:	08 95       	ret

00004b9e <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4b9e:	80 93 b2 00 	sts	0x00B2, r24
    4ba2:	08 95       	ret

00004ba4 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4ba4:	e0 e7       	ldi	r30, 0x70	; 112
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	83 60       	ori	r24, 0x03	; 3
    4bac:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4bae:	83 e0       	ldi	r24, 0x03	; 3
    4bb0:	80 93 b1 00 	sts	0x00B1, r24
    4bb4:	08 95       	ret

00004bb6 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4bb6:	83 b5       	in	r24, 0x23	; 35
    4bb8:	82 60       	ori	r24, 0x02	; 2
    4bba:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4bbc:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4bc0:	10 92 ab 04 	sts	0x04AB, r1
    _nrk_prev_timer_val=0;
    4bc4:	10 92 01 06 	sts	0x0601, r1
    4bc8:	08 95       	ret

00004bca <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    4bce:	8e ef       	ldi	r24, 0xFE	; 254
    4bd0:	80 93 01 06 	sts	0x0601, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4bd4:	80 e2       	ldi	r24, 0x20	; 32
    4bd6:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4bda:	80 91 01 06 	lds	r24, 0x0601
    4bde:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4be2:	83 e0       	ldi	r24, 0x03	; 3
    4be4:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4be6:	92 e0       	ldi	r25, 0x02	; 2
    4be8:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4bec:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4bf0:	93 b5       	in	r25, 0x23	; 35
    4bf2:	92 60       	ori	r25, 0x02	; 2
    4bf4:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4bf6:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4bf8:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4bfa:	83 b5       	in	r24, 0x23	; 35
    4bfc:	82 60       	ori	r24, 0x02	; 2
    4bfe:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4c00:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4c0a:	10 92 85 00 	sts	0x0085, r1
    4c0e:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c12:	83 b5       	in	r24, 0x23	; 35
    4c14:	82 60       	ori	r24, 0x02	; 2
    4c16:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4c18:	83 b5       	in	r24, 0x23	; 35
    4c1a:	81 60       	ori	r24, 0x01	; 1
    4c1c:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4c1e:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4c22:	c4 e2       	ldi	r28, 0x24	; 36
    4c24:	d1 e0       	ldi	r29, 0x01	; 1
    4c26:	19 82       	std	Y+1, r1	; 0x01
    4c28:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c2a:	83 b5       	in	r24, 0x23	; 35
    4c2c:	82 60       	ori	r24, 0x02	; 2
    4c2e:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4c30:	83 b5       	in	r24, 0x23	; 35
    4c32:	81 60       	ori	r24, 0x01	; 1
    4c34:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4c36:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4c3a:	19 82       	std	Y+1, r1	; 0x01
    4c3c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    4c3e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4c42:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4c46:	10 92 ab 04 	sts	0x04AB, r1
}
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	08 95       	ret

00004c50 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4c50:	80 91 b3 00 	lds	r24, 0x00B3
}
    4c54:	8f 5f       	subi	r24, 0xFF	; 255
    4c56:	08 95       	ret

00004c58 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4c58:	81 50       	subi	r24, 0x01	; 1
    4c5a:	80 93 b3 00 	sts	0x00B3, r24
    4c5e:	08 95       	ret

00004c60 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c60:	81 11       	cpse	r24, r1
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4c64:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4c68:	8f ef       	ldi	r24, 0xFF	; 255
    4c6a:	08 95       	ret

00004c6c <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c6c:	81 11       	cpse	r24, r1
    4c6e:	06 c0       	rjmp	.+12     	; 0x4c7c <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4c70:	10 92 95 00 	sts	0x0095, r1
    4c74:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	08 95       	ret
	}
return NRK_ERROR;
    4c7c:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c7e:	08 95       	ret

00004c80 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c80:	81 11       	cpse	r24, r1
    4c82:	05 c0       	rjmp	.+10     	; 0x4c8e <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4c84:	80 91 94 00 	lds	r24, 0x0094
    4c88:	90 91 95 00 	lds	r25, 0x0095
    4c8c:	08 95       	ret
	}
return 0;
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	90 e0       	ldi	r25, 0x00	; 0

}
    4c92:	08 95       	ret

00004c94 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4c94:	81 11       	cpse	r24, r1
    4c96:	05 c0       	rjmp	.+10     	; 0x4ca2 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	08 95       	ret
	}
return NRK_ERROR;
    4ca2:	8f ef       	ldi	r24, 0xFF	; 255
}
    4ca4:	08 95       	ret

00004ca6 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4ca6:	81 11       	cpse	r24, r1
    4ca8:	35 c0       	rjmp	.+106    	; 0x4d14 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4caa:	cb 01       	movw	r24, r22
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	05 97       	sbiw	r24, 0x05	; 5
    4cb0:	10 f4       	brcc	.+4      	; 0x4cb6 <nrk_timer_int_configure+0x10>
    4cb2:	60 93 00 06 	sts	0x0600, r22
	TCCR3A = 0;  
    4cb6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4cba:	88 e0       	ldi	r24, 0x08	; 8
    4cbc:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    4cc0:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4cc4:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4cc8:	30 93 29 04 	sts	0x0429, r19
    4ccc:	20 93 28 04 	sts	0x0428, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4cd0:	80 91 00 06 	lds	r24, 0x0600
    4cd4:	81 30       	cpi	r24, 0x01	; 1
    4cd6:	21 f4       	brne	.+8      	; 0x4ce0 <nrk_timer_int_configure+0x3a>
    4cd8:	80 91 91 00 	lds	r24, 0x0091
    4cdc:	81 60       	ori	r24, 0x01	; 1
    4cde:	11 c0       	rjmp	.+34     	; 0x4d02 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4ce0:	82 30       	cpi	r24, 0x02	; 2
    4ce2:	21 f4       	brne	.+8      	; 0x4cec <nrk_timer_int_configure+0x46>
    4ce4:	80 91 91 00 	lds	r24, 0x0091
    4ce8:	82 60       	ori	r24, 0x02	; 2
    4cea:	0b c0       	rjmp	.+22     	; 0x4d02 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4cec:	83 30       	cpi	r24, 0x03	; 3
    4cee:	21 f4       	brne	.+8      	; 0x4cf8 <nrk_timer_int_configure+0x52>
    4cf0:	80 91 91 00 	lds	r24, 0x0091
    4cf4:	83 60       	ori	r24, 0x03	; 3
    4cf6:	05 c0       	rjmp	.+10     	; 0x4d02 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4cf8:	84 30       	cpi	r24, 0x04	; 4
    4cfa:	31 f4       	brne	.+12     	; 0x4d08 <nrk_timer_int_configure+0x62>
    4cfc:	80 91 91 00 	lds	r24, 0x0091
    4d00:	84 60       	ori	r24, 0x04	; 4
    4d02:	80 93 91 00 	sts	0x0091, r24
    4d06:	08 c0       	rjmp	.+16     	; 0x4d18 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4d08:	85 30       	cpi	r24, 0x05	; 5
    4d0a:	31 f4       	brne	.+12     	; 0x4d18 <nrk_timer_int_configure+0x72>
    4d0c:	80 91 91 00 	lds	r24, 0x0091
    4d10:	85 60       	ori	r24, 0x05	; 5
    4d12:	f7 cf       	rjmp	.-18     	; 0x4d02 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4d14:	8f ef       	ldi	r24, 0xFF	; 255
    4d16:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4d18:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4d1a:	08 95       	ret

00004d1c <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4d1c:	80 91 b2 00 	lds	r24, 0x00B2
}
    4d20:	08 95       	ret

00004d22 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4d22:	1f 92       	push	r1
    4d24:	0f 92       	push	r0
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	0f 92       	push	r0
    4d2a:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d2c:	60 e0       	ldi	r22, 0x00	; 0
    4d2e:	8a e0       	ldi	r24, 0x0A	; 10
    4d30:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
    4d34:	ff cf       	rjmp	.-2      	; 0x4d34 <__vector_default+0x12>

00004d36 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4d36:	0f 92       	push	r0
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	0f 92       	push	r0
    4d3c:	1f 92       	push	r1
    4d3e:	2f 92       	push	r2
    4d40:	3f 92       	push	r3
    4d42:	4f 92       	push	r4
    4d44:	5f 92       	push	r5
    4d46:	6f 92       	push	r6
    4d48:	7f 92       	push	r7
    4d4a:	8f 92       	push	r8
    4d4c:	9f 92       	push	r9
    4d4e:	af 92       	push	r10
    4d50:	bf 92       	push	r11
    4d52:	cf 92       	push	r12
    4d54:	df 92       	push	r13
    4d56:	ef 92       	push	r14
    4d58:	ff 92       	push	r15
    4d5a:	0f 93       	push	r16
    4d5c:	1f 93       	push	r17
    4d5e:	2f 93       	push	r18
    4d60:	3f 93       	push	r19
    4d62:	4f 93       	push	r20
    4d64:	5f 93       	push	r21
    4d66:	6f 93       	push	r22
    4d68:	7f 93       	push	r23
    4d6a:	8f 93       	push	r24
    4d6c:	9f 93       	push	r25
    4d6e:	af 93       	push	r26
    4d70:	bf 93       	push	r27
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	ef 93       	push	r30
    4d78:	ff 93       	push	r31
    4d7a:	a0 91 fe 08 	lds	r26, 0x08FE
    4d7e:	b0 91 ff 08 	lds	r27, 0x08FF
    4d82:	0d b6       	in	r0, 0x3d	; 61
    4d84:	0d 92       	st	X+, r0
    4d86:	0e b6       	in	r0, 0x3e	; 62
    4d88:	0d 92       	st	X+, r0
    4d8a:	1f 92       	push	r1
    4d8c:	a0 91 fe 05 	lds	r26, 0x05FE
    4d90:	b0 91 ff 05 	lds	r27, 0x05FF
    4d94:	1e 90       	ld	r1, -X
    4d96:	be bf       	out	0x3e, r27	; 62
    4d98:	ad bf       	out	0x3d, r26	; 61
    4d9a:	08 95       	ret

00004d9c <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4d9c:	1f 92       	push	r1
    4d9e:	0f 92       	push	r0
    4da0:	0f b6       	in	r0, 0x3f	; 63
    4da2:	0f 92       	push	r0
    4da4:	11 24       	eor	r1, r1
    4da6:	0b b6       	in	r0, 0x3b	; 59
    4da8:	0f 92       	push	r0
    4daa:	2f 93       	push	r18
    4dac:	3f 93       	push	r19
    4dae:	4f 93       	push	r20
    4db0:	5f 93       	push	r21
    4db2:	6f 93       	push	r22
    4db4:	7f 93       	push	r23
    4db6:	8f 93       	push	r24
    4db8:	9f 93       	push	r25
    4dba:	af 93       	push	r26
    4dbc:	bf 93       	push	r27
    4dbe:	ef 93       	push	r30
    4dc0:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4dc2:	e0 91 28 04 	lds	r30, 0x0428
    4dc6:	f0 91 29 04 	lds	r31, 0x0429
    4dca:	30 97       	sbiw	r30, 0x00	; 0
    4dcc:	11 f0       	breq	.+4      	; 0x4dd2 <__vector_32+0x36>
    4dce:	09 95       	icall
    4dd0:	04 c0       	rjmp	.+8      	; 0x4dda <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4dd2:	60 e0       	ldi	r22, 0x00	; 0
    4dd4:	8a e0       	ldi	r24, 0x0A	; 10
    4dd6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	return;  	
}
    4dda:	ff 91       	pop	r31
    4ddc:	ef 91       	pop	r30
    4dde:	bf 91       	pop	r27
    4de0:	af 91       	pop	r26
    4de2:	9f 91       	pop	r25
    4de4:	8f 91       	pop	r24
    4de6:	7f 91       	pop	r23
    4de8:	6f 91       	pop	r22
    4dea:	5f 91       	pop	r21
    4dec:	4f 91       	pop	r20
    4dee:	3f 91       	pop	r19
    4df0:	2f 91       	pop	r18
    4df2:	0f 90       	pop	r0
    4df4:	0b be       	out	0x3b, r0	; 59
    4df6:	0f 90       	pop	r0
    4df8:	0f be       	out	0x3f, r0	; 63
    4dfa:	0f 90       	pop	r0
    4dfc:	1f 90       	pop	r1
    4dfe:	18 95       	reti

00004e00 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4e00:	1f 92       	push	r1
    4e02:	0f 92       	push	r0
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	0f 92       	push	r0
    4e08:	11 24       	eor	r1, r1

	return;  	
} 
    4e0a:	0f 90       	pop	r0
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	0f 90       	pop	r0
    4e10:	1f 90       	pop	r1
    4e12:	18 95       	reti

00004e14 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4e14:	04 b6       	in	r0, 0x34	; 52
    4e16:	03 fc       	sbrc	r0, 3
    4e18:	02 c0       	rjmp	.+4      	; 0x4e1e <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4e1e:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4e20:	04 b6       	in	r0, 0x34	; 52
    4e22:	02 fe       	sbrs	r0, 2
    4e24:	06 c0       	rjmp	.+12     	; 0x4e32 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4e26:	94 b7       	in	r25, 0x34	; 52
    4e28:	9b 7f       	andi	r25, 0xFB	; 251
    4e2a:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4e2c:	04 b6       	in	r0, 0x34	; 52
    4e2e:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4e30:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4e32:	04 b6       	in	r0, 0x34	; 52
    4e34:	01 fe       	sbrs	r0, 1
    4e36:	05 c0       	rjmp	.+10     	; 0x4e42 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4e38:	94 b7       	in	r25, 0x34	; 52
    4e3a:	9d 7f       	andi	r25, 0xFD	; 253
    4e3c:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4e3e:	82 60       	ori	r24, 0x02	; 2
    4e40:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4e42:	81 11       	cpse	r24, r1
    4e44:	0c c0       	rjmp	.+24     	; 0x4e5e <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4e46:	04 b6       	in	r0, 0x34	; 52
    4e48:	00 fe       	sbrs	r0, 0
    4e4a:	04 c0       	rjmp	.+8      	; 0x4e54 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4e4c:	94 b7       	in	r25, 0x34	; 52
    4e4e:	9e 7f       	andi	r25, 0xFE	; 254
    4e50:	94 bf       	out	0x34, r25	; 52
    4e52:	01 c0       	rjmp	.+2      	; 0x4e56 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4e56:	90 91 b0 00 	lds	r25, 0x00B0
    4e5a:	91 11       	cpse	r25, r1
    4e5c:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    4e5e:	08 95       	ret

00004e60 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4e60:	81 11       	cpse	r24, r1
    4e62:	02 c0       	rjmp	.+4      	; 0x4e68 <nrk_ext_int_enable+0x8>
    4e64:	e8 9a       	sbi	0x1d, 0	; 29
    4e66:	39 c0       	rjmp	.+114    	; 0x4eda <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4e68:	81 30       	cpi	r24, 0x01	; 1
    4e6a:	11 f4       	brne	.+4      	; 0x4e70 <nrk_ext_int_enable+0x10>
    4e6c:	e9 9a       	sbi	0x1d, 1	; 29
    4e6e:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4e70:	82 30       	cpi	r24, 0x02	; 2
    4e72:	11 f4       	brne	.+4      	; 0x4e78 <nrk_ext_int_enable+0x18>
    4e74:	ea 9a       	sbi	0x1d, 2	; 29
    4e76:	31 c0       	rjmp	.+98     	; 0x4eda <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4e78:	83 30       	cpi	r24, 0x03	; 3
    4e7a:	21 f4       	brne	.+8      	; 0x4e84 <nrk_ext_int_enable+0x24>
    4e7c:	80 91 6b 00 	lds	r24, 0x006B
    4e80:	81 60       	ori	r24, 0x01	; 1
    4e82:	29 c0       	rjmp	.+82     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4e84:	84 30       	cpi	r24, 0x04	; 4
    4e86:	21 f4       	brne	.+8      	; 0x4e90 <nrk_ext_int_enable+0x30>
    4e88:	80 91 6b 00 	lds	r24, 0x006B
    4e8c:	82 60       	ori	r24, 0x02	; 2
    4e8e:	23 c0       	rjmp	.+70     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4e90:	85 30       	cpi	r24, 0x05	; 5
    4e92:	21 f4       	brne	.+8      	; 0x4e9c <nrk_ext_int_enable+0x3c>
    4e94:	80 91 6b 00 	lds	r24, 0x006B
    4e98:	84 60       	ori	r24, 0x04	; 4
    4e9a:	1d c0       	rjmp	.+58     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4e9c:	86 30       	cpi	r24, 0x06	; 6
    4e9e:	21 f4       	brne	.+8      	; 0x4ea8 <nrk_ext_int_enable+0x48>
    4ea0:	80 91 6b 00 	lds	r24, 0x006B
    4ea4:	88 60       	ori	r24, 0x08	; 8
    4ea6:	17 c0       	rjmp	.+46     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4ea8:	87 30       	cpi	r24, 0x07	; 7
    4eaa:	21 f4       	brne	.+8      	; 0x4eb4 <nrk_ext_int_enable+0x54>
    4eac:	80 91 6b 00 	lds	r24, 0x006B
    4eb0:	80 61       	ori	r24, 0x10	; 16
    4eb2:	11 c0       	rjmp	.+34     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4eb4:	88 30       	cpi	r24, 0x08	; 8
    4eb6:	21 f4       	brne	.+8      	; 0x4ec0 <nrk_ext_int_enable+0x60>
    4eb8:	80 91 6b 00 	lds	r24, 0x006B
    4ebc:	80 62       	ori	r24, 0x20	; 32
    4ebe:	0b c0       	rjmp	.+22     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4ec0:	89 30       	cpi	r24, 0x09	; 9
    4ec2:	21 f4       	brne	.+8      	; 0x4ecc <nrk_ext_int_enable+0x6c>
    4ec4:	80 91 6b 00 	lds	r24, 0x006B
    4ec8:	80 64       	ori	r24, 0x40	; 64
    4eca:	05 c0       	rjmp	.+10     	; 0x4ed6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4ecc:	8a 30       	cpi	r24, 0x0A	; 10
    4ece:	39 f4       	brne	.+14     	; 0x4ede <nrk_ext_int_enable+0x7e>
    4ed0:	80 91 6b 00 	lds	r24, 0x006B
    4ed4:	80 68       	ori	r24, 0x80	; 128
    4ed6:	80 93 6b 00 	sts	0x006B, r24
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	08 95       	ret
return NRK_ERROR;
    4ede:	8f ef       	ldi	r24, 0xFF	; 255
}
    4ee0:	08 95       	ret

00004ee2 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4ee2:	81 11       	cpse	r24, r1
    4ee4:	02 c0       	rjmp	.+4      	; 0x4eea <nrk_ext_int_disable+0x8>
    4ee6:	e8 98       	cbi	0x1d, 0	; 29
    4ee8:	39 c0       	rjmp	.+114    	; 0x4f5c <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4eea:	81 30       	cpi	r24, 0x01	; 1
    4eec:	11 f4       	brne	.+4      	; 0x4ef2 <nrk_ext_int_disable+0x10>
    4eee:	e9 98       	cbi	0x1d, 1	; 29
    4ef0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4ef2:	82 30       	cpi	r24, 0x02	; 2
    4ef4:	11 f4       	brne	.+4      	; 0x4efa <nrk_ext_int_disable+0x18>
    4ef6:	e9 98       	cbi	0x1d, 1	; 29
    4ef8:	31 c0       	rjmp	.+98     	; 0x4f5c <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4efa:	83 30       	cpi	r24, 0x03	; 3
    4efc:	21 f4       	brne	.+8      	; 0x4f06 <nrk_ext_int_disable+0x24>
    4efe:	80 91 6b 00 	lds	r24, 0x006B
    4f02:	8e 7f       	andi	r24, 0xFE	; 254
    4f04:	29 c0       	rjmp	.+82     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4f06:	84 30       	cpi	r24, 0x04	; 4
    4f08:	21 f4       	brne	.+8      	; 0x4f12 <nrk_ext_int_disable+0x30>
    4f0a:	80 91 6b 00 	lds	r24, 0x006B
    4f0e:	8d 7f       	andi	r24, 0xFD	; 253
    4f10:	23 c0       	rjmp	.+70     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4f12:	85 30       	cpi	r24, 0x05	; 5
    4f14:	21 f4       	brne	.+8      	; 0x4f1e <nrk_ext_int_disable+0x3c>
    4f16:	80 91 6b 00 	lds	r24, 0x006B
    4f1a:	8b 7f       	andi	r24, 0xFB	; 251
    4f1c:	1d c0       	rjmp	.+58     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4f1e:	86 30       	cpi	r24, 0x06	; 6
    4f20:	21 f4       	brne	.+8      	; 0x4f2a <nrk_ext_int_disable+0x48>
    4f22:	80 91 6b 00 	lds	r24, 0x006B
    4f26:	87 7f       	andi	r24, 0xF7	; 247
    4f28:	17 c0       	rjmp	.+46     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4f2a:	87 30       	cpi	r24, 0x07	; 7
    4f2c:	21 f4       	brne	.+8      	; 0x4f36 <nrk_ext_int_disable+0x54>
    4f2e:	80 91 6b 00 	lds	r24, 0x006B
    4f32:	8f 7e       	andi	r24, 0xEF	; 239
    4f34:	11 c0       	rjmp	.+34     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4f36:	88 30       	cpi	r24, 0x08	; 8
    4f38:	21 f4       	brne	.+8      	; 0x4f42 <nrk_ext_int_disable+0x60>
    4f3a:	80 91 6b 00 	lds	r24, 0x006B
    4f3e:	8f 7d       	andi	r24, 0xDF	; 223
    4f40:	0b c0       	rjmp	.+22     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4f42:	89 30       	cpi	r24, 0x09	; 9
    4f44:	21 f4       	brne	.+8      	; 0x4f4e <nrk_ext_int_disable+0x6c>
    4f46:	80 91 6b 00 	lds	r24, 0x006B
    4f4a:	8f 7b       	andi	r24, 0xBF	; 191
    4f4c:	05 c0       	rjmp	.+10     	; 0x4f58 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4f4e:	8a 30       	cpi	r24, 0x0A	; 10
    4f50:	39 f4       	brne	.+14     	; 0x4f60 <nrk_ext_int_disable+0x7e>
    4f52:	80 91 6b 00 	lds	r24, 0x006B
    4f56:	8f 77       	andi	r24, 0x7F	; 127
    4f58:	80 93 6b 00 	sts	0x006B, r24
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	08 95       	ret
return NRK_ERROR;
    4f60:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f62:	08 95       	ret

00004f64 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4f64:	81 11       	cpse	r24, r1
    4f66:	26 c0       	rjmp	.+76     	; 0x4fb4 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4f68:	50 93 5c 09 	sts	0x095C, r21
    4f6c:	40 93 5b 09 	sts	0x095B, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4f70:	61 11       	cpse	r22, r1
    4f72:	04 c0       	rjmp	.+8      	; 0x4f7c <nrk_ext_int_configure+0x18>
    4f74:	80 91 69 00 	lds	r24, 0x0069
    4f78:	8c 7f       	andi	r24, 0xFC	; 252
    4f7a:	3d c0       	rjmp	.+122    	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4f7c:	61 30       	cpi	r22, 0x01	; 1
    4f7e:	49 f4       	brne	.+18     	; 0x4f92 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4f80:	80 91 69 00 	lds	r24, 0x0069
    4f84:	8d 7f       	andi	r24, 0xFD	; 253
    4f86:	80 93 69 00 	sts	0x0069, r24
    4f8a:	80 91 69 00 	lds	r24, 0x0069
    4f8e:	81 60       	ori	r24, 0x01	; 1
    4f90:	32 c0       	rjmp	.+100    	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4f92:	62 30       	cpi	r22, 0x02	; 2
    4f94:	49 f4       	brne	.+18     	; 0x4fa8 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4f96:	80 91 69 00 	lds	r24, 0x0069
    4f9a:	82 60       	ori	r24, 0x02	; 2
    4f9c:	80 93 69 00 	sts	0x0069, r24
    4fa0:	80 91 69 00 	lds	r24, 0x0069
    4fa4:	8e 7f       	andi	r24, 0xFE	; 254
    4fa6:	27 c0       	rjmp	.+78     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4fa8:	63 30       	cpi	r22, 0x03	; 3
    4faa:	39 f5       	brne	.+78     	; 0x4ffa <nrk_ext_int_configure+0x96>
    4fac:	80 91 69 00 	lds	r24, 0x0069
    4fb0:	83 60       	ori	r24, 0x03	; 3
    4fb2:	21 c0       	rjmp	.+66     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4fb4:	81 30       	cpi	r24, 0x01	; 1
    4fb6:	49 f5       	brne	.+82     	; 0x500a <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4fb8:	50 93 5a 09 	sts	0x095A, r21
    4fbc:	40 93 59 09 	sts	0x0959, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4fc0:	61 11       	cpse	r22, r1
    4fc2:	04 c0       	rjmp	.+8      	; 0x4fcc <nrk_ext_int_configure+0x68>
    4fc4:	80 91 69 00 	lds	r24, 0x0069
    4fc8:	83 7f       	andi	r24, 0xF3	; 243
    4fca:	15 c0       	rjmp	.+42     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4fcc:	61 30       	cpi	r22, 0x01	; 1
    4fce:	49 f4       	brne	.+18     	; 0x4fe2 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4fd0:	80 91 69 00 	lds	r24, 0x0069
    4fd4:	87 7f       	andi	r24, 0xF7	; 247
    4fd6:	80 93 69 00 	sts	0x0069, r24
    4fda:	80 91 69 00 	lds	r24, 0x0069
    4fde:	84 60       	ori	r24, 0x04	; 4
    4fe0:	0a c0       	rjmp	.+20     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4fe2:	62 30       	cpi	r22, 0x02	; 2
    4fe4:	61 f4       	brne	.+24     	; 0x4ffe <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4fe6:	80 91 69 00 	lds	r24, 0x0069
    4fea:	88 60       	ori	r24, 0x08	; 8
    4fec:	80 93 69 00 	sts	0x0069, r24
    4ff0:	80 91 69 00 	lds	r24, 0x0069
    4ff4:	8b 7f       	andi	r24, 0xFB	; 251
    4ff6:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4ffe:	63 30       	cpi	r22, 0x03	; 3
    5000:	e1 f7       	brne	.-8      	; 0x4ffa <nrk_ext_int_configure+0x96>
    5002:	80 91 69 00 	lds	r24, 0x0069
    5006:	8c 60       	ori	r24, 0x0C	; 12
    5008:	f6 cf       	rjmp	.-20     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    500a:	82 30       	cpi	r24, 0x02	; 2
    500c:	31 f5       	brne	.+76     	; 0x505a <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    500e:	50 93 5e 09 	sts	0x095E, r21
    5012:	40 93 5d 09 	sts	0x095D, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5016:	61 11       	cpse	r22, r1
    5018:	04 c0       	rjmp	.+8      	; 0x5022 <nrk_ext_int_configure+0xbe>
    501a:	80 91 69 00 	lds	r24, 0x0069
    501e:	8f 7c       	andi	r24, 0xCF	; 207
    5020:	ea cf       	rjmp	.-44     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5022:	61 30       	cpi	r22, 0x01	; 1
    5024:	49 f4       	brne	.+18     	; 0x5038 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5026:	80 91 69 00 	lds	r24, 0x0069
    502a:	8f 7d       	andi	r24, 0xDF	; 223
    502c:	80 93 69 00 	sts	0x0069, r24
    5030:	80 91 69 00 	lds	r24, 0x0069
    5034:	80 61       	ori	r24, 0x10	; 16
    5036:	df cf       	rjmp	.-66     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5038:	62 30       	cpi	r22, 0x02	; 2
    503a:	49 f4       	brne	.+18     	; 0x504e <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    503c:	80 91 69 00 	lds	r24, 0x0069
    5040:	80 62       	ori	r24, 0x20	; 32
    5042:	80 93 69 00 	sts	0x0069, r24
    5046:	80 91 69 00 	lds	r24, 0x0069
    504a:	8f 7e       	andi	r24, 0xEF	; 239
    504c:	d4 cf       	rjmp	.-88     	; 0x4ff6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    504e:	63 30       	cpi	r22, 0x03	; 3
    5050:	a1 f6       	brne	.-88     	; 0x4ffa <nrk_ext_int_configure+0x96>
    5052:	80 91 69 00 	lds	r24, 0x0069
    5056:	80 63       	ori	r24, 0x30	; 48
    5058:	ce cf       	rjmp	.-100    	; 0x4ff6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    505a:	83 50       	subi	r24, 0x03	; 3
    505c:	88 30       	cpi	r24, 0x08	; 8
    505e:	50 f4       	brcc	.+20     	; 0x5074 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5060:	80 91 68 00 	lds	r24, 0x0068
    5064:	81 60       	ori	r24, 0x01	; 1
    5066:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    506a:	50 93 60 09 	sts	0x0960, r21
    506e:	40 93 5f 09 	sts	0x095F, r20
    5072:	c3 cf       	rjmp	.-122    	; 0x4ffa <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5074:	8f ef       	ldi	r24, 0xFF	; 255
}
    5076:	08 95       	ret

00005078 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5078:	1f 92       	push	r1
    507a:	0f 92       	push	r0
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	0f 92       	push	r0
    5080:	11 24       	eor	r1, r1
    5082:	0b b6       	in	r0, 0x3b	; 59
    5084:	0f 92       	push	r0
    5086:	2f 93       	push	r18
    5088:	3f 93       	push	r19
    508a:	4f 93       	push	r20
    508c:	5f 93       	push	r21
    508e:	6f 93       	push	r22
    5090:	7f 93       	push	r23
    5092:	8f 93       	push	r24
    5094:	9f 93       	push	r25
    5096:	af 93       	push	r26
    5098:	bf 93       	push	r27
    509a:	ef 93       	push	r30
    509c:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    509e:	e0 91 5f 09 	lds	r30, 0x095F
    50a2:	f0 91 60 09 	lds	r31, 0x0960
    50a6:	30 97       	sbiw	r30, 0x00	; 0
    50a8:	11 f0       	breq	.+4      	; 0x50ae <__vector_9+0x36>
    50aa:	09 95       	icall
    50ac:	04 c0       	rjmp	.+8      	; 0x50b6 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    50ae:	60 e0       	ldi	r22, 0x00	; 0
    50b0:	8a e0       	ldi	r24, 0x0A	; 10
    50b2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	return;  	
}
    50b6:	ff 91       	pop	r31
    50b8:	ef 91       	pop	r30
    50ba:	bf 91       	pop	r27
    50bc:	af 91       	pop	r26
    50be:	9f 91       	pop	r25
    50c0:	8f 91       	pop	r24
    50c2:	7f 91       	pop	r23
    50c4:	6f 91       	pop	r22
    50c6:	5f 91       	pop	r21
    50c8:	4f 91       	pop	r20
    50ca:	3f 91       	pop	r19
    50cc:	2f 91       	pop	r18
    50ce:	0f 90       	pop	r0
    50d0:	0b be       	out	0x3b, r0	; 59
    50d2:	0f 90       	pop	r0
    50d4:	0f be       	out	0x3f, r0	; 63
    50d6:	0f 90       	pop	r0
    50d8:	1f 90       	pop	r1
    50da:	18 95       	reti

000050dc <__vector_1>:


SIGNAL(INT0_vect) {
    50dc:	1f 92       	push	r1
    50de:	0f 92       	push	r0
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	0f 92       	push	r0
    50e4:	11 24       	eor	r1, r1
    50e6:	0b b6       	in	r0, 0x3b	; 59
    50e8:	0f 92       	push	r0
    50ea:	2f 93       	push	r18
    50ec:	3f 93       	push	r19
    50ee:	4f 93       	push	r20
    50f0:	5f 93       	push	r21
    50f2:	6f 93       	push	r22
    50f4:	7f 93       	push	r23
    50f6:	8f 93       	push	r24
    50f8:	9f 93       	push	r25
    50fa:	af 93       	push	r26
    50fc:	bf 93       	push	r27
    50fe:	ef 93       	push	r30
    5100:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5102:	e0 91 5b 09 	lds	r30, 0x095B
    5106:	f0 91 5c 09 	lds	r31, 0x095C
    510a:	30 97       	sbiw	r30, 0x00	; 0
    510c:	11 f0       	breq	.+4      	; 0x5112 <__vector_1+0x36>
    510e:	09 95       	icall
    5110:	04 c0       	rjmp	.+8      	; 0x511a <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	8a e0       	ldi	r24, 0x0A	; 10
    5116:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	return;  	
}
    511a:	ff 91       	pop	r31
    511c:	ef 91       	pop	r30
    511e:	bf 91       	pop	r27
    5120:	af 91       	pop	r26
    5122:	9f 91       	pop	r25
    5124:	8f 91       	pop	r24
    5126:	7f 91       	pop	r23
    5128:	6f 91       	pop	r22
    512a:	5f 91       	pop	r21
    512c:	4f 91       	pop	r20
    512e:	3f 91       	pop	r19
    5130:	2f 91       	pop	r18
    5132:	0f 90       	pop	r0
    5134:	0b be       	out	0x3b, r0	; 59
    5136:	0f 90       	pop	r0
    5138:	0f be       	out	0x3f, r0	; 63
    513a:	0f 90       	pop	r0
    513c:	1f 90       	pop	r1
    513e:	18 95       	reti

00005140 <__vector_2>:

SIGNAL(INT1_vect) {
    5140:	1f 92       	push	r1
    5142:	0f 92       	push	r0
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	0f 92       	push	r0
    5148:	11 24       	eor	r1, r1
    514a:	0b b6       	in	r0, 0x3b	; 59
    514c:	0f 92       	push	r0
    514e:	2f 93       	push	r18
    5150:	3f 93       	push	r19
    5152:	4f 93       	push	r20
    5154:	5f 93       	push	r21
    5156:	6f 93       	push	r22
    5158:	7f 93       	push	r23
    515a:	8f 93       	push	r24
    515c:	9f 93       	push	r25
    515e:	af 93       	push	r26
    5160:	bf 93       	push	r27
    5162:	ef 93       	push	r30
    5164:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5166:	e0 91 59 09 	lds	r30, 0x0959
    516a:	f0 91 5a 09 	lds	r31, 0x095A
    516e:	30 97       	sbiw	r30, 0x00	; 0
    5170:	11 f0       	breq	.+4      	; 0x5176 <__vector_2+0x36>
    5172:	09 95       	icall
    5174:	04 c0       	rjmp	.+8      	; 0x517e <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5176:	60 e0       	ldi	r22, 0x00	; 0
    5178:	8a e0       	ldi	r24, 0x0A	; 10
    517a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	return;  	
}
    517e:	ff 91       	pop	r31
    5180:	ef 91       	pop	r30
    5182:	bf 91       	pop	r27
    5184:	af 91       	pop	r26
    5186:	9f 91       	pop	r25
    5188:	8f 91       	pop	r24
    518a:	7f 91       	pop	r23
    518c:	6f 91       	pop	r22
    518e:	5f 91       	pop	r21
    5190:	4f 91       	pop	r20
    5192:	3f 91       	pop	r19
    5194:	2f 91       	pop	r18
    5196:	0f 90       	pop	r0
    5198:	0b be       	out	0x3b, r0	; 59
    519a:	0f 90       	pop	r0
    519c:	0f be       	out	0x3f, r0	; 63
    519e:	0f 90       	pop	r0
    51a0:	1f 90       	pop	r1
    51a2:	18 95       	reti

000051a4 <__vector_3>:

SIGNAL(INT2_vect) {
    51a4:	1f 92       	push	r1
    51a6:	0f 92       	push	r0
    51a8:	0f b6       	in	r0, 0x3f	; 63
    51aa:	0f 92       	push	r0
    51ac:	11 24       	eor	r1, r1
    51ae:	0b b6       	in	r0, 0x3b	; 59
    51b0:	0f 92       	push	r0
    51b2:	2f 93       	push	r18
    51b4:	3f 93       	push	r19
    51b6:	4f 93       	push	r20
    51b8:	5f 93       	push	r21
    51ba:	6f 93       	push	r22
    51bc:	7f 93       	push	r23
    51be:	8f 93       	push	r24
    51c0:	9f 93       	push	r25
    51c2:	af 93       	push	r26
    51c4:	bf 93       	push	r27
    51c6:	ef 93       	push	r30
    51c8:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    51ca:	e0 91 5d 09 	lds	r30, 0x095D
    51ce:	f0 91 5e 09 	lds	r31, 0x095E
    51d2:	30 97       	sbiw	r30, 0x00	; 0
    51d4:	11 f0       	breq	.+4      	; 0x51da <__vector_3+0x36>
    51d6:	09 95       	icall
    51d8:	04 c0       	rjmp	.+8      	; 0x51e2 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    51da:	60 e0       	ldi	r22, 0x00	; 0
    51dc:	8a e0       	ldi	r24, 0x0A	; 10
    51de:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_kernel_error_add>
	return;  	
}
    51e2:	ff 91       	pop	r31
    51e4:	ef 91       	pop	r30
    51e6:	bf 91       	pop	r27
    51e8:	af 91       	pop	r26
    51ea:	9f 91       	pop	r25
    51ec:	8f 91       	pop	r24
    51ee:	7f 91       	pop	r23
    51f0:	6f 91       	pop	r22
    51f2:	5f 91       	pop	r21
    51f4:	4f 91       	pop	r20
    51f6:	3f 91       	pop	r19
    51f8:	2f 91       	pop	r18
    51fa:	0f 90       	pop	r0
    51fc:	0b be       	out	0x3b, r0	; 59
    51fe:	0f 90       	pop	r0
    5200:	0f be       	out	0x3f, r0	; 63
    5202:	0f 90       	pop	r0
    5204:	1f 90       	pop	r1
    5206:	18 95       	reti

00005208 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    5208:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    520c:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    520e:	84 b7       	in	r24, 0x34	; 52
    5210:	87 7f       	andi	r24, 0xF7	; 247
    5212:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5214:	e0 e6       	ldi	r30, 0x60	; 96
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	80 81       	ld	r24, Z
    521a:	88 61       	ori	r24, 0x18	; 24
    521c:	80 83       	st	Z, r24
WDTCSR = 0;
    521e:	10 82       	st	Z, r1
nrk_int_enable();
    5220:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <nrk_int_enable>

00005224 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5224:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5228:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    522a:	84 b7       	in	r24, 0x34	; 52
    522c:	87 7f       	andi	r24, 0xF7	; 247
    522e:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5230:	e0 e6       	ldi	r30, 0x60	; 96
    5232:	f0 e0       	ldi	r31, 0x00	; 0
    5234:	80 81       	ld	r24, Z
    5236:	88 61       	ori	r24, 0x18	; 24
    5238:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    523a:	8d e0       	ldi	r24, 0x0D	; 13
    523c:	80 83       	st	Z, r24
nrk_int_enable();
    523e:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <nrk_int_enable>

00005242 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5242:	04 b6       	in	r0, 0x34	; 52
    5244:	03 fc       	sbrc	r0, 3
    5246:	02 c0       	rjmp	.+4      	; 0x524c <nrk_watchdog_check+0xa>
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	08 95       	ret
return NRK_ERROR;
    524c:	8f ef       	ldi	r24, 0xFF	; 255
}
    524e:	08 95       	ret

00005250 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5250:	a8 95       	wdr
    5252:	08 95       	ret

00005254 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5254:	08 95       	ret

00005256 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5256:	83 b7       	in	r24, 0x33	; 51
    5258:	81 7f       	andi	r24, 0xF1	; 241
    525a:	86 60       	ori	r24, 0x06	; 6
    525c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    525e:	83 b7       	in	r24, 0x33	; 51
    5260:	81 60       	ori	r24, 0x01	; 1
    5262:	83 bf       	out	0x33, r24	; 51
    5264:	88 95       	sleep
    5266:	83 b7       	in	r24, 0x33	; 51
    5268:	8e 7f       	andi	r24, 0xFE	; 254
    526a:	83 bf       	out	0x33, r24	; 51
    526c:	08 95       	ret

0000526e <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    526e:	83 b7       	in	r24, 0x33	; 51
    5270:	81 7f       	andi	r24, 0xF1	; 241
    5272:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5274:	83 b7       	in	r24, 0x33	; 51
    5276:	81 60       	ori	r24, 0x01	; 1
    5278:	83 bf       	out	0x33, r24	; 51
    527a:	88 95       	sleep
    527c:	83 b7       	in	r24, 0x33	; 51
    527e:	8e 7f       	andi	r24, 0xFE	; 254
    5280:	83 bf       	out	0x33, r24	; 51
    5282:	08 95       	ret

00005284 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5284:	fc 01       	movw	r30, r24
    5286:	76 83       	std	Z+6, r23	; 0x06
    5288:	65 83       	std	Z+5, r22	; 0x05
    528a:	08 95       	ret

0000528c <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    528c:	ef 92       	push	r14
    528e:	ff 92       	push	r15
    5290:	0f 93       	push	r16
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	ec 01       	movw	r28, r24
    529a:	8b 01       	movw	r16, r22
    529c:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    529e:	40 32       	cpi	r20, 0x20	; 32
    52a0:	51 05       	cpc	r21, r1
    52a2:	18 f4       	brcc	.+6      	; 0x52aa <nrk_task_set_stk+0x1e>
    52a4:	81 e1       	ldi	r24, 0x11	; 17
    52a6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    52aa:	a7 01       	movw	r20, r14
    52ac:	41 50       	subi	r20, 0x01	; 1
    52ae:	51 09       	sbc	r21, r1
    52b0:	40 0f       	add	r20, r16
    52b2:	51 1f       	adc	r21, r17
    52b4:	5a 83       	std	Y+2, r21	; 0x02
    52b6:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    52b8:	1c 83       	std	Y+4, r17	; 0x04
    52ba:	0b 83       	std	Y+3, r16	; 0x03

}
    52bc:	df 91       	pop	r29
    52be:	cf 91       	pop	r28
    52c0:	1f 91       	pop	r17
    52c2:	0f 91       	pop	r16
    52c4:	ff 90       	pop	r15
    52c6:	ef 90       	pop	r14
    52c8:	08 95       	ret

000052ca <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    52ca:	25 e5       	ldi	r18, 0x55	; 85
    52cc:	fa 01       	movw	r30, r20
    52ce:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    52d0:	fb 01       	movw	r30, r22
    52d2:	32 97       	sbiw	r30, 0x02	; 2
    52d4:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    52d6:	fb 01       	movw	r30, r22
    52d8:	31 97       	sbiw	r30, 0x01	; 1
    52da:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    52dc:	fb 01       	movw	r30, r22
    52de:	34 97       	sbiw	r30, 0x04	; 4
    52e0:	11 82       	std	Z+1, r1	; 0x01
    52e2:	10 82       	st	Z, r1
    *(--stk) = 0;       
    52e4:	fb 01       	movw	r30, r22
    52e6:	36 97       	sbiw	r30, 0x06	; 6
    52e8:	11 82       	std	Z+1, r1	; 0x01
    52ea:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    52ec:	fb 01       	movw	r30, r22
    52ee:	38 97       	sbiw	r30, 0x08	; 8
    52f0:	11 82       	std	Z+1, r1	; 0x01
    52f2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    52f4:	fb 01       	movw	r30, r22
    52f6:	3a 97       	sbiw	r30, 0x0a	; 10
    52f8:	11 82       	std	Z+1, r1	; 0x01
    52fa:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    52fc:	fb 01       	movw	r30, r22
    52fe:	3c 97       	sbiw	r30, 0x0c	; 12
    5300:	11 82       	std	Z+1, r1	; 0x01
    5302:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5304:	fb 01       	movw	r30, r22
    5306:	3e 97       	sbiw	r30, 0x0e	; 14
    5308:	11 82       	std	Z+1, r1	; 0x01
    530a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    530c:	fb 01       	movw	r30, r22
    530e:	70 97       	sbiw	r30, 0x10	; 16
    5310:	11 82       	std	Z+1, r1	; 0x01
    5312:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5314:	fb 01       	movw	r30, r22
    5316:	72 97       	sbiw	r30, 0x12	; 18
    5318:	11 82       	std	Z+1, r1	; 0x01
    531a:	10 82       	st	Z, r1

    *(--stk) = 0; 
    531c:	fb 01       	movw	r30, r22
    531e:	74 97       	sbiw	r30, 0x14	; 20
    5320:	11 82       	std	Z+1, r1	; 0x01
    5322:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5324:	fb 01       	movw	r30, r22
    5326:	76 97       	sbiw	r30, 0x16	; 22
    5328:	11 82       	std	Z+1, r1	; 0x01
    532a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    532c:	fb 01       	movw	r30, r22
    532e:	78 97       	sbiw	r30, 0x18	; 24
    5330:	11 82       	std	Z+1, r1	; 0x01
    5332:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5334:	fb 01       	movw	r30, r22
    5336:	7a 97       	sbiw	r30, 0x1a	; 26
    5338:	11 82       	std	Z+1, r1	; 0x01
    533a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    533c:	fb 01       	movw	r30, r22
    533e:	7c 97       	sbiw	r30, 0x1c	; 28
    5340:	11 82       	std	Z+1, r1	; 0x01
    5342:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5344:	fb 01       	movw	r30, r22
    5346:	7e 97       	sbiw	r30, 0x1e	; 30
    5348:	11 82       	std	Z+1, r1	; 0x01
    534a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    534c:	fb 01       	movw	r30, r22
    534e:	b0 97       	sbiw	r30, 0x20	; 32
    5350:	11 82       	std	Z+1, r1	; 0x01
    5352:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5354:	fb 01       	movw	r30, r22
    5356:	b2 97       	sbiw	r30, 0x22	; 34
    5358:	11 82       	std	Z+1, r1	; 0x01
    535a:	10 82       	st	Z, r1
    *(--stk) = 0;
    535c:	cb 01       	movw	r24, r22
    535e:	84 97       	sbiw	r24, 0x24	; 36
    5360:	fc 01       	movw	r30, r24
    5362:	11 82       	std	Z+1, r1	; 0x01
    5364:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5366:	08 95       	ret

00005368 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5368:	85 e5       	ldi	r24, 0x55	; 85
    536a:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    536e:	ee ef       	ldi	r30, 0xFE	; 254
    5370:	f1 e4       	ldi	r31, 0x41	; 65
    5372:	f0 93 ff 05 	sts	0x05FF, r31
    5376:	e0 93 fe 05 	sts	0x05FE, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    537a:	88 e9       	ldi	r24, 0x98	; 152
    537c:	90 e1       	ldi	r25, 0x10	; 16
    537e:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5380:	80 93 ff 41 	sts	0x41FF, r24
    5384:	08 95       	ret

00005386 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5386:	88 e9       	ldi	r24, 0x98	; 152
    5388:	90 e1       	ldi	r25, 0x10	; 16
    538a:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    538e:	80 93 ff 41 	sts	0x41FF, r24
    5392:	08 95       	ret

00005394 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5394:	0e 94 e5 25 	call	0x4bca	; 0x4bca <_nrk_setup_timer>
  nrk_int_enable();  
    5398:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <nrk_int_enable>

0000539c <nrk_start_high_ready_task>:
    539c:	a0 91 ef 08 	lds	r26, 0x08EF
    53a0:	b0 91 f0 08 	lds	r27, 0x08F0
    53a4:	cd 91       	ld	r28, X+
    53a6:	cd bf       	out	0x3d, r28	; 61
    53a8:	dd 91       	ld	r29, X+
    53aa:	de bf       	out	0x3e, r29	; 62
    53ac:	ff 91       	pop	r31
    53ae:	ef 91       	pop	r30
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	bf 91       	pop	r27
    53b6:	af 91       	pop	r26
    53b8:	9f 91       	pop	r25
    53ba:	8f 91       	pop	r24
    53bc:	7f 91       	pop	r23
    53be:	6f 91       	pop	r22
    53c0:	5f 91       	pop	r21
    53c2:	4f 91       	pop	r20
    53c4:	3f 91       	pop	r19
    53c6:	2f 91       	pop	r18
    53c8:	1f 91       	pop	r17
    53ca:	0f 91       	pop	r16
    53cc:	ff 90       	pop	r15
    53ce:	ef 90       	pop	r14
    53d0:	df 90       	pop	r13
    53d2:	cf 90       	pop	r12
    53d4:	bf 90       	pop	r11
    53d6:	af 90       	pop	r10
    53d8:	9f 90       	pop	r9
    53da:	8f 90       	pop	r8
    53dc:	7f 90       	pop	r7
    53de:	6f 90       	pop	r6
    53e0:	5f 90       	pop	r5
    53e2:	4f 90       	pop	r4
    53e4:	3f 90       	pop	r3
    53e6:	2f 90       	pop	r2
    53e8:	1f 90       	pop	r1
    53ea:	0f 90       	pop	r0
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	0f 90       	pop	r0
    53f0:	18 95       	reti

000053f2 <main>:
    53f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <nrk_setup_ports>
    53f6:	80 e1       	ldi	r24, 0x10	; 16
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <nrk_setup_uart>
    53fe:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <nrk_init>
    5402:	82 e0       	ldi	r24, 0x02	; 2
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    540a:	83 e0       	ldi	r24, 0x03	; 3
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <nrk_led_clr>
    5422:	20 e0       	ldi	r18, 0x00	; 0
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	a9 01       	movw	r20, r18
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	70 e0       	ldi	r23, 0x00	; 0
    542c:	cb 01       	movw	r24, r22
    542e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_time_set>
    5432:	0e 94 86 03 	call	0x70c	; 0x70c <nrk_create_taskset>
    5436:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <nrk_start>
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	08 95       	ret

00005440 <vfprintf>:
    5440:	6f 92       	push	r6
    5442:	7f 92       	push	r7
    5444:	9f 92       	push	r9
    5446:	af 92       	push	r10
    5448:	bf 92       	push	r11
    544a:	cf 92       	push	r12
    544c:	df 92       	push	r13
    544e:	ef 92       	push	r14
    5450:	ff 92       	push	r15
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	cd b7       	in	r28, 0x3d	; 61
    545c:	de b7       	in	r29, 0x3e	; 62
    545e:	2c 97       	sbiw	r28, 0x0c	; 12
    5460:	0f b6       	in	r0, 0x3f	; 63
    5462:	f8 94       	cli
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	cd bf       	out	0x3d, r28	; 61
    546a:	8c 01       	movw	r16, r24
    546c:	7b 01       	movw	r14, r22
    546e:	3a 01       	movw	r6, r20
    5470:	fc 01       	movw	r30, r24
    5472:	17 82       	std	Z+7, r1	; 0x07
    5474:	16 82       	std	Z+6, r1	; 0x06
    5476:	83 81       	ldd	r24, Z+3	; 0x03
    5478:	81 ff       	sbrs	r24, 1
    547a:	19 c1       	rjmp	.+562    	; 0x56ae <vfprintf+0x26e>
    547c:	ce 01       	movw	r24, r28
    547e:	01 96       	adiw	r24, 0x01	; 1
    5480:	5c 01       	movw	r10, r24
    5482:	f8 01       	movw	r30, r16
    5484:	d3 80       	ldd	r13, Z+3	; 0x03
    5486:	f7 01       	movw	r30, r14
    5488:	d3 fc       	sbrc	r13, 3
    548a:	25 91       	lpm	r18, Z+
    548c:	d3 fe       	sbrs	r13, 3
    548e:	21 91       	ld	r18, Z+
    5490:	7f 01       	movw	r14, r30
    5492:	22 23       	and	r18, r18
    5494:	09 f4       	brne	.+2      	; 0x5498 <vfprintf+0x58>
    5496:	07 c1       	rjmp	.+526    	; 0x56a6 <vfprintf+0x266>
    5498:	25 32       	cpi	r18, 0x25	; 37
    549a:	49 f4       	brne	.+18     	; 0x54ae <vfprintf+0x6e>
    549c:	d3 fc       	sbrc	r13, 3
    549e:	25 91       	lpm	r18, Z+
    54a0:	d3 fe       	sbrs	r13, 3
    54a2:	21 91       	ld	r18, Z+
    54a4:	7f 01       	movw	r14, r30
    54a6:	25 32       	cpi	r18, 0x25	; 37
    54a8:	11 f0       	breq	.+4      	; 0x54ae <vfprintf+0x6e>
    54aa:	91 2c       	mov	r9, r1
    54ac:	1b c0       	rjmp	.+54     	; 0x54e4 <vfprintf+0xa4>
    54ae:	b8 01       	movw	r22, r16
    54b0:	82 2f       	mov	r24, r18
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    54b8:	63 01       	movw	r12, r6
    54ba:	36 01       	movw	r6, r12
    54bc:	e2 cf       	rjmp	.-60     	; 0x5482 <vfprintf+0x42>
    54be:	22 23       	and	r18, r18
    54c0:	09 f4       	brne	.+2      	; 0x54c4 <vfprintf+0x84>
    54c2:	f1 c0       	rjmp	.+482    	; 0x56a6 <vfprintf+0x266>
    54c4:	62 2f       	mov	r22, r18
    54c6:	70 e0       	ldi	r23, 0x00	; 0
    54c8:	8f ef       	ldi	r24, 0xFF	; 255
    54ca:	94 e0       	ldi	r25, 0x04	; 4
    54cc:	2c 87       	std	Y+12, r18	; 0x0c
    54ce:	0e 94 27 2c 	call	0x584e	; 0x584e <strchr_P>
    54d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    54d4:	89 2b       	or	r24, r25
    54d6:	49 f0       	breq	.+18     	; 0x54ea <vfprintf+0xaa>
    54d8:	f7 01       	movw	r30, r14
    54da:	d3 fc       	sbrc	r13, 3
    54dc:	25 91       	lpm	r18, Z+
    54de:	d3 fe       	sbrs	r13, 3
    54e0:	21 91       	ld	r18, Z+
    54e2:	7f 01       	movw	r14, r30
    54e4:	97 fe       	sbrs	r9, 7
    54e6:	eb cf       	rjmp	.-42     	; 0x54be <vfprintf+0x7e>
    54e8:	0c c0       	rjmp	.+24     	; 0x5502 <vfprintf+0xc2>
    54ea:	23 32       	cpi	r18, 0x23	; 35
    54ec:	21 f4       	brne	.+8      	; 0x54f6 <vfprintf+0xb6>
    54ee:	f9 2d       	mov	r31, r9
    54f0:	f0 61       	ori	r31, 0x10	; 16
    54f2:	9f 2e       	mov	r9, r31
    54f4:	f1 cf       	rjmp	.-30     	; 0x54d8 <vfprintf+0x98>
    54f6:	2c 36       	cpi	r18, 0x6C	; 108
    54f8:	39 f4       	brne	.+14     	; 0x5508 <vfprintf+0xc8>
    54fa:	29 2d       	mov	r18, r9
    54fc:	20 68       	ori	r18, 0x80	; 128
    54fe:	92 2e       	mov	r9, r18
    5500:	eb cf       	rjmp	.-42     	; 0x54d8 <vfprintf+0x98>
    5502:	22 23       	and	r18, r18
    5504:	09 f4       	brne	.+2      	; 0x5508 <vfprintf+0xc8>
    5506:	cf c0       	rjmp	.+414    	; 0x56a6 <vfprintf+0x266>
    5508:	62 2f       	mov	r22, r18
    550a:	70 e0       	ldi	r23, 0x00	; 0
    550c:	88 ef       	ldi	r24, 0xF8	; 248
    550e:	94 e0       	ldi	r25, 0x04	; 4
    5510:	2c 87       	std	Y+12, r18	; 0x0c
    5512:	0e 94 27 2c 	call	0x584e	; 0x584e <strchr_P>
    5516:	2c 85       	ldd	r18, Y+12	; 0x0c
    5518:	89 2b       	or	r24, r25
    551a:	41 f0       	breq	.+16     	; 0x552c <vfprintf+0xec>
    551c:	63 01       	movw	r12, r6
    551e:	f4 e0       	ldi	r31, 0x04	; 4
    5520:	cf 0e       	add	r12, r31
    5522:	d1 1c       	adc	r13, r1
    5524:	b8 01       	movw	r22, r16
    5526:	8f e3       	ldi	r24, 0x3F	; 63
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	12 c0       	rjmp	.+36     	; 0x5550 <vfprintf+0x110>
    552c:	23 36       	cpi	r18, 0x63	; 99
    552e:	41 f0       	breq	.+16     	; 0x5540 <vfprintf+0x100>
    5530:	23 37       	cpi	r18, 0x73	; 115
    5532:	89 f0       	breq	.+34     	; 0x5556 <vfprintf+0x116>
    5534:	23 35       	cpi	r18, 0x53	; 83
    5536:	21 f5       	brne	.+72     	; 0x5580 <vfprintf+0x140>
    5538:	f9 2d       	mov	r31, r9
    553a:	f1 60       	ori	r31, 0x01	; 1
    553c:	9f 2e       	mov	r9, r31
    553e:	0b c0       	rjmp	.+22     	; 0x5556 <vfprintf+0x116>
    5540:	63 01       	movw	r12, r6
    5542:	22 e0       	ldi	r18, 0x02	; 2
    5544:	c2 0e       	add	r12, r18
    5546:	d1 1c       	adc	r13, r1
    5548:	b8 01       	movw	r22, r16
    554a:	f3 01       	movw	r30, r6
    554c:	80 81       	ld	r24, Z
    554e:	91 81       	ldd	r25, Z+1	; 0x01
    5550:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    5554:	b2 cf       	rjmp	.-156    	; 0x54ba <vfprintf+0x7a>
    5556:	63 01       	movw	r12, r6
    5558:	22 e0       	ldi	r18, 0x02	; 2
    555a:	c2 0e       	add	r12, r18
    555c:	d1 1c       	adc	r13, r1
    555e:	f3 01       	movw	r30, r6
    5560:	60 80       	ld	r6, Z
    5562:	71 80       	ldd	r7, Z+1	; 0x01
    5564:	f3 01       	movw	r30, r6
    5566:	90 fc       	sbrc	r9, 0
    5568:	85 91       	lpm	r24, Z+
    556a:	90 fe       	sbrs	r9, 0
    556c:	81 91       	ld	r24, Z+
    556e:	3f 01       	movw	r6, r30
    5570:	88 23       	and	r24, r24
    5572:	09 f4       	brne	.+2      	; 0x5576 <vfprintf+0x136>
    5574:	a2 cf       	rjmp	.-188    	; 0x54ba <vfprintf+0x7a>
    5576:	b8 01       	movw	r22, r16
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    557e:	f2 cf       	rjmp	.-28     	; 0x5564 <vfprintf+0x124>
    5580:	24 36       	cpi	r18, 0x64	; 100
    5582:	11 f0       	breq	.+4      	; 0x5588 <vfprintf+0x148>
    5584:	29 36       	cpi	r18, 0x69	; 105
    5586:	39 f5       	brne	.+78     	; 0x55d6 <vfprintf+0x196>
    5588:	63 01       	movw	r12, r6
    558a:	97 fe       	sbrs	r9, 7
    558c:	09 c0       	rjmp	.+18     	; 0x55a0 <vfprintf+0x160>
    558e:	f4 e0       	ldi	r31, 0x04	; 4
    5590:	cf 0e       	add	r12, r31
    5592:	d1 1c       	adc	r13, r1
    5594:	f3 01       	movw	r30, r6
    5596:	60 81       	ld	r22, Z
    5598:	71 81       	ldd	r23, Z+1	; 0x01
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	93 81       	ldd	r25, Z+3	; 0x03
    559e:	0a c0       	rjmp	.+20     	; 0x55b4 <vfprintf+0x174>
    55a0:	f2 e0       	ldi	r31, 0x02	; 2
    55a2:	cf 0e       	add	r12, r31
    55a4:	d1 1c       	adc	r13, r1
    55a6:	f3 01       	movw	r30, r6
    55a8:	60 81       	ld	r22, Z
    55aa:	71 81       	ldd	r23, Z+1	; 0x01
    55ac:	88 27       	eor	r24, r24
    55ae:	77 fd       	sbrc	r23, 7
    55b0:	80 95       	com	r24
    55b2:	98 2f       	mov	r25, r24
    55b4:	f9 2d       	mov	r31, r9
    55b6:	ff 7e       	andi	r31, 0xEF	; 239
    55b8:	9f 2e       	mov	r9, r31
    55ba:	97 ff       	sbrs	r25, 7
    55bc:	09 c0       	rjmp	.+18     	; 0x55d0 <vfprintf+0x190>
    55be:	90 95       	com	r25
    55c0:	80 95       	com	r24
    55c2:	70 95       	com	r23
    55c4:	61 95       	neg	r22
    55c6:	7f 4f       	sbci	r23, 0xFF	; 255
    55c8:	8f 4f       	sbci	r24, 0xFF	; 255
    55ca:	9f 4f       	sbci	r25, 0xFF	; 255
    55cc:	f0 64       	ori	r31, 0x40	; 64
    55ce:	9f 2e       	mov	r9, r31
    55d0:	2a e0       	ldi	r18, 0x0A	; 10
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	38 c0       	rjmp	.+112    	; 0x5646 <vfprintf+0x206>
    55d6:	20 37       	cpi	r18, 0x70	; 112
    55d8:	a1 f0       	breq	.+40     	; 0x5602 <vfprintf+0x1c2>
    55da:	40 f4       	brcc	.+16     	; 0x55ec <vfprintf+0x1ac>
    55dc:	28 35       	cpi	r18, 0x58	; 88
    55de:	d1 f0       	breq	.+52     	; 0x5614 <vfprintf+0x1d4>
    55e0:	2f 36       	cpi	r18, 0x6F	; 111
    55e2:	09 f0       	breq	.+2      	; 0x55e6 <vfprintf+0x1a6>
    55e4:	60 c0       	rjmp	.+192    	; 0x56a6 <vfprintf+0x266>
    55e6:	28 e0       	ldi	r18, 0x08	; 8
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	19 c0       	rjmp	.+50     	; 0x561e <vfprintf+0x1de>
    55ec:	25 37       	cpi	r18, 0x75	; 117
    55ee:	19 f0       	breq	.+6      	; 0x55f6 <vfprintf+0x1b6>
    55f0:	28 37       	cpi	r18, 0x78	; 120
    55f2:	51 f0       	breq	.+20     	; 0x5608 <vfprintf+0x1c8>
    55f4:	58 c0       	rjmp	.+176    	; 0x56a6 <vfprintf+0x266>
    55f6:	29 2d       	mov	r18, r9
    55f8:	2f 7e       	andi	r18, 0xEF	; 239
    55fa:	92 2e       	mov	r9, r18
    55fc:	2a e0       	ldi	r18, 0x0A	; 10
    55fe:	30 e0       	ldi	r19, 0x00	; 0
    5600:	0e c0       	rjmp	.+28     	; 0x561e <vfprintf+0x1de>
    5602:	89 2d       	mov	r24, r9
    5604:	80 61       	ori	r24, 0x10	; 16
    5606:	98 2e       	mov	r9, r24
    5608:	99 2d       	mov	r25, r9
    560a:	94 62       	ori	r25, 0x24	; 36
    560c:	99 2e       	mov	r9, r25
    560e:	20 e1       	ldi	r18, 0x10	; 16
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	05 c0       	rjmp	.+10     	; 0x561e <vfprintf+0x1de>
    5614:	e9 2d       	mov	r30, r9
    5616:	e4 60       	ori	r30, 0x04	; 4
    5618:	9e 2e       	mov	r9, r30
    561a:	20 e1       	ldi	r18, 0x10	; 16
    561c:	32 e0       	ldi	r19, 0x02	; 2
    561e:	63 01       	movw	r12, r6
    5620:	97 fe       	sbrs	r9, 7
    5622:	09 c0       	rjmp	.+18     	; 0x5636 <vfprintf+0x1f6>
    5624:	f4 e0       	ldi	r31, 0x04	; 4
    5626:	cf 0e       	add	r12, r31
    5628:	d1 1c       	adc	r13, r1
    562a:	f3 01       	movw	r30, r6
    562c:	60 81       	ld	r22, Z
    562e:	71 81       	ldd	r23, Z+1	; 0x01
    5630:	82 81       	ldd	r24, Z+2	; 0x02
    5632:	93 81       	ldd	r25, Z+3	; 0x03
    5634:	08 c0       	rjmp	.+16     	; 0x5646 <vfprintf+0x206>
    5636:	f2 e0       	ldi	r31, 0x02	; 2
    5638:	cf 0e       	add	r12, r31
    563a:	d1 1c       	adc	r13, r1
    563c:	f3 01       	movw	r30, r6
    563e:	60 81       	ld	r22, Z
    5640:	71 81       	ldd	r23, Z+1	; 0x01
    5642:	80 e0       	ldi	r24, 0x00	; 0
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	a5 01       	movw	r20, r10
    5648:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <__ultoa_invert>
    564c:	78 2e       	mov	r7, r24
    564e:	7a 18       	sub	r7, r10
    5650:	96 fe       	sbrs	r9, 6
    5652:	05 c0       	rjmp	.+10     	; 0x565e <vfprintf+0x21e>
    5654:	b8 01       	movw	r22, r16
    5656:	8d e2       	ldi	r24, 0x2D	; 45
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    565e:	94 fe       	sbrs	r9, 4
    5660:	16 c0       	rjmp	.+44     	; 0x568e <vfprintf+0x24e>
    5662:	fe 01       	movw	r30, r28
    5664:	e7 0d       	add	r30, r7
    5666:	f1 1d       	adc	r31, r1
    5668:	80 81       	ld	r24, Z
    566a:	80 33       	cpi	r24, 0x30	; 48
    566c:	81 f0       	breq	.+32     	; 0x568e <vfprintf+0x24e>
    566e:	b8 01       	movw	r22, r16
    5670:	80 e3       	ldi	r24, 0x30	; 48
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    5678:	92 fe       	sbrs	r9, 2
    567a:	09 c0       	rjmp	.+18     	; 0x568e <vfprintf+0x24e>
    567c:	29 2d       	mov	r18, r9
    567e:	20 72       	andi	r18, 0x20	; 32
    5680:	82 2f       	mov	r24, r18
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	b8 01       	movw	r22, r16
    5686:	88 5a       	subi	r24, 0xA8	; 168
    5688:	9f 4f       	sbci	r25, 0xFF	; 255
    568a:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    568e:	7a 94       	dec	r7
    5690:	f5 01       	movw	r30, r10
    5692:	e7 0d       	add	r30, r7
    5694:	f1 1d       	adc	r31, r1
    5696:	80 81       	ld	r24, Z
    5698:	b8 01       	movw	r22, r16
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 86 2c 	call	0x590c	; 0x590c <fputc>
    56a0:	71 10       	cpse	r7, r1
    56a2:	f5 cf       	rjmp	.-22     	; 0x568e <vfprintf+0x24e>
    56a4:	0a cf       	rjmp	.-492    	; 0x54ba <vfprintf+0x7a>
    56a6:	f8 01       	movw	r30, r16
    56a8:	86 81       	ldd	r24, Z+6	; 0x06
    56aa:	97 81       	ldd	r25, Z+7	; 0x07
    56ac:	02 c0       	rjmp	.+4      	; 0x56b2 <vfprintf+0x272>
    56ae:	8f ef       	ldi	r24, 0xFF	; 255
    56b0:	9f ef       	ldi	r25, 0xFF	; 255
    56b2:	2c 96       	adiw	r28, 0x0c	; 12
    56b4:	0f b6       	in	r0, 0x3f	; 63
    56b6:	f8 94       	cli
    56b8:	de bf       	out	0x3e, r29	; 62
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	cd bf       	out	0x3d, r28	; 61
    56be:	df 91       	pop	r29
    56c0:	cf 91       	pop	r28
    56c2:	1f 91       	pop	r17
    56c4:	0f 91       	pop	r16
    56c6:	ff 90       	pop	r15
    56c8:	ef 90       	pop	r14
    56ca:	df 90       	pop	r13
    56cc:	cf 90       	pop	r12
    56ce:	bf 90       	pop	r11
    56d0:	af 90       	pop	r10
    56d2:	9f 90       	pop	r9
    56d4:	7f 90       	pop	r7
    56d6:	6f 90       	pop	r6
    56d8:	08 95       	ret

000056da <__muluhisi3>:
    56da:	0e 94 18 2c 	call	0x5830	; 0x5830 <__umulhisi3>
    56de:	a5 9f       	mul	r26, r21
    56e0:	90 0d       	add	r25, r0
    56e2:	b4 9f       	mul	r27, r20
    56e4:	90 0d       	add	r25, r0
    56e6:	a4 9f       	mul	r26, r20
    56e8:	80 0d       	add	r24, r0
    56ea:	91 1d       	adc	r25, r1
    56ec:	11 24       	eor	r1, r1
    56ee:	08 95       	ret

000056f0 <__mulsi3>:
    56f0:	db 01       	movw	r26, r22
    56f2:	8f 93       	push	r24
    56f4:	9f 93       	push	r25
    56f6:	0e 94 6d 2b 	call	0x56da	; 0x56da <__muluhisi3>
    56fa:	bf 91       	pop	r27
    56fc:	af 91       	pop	r26
    56fe:	a2 9f       	mul	r26, r18
    5700:	80 0d       	add	r24, r0
    5702:	91 1d       	adc	r25, r1
    5704:	a3 9f       	mul	r26, r19
    5706:	90 0d       	add	r25, r0
    5708:	b2 9f       	mul	r27, r18
    570a:	90 0d       	add	r25, r0
    570c:	11 24       	eor	r1, r1
    570e:	08 95       	ret

00005710 <__udivmodsi4>:
    5710:	a1 e2       	ldi	r26, 0x21	; 33
    5712:	1a 2e       	mov	r1, r26
    5714:	aa 1b       	sub	r26, r26
    5716:	bb 1b       	sub	r27, r27
    5718:	fd 01       	movw	r30, r26
    571a:	0d c0       	rjmp	.+26     	; 0x5736 <__udivmodsi4_ep>

0000571c <__udivmodsi4_loop>:
    571c:	aa 1f       	adc	r26, r26
    571e:	bb 1f       	adc	r27, r27
    5720:	ee 1f       	adc	r30, r30
    5722:	ff 1f       	adc	r31, r31
    5724:	a2 17       	cp	r26, r18
    5726:	b3 07       	cpc	r27, r19
    5728:	e4 07       	cpc	r30, r20
    572a:	f5 07       	cpc	r31, r21
    572c:	20 f0       	brcs	.+8      	; 0x5736 <__udivmodsi4_ep>
    572e:	a2 1b       	sub	r26, r18
    5730:	b3 0b       	sbc	r27, r19
    5732:	e4 0b       	sbc	r30, r20
    5734:	f5 0b       	sbc	r31, r21

00005736 <__udivmodsi4_ep>:
    5736:	66 1f       	adc	r22, r22
    5738:	77 1f       	adc	r23, r23
    573a:	88 1f       	adc	r24, r24
    573c:	99 1f       	adc	r25, r25
    573e:	1a 94       	dec	r1
    5740:	69 f7       	brne	.-38     	; 0x571c <__udivmodsi4_loop>
    5742:	60 95       	com	r22
    5744:	70 95       	com	r23
    5746:	80 95       	com	r24
    5748:	90 95       	com	r25
    574a:	9b 01       	movw	r18, r22
    574c:	ac 01       	movw	r20, r24
    574e:	bd 01       	movw	r22, r26
    5750:	cf 01       	movw	r24, r30
    5752:	08 95       	ret

00005754 <__umoddi3>:
    5754:	68 94       	set
    5756:	01 c0       	rjmp	.+2      	; 0x575a <__udivdi3_umoddi3>

00005758 <__udivdi3>:
    5758:	e8 94       	clt

0000575a <__udivdi3_umoddi3>:
    575a:	8f 92       	push	r8
    575c:	9f 92       	push	r9
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__udivmod64>
    5766:	df 91       	pop	r29
    5768:	cf 91       	pop	r28
    576a:	9f 90       	pop	r9
    576c:	8f 90       	pop	r8
    576e:	08 95       	ret

00005770 <__udivmod64>:
    5770:	88 24       	eor	r8, r8
    5772:	99 24       	eor	r9, r9
    5774:	f4 01       	movw	r30, r8
    5776:	e4 01       	movw	r28, r8
    5778:	b0 e4       	ldi	r27, 0x40	; 64
    577a:	9f 93       	push	r25
    577c:	aa 27       	eor	r26, r26
    577e:	9a 15       	cp	r25, r10
    5780:	8b 04       	cpc	r8, r11
    5782:	9c 04       	cpc	r9, r12
    5784:	ed 05       	cpc	r30, r13
    5786:	fe 05       	cpc	r31, r14
    5788:	cf 05       	cpc	r28, r15
    578a:	d0 07       	cpc	r29, r16
    578c:	a1 07       	cpc	r26, r17
    578e:	98 f4       	brcc	.+38     	; 0x57b6 <__udivmod64+0x46>
    5790:	ad 2f       	mov	r26, r29
    5792:	dc 2f       	mov	r29, r28
    5794:	cf 2f       	mov	r28, r31
    5796:	fe 2f       	mov	r31, r30
    5798:	e9 2d       	mov	r30, r9
    579a:	98 2c       	mov	r9, r8
    579c:	89 2e       	mov	r8, r25
    579e:	98 2f       	mov	r25, r24
    57a0:	87 2f       	mov	r24, r23
    57a2:	76 2f       	mov	r23, r22
    57a4:	65 2f       	mov	r22, r21
    57a6:	54 2f       	mov	r21, r20
    57a8:	43 2f       	mov	r20, r19
    57aa:	32 2f       	mov	r19, r18
    57ac:	22 27       	eor	r18, r18
    57ae:	b8 50       	subi	r27, 0x08	; 8
    57b0:	31 f7       	brne	.-52     	; 0x577e <__udivmod64+0xe>
    57b2:	bf 91       	pop	r27
    57b4:	27 c0       	rjmp	.+78     	; 0x5804 <__udivmod64+0x94>
    57b6:	1b 2e       	mov	r1, r27
    57b8:	bf 91       	pop	r27
    57ba:	bb 27       	eor	r27, r27
    57bc:	22 0f       	add	r18, r18
    57be:	33 1f       	adc	r19, r19
    57c0:	44 1f       	adc	r20, r20
    57c2:	55 1f       	adc	r21, r21
    57c4:	66 1f       	adc	r22, r22
    57c6:	77 1f       	adc	r23, r23
    57c8:	88 1f       	adc	r24, r24
    57ca:	99 1f       	adc	r25, r25
    57cc:	88 1c       	adc	r8, r8
    57ce:	99 1c       	adc	r9, r9
    57d0:	ee 1f       	adc	r30, r30
    57d2:	ff 1f       	adc	r31, r31
    57d4:	cc 1f       	adc	r28, r28
    57d6:	dd 1f       	adc	r29, r29
    57d8:	aa 1f       	adc	r26, r26
    57da:	bb 1f       	adc	r27, r27
    57dc:	8a 14       	cp	r8, r10
    57de:	9b 04       	cpc	r9, r11
    57e0:	ec 05       	cpc	r30, r12
    57e2:	fd 05       	cpc	r31, r13
    57e4:	ce 05       	cpc	r28, r14
    57e6:	df 05       	cpc	r29, r15
    57e8:	a0 07       	cpc	r26, r16
    57ea:	b1 07       	cpc	r27, r17
    57ec:	48 f0       	brcs	.+18     	; 0x5800 <__udivmod64+0x90>
    57ee:	8a 18       	sub	r8, r10
    57f0:	9b 08       	sbc	r9, r11
    57f2:	ec 09       	sbc	r30, r12
    57f4:	fd 09       	sbc	r31, r13
    57f6:	ce 09       	sbc	r28, r14
    57f8:	df 09       	sbc	r29, r15
    57fa:	a0 0b       	sbc	r26, r16
    57fc:	b1 0b       	sbc	r27, r17
    57fe:	21 60       	ori	r18, 0x01	; 1
    5800:	1a 94       	dec	r1
    5802:	e1 f6       	brne	.-72     	; 0x57bc <__udivmod64+0x4c>
    5804:	2e f4       	brtc	.+10     	; 0x5810 <__udivmod64+0xa0>
    5806:	94 01       	movw	r18, r8
    5808:	af 01       	movw	r20, r30
    580a:	be 01       	movw	r22, r28
    580c:	cd 01       	movw	r24, r26
    580e:	00 0c       	add	r0, r0
    5810:	08 95       	ret

00005812 <__tablejump2__>:
    5812:	ee 0f       	add	r30, r30
    5814:	ff 1f       	adc	r31, r31

00005816 <__tablejump__>:
    5816:	05 90       	lpm	r0, Z+
    5818:	f4 91       	lpm	r31, Z
    581a:	e0 2d       	mov	r30, r0
    581c:	09 94       	ijmp

0000581e <__adddi3>:
    581e:	2a 0d       	add	r18, r10
    5820:	3b 1d       	adc	r19, r11
    5822:	4c 1d       	adc	r20, r12
    5824:	5d 1d       	adc	r21, r13
    5826:	6e 1d       	adc	r22, r14
    5828:	7f 1d       	adc	r23, r15
    582a:	80 1f       	adc	r24, r16
    582c:	91 1f       	adc	r25, r17
    582e:	08 95       	ret

00005830 <__umulhisi3>:
    5830:	a2 9f       	mul	r26, r18
    5832:	b0 01       	movw	r22, r0
    5834:	b3 9f       	mul	r27, r19
    5836:	c0 01       	movw	r24, r0
    5838:	a3 9f       	mul	r26, r19
    583a:	70 0d       	add	r23, r0
    583c:	81 1d       	adc	r24, r1
    583e:	11 24       	eor	r1, r1
    5840:	91 1d       	adc	r25, r1
    5842:	b2 9f       	mul	r27, r18
    5844:	70 0d       	add	r23, r0
    5846:	81 1d       	adc	r24, r1
    5848:	11 24       	eor	r1, r1
    584a:	91 1d       	adc	r25, r1
    584c:	08 95       	ret

0000584e <strchr_P>:
    584e:	fc 01       	movw	r30, r24
    5850:	05 90       	lpm	r0, Z+
    5852:	06 16       	cp	r0, r22
    5854:	21 f0       	breq	.+8      	; 0x585e <strchr_P+0x10>
    5856:	00 20       	and	r0, r0
    5858:	d9 f7       	brne	.-10     	; 0x5850 <strchr_P+0x2>
    585a:	c0 01       	movw	r24, r0
    585c:	08 95       	ret
    585e:	31 97       	sbiw	r30, 0x01	; 1
    5860:	cf 01       	movw	r24, r30
    5862:	08 95       	ret

00005864 <memcpy>:
    5864:	fb 01       	movw	r30, r22
    5866:	dc 01       	movw	r26, r24
    5868:	02 c0       	rjmp	.+4      	; 0x586e <memcpy+0xa>
    586a:	01 90       	ld	r0, Z+
    586c:	0d 92       	st	X+, r0
    586e:	41 50       	subi	r20, 0x01	; 1
    5870:	50 40       	sbci	r21, 0x00	; 0
    5872:	d8 f7       	brcc	.-10     	; 0x586a <memcpy+0x6>
    5874:	08 95       	ret

00005876 <fdevopen>:
    5876:	0f 93       	push	r16
    5878:	1f 93       	push	r17
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	ec 01       	movw	r28, r24
    5880:	8b 01       	movw	r16, r22
    5882:	00 97       	sbiw	r24, 0x00	; 0
    5884:	31 f4       	brne	.+12     	; 0x5892 <fdevopen+0x1c>
    5886:	61 15       	cp	r22, r1
    5888:	71 05       	cpc	r23, r1
    588a:	19 f4       	brne	.+6      	; 0x5892 <fdevopen+0x1c>
    588c:	80 e0       	ldi	r24, 0x00	; 0
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	38 c0       	rjmp	.+112    	; 0x5902 <fdevopen+0x8c>
    5892:	6e e0       	ldi	r22, 0x0E	; 14
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <calloc>
    589e:	fc 01       	movw	r30, r24
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	a1 f3       	breq	.-24     	; 0x588c <fdevopen+0x16>
    58a4:	80 e8       	ldi	r24, 0x80	; 128
    58a6:	83 83       	std	Z+3, r24	; 0x03
    58a8:	01 15       	cp	r16, r1
    58aa:	11 05       	cpc	r17, r1
    58ac:	71 f0       	breq	.+28     	; 0x58ca <fdevopen+0x54>
    58ae:	13 87       	std	Z+11, r17	; 0x0b
    58b0:	02 87       	std	Z+10, r16	; 0x0a
    58b2:	81 e8       	ldi	r24, 0x81	; 129
    58b4:	83 83       	std	Z+3, r24	; 0x03
    58b6:	80 91 61 09 	lds	r24, 0x0961
    58ba:	90 91 62 09 	lds	r25, 0x0962
    58be:	89 2b       	or	r24, r25
    58c0:	21 f4       	brne	.+8      	; 0x58ca <fdevopen+0x54>
    58c2:	f0 93 62 09 	sts	0x0962, r31
    58c6:	e0 93 61 09 	sts	0x0961, r30
    58ca:	20 97       	sbiw	r28, 0x00	; 0
    58cc:	c9 f0       	breq	.+50     	; 0x5900 <fdevopen+0x8a>
    58ce:	d1 87       	std	Z+9, r29	; 0x09
    58d0:	c0 87       	std	Z+8, r28	; 0x08
    58d2:	83 81       	ldd	r24, Z+3	; 0x03
    58d4:	82 60       	ori	r24, 0x02	; 2
    58d6:	83 83       	std	Z+3, r24	; 0x03
    58d8:	80 91 63 09 	lds	r24, 0x0963
    58dc:	90 91 64 09 	lds	r25, 0x0964
    58e0:	89 2b       	or	r24, r25
    58e2:	71 f4       	brne	.+28     	; 0x5900 <fdevopen+0x8a>
    58e4:	f0 93 64 09 	sts	0x0964, r31
    58e8:	e0 93 63 09 	sts	0x0963, r30
    58ec:	80 91 65 09 	lds	r24, 0x0965
    58f0:	90 91 66 09 	lds	r25, 0x0966
    58f4:	89 2b       	or	r24, r25
    58f6:	21 f4       	brne	.+8      	; 0x5900 <fdevopen+0x8a>
    58f8:	f0 93 66 09 	sts	0x0966, r31
    58fc:	e0 93 65 09 	sts	0x0965, r30
    5900:	cf 01       	movw	r24, r30
    5902:	df 91       	pop	r29
    5904:	cf 91       	pop	r28
    5906:	1f 91       	pop	r17
    5908:	0f 91       	pop	r16
    590a:	08 95       	ret

0000590c <fputc>:
    590c:	0f 93       	push	r16
    590e:	1f 93       	push	r17
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	18 2f       	mov	r17, r24
    5916:	09 2f       	mov	r16, r25
    5918:	eb 01       	movw	r28, r22
    591a:	8b 81       	ldd	r24, Y+3	; 0x03
    591c:	81 fd       	sbrc	r24, 1
    591e:	03 c0       	rjmp	.+6      	; 0x5926 <fputc+0x1a>
    5920:	8f ef       	ldi	r24, 0xFF	; 255
    5922:	9f ef       	ldi	r25, 0xFF	; 255
    5924:	20 c0       	rjmp	.+64     	; 0x5966 <fputc+0x5a>
    5926:	82 ff       	sbrs	r24, 2
    5928:	10 c0       	rjmp	.+32     	; 0x594a <fputc+0x3e>
    592a:	4e 81       	ldd	r20, Y+6	; 0x06
    592c:	5f 81       	ldd	r21, Y+7	; 0x07
    592e:	2c 81       	ldd	r18, Y+4	; 0x04
    5930:	3d 81       	ldd	r19, Y+5	; 0x05
    5932:	42 17       	cp	r20, r18
    5934:	53 07       	cpc	r21, r19
    5936:	7c f4       	brge	.+30     	; 0x5956 <fputc+0x4a>
    5938:	e8 81       	ld	r30, Y
    593a:	f9 81       	ldd	r31, Y+1	; 0x01
    593c:	9f 01       	movw	r18, r30
    593e:	2f 5f       	subi	r18, 0xFF	; 255
    5940:	3f 4f       	sbci	r19, 0xFF	; 255
    5942:	39 83       	std	Y+1, r19	; 0x01
    5944:	28 83       	st	Y, r18
    5946:	10 83       	st	Z, r17
    5948:	06 c0       	rjmp	.+12     	; 0x5956 <fputc+0x4a>
    594a:	e8 85       	ldd	r30, Y+8	; 0x08
    594c:	f9 85       	ldd	r31, Y+9	; 0x09
    594e:	81 2f       	mov	r24, r17
    5950:	09 95       	icall
    5952:	89 2b       	or	r24, r25
    5954:	29 f7       	brne	.-54     	; 0x5920 <fputc+0x14>
    5956:	2e 81       	ldd	r18, Y+6	; 0x06
    5958:	3f 81       	ldd	r19, Y+7	; 0x07
    595a:	2f 5f       	subi	r18, 0xFF	; 255
    595c:	3f 4f       	sbci	r19, 0xFF	; 255
    595e:	3f 83       	std	Y+7, r19	; 0x07
    5960:	2e 83       	std	Y+6, r18	; 0x06
    5962:	81 2f       	mov	r24, r17
    5964:	90 2f       	mov	r25, r16
    5966:	df 91       	pop	r29
    5968:	cf 91       	pop	r28
    596a:	1f 91       	pop	r17
    596c:	0f 91       	pop	r16
    596e:	08 95       	ret

00005970 <printf>:
    5970:	cf 93       	push	r28
    5972:	df 93       	push	r29
    5974:	cd b7       	in	r28, 0x3d	; 61
    5976:	de b7       	in	r29, 0x3e	; 62
    5978:	fe 01       	movw	r30, r28
    597a:	35 96       	adiw	r30, 0x05	; 5
    597c:	61 91       	ld	r22, Z+
    597e:	71 91       	ld	r23, Z+
    5980:	af 01       	movw	r20, r30
    5982:	80 91 63 09 	lds	r24, 0x0963
    5986:	90 91 64 09 	lds	r25, 0x0964
    598a:	0e 94 20 2a 	call	0x5440	; 0x5440 <vfprintf>
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	08 95       	ret

00005994 <putchar>:
    5994:	60 91 63 09 	lds	r22, 0x0963
    5998:	70 91 64 09 	lds	r23, 0x0964
    599c:	0c 94 86 2c 	jmp	0x590c	; 0x590c <fputc>

000059a0 <puts>:
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	e0 91 63 09 	lds	r30, 0x0963
    59ac:	f0 91 64 09 	lds	r31, 0x0964
    59b0:	23 81       	ldd	r18, Z+3	; 0x03
    59b2:	21 ff       	sbrs	r18, 1
    59b4:	1b c0       	rjmp	.+54     	; 0x59ec <puts+0x4c>
    59b6:	ec 01       	movw	r28, r24
    59b8:	00 e0       	ldi	r16, 0x00	; 0
    59ba:	10 e0       	ldi	r17, 0x00	; 0
    59bc:	89 91       	ld	r24, Y+
    59be:	60 91 63 09 	lds	r22, 0x0963
    59c2:	70 91 64 09 	lds	r23, 0x0964
    59c6:	db 01       	movw	r26, r22
    59c8:	18 96       	adiw	r26, 0x08	; 8
    59ca:	ed 91       	ld	r30, X+
    59cc:	fc 91       	ld	r31, X
    59ce:	19 97       	sbiw	r26, 0x09	; 9
    59d0:	88 23       	and	r24, r24
    59d2:	31 f0       	breq	.+12     	; 0x59e0 <puts+0x40>
    59d4:	09 95       	icall
    59d6:	89 2b       	or	r24, r25
    59d8:	89 f3       	breq	.-30     	; 0x59bc <puts+0x1c>
    59da:	0f ef       	ldi	r16, 0xFF	; 255
    59dc:	1f ef       	ldi	r17, 0xFF	; 255
    59de:	ee cf       	rjmp	.-36     	; 0x59bc <puts+0x1c>
    59e0:	8a e0       	ldi	r24, 0x0A	; 10
    59e2:	09 95       	icall
    59e4:	89 2b       	or	r24, r25
    59e6:	11 f4       	brne	.+4      	; 0x59ec <puts+0x4c>
    59e8:	c8 01       	movw	r24, r16
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <puts+0x50>
    59ec:	8f ef       	ldi	r24, 0xFF	; 255
    59ee:	9f ef       	ldi	r25, 0xFF	; 255
    59f0:	df 91       	pop	r29
    59f2:	cf 91       	pop	r28
    59f4:	1f 91       	pop	r17
    59f6:	0f 91       	pop	r16
    59f8:	08 95       	ret

000059fa <sprintf>:
    59fa:	0f 93       	push	r16
    59fc:	1f 93       	push	r17
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	cd b7       	in	r28, 0x3d	; 61
    5a04:	de b7       	in	r29, 0x3e	; 62
    5a06:	2e 97       	sbiw	r28, 0x0e	; 14
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	de bf       	out	0x3e, r29	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	cd bf       	out	0x3d, r28	; 61
    5a12:	0d 89       	ldd	r16, Y+21	; 0x15
    5a14:	1e 89       	ldd	r17, Y+22	; 0x16
    5a16:	86 e0       	ldi	r24, 0x06	; 6
    5a18:	8c 83       	std	Y+4, r24	; 0x04
    5a1a:	1a 83       	std	Y+2, r17	; 0x02
    5a1c:	09 83       	std	Y+1, r16	; 0x01
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
    5a20:	9f e7       	ldi	r25, 0x7F	; 127
    5a22:	9e 83       	std	Y+6, r25	; 0x06
    5a24:	8d 83       	std	Y+5, r24	; 0x05
    5a26:	ae 01       	movw	r20, r28
    5a28:	47 5e       	subi	r20, 0xE7	; 231
    5a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a2c:	6f 89       	ldd	r22, Y+23	; 0x17
    5a2e:	78 8d       	ldd	r23, Y+24	; 0x18
    5a30:	ce 01       	movw	r24, r28
    5a32:	01 96       	adiw	r24, 0x01	; 1
    5a34:	0e 94 20 2a 	call	0x5440	; 0x5440 <vfprintf>
    5a38:	ef 81       	ldd	r30, Y+7	; 0x07
    5a3a:	f8 85       	ldd	r31, Y+8	; 0x08
    5a3c:	e0 0f       	add	r30, r16
    5a3e:	f1 1f       	adc	r31, r17
    5a40:	10 82       	st	Z, r1
    5a42:	2e 96       	adiw	r28, 0x0e	; 14
    5a44:	0f b6       	in	r0, 0x3f	; 63
    5a46:	f8 94       	cli
    5a48:	de bf       	out	0x3e, r29	; 62
    5a4a:	0f be       	out	0x3f, r0	; 63
    5a4c:	cd bf       	out	0x3d, r28	; 61
    5a4e:	df 91       	pop	r29
    5a50:	cf 91       	pop	r28
    5a52:	1f 91       	pop	r17
    5a54:	0f 91       	pop	r16
    5a56:	08 95       	ret

00005a58 <__ultoa_invert>:
    5a58:	fa 01       	movw	r30, r20
    5a5a:	aa 27       	eor	r26, r26
    5a5c:	28 30       	cpi	r18, 0x08	; 8
    5a5e:	51 f1       	breq	.+84     	; 0x5ab4 <__ultoa_invert+0x5c>
    5a60:	20 31       	cpi	r18, 0x10	; 16
    5a62:	81 f1       	breq	.+96     	; 0x5ac4 <__ultoa_invert+0x6c>
    5a64:	e8 94       	clt
    5a66:	6f 93       	push	r22
    5a68:	6e 7f       	andi	r22, 0xFE	; 254
    5a6a:	6e 5f       	subi	r22, 0xFE	; 254
    5a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	af 4f       	sbci	r26, 0xFF	; 255
    5a74:	b1 e0       	ldi	r27, 0x01	; 1
    5a76:	3e d0       	rcall	.+124    	; 0x5af4 <__ultoa_invert+0x9c>
    5a78:	b4 e0       	ldi	r27, 0x04	; 4
    5a7a:	3c d0       	rcall	.+120    	; 0x5af4 <__ultoa_invert+0x9c>
    5a7c:	67 0f       	add	r22, r23
    5a7e:	78 1f       	adc	r23, r24
    5a80:	89 1f       	adc	r24, r25
    5a82:	9a 1f       	adc	r25, r26
    5a84:	a1 1d       	adc	r26, r1
    5a86:	68 0f       	add	r22, r24
    5a88:	79 1f       	adc	r23, r25
    5a8a:	8a 1f       	adc	r24, r26
    5a8c:	91 1d       	adc	r25, r1
    5a8e:	a1 1d       	adc	r26, r1
    5a90:	6a 0f       	add	r22, r26
    5a92:	71 1d       	adc	r23, r1
    5a94:	81 1d       	adc	r24, r1
    5a96:	91 1d       	adc	r25, r1
    5a98:	a1 1d       	adc	r26, r1
    5a9a:	20 d0       	rcall	.+64     	; 0x5adc <__ultoa_invert+0x84>
    5a9c:	09 f4       	brne	.+2      	; 0x5aa0 <__ultoa_invert+0x48>
    5a9e:	68 94       	set
    5aa0:	3f 91       	pop	r19
    5aa2:	2a e0       	ldi	r18, 0x0A	; 10
    5aa4:	26 9f       	mul	r18, r22
    5aa6:	11 24       	eor	r1, r1
    5aa8:	30 19       	sub	r19, r0
    5aaa:	30 5d       	subi	r19, 0xD0	; 208
    5aac:	31 93       	st	Z+, r19
    5aae:	de f6       	brtc	.-74     	; 0x5a66 <__ultoa_invert+0xe>
    5ab0:	cf 01       	movw	r24, r30
    5ab2:	08 95       	ret
    5ab4:	46 2f       	mov	r20, r22
    5ab6:	47 70       	andi	r20, 0x07	; 7
    5ab8:	40 5d       	subi	r20, 0xD0	; 208
    5aba:	41 93       	st	Z+, r20
    5abc:	b3 e0       	ldi	r27, 0x03	; 3
    5abe:	0f d0       	rcall	.+30     	; 0x5ade <__ultoa_invert+0x86>
    5ac0:	c9 f7       	brne	.-14     	; 0x5ab4 <__ultoa_invert+0x5c>
    5ac2:	f6 cf       	rjmp	.-20     	; 0x5ab0 <__ultoa_invert+0x58>
    5ac4:	46 2f       	mov	r20, r22
    5ac6:	4f 70       	andi	r20, 0x0F	; 15
    5ac8:	40 5d       	subi	r20, 0xD0	; 208
    5aca:	4a 33       	cpi	r20, 0x3A	; 58
    5acc:	18 f0       	brcs	.+6      	; 0x5ad4 <__ultoa_invert+0x7c>
    5ace:	49 5d       	subi	r20, 0xD9	; 217
    5ad0:	31 fd       	sbrc	r19, 1
    5ad2:	40 52       	subi	r20, 0x20	; 32
    5ad4:	41 93       	st	Z+, r20
    5ad6:	02 d0       	rcall	.+4      	; 0x5adc <__ultoa_invert+0x84>
    5ad8:	a9 f7       	brne	.-22     	; 0x5ac4 <__ultoa_invert+0x6c>
    5ada:	ea cf       	rjmp	.-44     	; 0x5ab0 <__ultoa_invert+0x58>
    5adc:	b4 e0       	ldi	r27, 0x04	; 4
    5ade:	a6 95       	lsr	r26
    5ae0:	97 95       	ror	r25
    5ae2:	87 95       	ror	r24
    5ae4:	77 95       	ror	r23
    5ae6:	67 95       	ror	r22
    5ae8:	ba 95       	dec	r27
    5aea:	c9 f7       	brne	.-14     	; 0x5ade <__ultoa_invert+0x86>
    5aec:	00 97       	sbiw	r24, 0x00	; 0
    5aee:	61 05       	cpc	r22, r1
    5af0:	71 05       	cpc	r23, r1
    5af2:	08 95       	ret
    5af4:	9b 01       	movw	r18, r22
    5af6:	ac 01       	movw	r20, r24
    5af8:	0a 2e       	mov	r0, r26
    5afa:	06 94       	lsr	r0
    5afc:	57 95       	ror	r21
    5afe:	47 95       	ror	r20
    5b00:	37 95       	ror	r19
    5b02:	27 95       	ror	r18
    5b04:	ba 95       	dec	r27
    5b06:	c9 f7       	brne	.-14     	; 0x5afa <__ultoa_invert+0xa2>
    5b08:	62 0f       	add	r22, r18
    5b0a:	73 1f       	adc	r23, r19
    5b0c:	84 1f       	adc	r24, r20
    5b0e:	95 1f       	adc	r25, r21
    5b10:	a0 1d       	adc	r26, r0
    5b12:	08 95       	ret

00005b14 <__eerd_byte_m128rfa1>:
    5b14:	f9 99       	sbic	0x1f, 1	; 31
    5b16:	fe cf       	rjmp	.-4      	; 0x5b14 <__eerd_byte_m128rfa1>
    5b18:	92 bd       	out	0x22, r25	; 34
    5b1a:	81 bd       	out	0x21, r24	; 33
    5b1c:	f8 9a       	sbi	0x1f, 0	; 31
    5b1e:	99 27       	eor	r25, r25
    5b20:	80 b5       	in	r24, 0x20	; 32
    5b22:	08 95       	ret

00005b24 <__eewr_byte_m128rfa1>:
    5b24:	26 2f       	mov	r18, r22

00005b26 <__eewr_r18_m128rfa1>:
    5b26:	f9 99       	sbic	0x1f, 1	; 31
    5b28:	fe cf       	rjmp	.-4      	; 0x5b26 <__eewr_r18_m128rfa1>
    5b2a:	1f ba       	out	0x1f, r1	; 31
    5b2c:	92 bd       	out	0x22, r25	; 34
    5b2e:	81 bd       	out	0x21, r24	; 33
    5b30:	20 bd       	out	0x20, r18	; 32
    5b32:	0f b6       	in	r0, 0x3f	; 63
    5b34:	f8 94       	cli
    5b36:	fa 9a       	sbi	0x1f, 2	; 31
    5b38:	f9 9a       	sbi	0x1f, 1	; 31
    5b3a:	0f be       	out	0x3f, r0	; 63
    5b3c:	01 96       	adiw	r24, 0x01	; 1
    5b3e:	08 95       	ret

00005b40 <calloc>:
    5b40:	0f 93       	push	r16
    5b42:	1f 93       	push	r17
    5b44:	cf 93       	push	r28
    5b46:	df 93       	push	r29
    5b48:	86 9f       	mul	r24, r22
    5b4a:	80 01       	movw	r16, r0
    5b4c:	87 9f       	mul	r24, r23
    5b4e:	10 0d       	add	r17, r0
    5b50:	96 9f       	mul	r25, r22
    5b52:	10 0d       	add	r17, r0
    5b54:	11 24       	eor	r1, r1
    5b56:	c8 01       	movw	r24, r16
    5b58:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    5b5c:	ec 01       	movw	r28, r24
    5b5e:	00 97       	sbiw	r24, 0x00	; 0
    5b60:	29 f0       	breq	.+10     	; 0x5b6c <calloc+0x2c>
    5b62:	a8 01       	movw	r20, r16
    5b64:	60 e0       	ldi	r22, 0x00	; 0
    5b66:	70 e0       	ldi	r23, 0x00	; 0
    5b68:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <memset>
    5b6c:	ce 01       	movw	r24, r28
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	08 95       	ret

00005b78 <malloc>:
    5b78:	cf 93       	push	r28
    5b7a:	df 93       	push	r29
    5b7c:	82 30       	cpi	r24, 0x02	; 2
    5b7e:	91 05       	cpc	r25, r1
    5b80:	10 f4       	brcc	.+4      	; 0x5b86 <malloc+0xe>
    5b82:	82 e0       	ldi	r24, 0x02	; 2
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	e0 91 69 09 	lds	r30, 0x0969
    5b8a:	f0 91 6a 09 	lds	r31, 0x096A
    5b8e:	20 e0       	ldi	r18, 0x00	; 0
    5b90:	30 e0       	ldi	r19, 0x00	; 0
    5b92:	a0 e0       	ldi	r26, 0x00	; 0
    5b94:	b0 e0       	ldi	r27, 0x00	; 0
    5b96:	30 97       	sbiw	r30, 0x00	; 0
    5b98:	39 f1       	breq	.+78     	; 0x5be8 <malloc+0x70>
    5b9a:	40 81       	ld	r20, Z
    5b9c:	51 81       	ldd	r21, Z+1	; 0x01
    5b9e:	48 17       	cp	r20, r24
    5ba0:	59 07       	cpc	r21, r25
    5ba2:	b8 f0       	brcs	.+46     	; 0x5bd2 <malloc+0x5a>
    5ba4:	48 17       	cp	r20, r24
    5ba6:	59 07       	cpc	r21, r25
    5ba8:	71 f4       	brne	.+28     	; 0x5bc6 <malloc+0x4e>
    5baa:	82 81       	ldd	r24, Z+2	; 0x02
    5bac:	93 81       	ldd	r25, Z+3	; 0x03
    5bae:	10 97       	sbiw	r26, 0x00	; 0
    5bb0:	29 f0       	breq	.+10     	; 0x5bbc <malloc+0x44>
    5bb2:	13 96       	adiw	r26, 0x03	; 3
    5bb4:	9c 93       	st	X, r25
    5bb6:	8e 93       	st	-X, r24
    5bb8:	12 97       	sbiw	r26, 0x02	; 2
    5bba:	2c c0       	rjmp	.+88     	; 0x5c14 <malloc+0x9c>
    5bbc:	90 93 6a 09 	sts	0x096A, r25
    5bc0:	80 93 69 09 	sts	0x0969, r24
    5bc4:	27 c0       	rjmp	.+78     	; 0x5c14 <malloc+0x9c>
    5bc6:	21 15       	cp	r18, r1
    5bc8:	31 05       	cpc	r19, r1
    5bca:	31 f0       	breq	.+12     	; 0x5bd8 <malloc+0x60>
    5bcc:	42 17       	cp	r20, r18
    5bce:	53 07       	cpc	r21, r19
    5bd0:	18 f0       	brcs	.+6      	; 0x5bd8 <malloc+0x60>
    5bd2:	a9 01       	movw	r20, r18
    5bd4:	db 01       	movw	r26, r22
    5bd6:	01 c0       	rjmp	.+2      	; 0x5bda <malloc+0x62>
    5bd8:	ef 01       	movw	r28, r30
    5bda:	9a 01       	movw	r18, r20
    5bdc:	bd 01       	movw	r22, r26
    5bde:	df 01       	movw	r26, r30
    5be0:	02 80       	ldd	r0, Z+2	; 0x02
    5be2:	f3 81       	ldd	r31, Z+3	; 0x03
    5be4:	e0 2d       	mov	r30, r0
    5be6:	d7 cf       	rjmp	.-82     	; 0x5b96 <malloc+0x1e>
    5be8:	21 15       	cp	r18, r1
    5bea:	31 05       	cpc	r19, r1
    5bec:	f9 f0       	breq	.+62     	; 0x5c2c <malloc+0xb4>
    5bee:	28 1b       	sub	r18, r24
    5bf0:	39 0b       	sbc	r19, r25
    5bf2:	24 30       	cpi	r18, 0x04	; 4
    5bf4:	31 05       	cpc	r19, r1
    5bf6:	80 f4       	brcc	.+32     	; 0x5c18 <malloc+0xa0>
    5bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    5bfc:	61 15       	cp	r22, r1
    5bfe:	71 05       	cpc	r23, r1
    5c00:	21 f0       	breq	.+8      	; 0x5c0a <malloc+0x92>
    5c02:	fb 01       	movw	r30, r22
    5c04:	93 83       	std	Z+3, r25	; 0x03
    5c06:	82 83       	std	Z+2, r24	; 0x02
    5c08:	04 c0       	rjmp	.+8      	; 0x5c12 <malloc+0x9a>
    5c0a:	90 93 6a 09 	sts	0x096A, r25
    5c0e:	80 93 69 09 	sts	0x0969, r24
    5c12:	fe 01       	movw	r30, r28
    5c14:	32 96       	adiw	r30, 0x02	; 2
    5c16:	44 c0       	rjmp	.+136    	; 0x5ca0 <malloc+0x128>
    5c18:	fe 01       	movw	r30, r28
    5c1a:	e2 0f       	add	r30, r18
    5c1c:	f3 1f       	adc	r31, r19
    5c1e:	81 93       	st	Z+, r24
    5c20:	91 93       	st	Z+, r25
    5c22:	22 50       	subi	r18, 0x02	; 2
    5c24:	31 09       	sbc	r19, r1
    5c26:	39 83       	std	Y+1, r19	; 0x01
    5c28:	28 83       	st	Y, r18
    5c2a:	3a c0       	rjmp	.+116    	; 0x5ca0 <malloc+0x128>
    5c2c:	20 91 67 09 	lds	r18, 0x0967
    5c30:	30 91 68 09 	lds	r19, 0x0968
    5c34:	23 2b       	or	r18, r19
    5c36:	41 f4       	brne	.+16     	; 0x5c48 <malloc+0xd0>
    5c38:	20 91 02 02 	lds	r18, 0x0202
    5c3c:	30 91 03 02 	lds	r19, 0x0203
    5c40:	30 93 68 09 	sts	0x0968, r19
    5c44:	20 93 67 09 	sts	0x0967, r18
    5c48:	20 91 00 02 	lds	r18, 0x0200
    5c4c:	30 91 01 02 	lds	r19, 0x0201
    5c50:	21 15       	cp	r18, r1
    5c52:	31 05       	cpc	r19, r1
    5c54:	41 f4       	brne	.+16     	; 0x5c66 <malloc+0xee>
    5c56:	2d b7       	in	r18, 0x3d	; 61
    5c58:	3e b7       	in	r19, 0x3e	; 62
    5c5a:	40 91 04 02 	lds	r20, 0x0204
    5c5e:	50 91 05 02 	lds	r21, 0x0205
    5c62:	24 1b       	sub	r18, r20
    5c64:	35 0b       	sbc	r19, r21
    5c66:	e0 91 67 09 	lds	r30, 0x0967
    5c6a:	f0 91 68 09 	lds	r31, 0x0968
    5c6e:	e2 17       	cp	r30, r18
    5c70:	f3 07       	cpc	r31, r19
    5c72:	a0 f4       	brcc	.+40     	; 0x5c9c <malloc+0x124>
    5c74:	2e 1b       	sub	r18, r30
    5c76:	3f 0b       	sbc	r19, r31
    5c78:	28 17       	cp	r18, r24
    5c7a:	39 07       	cpc	r19, r25
    5c7c:	78 f0       	brcs	.+30     	; 0x5c9c <malloc+0x124>
    5c7e:	ac 01       	movw	r20, r24
    5c80:	4e 5f       	subi	r20, 0xFE	; 254
    5c82:	5f 4f       	sbci	r21, 0xFF	; 255
    5c84:	24 17       	cp	r18, r20
    5c86:	35 07       	cpc	r19, r21
    5c88:	48 f0       	brcs	.+18     	; 0x5c9c <malloc+0x124>
    5c8a:	4e 0f       	add	r20, r30
    5c8c:	5f 1f       	adc	r21, r31
    5c8e:	50 93 68 09 	sts	0x0968, r21
    5c92:	40 93 67 09 	sts	0x0967, r20
    5c96:	81 93       	st	Z+, r24
    5c98:	91 93       	st	Z+, r25
    5c9a:	02 c0       	rjmp	.+4      	; 0x5ca0 <malloc+0x128>
    5c9c:	e0 e0       	ldi	r30, 0x00	; 0
    5c9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ca0:	cf 01       	movw	r24, r30
    5ca2:	df 91       	pop	r29
    5ca4:	cf 91       	pop	r28
    5ca6:	08 95       	ret

00005ca8 <free>:
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <free+0xa>
    5cb0:	87 c0       	rjmp	.+270    	; 0x5dc0 <free+0x118>
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	32 97       	sbiw	r30, 0x02	; 2
    5cb6:	13 82       	std	Z+3, r1	; 0x03
    5cb8:	12 82       	std	Z+2, r1	; 0x02
    5cba:	c0 91 69 09 	lds	r28, 0x0969
    5cbe:	d0 91 6a 09 	lds	r29, 0x096A
    5cc2:	20 97       	sbiw	r28, 0x00	; 0
    5cc4:	81 f4       	brne	.+32     	; 0x5ce6 <free+0x3e>
    5cc6:	20 81       	ld	r18, Z
    5cc8:	31 81       	ldd	r19, Z+1	; 0x01
    5cca:	28 0f       	add	r18, r24
    5ccc:	39 1f       	adc	r19, r25
    5cce:	80 91 67 09 	lds	r24, 0x0967
    5cd2:	90 91 68 09 	lds	r25, 0x0968
    5cd6:	82 17       	cp	r24, r18
    5cd8:	93 07       	cpc	r25, r19
    5cda:	79 f5       	brne	.+94     	; 0x5d3a <free+0x92>
    5cdc:	f0 93 68 09 	sts	0x0968, r31
    5ce0:	e0 93 67 09 	sts	0x0967, r30
    5ce4:	6d c0       	rjmp	.+218    	; 0x5dc0 <free+0x118>
    5ce6:	de 01       	movw	r26, r28
    5ce8:	20 e0       	ldi	r18, 0x00	; 0
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	ae 17       	cp	r26, r30
    5cee:	bf 07       	cpc	r27, r31
    5cf0:	50 f4       	brcc	.+20     	; 0x5d06 <free+0x5e>
    5cf2:	12 96       	adiw	r26, 0x02	; 2
    5cf4:	4d 91       	ld	r20, X+
    5cf6:	5c 91       	ld	r21, X
    5cf8:	13 97       	sbiw	r26, 0x03	; 3
    5cfa:	9d 01       	movw	r18, r26
    5cfc:	41 15       	cp	r20, r1
    5cfe:	51 05       	cpc	r21, r1
    5d00:	09 f1       	breq	.+66     	; 0x5d44 <free+0x9c>
    5d02:	da 01       	movw	r26, r20
    5d04:	f3 cf       	rjmp	.-26     	; 0x5cec <free+0x44>
    5d06:	b3 83       	std	Z+3, r27	; 0x03
    5d08:	a2 83       	std	Z+2, r26	; 0x02
    5d0a:	40 81       	ld	r20, Z
    5d0c:	51 81       	ldd	r21, Z+1	; 0x01
    5d0e:	84 0f       	add	r24, r20
    5d10:	95 1f       	adc	r25, r21
    5d12:	8a 17       	cp	r24, r26
    5d14:	9b 07       	cpc	r25, r27
    5d16:	71 f4       	brne	.+28     	; 0x5d34 <free+0x8c>
    5d18:	8d 91       	ld	r24, X+
    5d1a:	9c 91       	ld	r25, X
    5d1c:	11 97       	sbiw	r26, 0x01	; 1
    5d1e:	84 0f       	add	r24, r20
    5d20:	95 1f       	adc	r25, r21
    5d22:	02 96       	adiw	r24, 0x02	; 2
    5d24:	91 83       	std	Z+1, r25	; 0x01
    5d26:	80 83       	st	Z, r24
    5d28:	12 96       	adiw	r26, 0x02	; 2
    5d2a:	8d 91       	ld	r24, X+
    5d2c:	9c 91       	ld	r25, X
    5d2e:	13 97       	sbiw	r26, 0x03	; 3
    5d30:	93 83       	std	Z+3, r25	; 0x03
    5d32:	82 83       	std	Z+2, r24	; 0x02
    5d34:	21 15       	cp	r18, r1
    5d36:	31 05       	cpc	r19, r1
    5d38:	29 f4       	brne	.+10     	; 0x5d44 <free+0x9c>
    5d3a:	f0 93 6a 09 	sts	0x096A, r31
    5d3e:	e0 93 69 09 	sts	0x0969, r30
    5d42:	3e c0       	rjmp	.+124    	; 0x5dc0 <free+0x118>
    5d44:	d9 01       	movw	r26, r18
    5d46:	13 96       	adiw	r26, 0x03	; 3
    5d48:	fc 93       	st	X, r31
    5d4a:	ee 93       	st	-X, r30
    5d4c:	12 97       	sbiw	r26, 0x02	; 2
    5d4e:	4d 91       	ld	r20, X+
    5d50:	5d 91       	ld	r21, X+
    5d52:	a4 0f       	add	r26, r20
    5d54:	b5 1f       	adc	r27, r21
    5d56:	ea 17       	cp	r30, r26
    5d58:	fb 07       	cpc	r31, r27
    5d5a:	79 f4       	brne	.+30     	; 0x5d7a <free+0xd2>
    5d5c:	80 81       	ld	r24, Z
    5d5e:	91 81       	ldd	r25, Z+1	; 0x01
    5d60:	84 0f       	add	r24, r20
    5d62:	95 1f       	adc	r25, r21
    5d64:	02 96       	adiw	r24, 0x02	; 2
    5d66:	d9 01       	movw	r26, r18
    5d68:	11 96       	adiw	r26, 0x01	; 1
    5d6a:	9c 93       	st	X, r25
    5d6c:	8e 93       	st	-X, r24
    5d6e:	82 81       	ldd	r24, Z+2	; 0x02
    5d70:	93 81       	ldd	r25, Z+3	; 0x03
    5d72:	13 96       	adiw	r26, 0x03	; 3
    5d74:	9c 93       	st	X, r25
    5d76:	8e 93       	st	-X, r24
    5d78:	12 97       	sbiw	r26, 0x02	; 2
    5d7a:	e0 e0       	ldi	r30, 0x00	; 0
    5d7c:	f0 e0       	ldi	r31, 0x00	; 0
    5d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d80:	9b 81       	ldd	r25, Y+3	; 0x03
    5d82:	00 97       	sbiw	r24, 0x00	; 0
    5d84:	19 f0       	breq	.+6      	; 0x5d8c <free+0xe4>
    5d86:	fe 01       	movw	r30, r28
    5d88:	ec 01       	movw	r28, r24
    5d8a:	f9 cf       	rjmp	.-14     	; 0x5d7e <free+0xd6>
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	02 96       	adiw	r24, 0x02	; 2
    5d90:	28 81       	ld	r18, Y
    5d92:	39 81       	ldd	r19, Y+1	; 0x01
    5d94:	82 0f       	add	r24, r18
    5d96:	93 1f       	adc	r25, r19
    5d98:	20 91 67 09 	lds	r18, 0x0967
    5d9c:	30 91 68 09 	lds	r19, 0x0968
    5da0:	28 17       	cp	r18, r24
    5da2:	39 07       	cpc	r19, r25
    5da4:	69 f4       	brne	.+26     	; 0x5dc0 <free+0x118>
    5da6:	30 97       	sbiw	r30, 0x00	; 0
    5da8:	29 f4       	brne	.+10     	; 0x5db4 <free+0x10c>
    5daa:	10 92 6a 09 	sts	0x096A, r1
    5dae:	10 92 69 09 	sts	0x0969, r1
    5db2:	02 c0       	rjmp	.+4      	; 0x5db8 <free+0x110>
    5db4:	13 82       	std	Z+3, r1	; 0x03
    5db6:	12 82       	std	Z+2, r1	; 0x02
    5db8:	d0 93 68 09 	sts	0x0968, r29
    5dbc:	c0 93 67 09 	sts	0x0967, r28
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	08 95       	ret

00005dc6 <memset>:
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	01 c0       	rjmp	.+2      	; 0x5dcc <memset+0x6>
    5dca:	6d 93       	st	X+, r22
    5dcc:	41 50       	subi	r20, 0x01	; 1
    5dce:	50 40       	sbci	r21, 0x00	; 0
    5dd0:	e0 f7       	brcc	.-8      	; 0x5dca <memset+0x4>
    5dd2:	08 95       	ret

00005dd4 <_exit>:
    5dd4:	f8 94       	cli

00005dd6 <__stop_program>:
    5dd6:	ff cf       	rjmp	.-2      	; 0x5dd6 <__stop_program>
