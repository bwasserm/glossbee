
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800200  00004ede  00004f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d4  008003ae  008003ae  00005120  2**0
                  ALLOC
  3 .stab         000122d0  00000000  00000000  00005120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000091c9  00000000  00000000  000173f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000205b9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 02 	jmp	0x412	; 0x412 <__ctors_end>
       4:	0c 94 c1 20 	jmp	0x4182	; 0x4182 <__vector_1>
       8:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__vector_2>
       c:	0c 94 25 21 	jmp	0x424a	; 0x424a <__vector_3>
      10:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      14:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      18:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      1c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      20:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      24:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__vector_9>
      28:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      2c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      30:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      34:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__vector_13>
      38:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      3c:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__vector_13>
      40:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      44:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      48:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      4c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      50:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      54:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      58:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      5c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      60:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      64:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      68:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      6c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      70:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      74:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      78:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      7c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      80:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__vector_32>
      84:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      88:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      8c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      90:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      94:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      98:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      9c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      ac:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      bc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      c8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      cc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      d8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      dc:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      e0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      e4:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_57>
      e8:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_58>
      ec:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_59>
      f0:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_60>
      f4:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_61>
      f8:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_62>
      fc:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_63>
     100:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_64>
     104:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     108:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     10c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     110:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     114:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     118:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     11c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
     120:	8c 08       	sbc	r8, r12
     122:	97 08       	sbc	r9, r7
     124:	a2 08       	sbc	r10, r2
     126:	ad 08       	sbc	r10, r13
     128:	b8 08       	sbc	r11, r8
     12a:	c3 08       	sbc	r12, r3
     12c:	ce 08       	sbc	r12, r14
     12e:	ed 08       	sbc	r14, r13
     130:	f9 08       	sbc	r15, r9
     132:	05 09       	sbc	r16, r5
     134:	11 09       	sbc	r17, r1
     136:	1d 09       	sbc	r17, r13
     138:	29 09       	sbc	r18, r9
     13a:	29 09       	sbc	r18, r9
     13c:	47 09       	sbc	r20, r7
     13e:	49 09       	sbc	r20, r9
     140:	4b 09       	sbc	r20, r11
     142:	4d 09       	sbc	r20, r13
     144:	4f 09       	sbc	r20, r15
     146:	51 09       	sbc	r21, r1
     148:	53 09       	sbc	r21, r3
     14a:	71 09       	sbc	r23, r1
     14c:	91 09       	sbc	r25, r1
     14e:	b1 09       	sbc	r27, r1
     150:	d1 09       	sbc	r29, r1
     152:	f1 09       	sbc	r31, r1
     154:	11 0a       	sbc	r1, r17
     156:	31 0a       	sbc	r3, r17
     158:	67 0a       	sbc	r6, r23
     15a:	73 0a       	sbc	r7, r19
     15c:	7f 0a       	sbc	r7, r31
     15e:	8b 0a       	sbc	r8, r27
     160:	97 0a       	sbc	r9, r23
     162:	a3 0a       	sbc	r10, r19
     164:	af 0a       	sbc	r10, r31
     166:	c7 0a       	sbc	r12, r23
     168:	d2 0a       	sbc	r13, r18
     16a:	dd 0a       	sbc	r13, r29
     16c:	e8 0a       	sbc	r14, r24
     16e:	f3 0a       	sbc	r15, r19
     170:	fe 0a       	sbc	r15, r30
     172:	09 0b       	sbc	r16, r25
     174:	bb 0e       	add	r11, r27
     176:	be 0e       	add	r11, r30
     178:	c9 0e       	add	r12, r25
     17a:	ce 0e       	add	r12, r30
     17c:	d5 0e       	add	r13, r21
     17e:	de 0e       	add	r13, r30
     180:	e1 0e       	add	r14, r17
     182:	e6 0e       	add	r14, r22
     184:	ed 0e       	add	r14, r29
     186:	f6 0e       	add	r15, r22
     188:	4b 0f       	add	r20, r27
     18a:	51 0f       	add	r21, r17
     18c:	54 0f       	add	r21, r20
     18e:	57 0f       	add	r21, r23
     190:	5a 0f       	add	r21, r26
     192:	5d 0f       	add	r21, r29
     194:	63 0f       	add	r22, r19
     196:	60 0f       	add	r22, r16
     198:	66 0f       	add	r22, r22
     19a:	69 0f       	add	r22, r25
     19c:	6c 0f       	add	r22, r28
     19e:	75 0f       	add	r23, r21
     1a0:	78 0f       	add	r23, r24
     1a2:	7b 0f       	add	r23, r27
     1a4:	7e 0f       	add	r23, r30
     1a6:	72 0f       	add	r23, r18
     1a8:	48 0f       	add	r20, r24
     1aa:	4e 0f       	add	r20, r30
     1ac:	81 0f       	add	r24, r17
     1ae:	84 0f       	add	r24, r20
     1b0:	6f 0f       	add	r22, r31
     1b2:	45 0f       	add	r20, r21

000001b4 <__c.3319>:
     1b4:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001bb <__c.3316>:
     1bb:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001ca <__c.3313>:
     1ca:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001db <__c.3310>:
     1db:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1eb:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001f6 <__c.3307>:
     1f6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     206:	20 53 69 67 6e 61 6c 00                              Signal.

0000020e <__c.3304>:
     20e:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     21e:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000022e <__c.3301>:
     22e:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     23e:	72 6f 72 00                                         ror.

00000242 <__c.3298>:
     242:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000253 <__c.3295>:
     253:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     263:	61 72 74 00                                         art.

00000267 <__c.3292>:
     267:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000276 <__c.3289>:
     276:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     286:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000291 <__c.3286>:
     291:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000029d <__c.3283>:
     29d:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2ad:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2bd:	20 6f 6b 3f 00                                       ok?.

000002c2 <__c.3280>:
     2c2:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2d2:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002e0 <__c.3277>:
     2e0:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2f0:	72 74 00                                            rt.

000002f3 <__c.3274>:
     2f3:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     303:	49 44 00                                            ID.

00000306 <__c.3271>:
     306:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     316:	20 57 61 6b 65 75 70 00                              Wakeup.

0000031e <__c.3268>:
     31e:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     32e:	6c 61 74 65 64 00                                   lated.

00000334 <__c.3265>:
     334:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     344:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000034f <__c.3262>:
     34f:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     35f:	69 6e 74 65 72 00                                   inter.

00000365 <__c.3259>:
     365:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     375:	6c 6f 77 00                                         low.

00000379 <__c.3256>:
     379:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     389:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     399:	6e 6f 75 67 68 21 00                                nough!.

000003a0 <__c.3252>:
     3a0:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3b0:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3c0:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3d0:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003dc <__c.3249>:
     3dc:	29 3a 20 00                                         ): .

000003e0 <__c.3247>:
     3e0:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ec <__c.3172>:
     3ec:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003fb <__c.2103>:
     3fb:	45 46 47 65 66 67 00                                EFGefg.

00000402 <__c.2097>:
     402:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000412 <__ctors_end>:
     412:	11 24       	eor	r1, r1
     414:	1f be       	out	0x3f, r1	; 63
     416:	cf ef       	ldi	r28, 0xFF	; 255
     418:	d1 e4       	ldi	r29, 0x41	; 65
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	cd bf       	out	0x3d, r28	; 61

0000041e <__do_copy_data>:
     41e:	13 e0       	ldi	r17, 0x03	; 3
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	ee ed       	ldi	r30, 0xDE	; 222
     426:	fe e4       	ldi	r31, 0x4E	; 78
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	ae 3a       	cpi	r26, 0xAE	; 174
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	16 e0       	ldi	r17, 0x06	; 6
     43a:	ae ea       	ldi	r26, 0xAE	; 174
     43c:	b3 e0       	ldi	r27, 0x03	; 3
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a2 38       	cpi	r26, 0x82	; 130
     444:	b1 07       	cpc	r27, r17
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	0e 94 4c 22 	call	0x4498	; 0x4498 <main>
     44c:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <_exit>

00000450 <__bad_interrupt>:
     450:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <__vector_default>

00000454 <fire_tx>:

		printf( "callback %d %d\n",global_slot,cnt );
		cnt++;
}

void fire_tx(){
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
  nrk_led_toggle(ORANGE_LED);
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 20 0b 	call	0x1640	; 0x1640 <nrk_led_toggle>
  DPDS1=0x3; 
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	80 93 37 01 	sts	0x0137, r24
  DDRG=0x1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	83 bb       	out	0x13, r24	; 19
  PORTG=0x1;
     46a:	84 bb       	out	0x14, r24	; 20

  DDRE=0xE0;
     46c:	80 ee       	ldi	r24, 0xE0	; 224
     46e:	8d b9       	out	0x0d, r24	; 13
  PORTE=0xE0;
     470:	8e b9       	out	0x0e, r24	; 14
  rfTxInfo.pPayload=tx_buf;
     472:	c6 e4       	ldi	r28, 0x46	; 70
     474:	d4 e0       	ldi	r29, 0x04	; 4
     476:	d0 93 be 04 	sts	0x04BE, r29
     47a:	c0 93 bd 04 	sts	0x04BD, r28
  sprintf( tx_buf, "Interrupt"); 
     47e:	67 e5       	ldi	r22, 0x57	; 87
     480:	72 e0       	ldi	r23, 0x02	; 2
     482:	ce 01       	movw	r24, r28
     484:	0e 94 b7 24 	call	0x496e	; 0x496e <strcpy>
  rfTxInfo.length= strlen(tx_buf) + 1;
     488:	fe 01       	movw	r30, r28
     48a:	01 90       	ld	r0, Z+
     48c:	00 20       	and	r0, r0
     48e:	e9 f7       	brne	.-6      	; 0x48a <fire_tx+0x36>
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	e6 54       	subi	r30, 0x46	; 70
     494:	f4 40       	sbci	r31, 0x04	; 4
     496:	ef 5f       	subi	r30, 0xFF	; 255
     498:	e0 93 bc 04 	sts	0x04BC, r30
  rfTxInfo.destAddr = 0x1215;
     49c:	85 e1       	ldi	r24, 0x15	; 21
     49e:	92 e1       	ldi	r25, 0x12	; 18
     4a0:	90 93 bb 04 	sts	0x04BB, r25
     4a4:	80 93 ba 04 	sts	0x04BA, r24
  rfTxInfo.cca = 0;
     4a8:	10 92 bf 04 	sts	0x04BF, r1
  rfTxInfo.ackRequest = 0;
     4ac:	10 92 c0 04 	sts	0x04C0, r1

  printf( "Sending\r\n" );
     4b0:	81 e6       	ldi	r24, 0x61	; 97
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
  if(rf_tx_packet(&rfTxInfo) != 1){
     4b8:	8a eb       	ldi	r24, 0xBA	; 186
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	0e 94 02 05 	call	0xa04	; 0xa04 <rf_tx_packet>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	31 f0       	breq	.+12     	; 0x4d0 <fire_tx+0x7c>
    printf("--- RF_TX ERROR ---\r\n");
     4c4:	8a e6       	ldi	r24, 0x6A	; 106
     4c6:	92 e0       	ldi	r25, 0x02	; 2
  }

}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
  rfTxInfo.cca = 0;
  rfTxInfo.ackRequest = 0;

  printf( "Sending\r\n" );
  if(rf_tx_packet(&rfTxInfo) != 1){
    printf("--- RF_TX ERROR ---\r\n");
     4cc:	0c 94 53 25 	jmp	0x4aa6	; 0x4aa6 <puts>
  }

}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <my_callback>:

void my_callback(uint16_t global_slot )
{
		static uint16_t cnt;

		printf( "callback %d %d\n",global_slot,cnt );
     4d6:	20 91 af 03 	lds	r18, 0x03AF
     4da:	2f 93       	push	r18
     4dc:	20 91 ae 03 	lds	r18, 0x03AE
     4e0:	2f 93       	push	r18
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	84 eb       	ldi	r24, 0xB4	; 180
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
		cnt++;
     4f2:	80 91 ae 03 	lds	r24, 0x03AE
     4f6:	90 91 af 03 	lds	r25, 0x03AF
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	90 93 af 03 	sts	0x03AF, r25
     500:	80 93 ae 03 	sts	0x03AE, r24
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	08 95       	ret

00000512 <rf_rx_callback>:
    printf("--- RF_TX ERROR ---\r\n");
  }

}

RF_RX_INFO* rf_rx_callback(RF_RX_INFO *pRRI){
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
  nrk_led_set(ORANGE_LED);
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
  printf("interrupt!");
     520:	24 ec       	ldi	r18, 0xC4	; 196
     522:	32 e0       	ldi	r19, 0x02	; 2
     524:	3f 93       	push	r19
     526:	2f 93       	push	r18
     528:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
  nrk_led_clr(ORANGE_LED);
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
  return pRRI;
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
}
     538:	ce 01       	movw	r24, r28
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <halRfReceivePacket>:

void halRfReceivePacket(){
  nrk_led_set(ORANGE_LED);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
  printf("interrupt!2");
     548:	8f ec       	ldi	r24, 0xCF	; 207
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
  nrk_led_clr(ORANGE_LED);
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <nrk_led_clr>

00000560 <basicRfReceivePacket>:
}

void basicRfReceivePacket(){
  nrk_led_set(ORANGE_LED);
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
  printf("interrupt!3");
     568:	8b ed       	ldi	r24, 0xDB	; 219
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
  nrk_led_clr(ORANGE_LED);
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <nrk_led_clr>

00000580 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     580:	90 91 41 01 	lds	r25, 0x0141
     584:	9f 71       	andi	r25, 0x1F	; 31
     586:	9f 31       	cpi	r25, 0x1F	; 31
     588:	d9 f3       	breq	.-10     	; 0x580 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     58a:	80 93 42 01 	sts	0x0142, r24
     58e:	08 95       	ret

00000590 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 4a 05 	sts	0x054A, r24
     596:	08 95       	ret

00000598 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     598:	10 92 4a 05 	sts	0x054A, r1
     59c:	08 95       	ret

0000059e <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     59e:	80 91 41 01 	lds	r24, 0x0141
     5a2:	8f 71       	andi	r24, 0x1F	; 31
     5a4:	8f 31       	cpi	r24, 0x1F	; 31
     5a6:	d9 f3       	breq	.-10     	; 0x59e <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     5a8:	80 91 41 01 	lds	r24, 0x0141
     5ac:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     5ae:	e1 f0       	breq	.+56     	; 0x5e8 <rf_power_down+0x4a>
     5b0:	8f 30       	cpi	r24, 0x0F	; 15
     5b2:	d1 f0       	breq	.+52     	; 0x5e8 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     5b4:	80 91 41 01 	lds	r24, 0x0141
     5b8:	8f 71       	andi	r24, 0x1F	; 31
     5ba:	88 30       	cpi	r24, 0x08	; 8
     5bc:	31 f4       	brne	.+12     	; 0x5ca <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     5be:	80 91 39 01 	lds	r24, 0x0139
     5c2:	82 60       	ori	r24, 0x02	; 2
     5c4:	80 93 39 01 	sts	0x0139, r24
     5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     5d0:	80 91 41 01 	lds	r24, 0x0141
     5d4:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     5d6:	88 30       	cpi	r24, 0x08	; 8
     5d8:	d9 f7       	brne	.-10     	; 0x5d0 <rf_power_down+0x32>
     5da:	f1 cf       	rjmp	.-30     	; 0x5be <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     5dc:	8f 30       	cpi	r24, 0x0F	; 15
     5de:	21 f0       	breq	.+8      	; 0x5e8 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     5e0:	80 91 41 01 	lds	r24, 0x0141
     5e4:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <rf_power_down+0x3e>
     5e8:	08 95       	ret

000005ea <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     5ea:	80 91 41 01 	lds	r24, 0x0141
     5ee:	8f 71       	andi	r24, 0x1F	; 31
     5f0:	8f 31       	cpi	r24, 0x1F	; 31
     5f2:	d9 f3       	breq	.-10     	; 0x5ea <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     5f4:	80 91 41 01 	lds	r24, 0x0141
     5f8:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     5fa:	11 f0       	breq	.+4      	; 0x600 <rf_power_up+0x16>
     5fc:	8f 30       	cpi	r24, 0x0F	; 15
     5fe:	51 f4       	brne	.+20     	; 0x614 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     600:	80 91 39 01 	lds	r24, 0x0139
     604:	8d 7f       	andi	r24, 0xFD	; 253
     606:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     60a:	80 91 41 01 	lds	r24, 0x0141
     60e:	8f 71       	andi	r24, 0x1F	; 31
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	d9 f7       	brne	.-10     	; 0x60a <rf_power_up+0x20>
     614:	08 95       	ret

00000616 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     616:	e5 e4       	ldi	r30, 0x45	; 69
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	90 81       	ld	r25, Z
     61c:	90 7f       	andi	r25, 0xF0	; 240
     61e:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     620:	90 81       	ld	r25, Z
     622:	8f 70       	andi	r24, 0x0F	; 15
     624:	89 2b       	or	r24, r25
     626:	80 83       	st	Z, r24
     628:	08 95       	ret

0000062a <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     62a:	e7 e5       	ldi	r30, 0x57	; 87
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	80 81       	ld	r24, Z
     630:	8d 7f       	andi	r24, 0xFD	; 253
     632:	80 83       	st	Z, r24
     634:	08 95       	ret

00000636 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     636:	e7 e5       	ldi	r30, 0x57	; 87
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	80 81       	ld	r24, Z
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	80 83       	st	Z, r24
     640:	08 95       	ret

00000642 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     642:	ee e6       	ldi	r30, 0x6E	; 110
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	80 81       	ld	r24, Z
     648:	8f 7e       	andi	r24, 0xEF	; 239
     64a:	80 83       	st	Z, r24
     64c:	08 95       	ret

0000064e <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     64e:	ee e6       	ldi	r30, 0x6E	; 110
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	80 81       	ld	r24, Z
     654:	80 61       	ori	r24, 0x10	; 16
     656:	80 83       	st	Z, r24
     658:	08 95       	ret

0000065a <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     65a:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     65e:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     662:	90 93 54 05 	sts	0x0554, r25
     666:	80 93 53 05 	sts	0x0553, r24
     66a:	08 95       	ret

0000066c <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     66c:	90 93 4e 05 	sts	0x054E, r25
     670:	80 93 4d 05 	sts	0x054D, r24
	PHY_CC_CCA &= ~(0x1F);
     674:	e8 e4       	ldi	r30, 0x48	; 72
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	80 81       	ld	r24, Z
     67a:	80 7e       	andi	r24, 0xE0	; 224
     67c:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     67e:	80 81       	ld	r24, Z
     680:	68 2b       	or	r22, r24
     682:	60 83       	st	Z, r22
     684:	08 95       	ret

00000686 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     686:	90 93 b3 03 	sts	0x03B3, r25
     68a:	80 93 b2 03 	sts	0x03B2, r24
     68e:	08 95       	ret

00000690 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     690:	90 93 b1 03 	sts	0x03B1, r25
     694:	80 93 b0 03 	sts	0x03B0, r24
     698:	08 95       	ret

0000069a <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     6a0:	70 e2       	ldi	r23, 0x20	; 32
     6a2:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     6a6:	70 ec       	ldi	r23, 0xC0	; 192
     6a8:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     6ac:	60 62       	ori	r22, 0x20	; 32
     6ae:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     6b2:	65 ec       	ldi	r22, 0xC5	; 197
     6b4:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     6b8:	67 ea       	ldi	r22, 0xA7	; 167
     6ba:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     6be:	60 e8       	ldi	r22, 0x80	; 128
     6c0:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     6c4:	20 93 60 01 	sts	0x0160, r18
     6c8:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     6cc:	40 93 62 01 	sts	0x0162, r20
     6d0:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     6d4:	e6 e4       	ldi	r30, 0x46	; 70
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	c0 81       	ld	r28, Z
     6da:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     6dc:	60 81       	ld	r22, Z
     6de:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     6e0:	c2 95       	swap	r28
     6e2:	c6 95       	lsr	r28
     6e4:	c7 70       	andi	r28, 0x07	; 7
     6e6:	70 e4       	ldi	r23, 0x40	; 64
     6e8:	c7 9f       	mul	r28, r23
     6ea:	e0 01       	movw	r28, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	12 95       	swap	r17
     6f0:	16 95       	lsr	r17
     6f2:	13 70       	andi	r17, 0x03	; 3
     6f4:	1c 2b       	or	r17, r28
     6f6:	a2 95       	swap	r26
     6f8:	a6 95       	lsr	r26
     6fa:	a3 70       	andi	r26, 0x03	; 3
     6fc:	70 e1       	ldi	r23, 0x10	; 16
     6fe:	a7 9f       	mul	r26, r23
     700:	d0 01       	movw	r26, r0
     702:	11 24       	eor	r1, r1
     704:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     706:	62 95       	swap	r22
     708:	66 95       	lsr	r22
     70a:	63 70       	andi	r22, 0x03	; 3
     70c:	a4 e0       	ldi	r26, 0x04	; 4
     70e:	6a 9f       	mul	r22, r26
     710:	b0 01       	movw	r22, r0
     712:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     714:	16 2b       	or	r17, r22
     716:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     71a:	60 81       	ld	r22, Z
     71c:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     71e:	72 95       	swap	r23
     720:	76 95       	lsr	r23
     722:	73 70       	andi	r23, 0x03	; 3
     724:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     726:	62 95       	swap	r22
     728:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     72a:	67 2b       	or	r22, r23
     72c:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     730:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     734:	6f ef       	ldi	r22, 0xFF	; 255
     736:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     73a:	90 93 4e 05 	sts	0x054E, r25
     73e:	80 93 4d 05 	sts	0x054D, r24
	rfSettings.txSeqNumber = 0;
     742:	10 92 4f 05 	sts	0x054F, r1
	rfSettings.ackReceived = 0;
     746:	10 92 50 05 	sts	0x0550, r1
	rfSettings.panId = panId;
     74a:	50 93 52 05 	sts	0x0552, r21
     74e:	40 93 51 05 	sts	0x0551, r20
	rfSettings.myAddr = myAddr;
     752:	30 93 54 05 	sts	0x0554, r19
     756:	20 93 53 05 	sts	0x0553, r18
	rfSettings.receiveOn = 0;
     75a:	10 92 55 05 	sts	0x0555, r1

	rf_ready = 1;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 6f 05 	sts	0x056F, r24
	rx_ready = 0;
     764:	10 92 8e 05 	sts	0x058E, r1
	tx_done = 0;
     768:	10 92 5e 05 	sts	0x055E, r1

	use_glossy = 0;
     76c:	10 92 4a 05 	sts	0x054A, r1

} // rf_init() 
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	08 95       	ret

00000778 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     778:	86 e1       	ldi	r24, 0x16	; 22
     77a:	0c 94 c0 02 	jmp	0x580	; 0x580 <rf_cmd>

0000077e <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     77e:	86 e1       	ldi	r24, 0x16	; 22
     780:	0c 94 c0 02 	jmp	0x580	; 0x580 <rf_cmd>

00000784 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     784:	88 e0       	ldi	r24, 0x08	; 8
     786:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>
	rx_ready = 0;
     78a:	10 92 8e 05 	sts	0x058E, r1
     78e:	08 95       	ret

00000790 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     790:	3f 92       	push	r3
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     7b6:	80 91 6f 05 	lds	r24, 0x056F
     7ba:	81 11       	cpse	r24, r1
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	0f c1       	rjmp	.+542    	; 0x9e0 <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     7c2:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     7c4:	80 91 4f 05 	lds	r24, 0x054F
     7c8:	8f 5f       	subi	r24, 0xFF	; 255
     7ca:	80 93 4f 05 	sts	0x054F, r24
	machead->fcf = fcf;
     7ce:	80 91 81 01 	lds	r24, 0x0181
     7d2:	80 7e       	andi	r24, 0xE0	; 224
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	90 fb       	bst	r25, 0
     7d8:	85 f9       	bld	r24, 5
     7da:	8f 73       	andi	r24, 0x3F	; 63
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	80 93 81 01 	sts	0x0181, r24
     7e2:	88 e8       	ldi	r24, 0x88	; 136
     7e4:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     7e8:	80 91 4a 05 	lds	r24, 0x054A
     7ec:	88 23       	and	r24, r24
     7ee:	61 f0       	breq	.+24     	; 0x808 <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     7f6:	8a ea       	ldi	r24, 0xAA	; 170
     7f8:	9a ea       	ldi	r25, 0xAA	; 170
     7fa:	90 93 89 01 	sts	0x0189, r25
     7fe:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	10 c0       	rjmp	.+32     	; 0x828 <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     808:	80 91 4f 05 	lds	r24, 0x054F
     80c:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     810:	20 91 61 01 	lds	r18, 0x0161
     814:	80 91 60 01 	lds	r24, 0x0160
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	92 2b       	or	r25, r18
     81c:	90 93 89 01 	sts	0x0189, r25
     820:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     824:	88 81       	ld	r24, Y
     826:	99 81       	ldd	r25, Y+1	; 0x01
     828:	90 93 87 01 	sts	0x0187, r25
     82c:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     830:	20 91 63 01 	lds	r18, 0x0163
     834:	80 91 62 01 	lds	r24, 0x0162
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	92 2b       	or	r25, r18
     83c:	90 93 85 01 	sts	0x0185, r25
     840:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     844:	4a 81       	ldd	r20, Y+2	; 0x02
     846:	55 27       	eor	r21, r21
     848:	47 fd       	sbrc	r20, 7
     84a:	50 95       	com	r21
     84c:	6b 81       	ldd	r22, Y+3	; 0x03
     84e:	7c 81       	ldd	r23, Y+4	; 0x04
     850:	8a e8       	ldi	r24, 0x8A	; 138
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 ae 24 	call	0x495c	; 0x495c <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	85 5f       	subi	r24, 0xF5	; 245
     85c:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     860:	80 91 41 01 	lds	r24, 0x0141
     864:	98 2f       	mov	r25, r24
     866:	9f 71       	andi	r25, 0x1F	; 31
     868:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     86a:	8f 70       	andi	r24, 0x0F	; 15
     86c:	9f ef       	ldi	r25, 0xFF	; 255
     86e:	98 0f       	add	r25, r24
     870:	92 30       	cpi	r25, 0x02	; 2
     872:	b0 f3       	brcs	.-20     	; 0x860 <rf_tx_packet_repeat+0xd0>
     874:	9f e1       	ldi	r25, 0x1F	; 31
     876:	39 16       	cp	r3, r25
     878:	99 f3       	breq	.-26     	; 0x860 <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     87a:	98 ef       	ldi	r25, 0xF8	; 248
     87c:	93 0d       	add	r25, r3
     87e:	92 30       	cpi	r25, 0x02	; 2
     880:	18 f0       	brcs	.+6      	; 0x888 <rf_tx_packet_repeat+0xf8>
     882:	86 30       	cpi	r24, 0x06	; 6
     884:	09 f0       	breq	.+2      	; 0x888 <rf_tx_packet_repeat+0xf8>
     886:	9b cf       	rjmp	.-202    	; 0x7be <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     888:	86 e1       	ldi	r24, 0x16	; 22
     88a:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	81 11       	cpse	r24, r1
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     894:	89 e0       	ldi	r24, 0x09	; 9
     896:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>
	if(pRTI->ackRequest)
     89a:	8e 81       	ldd	r24, Y+6	; 0x06
     89c:	88 23       	and	r24, r24
     89e:	91 f0       	breq	.+36     	; 0x8c4 <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
     8a0:	89 e1       	ldi	r24, 0x19	; 25
     8a2:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>
     8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     8a8:	80 91 48 01 	lds	r24, 0x0148
     8ac:	80 68       	ori	r24, 0x80	; 128
     8ae:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     8b2:	80 91 41 01 	lds	r24, 0x0141
     8b6:	87 ff       	sbrs	r24, 7
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     8ba:	80 91 41 01 	lds	r24, 0x0141
     8be:	86 ff       	sbrs	r24, 6
     8c0:	7e cf       	rjmp	.-260    	; 0x7be <rf_tx_packet_repeat+0x2e>
     8c2:	e8 cf       	rjmp	.-48     	; 0x894 <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
     8c4:	61 14       	cp	r6, r1
     8c6:	71 04       	cpc	r7, r1
     8c8:	99 f1       	breq	.+102    	; 0x930 <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
     8ca:	86 e5       	ldi	r24, 0x56	; 86
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <nrk_time_get>
		target_t.secs = curr_t.secs;
     8d2:	80 91 56 05 	lds	r24, 0x0556
     8d6:	90 91 57 05 	lds	r25, 0x0557
     8da:	a0 91 58 05 	lds	r26, 0x0558
     8de:	b0 91 59 05 	lds	r27, 0x0559
     8e2:	80 93 70 05 	sts	0x0570, r24
     8e6:	90 93 71 05 	sts	0x0571, r25
     8ea:	a0 93 72 05 	sts	0x0572, r26
     8ee:	b0 93 73 05 	sts	0x0573, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     8f2:	d3 01       	movw	r26, r6
     8f4:	20 e4       	ldi	r18, 0x40	; 64
     8f6:	32 e4       	ldi	r19, 0x42	; 66
     8f8:	4f e0       	ldi	r20, 0x0F	; 15
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__muluhisi3>
     900:	00 91 5a 05 	lds	r16, 0x055A
     904:	10 91 5b 05 	lds	r17, 0x055B
     908:	20 91 5c 05 	lds	r18, 0x055C
     90c:	30 91 5d 05 	lds	r19, 0x055D
     910:	60 0f       	add	r22, r16
     912:	71 1f       	adc	r23, r17
     914:	82 1f       	adc	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	60 93 74 05 	sts	0x0574, r22
     91c:	70 93 75 05 	sts	0x0575, r23
     920:	80 93 76 05 	sts	0x0576, r24
     924:	90 93 77 05 	sts	0x0577, r25
		nrk_time_compact_nanos(&target_t);
     928:	80 e7       	ldi	r24, 0x70	; 112
     92a:	95 e0       	ldi	r25, 0x05	; 5
     92c:	0e 94 55 18 	call	0x30aa	; 0x30aa <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
     930:	10 92 5e 05 	sts	0x055E, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     93a:	41 2c       	mov	r4, r1
     93c:	51 2c       	mov	r5, r1
     93e:	80 91 5e 05 	lds	r24, 0x055E
     942:	81 11       	cpse	r24, r1
     944:	08 c0       	rjmp	.+16     	; 0x956 <rf_tx_packet_repeat+0x1c6>
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	48 1a       	sub	r4, r24
     94a:	58 0a       	sbc	r5, r24
     94c:	98 ee       	ldi	r25, 0xE8	; 232
     94e:	49 16       	cp	r4, r25
     950:	9d ef       	ldi	r25, 0xFD	; 253
     952:	59 06       	cpc	r5, r25
     954:	a1 f7       	brne	.-24     	; 0x93e <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
     956:	61 14       	cp	r6, r1
     958:	71 04       	cpc	r7, r1
     95a:	21 f4       	brne	.+8      	; 0x964 <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     95c:	8e 81       	ldd	r24, Y+6	; 0x06
     95e:	81 11       	cpse	r24, r1
     960:	2d c0       	rjmp	.+90     	; 0x9bc <rf_tx_packet_repeat+0x22c>
     962:	34 c0       	rjmp	.+104    	; 0x9cc <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
     964:	86 e5       	ldi	r24, 0x56	; 86
     966:	95 e0       	ldi	r25, 0x05	; 5
     968:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     96c:	80 90 56 05 	lds	r8, 0x0556
     970:	90 90 57 05 	lds	r9, 0x0557
     974:	a0 90 58 05 	lds	r10, 0x0558
     978:	b0 90 59 05 	lds	r11, 0x0559
     97c:	c0 90 5a 05 	lds	r12, 0x055A
     980:	d0 90 5b 05 	lds	r13, 0x055B
     984:	e0 90 5c 05 	lds	r14, 0x055C
     988:	f0 90 5d 05 	lds	r15, 0x055D
     98c:	00 91 70 05 	lds	r16, 0x0570
     990:	10 91 71 05 	lds	r17, 0x0571
     994:	20 91 72 05 	lds	r18, 0x0572
     998:	30 91 73 05 	lds	r19, 0x0573
     99c:	40 91 74 05 	lds	r20, 0x0574
     9a0:	50 91 75 05 	lds	r21, 0x0575
     9a4:	60 91 76 05 	lds	r22, 0x0576
     9a8:	70 91 77 05 	lds	r23, 0x0577
     9ac:	8f e8       	ldi	r24, 0x8F	; 143
     9ae:	95 e0       	ldi	r25, 0x05	; 5
     9b0:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <nrk_time_sub>
     9b4:	8f 3f       	cpi	r24, 0xFF	; 255
     9b6:	09 f0       	breq	.+2      	; 0x9ba <rf_tx_packet_repeat+0x22a>
     9b8:	bb cf       	rjmp	.-138    	; 0x930 <rf_tx_packet_repeat+0x1a0>
     9ba:	d0 cf       	rjmp	.-96     	; 0x95c <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     9bc:	80 91 42 01 	lds	r24, 0x0142
     9c0:	82 95       	swap	r24
     9c2:	86 95       	lsr	r24
     9c4:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     9c6:	11 f0       	breq	.+4      	; 0x9cc <rf_tx_packet_repeat+0x23c>
     9c8:	cf ef       	ldi	r28, 0xFF	; 255
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     9cc:	88 ee       	ldi	r24, 0xE8	; 232
     9ce:	48 16       	cp	r4, r24
     9d0:	8d ef       	ldi	r24, 0xFD	; 253
     9d2:	58 06       	cpc	r5, r24
     9d4:	c9 f3       	breq	.-14     	; 0x9c8 <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     9d6:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     9d8:	83 2d       	mov	r24, r3
     9da:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     9de:	8c 2f       	mov	r24, r28
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	bf 90       	pop	r11
     9f2:	af 90       	pop	r10
     9f4:	9f 90       	pop	r9
     9f6:	8f 90       	pop	r8
     9f8:	7f 90       	pop	r7
     9fa:	6f 90       	pop	r6
     9fc:	5f 90       	pop	r5
     9fe:	4f 90       	pop	r4
     a00:	3f 90       	pop	r3
     a02:	08 95       	ret

00000a04 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	0c 94 c8 03 	jmp	0x790	; 0x790 <rf_tx_packet_repeat>

00000a0c <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     a10:	80 91 6f 05 	lds	r24, 0x056F
     a14:	88 23       	and	r24, r24
     a16:	21 f1       	breq	.+72     	; 0xa60 <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     a18:	80 91 41 01 	lds	r24, 0x0141
     a1c:	c8 2f       	mov	r28, r24
     a1e:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     a20:	8f 70       	andi	r24, 0x0F	; 15
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	98 0f       	add	r25, r24
     a26:	92 30       	cpi	r25, 0x02	; 2
     a28:	b8 f3       	brcs	.-18     	; 0xa18 <rf_cca_check+0xc>
     a2a:	cf 31       	cpi	r28, 0x1F	; 31
     a2c:	a9 f3       	breq	.-22     	; 0xa18 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     a2e:	c8 30       	cpi	r28, 0x08	; 8
     a30:	11 f0       	breq	.+4      	; 0xa36 <rf_cca_check+0x2a>
     a32:	86 30       	cpi	r24, 0x06	; 6
     a34:	a9 f4       	brne	.+42     	; 0xa60 <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     a36:	86 e1       	ldi	r24, 0x16	; 22
     a38:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     a3c:	80 91 48 01 	lds	r24, 0x0148
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     a46:	80 91 41 01 	lds	r24, 0x0141
     a4a:	87 ff       	sbrs	r24, 7
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     a4e:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     a52:	8c 2f       	mov	r24, r28
     a54:	0e 94 c0 02 	call	0x580	; 0x580 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     a58:	d6 fb       	bst	r29, 6
     a5a:	88 27       	eor	r24, r24
     a5c:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     a60:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     a68:	80 91 6f 05 	lds	r24, 0x056F
     a6c:	88 23       	and	r24, r24
     a6e:	09 f4       	brne	.+2      	; 0xa72 <rf_rx_packet_nonblock+0xa>
     a70:	9f c0       	rjmp	.+318    	; 0xbb0 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
     a72:	80 91 8e 05 	lds	r24, 0x058E
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <rf_rx_packet_nonblock+0x14>
     a7a:	98 c0       	rjmp	.+304    	; 0xbac <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     a7c:	80 91 7b 01 	lds	r24, 0x017B
     a80:	e0 91 4d 05 	lds	r30, 0x054D
     a84:	f0 91 4e 05 	lds	r31, 0x054E
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 97       	sbiw	r24, 0x02	; 2
     a8c:	24 81       	ldd	r18, Z+4	; 0x04
     a8e:	33 27       	eor	r19, r19
     a90:	27 fd       	sbrc	r18, 7
     a92:	30 95       	com	r19
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	0c f4       	brge	.+2      	; 0xa9c <rf_rx_packet_nonblock+0x34>
     a9a:	8a c0       	rjmp	.+276    	; 0xbb0 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     a9c:	e0 91 4d 05 	lds	r30, 0x054D
     aa0:	f0 91 4e 05 	lds	r31, 0x054E
     aa4:	80 91 82 01 	lds	r24, 0x0182
     aa8:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     aaa:	e0 91 4d 05 	lds	r30, 0x054D
     aae:	f0 91 4e 05 	lds	r31, 0x054E
     ab2:	80 91 87 01 	lds	r24, 0x0187
     ab6:	90 91 88 01 	lds	r25, 0x0188
     aba:	92 83       	std	Z+2, r25	; 0x02
     abc:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     abe:	e0 91 4d 05 	lds	r30, 0x054D
     ac2:	f0 91 4e 05 	lds	r31, 0x054E
     ac6:	80 91 7b 01 	lds	r24, 0x017B
     aca:	8b 50       	subi	r24, 0x0B	; 11
     acc:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     ace:	a0 91 4d 05 	lds	r26, 0x054D
     ad2:	b0 91 4e 05 	lds	r27, 0x054E
     ad6:	e0 91 4d 05 	lds	r30, 0x054D
     ada:	f0 91 4e 05 	lds	r31, 0x054E
     ade:	13 96       	adiw	r26, 0x03	; 3
     ae0:	9c 91       	ld	r25, X
     ae2:	84 81       	ldd	r24, Z+4	; 0x04
     ae4:	89 17       	cp	r24, r25
     ae6:	3c f0       	brlt	.+14     	; 0xaf6 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     ae8:	e0 91 4d 05 	lds	r30, 0x054D
     aec:	f0 91 4e 05 	lds	r31, 0x054E
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	87 ff       	sbrs	r24, 7
     af4:	0d c0       	rjmp	.+26     	; 0xb10 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     af6:	10 92 8e 05 	sts	0x058E, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     afa:	80 91 4c 01 	lds	r24, 0x014C
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     b04:	80 91 4c 01 	lds	r24, 0x014C
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	80 93 4c 01 	sts	0x014C, r24
     b0e:	50 c0       	rjmp	.+160    	; 0xbb0 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     b10:	a0 91 4d 05 	lds	r26, 0x054D
     b14:	b0 91 4e 05 	lds	r27, 0x054E
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     b18:	e0 91 4d 05 	lds	r30, 0x054D
     b1c:	f0 91 4e 05 	lds	r31, 0x054E
     b20:	13 96       	adiw	r26, 0x03	; 3
     b22:	4c 91       	ld	r20, X
     b24:	55 27       	eor	r21, r21
     b26:	47 fd       	sbrc	r20, 7
     b28:	50 95       	com	r21
     b2a:	69 e8       	ldi	r22, 0x89	; 137
     b2c:	71 e0       	ldi	r23, 0x01	; 1
     b2e:	85 81       	ldd	r24, Z+5	; 0x05
     b30:	96 81       	ldd	r25, Z+6	; 0x06
     b32:	0e 94 ae 24 	call	0x495c	; 0x495c <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     b36:	e0 91 4d 05 	lds	r30, 0x054D
     b3a:	f0 91 4e 05 	lds	r31, 0x054E
     b3e:	80 91 80 01 	lds	r24, 0x0180
     b42:	85 fb       	bst	r24, 5
     b44:	88 27       	eor	r24, r24
     b46:	80 f9       	bld	r24, 0
     b48:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     b4a:	e0 91 4d 05 	lds	r30, 0x054D
     b4e:	f0 91 4e 05 	lds	r31, 0x054E
     b52:	80 91 47 01 	lds	r24, 0x0147
     b56:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     b58:	e0 91 4d 05 	lds	r30, 0x054D
     b5c:	f0 91 4e 05 	lds	r31, 0x054E
     b60:	80 91 46 01 	lds	r24, 0x0146
     b64:	86 95       	lsr	r24
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     b6c:	e0 91 4d 05 	lds	r30, 0x054D
     b70:	f0 91 4e 05 	lds	r31, 0x054E
     b74:	80 91 47 01 	lds	r24, 0x0147
     b78:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     b7a:	e0 91 4d 05 	lds	r30, 0x054D
     b7e:	f0 91 4e 05 	lds	r31, 0x054E
     b82:	a0 91 7b 01 	lds	r26, 0x017B
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	a0 58       	subi	r26, 0x80	; 128
     b8a:	be 4f       	sbci	r27, 0xFE	; 254
     b8c:	8c 91       	ld	r24, X
     b8e:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
     b90:	10 92 8e 05 	sts	0x058E, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     b94:	80 91 4c 01 	lds	r24, 0x014C
     b98:	8f 77       	andi	r24, 0x7F	; 127
     b9a:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     b9e:	80 91 4c 01 	lds	r24, 0x014C
     ba2:	80 68       	ori	r24, 0x80	; 128
     ba4:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     bb2:	08 95       	ret

00000bb4 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     bc0:	80 e8       	ldi	r24, 0x80	; 128
     bc2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bc6:	8f 91       	pop	r24
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 5e 05 	sts	0x055E, r24
	IRQ_STATUS = (1 << TX_END);
     be4:	80 e4       	ldi	r24, 0x40	; 64
     be6:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     bea:	8f 91       	pop	r24
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c08:	8f 91       	pop	r24
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     c20:	80 e1       	ldi	r24, 0x10	; 16
     c22:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c26:	8f 91       	pop	r24
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	0b b6       	in	r0, 0x3b	; 59
     c3e:	0f 92       	push	r0
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     c5e:	e0 91 b2 03 	lds	r30, 0x03B2
     c62:	f0 91 b3 03 	lds	r31, 0x03B3
     c66:	30 97       	sbiw	r30, 0x00	; 0
     c68:	09 f0       	breq	.+2      	; 0xc6c <__vector_59+0x3a>
		rx_start_func();
     c6a:	09 95       	icall

	return;
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ca4:	8f 91       	pop	r24
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     cce:	e9 e4       	ldi	r30, 0x49	; 73
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	90 81       	ld	r25, Z
     cd4:	90 7f       	andi	r25, 0xF0	; 240
     cd6:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     cd8:	90 81       	ld	r25, Z
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	89 2b       	or	r24, r25
     cde:	80 83       	st	Z, r24
     ce0:	08 95       	ret

00000ce2 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	08 95       	ret

00000ce6 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     ce6:	08 95       	ret

00000ce8 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     ce8:	08 95       	ret

00000cea <rf_security_disable>:
}



void rf_security_disable()
{
     cea:	08 95       	ret

00000cec <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	08 95       	ret

00000cf0 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     cf0:	80 91 48 05 	lds	r24, 0x0548
     cf4:	90 91 49 05 	lds	r25, 0x0549
     cf8:	08 95       	ret

00000cfa <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
     cfe:	08 95       	ret

00000d00 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret

00000d08 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     d0c:	08 95       	ret

00000d0e <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     d0e:	08 95       	ret

00000d10 <rf_test_mode>:
}



void rf_test_mode()
{
     d10:	08 95       	ret

00000d12 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     d12:	08 95       	ret

00000d14 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     d14:	08 95       	ret

00000d16 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     d16:	08 95       	ret

00000d18 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     d18:	08 95       	ret

00000d1a <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     d1a:	08 95       	ret

00000d1c <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	80 81       	ld	r24, Z
     d22:	83 60       	ori	r24, 0x03	; 3
     d24:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     d26:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
     d28:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     d2a:	8d b1       	in	r24, 0x0d	; 13
     d2c:	80 6e       	ori	r24, 0xE0	; 224
     d2e:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     d30:	8e b1       	in	r24, 0x0e	; 14
     d32:	80 6e       	ori	r24, 0xE0	; 224
     d34:	8e b9       	out	0x0e, r24	; 14
     d36:	08 95       	ret

00000d38 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	80 81       	ld	r24, Z
     d3e:	83 60       	ori	r24, 0x03	; 3
     d40:	80 83       	st	Z, r24
	DDRG	|= 0x1;
     d42:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
     d44:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
     d46:	8d b1       	in	r24, 0x0d	; 13
     d48:	80 6e       	ori	r24, 0xE0	; 224
     d4a:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
     d4c:	8e b1       	in	r24, 0x0e	; 14
     d4e:	80 6e       	ori	r24, 0xE0	; 224
     d50:	8e b9       	out	0x0e, r24	; 14
     d52:	08 95       	ret

00000d54 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	27 97       	sbiw	r28, 0x07	; 7
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     d74:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     d78:	e0 91 4d 05 	lds	r30, 0x054D
     d7c:	f0 91 4e 05 	lds	r31, 0x054E
     d80:	c0 80       	ld	r12, Z
     d82:	d3 80       	ldd	r13, Z+3	; 0x03
     d84:	05 81       	ldd	r16, Z+5	; 0x05
     d86:	16 81       	ldd	r17, Z+6	; 0x06
     d88:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     d8a:	0e 94 34 05 	call	0xa68	; 0xa68 <rf_rx_packet_nonblock>
	if (err < 1) {
     d8e:	18 16       	cp	r1, r24
     d90:	1c f0       	brlt	.+6      	; 0xd98 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     d92:	87 ee       	ldi	r24, 0xE7	; 231
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     d98:	f8 01       	movw	r30, r16
     d9a:	f0 80       	ld	r15, Z
	if (ttl == 0) {
     d9c:	f1 10       	cpse	r15, r1
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
#endif
		nrk_int_enable();
     da8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
		return;
     dac:	32 c0       	rjmp	.+100    	; 0xe12 <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
     dae:	f5 e0       	ldi	r31, 0x05	; 5
     db0:	ff 12       	cpse	r15, r31
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     dbc:	c8 01       	movw	r24, r16
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	9f 93       	push	r25
     dc2:	8f 93       	push	r24
     dc4:	8e 2d       	mov	r24, r14
     dc6:	99 27       	eor	r25, r25
     dc8:	87 fd       	sbrc	r24, 7
     dca:	90 95       	com	r25
     dcc:	9f 93       	push	r25
     dce:	ef 92       	push	r14
     dd0:	1f 92       	push	r1
     dd2:	ff 92       	push	r15
     dd4:	1f 92       	push	r1
     dd6:	cf 92       	push	r12
     dd8:	88 e2       	ldi	r24, 0x28	; 40
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     de4:	1d 83       	std	Y+5, r17	; 0x05
     de6:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     de8:	fa 94       	dec	r15
     dea:	f8 01       	movw	r30, r16
     dec:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
     dee:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     df0:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     df2:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     dfc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     e00:	ce 01       	movw	r24, r28
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	0e 94 02 05 	call	0xa04	; 0xa04 <rf_tx_packet>
#endif
	return;
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
}
     e12:	27 96       	adiw	r28, 0x07	; 7
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	0b b6       	in	r0, 0x3b	; 59
     e3c:	0f 92       	push	r0
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 91 7b 01 	lds	r25, 0x017B
     e5c:	89 17       	cp	r24, r25
     e5e:	10 f4       	brcc	.+4      	; 0xe64 <__vector_60+0x34>
     e60:	8f 5f       	subi	r24, 0xFF	; 255
     e62:	fa cf       	rjmp	.-12     	; 0xe58 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     e64:	80 91 46 01 	lds	r24, 0x0146
     e68:	87 ff       	sbrs	r24, 7
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <__vector_60+0x44>
		rx_ready = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 8e 05 	sts	0x058E, r24
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
     e74:	81 e5       	ldi	r24, 0x51	; 81
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     e82:	80 91 46 01 	lds	r24, 0x0146
     e86:	87 ff       	sbrs	r24, 7
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     e8a:	80 91 4a 05 	lds	r24, 0x054A
     e8e:	81 11       	cpse	r24, r1
     e90:	0e 94 aa 06 	call	0xd54	; 0xd54 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     e94:	e0 91 b0 03 	lds	r30, 0x03B0
     e98:	f0 91 b1 03 	lds	r31, 0x03B1
     e9c:	30 97       	sbiw	r30, 0x00	; 0
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__vector_60+0x72>
		rx_end_func();
     ea0:	09 95       	icall

	return;
}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0b be       	out	0x3b, r0	; 59
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     ec8:	ef e5       	ldi	r30, 0x5F	; 95
     eca:	f5 e0       	ldi	r31, 0x05	; 5
     ecc:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     ece:	8c 91       	ld	r24, X
     ed0:	81 93       	st	Z+, r24
      AES_KEY = key[i];
     ed2:	8d 91       	ld	r24, X+
     ed4:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	ef 36       	cpi	r30, 0x6F	; 111
     edc:	f8 07       	cpc	r31, r24
     ede:	b9 f7       	brne	.-18     	; 0xece <aes_setkey+0x6>
     ee0:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     ee2:	10 92 3e 01 	sts	0x013E, r1
     ee6:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     ef0:	80 91 3d 01 	lds	r24, 0x013D
     ef4:	80 ff       	sbrs	r24, 0
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <aes_setkey+0x28>
     ef8:	e8 e7       	ldi	r30, 0x78	; 120
     efa:	f5 e0       	ldi	r31, 0x05	; 5
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     efc:	80 91 3f 01 	lds	r24, 0x013F
     f00:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     f02:	85 e0       	ldi	r24, 0x05	; 5
     f04:	e8 38       	cpi	r30, 0x88	; 136
     f06:	f8 07       	cpc	r31, r24
     f08:	c9 f7       	brne	.-14     	; 0xefc <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
     f0a:	08 95       	ret

00000f0c <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     f0c:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
     f0e:	66 23       	and	r22, r22
     f10:	09 f4       	brne	.+2      	; 0xf14 <aes_encrypt+0x8>
     f12:	47 c0       	rjmp	.+142    	; 0xfa2 <aes_encrypt+0x96>
     f14:	26 2f       	mov	r18, r22
     f16:	2f 70       	andi	r18, 0x0F	; 15
     f18:	09 f0       	breq	.+2      	; 0xf1c <aes_encrypt+0x10>
     f1a:	43 c0       	rjmp	.+134    	; 0xfa2 <aes_encrypt+0x96>
     f1c:	ef e5       	ldi	r30, 0x5F	; 95
     f1e:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     f20:	21 91       	ld	r18, Z+
     f22:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     f26:	25 e0       	ldi	r18, 0x05	; 5
     f28:	ef 36       	cpi	r30, 0x6F	; 111
     f2a:	f2 07       	cpc	r31, r18
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <aes_encrypt+0x14>
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     f30:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     f32:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	a2 9f       	mul	r26, r18
     f38:	a0 01       	movw	r20, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	46 17       	cp	r20, r22
     f3e:	57 07       	cpc	r21, r23
     f40:	74 f5       	brge	.+92     	; 0xf9e <aes_encrypt+0x92>
      if(i==0)
     f42:	a1 11       	cpse	r26, r1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     f46:	10 92 3c 01 	sts	0x013C, r1
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     f4c:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	48 0f       	add	r20, r24
     f56:	59 1f       	adc	r21, r25
     f58:	fa 01       	movw	r30, r20
     f5a:	e2 0f       	add	r30, r18
     f5c:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     f5e:	e0 81       	ld	r30, Z
     f60:	e0 93 3e 01 	sts	0x013E, r30
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     f68:	20 31       	cpi	r18, 0x10	; 16
     f6a:	31 05       	cpc	r19, r1
     f6c:	a9 f7       	brne	.-22     	; 0xf58 <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     f6e:	20 91 3c 01 	lds	r18, 0x013C
     f72:	20 68       	ori	r18, 0x80	; 128
     f74:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
     f78:	20 91 3d 01 	lds	r18, 0x013D
     f7c:	20 ff       	sbrs	r18, 0
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <aes_encrypt+0x6c>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     f84:	c0 91 3e 01 	lds	r28, 0x013E
     f88:	fa 01       	movw	r30, r20
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	c0 83       	st	Z, r28
     f90:	2f 5f       	subi	r18, 0xFF	; 255
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     f94:	20 31       	cpi	r18, 0x10	; 16
     f96:	31 05       	cpc	r19, r1
     f98:	a9 f7       	brne	.-22     	; 0xf84 <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     f9a:	af 5f       	subi	r26, 0xFF	; 255
     f9c:	cb cf       	rjmp	.-106    	; 0xf34 <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     fb0:	61 30       	cpi	r22, 0x01	; 1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <aes_decrypt+0xe>
     fb4:	4f c0       	rjmp	.+158    	; 0x1054 <aes_decrypt+0xac>
     fb6:	26 2f       	mov	r18, r22
     fb8:	2f 70       	andi	r18, 0x0F	; 15
     fba:	09 f0       	breq	.+2      	; 0xfbe <aes_decrypt+0x16>
     fbc:	4b c0       	rjmp	.+150    	; 0x1054 <aes_decrypt+0xac>
     fbe:	e8 e7       	ldi	r30, 0x78	; 120
     fc0:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     fc2:	21 91       	ld	r18, Z+
     fc4:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     fc8:	25 e0       	ldi	r18, 0x05	; 5
     fca:	e8 38       	cpi	r30, 0x88	; 136
     fcc:	f2 07       	cpc	r31, r18
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     fd0:	62 95       	swap	r22
     fd2:	6f 70       	andi	r22, 0x0F	; 15
     fd4:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     fd6:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     fd8:	6f 3f       	cpi	r22, 0xFF	; 255
     fda:	d1 f1       	breq	.+116    	; 0x1050 <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     fdc:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	62 02       	muls	r22, r18
     fe4:	a0 01       	movw	r20, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	fc 01       	movw	r30, r24
     fee:	e4 0f       	add	r30, r20
     ff0:	f5 1f       	adc	r31, r21
     ff2:	df 01       	movw	r26, r30
     ff4:	a2 0f       	add	r26, r18
     ff6:	b3 1f       	adc	r27, r19
     ff8:	7c 91       	ld	r23, X
     ffa:	70 93 3e 01 	sts	0x013E, r23
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1002:	20 31       	cpi	r18, 0x10	; 16
    1004:	31 05       	cpc	r19, r1
    1006:	a9 f7       	brne	.-22     	; 0xff2 <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1008:	20 91 3c 01 	lds	r18, 0x013C
    100c:	20 68       	ori	r18, 0x80	; 128
    100e:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1012:	20 91 3d 01 	lds	r18, 0x013D
    1016:	20 ff       	sbrs	r18, 0
    1018:	fc cf       	rjmp	.-8      	; 0x1012 <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    101a:	40 51       	subi	r20, 0x10	; 16
    101c:	51 09       	sbc	r21, r1
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	48 0f       	add	r20, r24
    1024:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1026:	10 91 3e 01 	lds	r17, 0x013E
    102a:	df 01       	movw	r26, r30
    102c:	a2 0f       	add	r26, r18
    102e:	b3 1f       	adc	r27, r19
    1030:	1c 93       	st	X, r17
         if(i!=0)
    1032:	66 23       	and	r22, r22
    1034:	31 f0       	breq	.+12     	; 0x1042 <aes_decrypt+0x9a>
    1036:	ea 01       	movw	r28, r20
    1038:	c2 0f       	add	r28, r18
    103a:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
    103c:	78 81       	ld	r23, Y
    103e:	71 27       	eor	r23, r17
    1040:	7c 93       	st	X, r23
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1046:	20 31       	cpi	r18, 0x10	; 16
    1048:	31 05       	cpc	r19, r1
    104a:	69 f7       	brne	.-38     	; 0x1026 <aes_decrypt+0x7e>
    104c:	61 50       	subi	r22, 0x01	; 1
    104e:	c4 cf       	rjmp	.-120    	; 0xfd8 <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1060:	80 91 c0 00 	lds	r24, 0x00C0
    1064:	87 ff       	sbrs	r24, 7
    1066:	fc cf       	rjmp	.-8      	; 0x1060 <getc0>
    1068:	80 91 c0 00 	lds	r24, 0x00C0
    106c:	8f 77       	andi	r24, 0x7F	; 127
    106e:	80 93 c0 00 	sts	0x00C0, r24
    1072:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1076:	08 95       	ret

00001078 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1078:	90 91 c0 00 	lds	r25, 0x00C0
    107c:	95 ff       	sbrs	r25, 5
    107e:	fc cf       	rjmp	.-8      	; 0x1078 <putc0>
    1080:	90 91 c0 00 	lds	r25, 0x00C0
    1084:	9f 7d       	andi	r25, 0xDF	; 223
    1086:	90 93 c0 00 	sts	0x00C0, r25
    108a:	80 93 c6 00 	sts	0x00C6, r24
    108e:	08 95       	ret

00001090 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	08 95       	ret

00001094 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	31 f4       	brne	.+12     	; 0x10a4 <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1098:	80 91 c8 00 	lds	r24, 0x00C8
    109c:	87 fd       	sbrc	r24, 7
    109e:	07 c0       	rjmp	.+14     	; 0x10ae <nrk_uart_data_ready+0x1a>
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
        }
if(uart_num==0)
    10a4:	81 11       	cpse	r24, r1
    10a6:	fc cf       	rjmp	.-8      	; 0x10a0 <nrk_uart_data_ready+0xc>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    10a8:	80 91 c0 00 	lds	r24, 0x00C0
    10ac:	f7 cf       	rjmp	.-18     	; 0x109c <nrk_uart_data_ready+0x8>

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
    10b0:	08 95       	ret

000010b2 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    10b6:	fc 01       	movw	r30, r24
    10b8:	24 91       	lpm	r18, Z
    10ba:	ec 01       	movw	r28, r24
    10bc:	21 96       	adiw	r28, 0x01	; 1
    10be:	22 23       	and	r18, r18
    10c0:	51 f0       	breq	.+20     	; 0x10d6 <nrk_kprintf+0x24>
        putchar(c);
    10c2:	60 91 7a 06 	lds	r22, 0x067A
    10c6:	70 91 7b 06 	lds	r23, 0x067B
    10ca:	82 2f       	mov	r24, r18
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    10d2:	ce 01       	movw	r24, r28
    10d4:	f0 cf       	rjmp	.-32     	; 0x10b6 <nrk_kprintf+0x4>
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    10e0:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    10e2:	88 ef       	ldi	r24, 0xF8	; 248
    10e4:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    10e6:	80 ef       	ldi	r24, 0xF0	; 240
    10e8:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	8d b9       	out	0x0d, r24	; 13
    10ee:	08 95       	ret

000010f0 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    10f0:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <PORT_INIT>

000010f4 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10f4:	8f 3f       	cpi	r24, 0xFF	; 255
    10f6:	09 f4       	brne	.+2      	; 0x10fa <nrk_gpio_set+0x6>
    10f8:	5c c0       	rjmp	.+184    	; 0x11b2 <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    10fa:	48 2f       	mov	r20, r24
    10fc:	47 70       	andi	r20, 0x07	; 7
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	47 30       	cpi	r20, 0x07	; 7
    1102:	51 05       	cpc	r21, r1
    1104:	08 f0       	brcs	.+2      	; 0x1108 <nrk_gpio_set+0x14>
    1106:	55 c0       	rjmp	.+170    	; 0x11b2 <nrk_gpio_set+0xbe>
    1108:	fa 01       	movw	r30, r20
    110a:	e0 57       	subi	r30, 0x70	; 112
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	86 95       	lsr	r24
    1114:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1118:	92 b1       	in	r25, 0x02	; 2
    111a:	21 e0       	ldi	r18, 0x01	; 1
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	08 2e       	mov	r0, r24
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <nrk_gpio_set+0x30>
    1122:	22 0f       	add	r18, r18
    1124:	0a 94       	dec	r0
    1126:	ea f7       	brpl	.-6      	; 0x1122 <nrk_gpio_set+0x2e>
    1128:	92 2b       	or	r25, r18
    112a:	92 b9       	out	0x02, r25	; 2
    112c:	40 c0       	rjmp	.+128    	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    112e:	95 b1       	in	r25, 0x05	; 5
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	08 2e       	mov	r0, r24
    1136:	01 c0       	rjmp	.+2      	; 0x113a <nrk_gpio_set+0x46>
    1138:	22 0f       	add	r18, r18
    113a:	0a 94       	dec	r0
    113c:	ea f7       	brpl	.-6      	; 0x1138 <nrk_gpio_set+0x44>
    113e:	92 2b       	or	r25, r18
    1140:	95 b9       	out	0x05, r25	; 5
    1142:	35 c0       	rjmp	.+106    	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1144:	98 b1       	in	r25, 0x08	; 8
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	08 2e       	mov	r0, r24
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <nrk_gpio_set+0x5c>
    114e:	22 0f       	add	r18, r18
    1150:	0a 94       	dec	r0
    1152:	ea f7       	brpl	.-6      	; 0x114e <nrk_gpio_set+0x5a>
    1154:	92 2b       	or	r25, r18
    1156:	98 b9       	out	0x08, r25	; 8
    1158:	2a c0       	rjmp	.+84     	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    115a:	9b b1       	in	r25, 0x0b	; 11
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	08 2e       	mov	r0, r24
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <nrk_gpio_set+0x72>
    1164:	22 0f       	add	r18, r18
    1166:	0a 94       	dec	r0
    1168:	ea f7       	brpl	.-6      	; 0x1164 <nrk_gpio_set+0x70>
    116a:	92 2b       	or	r25, r18
    116c:	9b b9       	out	0x0b, r25	; 11
    116e:	1f c0       	rjmp	.+62     	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1170:	9e b1       	in	r25, 0x0e	; 14
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	08 2e       	mov	r0, r24
    1178:	01 c0       	rjmp	.+2      	; 0x117c <nrk_gpio_set+0x88>
    117a:	22 0f       	add	r18, r18
    117c:	0a 94       	dec	r0
    117e:	ea f7       	brpl	.-6      	; 0x117a <nrk_gpio_set+0x86>
    1180:	92 2b       	or	r25, r18
    1182:	9e b9       	out	0x0e, r25	; 14
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1186:	91 b3       	in	r25, 0x11	; 17
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	08 2e       	mov	r0, r24
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <nrk_gpio_set+0x9e>
    1190:	22 0f       	add	r18, r18
    1192:	0a 94       	dec	r0
    1194:	ea f7       	brpl	.-6      	; 0x1190 <nrk_gpio_set+0x9c>
    1196:	92 2b       	or	r25, r18
    1198:	91 bb       	out	0x11, r25	; 17
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    119c:	94 b3       	in	r25, 0x14	; 20
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <nrk_gpio_set+0xb2>
    11a4:	22 0f       	add	r18, r18
    11a6:	8a 95       	dec	r24
    11a8:	ea f7       	brpl	.-6      	; 0x11a4 <nrk_gpio_set+0xb0>
    11aa:	92 2b       	or	r25, r18
    11ac:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11b0:	08 95       	ret
                default: return -1;
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11b4:	08 95       	ret

000011b6 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	09 f4       	brne	.+2      	; 0x11bc <nrk_gpio_clr+0x6>
    11ba:	57 c0       	rjmp	.+174    	; 0x126a <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    11bc:	48 2f       	mov	r20, r24
    11be:	47 70       	andi	r20, 0x07	; 7
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	47 30       	cpi	r20, 0x07	; 7
    11c4:	51 05       	cpc	r21, r1
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <nrk_gpio_clr+0x14>
    11c8:	50 c0       	rjmp	.+160    	; 0x126a <nrk_gpio_clr+0xb4>
    11ca:	fa 01       	movw	r30, r20
    11cc:	e9 56       	subi	r30, 0x69	; 105
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	86 95       	lsr	r24
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    11da:	92 b1       	in	r25, 0x02	; 2
    11dc:	21 e0       	ldi	r18, 0x01	; 1
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	08 2e       	mov	r0, r24
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <nrk_gpio_clr+0x30>
    11e4:	22 0f       	add	r18, r18
    11e6:	0a 94       	dec	r0
    11e8:	ea f7       	brpl	.-6      	; 0x11e4 <nrk_gpio_clr+0x2e>
    11ea:	20 95       	com	r18
    11ec:	29 23       	and	r18, r25
    11ee:	22 b9       	out	0x02, r18	; 2
    11f0:	3a c0       	rjmp	.+116    	; 0x1266 <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    11f2:	95 b1       	in	r25, 0x05	; 5
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	08 2e       	mov	r0, r24
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <nrk_gpio_clr+0x48>
    11fc:	22 0f       	add	r18, r18
    11fe:	0a 94       	dec	r0
    1200:	ea f7       	brpl	.-6      	; 0x11fc <nrk_gpio_clr+0x46>
    1202:	20 95       	com	r18
    1204:	29 23       	and	r18, r25
    1206:	25 b9       	out	0x05, r18	; 5
    1208:	2e c0       	rjmp	.+92     	; 0x1266 <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    120a:	98 b1       	in	r25, 0x08	; 8
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	08 2e       	mov	r0, r24
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <nrk_gpio_clr+0x60>
    1214:	22 0f       	add	r18, r18
    1216:	0a 94       	dec	r0
    1218:	ea f7       	brpl	.-6      	; 0x1214 <nrk_gpio_clr+0x5e>
    121a:	20 95       	com	r18
    121c:	29 23       	and	r18, r25
    121e:	28 b9       	out	0x08, r18	; 8
    1220:	22 c0       	rjmp	.+68     	; 0x1266 <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1222:	9b b1       	in	r25, 0x0b	; 11
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	08 2e       	mov	r0, r24
    122a:	01 c0       	rjmp	.+2      	; 0x122e <nrk_gpio_clr+0x78>
    122c:	22 0f       	add	r18, r18
    122e:	0a 94       	dec	r0
    1230:	ea f7       	brpl	.-6      	; 0x122c <nrk_gpio_clr+0x76>
    1232:	20 95       	com	r18
    1234:	29 23       	and	r18, r25
    1236:	2b b9       	out	0x0b, r18	; 11
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    123a:	9e b1       	in	r25, 0x0e	; 14
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	08 2e       	mov	r0, r24
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <nrk_gpio_clr+0x90>
    1244:	22 0f       	add	r18, r18
    1246:	0a 94       	dec	r0
    1248:	ea f7       	brpl	.-6      	; 0x1244 <nrk_gpio_clr+0x8e>
    124a:	20 95       	com	r18
    124c:	29 23       	and	r18, r25
    124e:	2e b9       	out	0x0e, r18	; 14
    1250:	0a c0       	rjmp	.+20     	; 0x1266 <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1252:	91 b3       	in	r25, 0x11	; 17
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	01 c0       	rjmp	.+2      	; 0x125c <nrk_gpio_clr+0xa6>
    125a:	22 0f       	add	r18, r18
    125c:	8a 95       	dec	r24
    125e:	ea f7       	brpl	.-6      	; 0x125a <nrk_gpio_clr+0xa4>
    1260:	20 95       	com	r18
    1262:	29 23       	and	r18, r25
    1264:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1268:	08 95       	ret
                default: return -1;
    126a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    126c:	08 95       	ret

0000126e <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	21 f1       	breq	.+72     	; 0x12ba <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    1272:	48 2f       	mov	r20, r24
    1274:	47 70       	andi	r20, 0x07	; 7
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	47 30       	cpi	r20, 0x07	; 7
    127a:	51 05       	cpc	r21, r1
    127c:	f0 f4       	brcc	.+60     	; 0x12ba <nrk_gpio_get+0x4c>
    127e:	fa 01       	movw	r30, r20
    1280:	e2 56       	subi	r30, 0x62	; 98
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	86 95       	lsr	r24
    128a:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    128e:	20 b1       	in	r18, 0x00	; 0
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1292:	23 b1       	in	r18, 0x03	; 3
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1296:	26 b1       	in	r18, 0x06	; 6
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    129a:	29 b1       	in	r18, 0x09	; 9
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    129e:	2c b1       	in	r18, 0x0c	; 12
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    12a2:	2f b1       	in	r18, 0x0f	; 15
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    12a6:	22 b3       	in	r18, 0x12	; 18
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <nrk_gpio_get+0x42>
    12ac:	35 95       	asr	r19
    12ae:	27 95       	ror	r18
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <nrk_gpio_get+0x3e>
    12b4:	82 2f       	mov	r24, r18
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	08 95       	ret
                default: return -1;
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    12bc:	08 95       	ret

000012be <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    12be:	8f 3f       	cpi	r24, 0xFF	; 255
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <nrk_gpio_toggle+0x6>
    12c2:	ef c0       	rjmp	.+478    	; 0x14a2 <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    12c4:	48 2f       	mov	r20, r24
    12c6:	47 70       	andi	r20, 0x07	; 7
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	47 30       	cpi	r20, 0x07	; 7
    12cc:	51 05       	cpc	r21, r1
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <nrk_gpio_toggle+0x14>
    12d0:	e8 c0       	rjmp	.+464    	; 0x14a2 <nrk_gpio_toggle+0x1e4>
    12d2:	fa 01       	movw	r30, r20
    12d4:	eb 55       	subi	r30, 0x5B	; 91
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	86 95       	lsr	r24
    12da:	86 95       	lsr	r24
    12dc:	86 95       	lsr	r24
    12de:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    12e2:	20 b1       	in	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	08 2e       	mov	r0, r24
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <nrk_gpio_toggle+0x30>
    12ea:	35 95       	asr	r19
    12ec:	27 95       	ror	r18
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    12f2:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    12f4:	20 fd       	sbrc	r18, 0
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	08 2e       	mov	r0, r24
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <nrk_gpio_toggle+0x44>
    1300:	22 0f       	add	r18, r18
    1302:	0a 94       	dec	r0
    1304:	ea f7       	brpl	.-6      	; 0x1300 <nrk_gpio_toggle+0x42>
    1306:	92 2b       	or	r25, r18
    1308:	92 b9       	out	0x02, r25	; 2
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    130c:	21 e0       	ldi	r18, 0x01	; 1
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	08 2e       	mov	r0, r24
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <nrk_gpio_toggle+0x58>
    1314:	22 0f       	add	r18, r18
    1316:	0a 94       	dec	r0
    1318:	ea f7       	brpl	.-6      	; 0x1314 <nrk_gpio_toggle+0x56>
    131a:	20 95       	com	r18
    131c:	29 23       	and	r18, r25
    131e:	22 b9       	out	0x02, r18	; 2
    1320:	13 c0       	rjmp	.+38     	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1322:	23 b1       	in	r18, 0x03	; 3
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	08 2e       	mov	r0, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <nrk_gpio_toggle+0x70>
    132a:	35 95       	asr	r19
    132c:	27 95       	ror	r18
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1332:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1334:	20 fd       	sbrc	r18, 0
    1336:	0a c0       	rjmp	.+20     	; 0x134c <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <nrk_gpio_toggle+0x82>
    133e:	22 0f       	add	r18, r18
    1340:	8a 95       	dec	r24
    1342:	ea f7       	brpl	.-6      	; 0x133e <nrk_gpio_toggle+0x80>
    1344:	92 2b       	or	r25, r18
    1346:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	08 2e       	mov	r0, r24
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <nrk_gpio_toggle+0x98>
    1354:	22 0f       	add	r18, r18
    1356:	0a 94       	dec	r0
    1358:	ea f7       	brpl	.-6      	; 0x1354 <nrk_gpio_toggle+0x96>
    135a:	20 95       	com	r18
    135c:	29 23       	and	r18, r25
    135e:	25 b9       	out	0x05, r18	; 5
    1360:	f3 cf       	rjmp	.-26     	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1362:	26 b1       	in	r18, 0x06	; 6
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	08 2e       	mov	r0, r24
    1368:	02 c0       	rjmp	.+4      	; 0x136e <nrk_gpio_toggle+0xb0>
    136a:	35 95       	asr	r19
    136c:	27 95       	ror	r18
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1372:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1374:	20 fd       	sbrc	r18, 0
    1376:	0a c0       	rjmp	.+20     	; 0x138c <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	08 2e       	mov	r0, r24
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <nrk_gpio_toggle+0xc4>
    1380:	22 0f       	add	r18, r18
    1382:	0a 94       	dec	r0
    1384:	ea f7       	brpl	.-6      	; 0x1380 <nrk_gpio_toggle+0xc2>
    1386:	92 2b       	or	r25, r18
    1388:	98 b9       	out	0x08, r25	; 8
    138a:	de cf       	rjmp	.-68     	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	08 2e       	mov	r0, r24
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <nrk_gpio_toggle+0xd8>
    1394:	22 0f       	add	r18, r18
    1396:	0a 94       	dec	r0
    1398:	ea f7       	brpl	.-6      	; 0x1394 <nrk_gpio_toggle+0xd6>
    139a:	20 95       	com	r18
    139c:	29 23       	and	r18, r25
    139e:	28 b9       	out	0x08, r18	; 8
    13a0:	d3 cf       	rjmp	.-90     	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    13a2:	29 b1       	in	r18, 0x09	; 9
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	08 2e       	mov	r0, r24
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <nrk_gpio_toggle+0xf0>
    13aa:	35 95       	asr	r19
    13ac:	27 95       	ror	r18
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    13b2:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    13b4:	20 fd       	sbrc	r18, 0
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    13b8:	21 e0       	ldi	r18, 0x01	; 1
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	08 2e       	mov	r0, r24
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <nrk_gpio_toggle+0x104>
    13c0:	22 0f       	add	r18, r18
    13c2:	0a 94       	dec	r0
    13c4:	ea f7       	brpl	.-6      	; 0x13c0 <nrk_gpio_toggle+0x102>
    13c6:	92 2b       	or	r25, r18
    13c8:	9b b9       	out	0x0b, r25	; 11
    13ca:	be cf       	rjmp	.-132    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	08 2e       	mov	r0, r24
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <nrk_gpio_toggle+0x118>
    13d4:	22 0f       	add	r18, r18
    13d6:	0a 94       	dec	r0
    13d8:	ea f7       	brpl	.-6      	; 0x13d4 <nrk_gpio_toggle+0x116>
    13da:	20 95       	com	r18
    13dc:	29 23       	and	r18, r25
    13de:	2b b9       	out	0x0b, r18	; 11
    13e0:	b3 cf       	rjmp	.-154    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    13e2:	2c b1       	in	r18, 0x0c	; 12
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	08 2e       	mov	r0, r24
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <nrk_gpio_toggle+0x130>
    13ea:	35 95       	asr	r19
    13ec:	27 95       	ror	r18
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    13f2:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    13f4:	20 fd       	sbrc	r18, 0
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	08 2e       	mov	r0, r24
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <nrk_gpio_toggle+0x144>
    1400:	22 0f       	add	r18, r18
    1402:	0a 94       	dec	r0
    1404:	ea f7       	brpl	.-6      	; 0x1400 <nrk_gpio_toggle+0x142>
    1406:	92 2b       	or	r25, r18
    1408:	9e b9       	out	0x0e, r25	; 14
    140a:	9e cf       	rjmp	.-196    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	08 2e       	mov	r0, r24
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <nrk_gpio_toggle+0x158>
    1414:	22 0f       	add	r18, r18
    1416:	0a 94       	dec	r0
    1418:	ea f7       	brpl	.-6      	; 0x1414 <nrk_gpio_toggle+0x156>
    141a:	20 95       	com	r18
    141c:	29 23       	and	r18, r25
    141e:	2e b9       	out	0x0e, r18	; 14
    1420:	93 cf       	rjmp	.-218    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1422:	2f b1       	in	r18, 0x0f	; 15
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	08 2e       	mov	r0, r24
    1428:	02 c0       	rjmp	.+4      	; 0x142e <nrk_gpio_toggle+0x170>
    142a:	35 95       	asr	r19
    142c:	27 95       	ror	r18
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1432:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1434:	20 fd       	sbrc	r18, 0
    1436:	0a c0       	rjmp	.+20     	; 0x144c <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	08 2e       	mov	r0, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <nrk_gpio_toggle+0x184>
    1440:	22 0f       	add	r18, r18
    1442:	0a 94       	dec	r0
    1444:	ea f7       	brpl	.-6      	; 0x1440 <nrk_gpio_toggle+0x182>
    1446:	92 2b       	or	r25, r18
    1448:	91 bb       	out	0x11, r25	; 17
    144a:	7e cf       	rjmp	.-260    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	08 2e       	mov	r0, r24
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <nrk_gpio_toggle+0x198>
    1454:	22 0f       	add	r18, r18
    1456:	0a 94       	dec	r0
    1458:	ea f7       	brpl	.-6      	; 0x1454 <nrk_gpio_toggle+0x196>
    145a:	20 95       	com	r18
    145c:	29 23       	and	r18, r25
    145e:	21 bb       	out	0x11, r18	; 17
    1460:	73 cf       	rjmp	.-282    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1462:	22 b3       	in	r18, 0x12	; 18
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	08 2e       	mov	r0, r24
    1468:	02 c0       	rjmp	.+4      	; 0x146e <nrk_gpio_toggle+0x1b0>
    146a:	35 95       	asr	r19
    146c:	27 95       	ror	r18
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1472:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1474:	20 fd       	sbrc	r18, 0
    1476:	0a c0       	rjmp	.+20     	; 0x148c <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	08 2e       	mov	r0, r24
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <nrk_gpio_toggle+0x1c4>
    1480:	22 0f       	add	r18, r18
    1482:	0a 94       	dec	r0
    1484:	ea f7       	brpl	.-6      	; 0x1480 <nrk_gpio_toggle+0x1c2>
    1486:	92 2b       	or	r25, r18
    1488:	94 bb       	out	0x14, r25	; 20
    148a:	5e cf       	rjmp	.-324    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	08 2e       	mov	r0, r24
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <nrk_gpio_toggle+0x1d8>
    1494:	22 0f       	add	r18, r18
    1496:	0a 94       	dec	r0
    1498:	ea f7       	brpl	.-6      	; 0x1494 <nrk_gpio_toggle+0x1d6>
    149a:	20 95       	com	r18
    149c:	29 23       	and	r18, r25
    149e:	24 bb       	out	0x14, r18	; 20
    14a0:	53 cf       	rjmp	.-346    	; 0x1348 <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    14a4:	08 95       	ret

000014a6 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	09 f4       	brne	.+2      	; 0x14ac <nrk_gpio_direction+0x6>
    14aa:	be c0       	rjmp	.+380    	; 0x1628 <nrk_gpio_direction+0x182>
    14ac:	48 2f       	mov	r20, r24
    14ae:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    14b0:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    14b2:	61 11       	cpse	r22, r1
    14b4:	60 c0       	rjmp	.+192    	; 0x1576 <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    14b6:	47 30       	cpi	r20, 0x07	; 7
    14b8:	51 05       	cpc	r21, r1
    14ba:	08 f0       	brcs	.+2      	; 0x14be <nrk_gpio_direction+0x18>
    14bc:	b5 c0       	rjmp	.+362    	; 0x1628 <nrk_gpio_direction+0x182>
    14be:	fa 01       	movw	r30, r20
    14c0:	e4 55       	subi	r30, 0x54	; 84
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	86 95       	lsr	r24
    14c6:	86 95       	lsr	r24
    14c8:	86 95       	lsr	r24
    14ca:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    14ce:	91 b1       	in	r25, 0x01	; 1
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	08 2e       	mov	r0, r24
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <nrk_gpio_direction+0x34>
    14d8:	22 0f       	add	r18, r18
    14da:	0a 94       	dec	r0
    14dc:	ea f7       	brpl	.-6      	; 0x14d8 <nrk_gpio_direction+0x32>
    14de:	20 95       	com	r18
    14e0:	29 23       	and	r18, r25
    14e2:	21 b9       	out	0x01, r18	; 1
    14e4:	9f c0       	rjmp	.+318    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    14e6:	94 b1       	in	r25, 0x04	; 4
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	08 2e       	mov	r0, r24
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <nrk_gpio_direction+0x4c>
    14f0:	22 0f       	add	r18, r18
    14f2:	0a 94       	dec	r0
    14f4:	ea f7       	brpl	.-6      	; 0x14f0 <nrk_gpio_direction+0x4a>
    14f6:	20 95       	com	r18
    14f8:	29 23       	and	r18, r25
    14fa:	24 b9       	out	0x04, r18	; 4
    14fc:	93 c0       	rjmp	.+294    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    14fe:	97 b1       	in	r25, 0x07	; 7
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	08 2e       	mov	r0, r24
    1506:	01 c0       	rjmp	.+2      	; 0x150a <nrk_gpio_direction+0x64>
    1508:	22 0f       	add	r18, r18
    150a:	0a 94       	dec	r0
    150c:	ea f7       	brpl	.-6      	; 0x1508 <nrk_gpio_direction+0x62>
    150e:	20 95       	com	r18
    1510:	29 23       	and	r18, r25
    1512:	27 b9       	out	0x07, r18	; 7
    1514:	87 c0       	rjmp	.+270    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1516:	9a b1       	in	r25, 0x0a	; 10
    1518:	21 e0       	ldi	r18, 0x01	; 1
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	08 2e       	mov	r0, r24
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <nrk_gpio_direction+0x7c>
    1520:	22 0f       	add	r18, r18
    1522:	0a 94       	dec	r0
    1524:	ea f7       	brpl	.-6      	; 0x1520 <nrk_gpio_direction+0x7a>
    1526:	20 95       	com	r18
    1528:	29 23       	and	r18, r25
    152a:	2a b9       	out	0x0a, r18	; 10
    152c:	7b c0       	rjmp	.+246    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    152e:	9d b1       	in	r25, 0x0d	; 13
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	08 2e       	mov	r0, r24
    1536:	01 c0       	rjmp	.+2      	; 0x153a <nrk_gpio_direction+0x94>
    1538:	22 0f       	add	r18, r18
    153a:	0a 94       	dec	r0
    153c:	ea f7       	brpl	.-6      	; 0x1538 <nrk_gpio_direction+0x92>
    153e:	20 95       	com	r18
    1540:	29 23       	and	r18, r25
    1542:	2d b9       	out	0x0d, r18	; 13
    1544:	6f c0       	rjmp	.+222    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1546:	90 b3       	in	r25, 0x10	; 16
    1548:	21 e0       	ldi	r18, 0x01	; 1
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	08 2e       	mov	r0, r24
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <nrk_gpio_direction+0xac>
    1550:	22 0f       	add	r18, r18
    1552:	0a 94       	dec	r0
    1554:	ea f7       	brpl	.-6      	; 0x1550 <nrk_gpio_direction+0xaa>
    1556:	20 95       	com	r18
    1558:	29 23       	and	r18, r25
    155a:	20 bb       	out	0x10, r18	; 16
    155c:	63 c0       	rjmp	.+198    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    155e:	93 b3       	in	r25, 0x13	; 19
    1560:	21 e0       	ldi	r18, 0x01	; 1
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	08 2e       	mov	r0, r24
    1566:	01 c0       	rjmp	.+2      	; 0x156a <nrk_gpio_direction+0xc4>
    1568:	22 0f       	add	r18, r18
    156a:	0a 94       	dec	r0
    156c:	ea f7       	brpl	.-6      	; 0x1568 <nrk_gpio_direction+0xc2>
    156e:	20 95       	com	r18
    1570:	29 23       	and	r18, r25
    1572:	23 bb       	out	0x13, r18	; 19
    1574:	57 c0       	rjmp	.+174    	; 0x1624 <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1576:	47 30       	cpi	r20, 0x07	; 7
    1578:	51 05       	cpc	r21, r1
    157a:	08 f0       	brcs	.+2      	; 0x157e <nrk_gpio_direction+0xd8>
    157c:	55 c0       	rjmp	.+170    	; 0x1628 <nrk_gpio_direction+0x182>
    157e:	fa 01       	movw	r30, r20
    1580:	ed 54       	subi	r30, 0x4D	; 77
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	86 95       	lsr	r24
    1586:	86 95       	lsr	r24
    1588:	86 95       	lsr	r24
    158a:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    158e:	91 b1       	in	r25, 0x01	; 1
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	08 2e       	mov	r0, r24
    1596:	01 c0       	rjmp	.+2      	; 0x159a <nrk_gpio_direction+0xf4>
    1598:	22 0f       	add	r18, r18
    159a:	0a 94       	dec	r0
    159c:	ea f7       	brpl	.-6      	; 0x1598 <nrk_gpio_direction+0xf2>
    159e:	92 2b       	or	r25, r18
    15a0:	91 b9       	out	0x01, r25	; 1
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    15a4:	94 b1       	in	r25, 0x04	; 4
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	08 2e       	mov	r0, r24
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <nrk_gpio_direction+0x10a>
    15ae:	22 0f       	add	r18, r18
    15b0:	0a 94       	dec	r0
    15b2:	ea f7       	brpl	.-6      	; 0x15ae <nrk_gpio_direction+0x108>
    15b4:	92 2b       	or	r25, r18
    15b6:	94 b9       	out	0x04, r25	; 4
    15b8:	35 c0       	rjmp	.+106    	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    15ba:	97 b1       	in	r25, 0x07	; 7
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	08 2e       	mov	r0, r24
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <nrk_gpio_direction+0x120>
    15c4:	22 0f       	add	r18, r18
    15c6:	0a 94       	dec	r0
    15c8:	ea f7       	brpl	.-6      	; 0x15c4 <nrk_gpio_direction+0x11e>
    15ca:	92 2b       	or	r25, r18
    15cc:	97 b9       	out	0x07, r25	; 7
    15ce:	2a c0       	rjmp	.+84     	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    15d0:	9a b1       	in	r25, 0x0a	; 10
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	08 2e       	mov	r0, r24
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <nrk_gpio_direction+0x136>
    15da:	22 0f       	add	r18, r18
    15dc:	0a 94       	dec	r0
    15de:	ea f7       	brpl	.-6      	; 0x15da <nrk_gpio_direction+0x134>
    15e0:	92 2b       	or	r25, r18
    15e2:	9a b9       	out	0x0a, r25	; 10
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    15e6:	9d b1       	in	r25, 0x0d	; 13
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	08 2e       	mov	r0, r24
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <nrk_gpio_direction+0x14c>
    15f0:	22 0f       	add	r18, r18
    15f2:	0a 94       	dec	r0
    15f4:	ea f7       	brpl	.-6      	; 0x15f0 <nrk_gpio_direction+0x14a>
    15f6:	92 2b       	or	r25, r18
    15f8:	9d b9       	out	0x0d, r25	; 13
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    15fc:	90 b3       	in	r25, 0x10	; 16
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	08 2e       	mov	r0, r24
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <nrk_gpio_direction+0x162>
    1606:	22 0f       	add	r18, r18
    1608:	0a 94       	dec	r0
    160a:	ea f7       	brpl	.-6      	; 0x1606 <nrk_gpio_direction+0x160>
    160c:	92 2b       	or	r25, r18
    160e:	90 bb       	out	0x10, r25	; 16
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1612:	93 b3       	in	r25, 0x13	; 19
    1614:	21 e0       	ldi	r18, 0x01	; 1
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	01 c0       	rjmp	.+2      	; 0x161c <nrk_gpio_direction+0x176>
    161a:	22 0f       	add	r18, r18
    161c:	8a 95       	dec	r24
    161e:	ea f7       	brpl	.-6      	; 0x161a <nrk_gpio_direction+0x174>
    1620:	92 2b       	or	r25, r18
    1622:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1626:	08 95       	ret
                        default: return -1;
    1628:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    162a:	08 95       	ret

0000162c <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    162c:	81 11       	cpse	r24, r1
    162e:	06 c0       	rjmp	.+12     	; 0x163c <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1630:	80 b1       	in	r24, 0x00	; 0
    1632:	86 95       	lsr	r24
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	91 e0       	ldi	r25, 0x01	; 1
    1638:	89 27       	eor	r24, r25
    163a:	08 95       	ret
	} 
return -1;
    163c:	8f ef       	ldi	r24, 0xFF	; 255
}
    163e:	08 95       	ret

00001640 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	11 f4       	brne	.+4      	; 0x1648 <nrk_led_toggle+0x8>
    1644:	83 e2       	ldi	r24, 0x23	; 35
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	11 f4       	brne	.+4      	; 0x1652 <nrk_led_toggle+0x12>
    164e:	8b e2       	ldi	r24, 0x2B	; 43
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	91 05       	cpc	r25, r1
    1656:	11 f4       	brne	.+4      	; 0x165c <nrk_led_toggle+0x1c>
    1658:	83 e3       	ldi	r24, 0x33	; 51
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    165c:	03 97       	sbiw	r24, 0x03	; 3
    165e:	29 f4       	brne	.+10     	; 0x166a <nrk_led_toggle+0x2a>
    1660:	8b e3       	ldi	r24, 0x3B	; 59
    1662:	0e 94 5f 09 	call	0x12be	; 0x12be <nrk_gpio_toggle>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	08 95       	ret
return -1;
    166a:	8f ef       	ldi	r24, 0xFF	; 255
}
    166c:	08 95       	ret

0000166e <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	11 f4       	brne	.+4      	; 0x1676 <nrk_led_clr+0x8>
    1672:	83 e2       	ldi	r24, 0x23	; 35
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	11 f4       	brne	.+4      	; 0x1680 <nrk_led_clr+0x12>
    167c:	8b e2       	ldi	r24, 0x2B	; 43
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	91 05       	cpc	r25, r1
    1684:	11 f4       	brne	.+4      	; 0x168a <nrk_led_clr+0x1c>
    1686:	83 e3       	ldi	r24, 0x33	; 51
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    168a:	03 97       	sbiw	r24, 0x03	; 3
    168c:	29 f4       	brne	.+10     	; 0x1698 <nrk_led_clr+0x2a>
    168e:	8b e3       	ldi	r24, 0x3B	; 59
    1690:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <nrk_gpio_set>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	08 95       	ret
return -1;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
}
    169a:	08 95       	ret

0000169c <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	11 f4       	brne	.+4      	; 0x16a4 <nrk_led_set+0x8>
    16a0:	83 e2       	ldi	r24, 0x23	; 35
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	11 f4       	brne	.+4      	; 0x16ae <nrk_led_set+0x12>
    16aa:	8b e2       	ldi	r24, 0x2B	; 43
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	91 05       	cpc	r25, r1
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <nrk_led_set+0x1c>
    16b4:	83 e3       	ldi	r24, 0x33	; 51
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    16b8:	03 97       	sbiw	r24, 0x03	; 3
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <nrk_led_set+0x2a>
    16bc:	8b e3       	ldi	r24, 0x3B	; 59
    16be:	0e 94 db 08 	call	0x11b6	; 0x11b6 <nrk_gpio_clr>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	08 95       	ret
return -1;
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    16c8:	08 95       	ret

000016ca <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    16ca:	88 23       	and	r24, r24
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <nrk_gpio_pullups+0xa>
    16ce:	85 b7       	in	r24, 0x35	; 53
    16d0:	8f 7e       	andi	r24, 0xEF	; 239
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    16d4:	85 b7       	in	r24, 0x35	; 53
    16d6:	80 61       	ori	r24, 0x10	; 16
    16d8:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	08 95       	ret

000016de <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    16de:	90 91 c8 00 	lds	r25, 0x00C8
    16e2:	95 ff       	sbrs	r25, 5
    16e4:	fc cf       	rjmp	.-8      	; 0x16de <putc1>
    16e6:	80 93 ce 00 	sts	0x00CE, r24
    16ea:	08 95       	ret

000016ec <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    16ec:	90 93 c5 00 	sts	0x00C5, r25
    16f0:	80 93 c4 00 	sts	0x00C4, r24
    16f4:	86 e0       	ldi	r24, 0x06	; 6
    16f6:	80 93 c2 00 	sts	0x00C2, r24
    16fa:	e1 ec       	ldi	r30, 0xC1	; 193
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8b 7f       	andi	r24, 0xFB	; 251
    1702:	80 83       	st	Z, r24
    1704:	a0 ec       	ldi	r26, 0xC0	; 192
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	8c 91       	ld	r24, X
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	8c 93       	st	X, r24
ENABLE_UART0();
    170e:	80 81       	ld	r24, Z
    1710:	88 61       	ori	r24, 0x18	; 24
    1712:	80 83       	st	Z, r24
    1714:	08 95       	ret

00001716 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1716:	90 93 cd 00 	sts	0x00CD, r25
    171a:	80 93 cc 00 	sts	0x00CC, r24
    171e:	86 e0       	ldi	r24, 0x06	; 6
    1720:	80 93 ca 00 	sts	0x00CA, r24
    1724:	e9 ec       	ldi	r30, 0xC9	; 201
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8b 7f       	andi	r24, 0xFB	; 251
    172c:	80 83       	st	Z, r24
    172e:	a8 ec       	ldi	r26, 0xC8	; 200
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	8c 91       	ld	r24, X
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	8c 93       	st	X, r24
ENABLE_UART1();
    1738:	80 81       	ld	r24, Z
    173a:	88 61       	ori	r24, 0x18	; 24
    173c:	80 83       	st	Z, r24
    173e:	08 95       	ret

00001740 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1740:	0e 94 76 0b 	call	0x16ec	; 0x16ec <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1744:	60 e3       	ldi	r22, 0x30	; 48
    1746:	78 e0       	ldi	r23, 0x08	; 8
    1748:	8c e3       	ldi	r24, 0x3C	; 60
    174a:	98 e0       	ldi	r25, 0x08	; 8
    174c:	0e 94 be 24 	call	0x497c	; 0x497c <fdevopen>
    1750:	90 93 7b 06 	sts	0x067B, r25
    1754:	80 93 7a 06 	sts	0x067A, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1758:	60 e3       	ldi	r22, 0x30	; 48
    175a:	78 e0       	ldi	r23, 0x08	; 8
    175c:	8c e3       	ldi	r24, 0x3C	; 60
    175e:	98 e0       	ldi	r25, 0x08	; 8
    1760:	0e 94 be 24 	call	0x497c	; 0x497c <fdevopen>
    1764:	90 93 79 06 	sts	0x0679, r25
    1768:	80 93 78 06 	sts	0x0678, r24
    176c:	08 95       	ret

0000176e <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    176e:	80 91 c8 00 	lds	r24, 0x00C8
    1772:	87 ff       	sbrs	r24, 7
    1774:	fc cf       	rjmp	.-8      	; 0x176e <getc1>
    1776:	80 91 c8 00 	lds	r24, 0x00C8
    177a:	8f 77       	andi	r24, 0x7F	; 127
    177c:	80 93 c8 00 	sts	0x00C8, r24
    1780:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1784:	08 95       	ret

00001786 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	c9 f7       	brne	.-14     	; 0x1786 <halWait>

} // halWait
    1794:	08 95       	ret

00001796 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1796:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>

0000179a <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    179a:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__eewr_byte_m128rfa1>
}
    179e:	08 95       	ret

000017a0 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    17b6:	f8 2e       	mov	r15, r24
    17b8:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    17c2:	e8 2e       	mov	r14, r24
    17c4:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    17ce:	08 2f       	mov	r16, r24
    17d0:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    17da:	18 2f       	mov	r17, r24
    17dc:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    17e6:	9e 2d       	mov	r25, r14
    17e8:	9f 0d       	add	r25, r15
ct+=buf[2];
    17ea:	90 0f       	add	r25, r16
ct+=buf[3];
    17ec:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    17ee:	89 13       	cpse	r24, r25
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <read_eeprom_mac_address+0x56>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	08 95       	ret

00001806 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    180c:	85 e0       	ldi	r24, 0x05	; 5
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    1814:	88 83       	st	Y, r24
return NRK_OK;
}
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    181e:	fc 01       	movw	r30, r24
    1820:	60 81       	ld	r22, Z
    1822:	86 e0       	ldi	r24, 0x06	; 6
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	08 95       	ret

0000182e <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1834:	86 e0       	ldi	r24, 0x06	; 6
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    183c:	88 83       	st	Y, r24
  return NRK_OK;
}
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	8c 01       	movw	r16, r24
    1850:	c8 e0       	ldi	r28, 0x08	; 8
    1852:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    185a:	f8 01       	movw	r30, r16
    185c:	81 93       	st	Z+, r24
    185e:	8f 01       	movw	r16, r30
    1860:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1862:	c8 31       	cpi	r28, 0x18	; 24
    1864:	d1 05       	cpc	r29, r1
    1866:	b1 f7       	brne	.-20     	; 0x1854 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	8c 01       	movw	r16, r24
    187e:	c8 e0       	ldi	r28, 0x08	; 8
    1880:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1882:	f8 01       	movw	r30, r16
    1884:	61 91       	ld	r22, Z+
    1886:	8f 01       	movw	r16, r30
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__eewr_byte_m128rfa1>
    188e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1890:	c8 31       	cpi	r28, 0x18	; 24
    1892:	d1 05       	cpc	r29, r1
    1894:	b1 f7       	brne	.-20     	; 0x1882 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    18a8:	87 e0       	ldi	r24, 0x07	; 7
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__eerd_byte_m128rfa1>
    18b0:	88 83       	st	Y, r24
  return NRK_OK;
}
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    18ba:	fc 01       	movw	r30, r24
    18bc:	60 81       	ld	r22, Z
    18be:	87 e0       	ldi	r24, 0x07	; 7
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	08 95       	ret

000018ca <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    18ca:	f8 94       	cli
    18cc:	08 95       	ret

000018ce <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    18ce:	78 94       	sei
    18d0:	08 95       	ret

000018d2 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    18d2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    18d6:	ff cf       	rjmp	.-2      	; 0x18d6 <nrk_halt+0x4>

000018d8 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	a3 97       	sbiw	r28, 0x23	; 35
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    18ec:	0e 94 14 11 	call	0x2228	; 0x2228 <nrk_signal_create>
    18f0:	80 93 4b 06 	sts	0x064B, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    18f4:	8f 3f       	cpi	r24, 0xFF	; 255
    18f6:	21 f4       	brne	.+8      	; 0x1900 <nrk_init+0x28>
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	8e e0       	ldi	r24, 0x0E	; 14
    18fc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1900:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1904:	80 ff       	sbrs	r24, 0
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <nrk_init+0x38>
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	86 e0       	ldi	r24, 0x06	; 6
    190c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1910:	10 92 4e 06 	sts	0x064E, r1
    nrk_cur_task_TCB = NULL;
    1914:	10 92 5c 06 	sts	0x065C, r1
    1918:	10 92 5b 06 	sts	0x065B, r1
    
    nrk_high_ready_TCB = NULL;
    191c:	10 92 4d 06 	sts	0x064D, r1
    1920:	10 92 4c 06 	sts	0x064C, r1
    nrk_high_ready_prio = 0; 
    1924:	10 92 5d 06 	sts	0x065D, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1928:	10 92 5a 06 	sts	0x065A, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	80 93 47 06 	sts	0x0647, r24
    nrk_sem_list[i].value=-1;
    1932:	80 93 49 06 	sts	0x0649, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1936:	80 93 48 06 	sts	0x0648, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    193a:	93 e6       	ldi	r25, 0x63	; 99
    193c:	90 93 a3 05 	sts	0x05A3, r25
        nrk_task_TCB[i].task_ID = -1; 
    1940:	80 93 a1 05 	sts	0x05A1, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1944:	90 93 ce 05 	sts	0x05CE, r25
        nrk_task_TCB[i].task_ID = -1; 
    1948:	80 93 cc 05 	sts	0x05CC, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    194c:	90 93 f9 05 	sts	0x05F9, r25
        nrk_task_TCB[i].task_ID = -1; 
    1950:	80 93 f7 05 	sts	0x05F7, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1954:	90 93 24 06 	sts	0x0624, r25
        nrk_task_TCB[i].task_ID = -1; 
    1958:	80 93 22 06 	sts	0x0622, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    195c:	23 e6       	ldi	r18, 0x63	; 99
    195e:	36 e0       	ldi	r19, 0x06	; 6
    1960:	30 93 62 06 	sts	0x0662, r19
    1964:	20 93 61 06 	sts	0x0661, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1968:	8e e5       	ldi	r24, 0x5E	; 94
    196a:	96 e0       	ldi	r25, 0x06	; 6
    196c:	90 93 65 06 	sts	0x0665, r25
    1970:	80 93 64 06 	sts	0x0664, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1974:	48 e6       	ldi	r20, 0x68	; 104
    1976:	56 e0       	ldi	r21, 0x06	; 6
    1978:	50 93 67 06 	sts	0x0667, r21
    197c:	40 93 66 06 	sts	0x0666, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1980:	30 93 6a 06 	sts	0x066A, r19
    1984:	20 93 69 06 	sts	0x0669, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1988:	2d e6       	ldi	r18, 0x6D	; 109
    198a:	36 e0       	ldi	r19, 0x06	; 6
    198c:	30 93 6c 06 	sts	0x066C, r19
    1990:	20 93 6b 06 	sts	0x066B, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1994:	50 93 6f 06 	sts	0x066F, r21
    1998:	40 93 6e 06 	sts	0x066E, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    199c:	42 e7       	ldi	r20, 0x72	; 114
    199e:	56 e0       	ldi	r21, 0x06	; 6
    19a0:	50 93 71 06 	sts	0x0671, r21
    19a4:	40 93 70 06 	sts	0x0670, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    19a8:	30 93 74 06 	sts	0x0674, r19
    19ac:	20 93 73 06 	sts	0x0673, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    19b0:	10 92 60 06 	sts	0x0660, r1
    19b4:	10 92 5f 06 	sts	0x065F, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    19b8:	10 92 76 06 	sts	0x0676, r1
    19bc:	10 92 75 06 	sts	0x0675, r1
	_head_node = NULL;
    19c0:	10 92 51 06 	sts	0x0651, r1
    19c4:	10 92 50 06 	sts	0x0650, r1
	_free_node = &_nrk_readyQ[0];
    19c8:	90 93 98 05 	sts	0x0598, r25
    19cc:	80 93 97 05 	sts	0x0597, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    19d0:	6c e8       	ldi	r22, 0x8C	; 140
    19d2:	7a e1       	ldi	r23, 0x1A	; 26
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 95 21 	call	0x432a	; 0x432a <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	64 ec       	ldi	r22, 0xC4	; 196
    19e2:	74 e0       	ldi	r23, 0x04	; 4
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	0e 94 99 21 	call	0x4332	; 0x4332 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    19ec:	85 e5       	ldi	r24, 0x55	; 85
    19ee:	80 93 c4 04 	sts	0x04C4, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    19f2:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    19f4:	1c 86       	std	Y+12, r1	; 0x0c
    19f6:	1d 86       	std	Y+13, r1	; 0x0d
    19f8:	1e 86       	std	Y+14, r1	; 0x0e
    19fa:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    19fc:	18 8a       	std	Y+16, r1	; 0x10
    19fe:	19 8a       	std	Y+17, r1	; 0x11
    1a00:	1a 8a       	std	Y+18, r1	; 0x12
    1a02:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1a04:	1c 8a       	std	Y+20, r1	; 0x14
    1a06:	1d 8a       	std	Y+21, r1	; 0x15
    1a08:	1e 8a       	std	Y+22, r1	; 0x16
    1a0a:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1a0c:	18 8e       	std	Y+24, r1	; 0x18
    1a0e:	19 8e       	std	Y+25, r1	; 0x19
    1a10:	1a 8e       	std	Y+26, r1	; 0x1a
    1a12:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1a14:	1c 8e       	std	Y+28, r1	; 0x1c
    1a16:	1d 8e       	std	Y+29, r1	; 0x1d
    1a18:	1e 8e       	std	Y+30, r1	; 0x1e
    1a1a:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1a1c:	18 a2       	std	Y+32, r1	; 0x20
    1a1e:	19 a2       	std	Y+33, r1	; 0x21
    1a20:	1a a2       	std	Y+34, r1	; 0x22
    1a22:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1a28:	92 e0       	ldi	r25, 0x02	; 2
    1a2a:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1a2c:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <nrk_activate_task>
	
}
    1a36:	a3 96       	adiw	r28, 0x23	; 35
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <nrk_start>:




void nrk_start (void)
{
    1a48:	c1 ea       	ldi	r28, 0xA1	; 161
    1a4a:	d5 e0       	ldi	r29, 0x05	; 5
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1a4c:	f1 2c       	mov	r15, r1
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1a4e:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	d8 12       	cpse	r13, r24
    1a54:	21 c0       	rjmp	.+66     	; 0x1a98 <nrk_start+0x50>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1a56:	f3 94       	inc	r15
    1a58:	ab 96       	adiw	r28, 0x2b	; 43
    1a5a:	94 e0       	ldi	r25, 0x04	; 4
    1a5c:	f9 12       	cpse	r15, r25
    1a5e:	f7 cf       	rjmp	.-18     	; 0x1a4e <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1a60:	0e 94 23 14 	call	0x2846	; 0x2846 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1a64:	9b e2       	ldi	r25, 0x2B	; 43
    1a66:	89 02       	muls	r24, r25
    1a68:	f0 01       	movw	r30, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	e7 56       	subi	r30, 0x67	; 103
    1a6e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a70:	82 85       	ldd	r24, Z+10	; 0x0a
    1a72:	80 93 5d 06 	sts	0x065D, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1a76:	f0 93 5c 06 	sts	0x065C, r31
    1a7a:	e0 93 5b 06 	sts	0x065B, r30
    1a7e:	f0 93 4d 06 	sts	0x064D, r31
    1a82:	e0 93 4c 06 	sts	0x064C, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1a86:	80 93 4e 06 	sts	0x064E, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1a8a:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_target_start>
    nrk_stack_pointer_init(); 
    1a8e:	0e 94 07 22 	call	0x440e	; 0x440e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1a92:	0e 94 21 22 	call	0x4442	; 0x4442 <nrk_start_high_ready_task>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <nrk_start+0x78>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    1a98:	01 ea       	ldi	r16, 0xA1	; 161
    1a9a:	15 e0       	ldi	r17, 0x05	; 5
    1a9c:	e1 2c       	mov	r14, r1
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1a9e:	fe 14       	cp	r15, r14
    1aa0:	41 f0       	breq	.+16     	; 0x1ab2 <nrk_start+0x6a>
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	80 81       	ld	r24, Z
    1aa6:	d8 12       	cpse	r13, r24
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <nrk_start+0x6a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1aaa:	6d 2d       	mov	r22, r13
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1ab2:	e3 94       	inc	r14
    1ab4:	05 5d       	subi	r16, 0xD5	; 213
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	f4 e0       	ldi	r31, 0x04	; 4
    1aba:	ef 12       	cpse	r14, r31
    1abc:	f0 cf       	rjmp	.-32     	; 0x1a9e <nrk_start+0x56>
    1abe:	cb cf       	rjmp	.-106    	; 0x1a56 <nrk_start+0xe>
    1ac0:	ff cf       	rjmp	.-2      	; 0x1ac0 <nrk_start+0x78>

00001ac2 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	1f 92       	push	r1
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	5c 01       	movw	r10, r24
    1ade:	6b 01       	movw	r12, r22
    1ae0:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	19 96       	adiw	r26, 0x09	; 9
    1ae6:	8c 91       	ld	r24, X
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    1aee:	80 91 4a 06 	lds	r24, 0x064A
    1af2:	8c 93       	st	X, r24
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1af6:	f5 01       	movw	r30, r10
    1af8:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1afa:	80 91 4a 06 	lds	r24, 0x064A
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	20 f0       	brcs	.+8      	; 0x1b0a <nrk_TCB_init+0x48>
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	87 e0       	ldi	r24, 0x07	; 7
    1b06:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1b0a:	d5 01       	movw	r26, r10
    1b0c:	19 96       	adiw	r26, 0x09	; 9
    1b0e:	8c 91       	ld	r24, X
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <nrk_TCB_init+0x5c>
    1b14:	80 91 4a 06 	lds	r24, 0x064A
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	80 93 4a 06 	sts	0x064A, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1b1e:	80 91 4a 06 	lds	r24, 0x064A
    1b22:	81 11       	cpse	r24, r1
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <nrk_TCB_init+0x6a>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 4a 06 	sts	0x064A, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1b2c:	f5 01       	movw	r30, r10
    1b2e:	30 81       	ld	r19, Z
    1b30:	2b e2       	ldi	r18, 0x2B	; 43
    1b32:	32 03       	mulsu	r19, r18
    1b34:	f0 01       	movw	r30, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	e7 56       	subi	r30, 0x67	; 103
    1b3a:	fa 4f       	sbci	r31, 0xFA	; 250
    1b3c:	d1 82       	std	Z+1, r13	; 0x01
    1b3e:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1b40:	d5 01       	movw	r26, r10
    1b42:	18 96       	adiw	r26, 0x08	; 8
    1b44:	8c 91       	ld	r24, X
    1b46:	18 97       	sbiw	r26, 0x08	; 8
    1b48:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1b4a:	3c 91       	ld	r19, X
    1b4c:	32 03       	mulsu	r19, r18
    1b4e:	f0 01       	movw	r30, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	e7 56       	subi	r30, 0x67	; 103
    1b54:	fa 4f       	sbci	r31, 0xFA	; 250
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1b5a:	3c 91       	ld	r19, X
    1b5c:	32 03       	mulsu	r19, r18
    1b5e:	f0 01       	movw	r30, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	e7 56       	subi	r30, 0x67	; 103
    1b64:	fa 4f       	sbci	r31, 0xFA	; 250
    1b66:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1b68:	0c 91       	ld	r16, X
    1b6a:	02 03       	mulsu	r16, r18
    1b6c:	80 01       	movw	r16, r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	07 56       	subi	r16, 0x67	; 103
    1b72:	1a 4f       	sbci	r17, 0xFA	; 250
    1b74:	f8 01       	movw	r30, r16
    1b76:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1b78:	c5 01       	movw	r24, r10
    1b7a:	0b 96       	adiw	r24, 0x0b	; 11
    1b7c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_nrk_time_to_ticks_long>
    1b80:	d8 01       	movw	r26, r16
    1b82:	91 96       	adiw	r26, 0x21	; 33
    1b84:	6d 93       	st	X+, r22
    1b86:	7d 93       	st	X+, r23
    1b88:	8d 93       	st	X+, r24
    1b8a:	9c 93       	st	X, r25
    1b8c:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1b8e:	f5 01       	movw	r30, r10
    1b90:	83 85       	ldd	r24, Z+11	; 0x0b
    1b92:	94 85       	ldd	r25, Z+12	; 0x0c
    1b94:	a5 85       	ldd	r26, Z+13	; 0x0d
    1b96:	b6 85       	ldd	r27, Z+14	; 0x0e
    1b98:	88 33       	cpi	r24, 0x38	; 56
    1b9a:	99 48       	sbci	r25, 0x89	; 137
    1b9c:	a1 44       	sbci	r26, 0x41	; 65
    1b9e:	b1 05       	cpc	r27, r1
    1ba0:	28 f0       	brcs	.+10     	; 0x1bac <nrk_TCB_init+0xea>
    1ba2:	d5 01       	movw	r26, r10
    1ba4:	6c 91       	ld	r22, X
    1ba6:	86 e1       	ldi	r24, 0x16	; 22
    1ba8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1bac:	f5 01       	movw	r30, r10
    1bae:	00 81       	ld	r16, Z
    1bb0:	11 27       	eor	r17, r17
    1bb2:	07 fd       	sbrc	r16, 7
    1bb4:	10 95       	com	r17
    1bb6:	c5 01       	movw	r24, r10
    1bb8:	4b 96       	adiw	r24, 0x1b	; 27
    1bba:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_nrk_time_to_ticks_long>
    1bbe:	4b e2       	ldi	r20, 0x2B	; 43
    1bc0:	40 9f       	mul	r20, r16
    1bc2:	f0 01       	movw	r30, r0
    1bc4:	41 9f       	mul	r20, r17
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	e7 56       	subi	r30, 0x67	; 103
    1bcc:	fa 4f       	sbci	r31, 0xFA	; 250
    1bce:	65 8b       	std	Z+21, r22	; 0x15
    1bd0:	76 8b       	std	Z+22, r23	; 0x16
    1bd2:	87 8b       	std	Z+23, r24	; 0x17
    1bd4:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1bd6:	d5 01       	movw	r26, r10
    1bd8:	2c 91       	ld	r18, X
    1bda:	24 03       	mulsu	r18, r20
    1bdc:	60 01       	movw	r12, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	f6 01       	movw	r30, r12
    1be2:	e7 56       	subi	r30, 0x67	; 103
    1be4:	fa 4f       	sbci	r31, 0xFA	; 250
    1be6:	6f 01       	movw	r12, r30
    1be8:	05 89       	ldd	r16, Z+21	; 0x15
    1bea:	16 89       	ldd	r17, Z+22	; 0x16
    1bec:	27 89       	ldd	r18, Z+23	; 0x17
    1bee:	30 8d       	ldd	r19, Z+24	; 0x18
    1bf0:	81 a1       	ldd	r24, Z+33	; 0x21
    1bf2:	92 a1       	ldd	r25, Z+34	; 0x22
    1bf4:	a3 a1       	ldd	r26, Z+35	; 0x23
    1bf6:	b4 a1       	ldd	r27, Z+36	; 0x24
    1bf8:	08 0f       	add	r16, r24
    1bfa:	19 1f       	adc	r17, r25
    1bfc:	2a 1f       	adc	r18, r26
    1bfe:	3b 1f       	adc	r19, r27
    1c00:	01 8f       	std	Z+25, r16	; 0x19
    1c02:	12 8f       	std	Z+26, r17	; 0x1a
    1c04:	23 8f       	std	Z+27, r18	; 0x1b
    1c06:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1c08:	c5 01       	movw	r24, r10
    1c0a:	43 96       	adiw	r24, 0x13	; 19
    1c0c:	49 83       	std	Y+1, r20	; 0x01
    1c0e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_nrk_time_to_ticks_long>
    1c12:	f6 01       	movw	r30, r12
    1c14:	65 a3       	std	Z+37, r22	; 0x25
    1c16:	76 a3       	std	Z+38, r23	; 0x26
    1c18:	87 a3       	std	Z+39, r24	; 0x27
    1c1a:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1c1c:	d5 01       	movw	r26, r10
    1c1e:	2c 91       	ld	r18, X
    1c20:	49 81       	ldd	r20, Y+1	; 0x01
    1c22:	24 03       	mulsu	r18, r20
    1c24:	f0 01       	movw	r30, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	e7 56       	subi	r30, 0x67	; 103
    1c2a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c2c:	85 a1       	ldd	r24, Z+37	; 0x25
    1c2e:	96 a1       	ldd	r25, Z+38	; 0x26
    1c30:	a7 a1       	ldd	r26, Z+39	; 0x27
    1c32:	b0 a5       	ldd	r27, Z+40	; 0x28
    1c34:	85 8f       	std	Z+29, r24	; 0x1d
    1c36:	96 8f       	std	Z+30, r25	; 0x1e
    1c38:	a7 8f       	std	Z+31, r26	; 0x1f
    1c3a:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	92 a7       	std	Z+42, r25	; 0x2a
    1c42:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1c44:	f3 82       	std	Z+3, r15	; 0x03
    1c46:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1c4c:	0f 90       	pop	r0
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	bf 90       	pop	r11
    1c60:	af 90       	pop	r10
    1c62:	08 95       	ret

00001c64 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1c64:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <_nrk_scheduler>

00001c68 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1c68:	85 e6       	ldi	r24, 0x65	; 101
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	08 95       	ret

00001c6e <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    1c6e:	e0 91 5b 06 	lds	r30, 0x065B
    1c72:	f0 91 5c 06 	lds	r31, 0x065C
    1c76:	84 87       	std	Z+12, r24	; 0x0c
    1c78:	08 95       	ret

00001c7a <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1c7a:	e0 91 5b 06 	lds	r30, 0x065B
    1c7e:	f0 91 5c 06 	lds	r31, 0x065C
}
    1c82:	84 85       	ldd	r24, Z+12	; 0x0c
    1c84:	08 95       	ret

00001c86 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    1c86:	20 91 c3 04 	lds	r18, 0x04C3
    1c8a:	22 23       	and	r18, r18
    1c8c:	41 f0       	breq	.+16     	; 0x1c9e <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    1c8e:	fb 01       	movw	r30, r22
    1c90:	20 83       	st	Z, r18
    *task_id = error_task;
    1c92:	20 91 ba 03 	lds	r18, 0x03BA
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18
    return 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    1ca0:	08 95       	ret

00001ca2 <pause>:
    }

}

void pause()
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	1f 92       	push	r1
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	84 36       	cpi	r24, 0x64	; 100
    1cb2:	40 f4       	brcc	.+16     	; 0x1cc4 <pause+0x22>
        nrk_spin_wait_us (2000);
    1cb4:	80 ed       	ldi	r24, 0xD0	; 208
    1cb6:	97 e0       	ldi	r25, 0x07	; 7
    1cb8:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	f5 cf       	rjmp	.-22     	; 0x1cae <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1cc4:	0f 90       	pop	r0
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret

00001ccc <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
    pause();
    1cd4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
    pause();
    1cd8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
    pause();
    1cdc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
    nrk_led_clr(GREEN_LED);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    pause();
    1ce8:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <pause>

00001cec <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
    pause();
    1cf4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
    nrk_led_clr(GREEN_LED);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    pause();
    1d00:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <pause>

00001d04 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <blink_morse_code_error+0xc>
    1d10:	1f 92       	push	r1
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1d16:	1f 92       	push	r1
    1d18:	8f 93       	push	r24
    1d1a:	8a e6       	ldi	r24, 0x6A	; 106
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	9f 93       	push	r25
    1d20:	8f 93       	push	r24
    1d22:	8e 01       	movw	r16, r28
    1d24:	0f 5f       	subi	r16, 0xFF	; 255
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	1f 93       	push	r17
    1d2a:	0f 93       	push	r16
    1d2c:	0e 94 80 25 	call	0x4b00	; 0x4b00 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	f8 01       	movw	r30, r16
    1d40:	01 90       	ld	r0, Z+
    1d42:	00 20       	and	r0, r0
    1d44:	e9 f7       	brne	.-6      	; 0x1d40 <blink_morse_code_error+0x3c>
    1d46:	31 97       	sbiw	r30, 0x01	; 1
    1d48:	e0 1b       	sub	r30, r16
    1d4a:	f1 0b       	sbc	r31, r17
    1d4c:	8f 2d       	mov	r24, r15
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	8e 17       	cp	r24, r30
    1d52:	9f 07       	cpc	r25, r31
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <blink_morse_code_error+0x54>
    1d56:	5c c0       	rjmp	.+184    	; 0x1e10 <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    1d58:	f8 01       	movw	r30, r16
    1d5a:	e8 0f       	add	r30, r24
    1d5c:	f9 1f       	adc	r31, r25
    1d5e:	80 81       	ld	r24, Z
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	fc 01       	movw	r30, r24
    1d64:	f0 97       	sbiw	r30, 0x30	; 48
    1d66:	ea 30       	cpi	r30, 0x0A	; 10
    1d68:	f1 05       	cpc	r31, r1
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <blink_morse_code_error+0x6a>
    1d6c:	49 c0       	rjmp	.+146    	; 0x1e00 <blink_morse_code_error+0xfc>
    1d6e:	e6 54       	subi	r30, 0x46	; 70
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
        {
        case '0':
            blink_dash();
    1d76:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1d7c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dash();
    1d80:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1d84:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1d88:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1d8c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            break;
    1d90:	37 c0       	rjmp	.+110    	; 0x1e00 <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    1d92:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1d96:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1d9a:	f4 cf       	rjmp	.-24     	; 0x1d84 <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1d9c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1da0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1da4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1da8:	ef cf       	rjmp	.-34     	; 0x1d88 <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1daa:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1dae:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1db2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            blink_dot();
    1db6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1dba:	e8 cf       	rjmp	.-48     	; 0x1d8c <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1dbc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1dc2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dot();
    1dc6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1dcc:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1dd0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dot();
    1dd4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1dd8:	06 c0       	rjmp	.+12     	; 0x1de6 <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1dda:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1dde:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1de2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dot();
    1de6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1dec:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1df0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1df4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dash();
    1df8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <blink_dash>
            blink_dot();
    1dfc:	0e 94 76 0e 	call	0x1cec	; 0x1cec <blink_dot>
            break;
        }
        pause();
    1e00:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
        pause();
    1e04:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
        pause();
    1e08:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1e0c:	f3 94       	inc	r15
    1e0e:	97 cf       	rjmp	.-210    	; 0x1d3e <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	08 95       	ret

00001e22 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    int8_t t=0,i=0;
    if (error_num == 0)
    1e26:	80 91 c3 04 	lds	r24, 0x04C3
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <nrk_error_print+0xe>
    1e2e:	c6 c0       	rjmp	.+396    	; 0x1fbc <nrk_error_print+0x19a>
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    1e30:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    1e34:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1e38:	80 ee       	ldi	r24, 0xE0	; 224
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <nrk_kprintf>
        printf ("%d", error_task);
    1e40:	80 91 ba 03 	lds	r24, 0x03BA
    1e44:	1f 92       	push	r1
    1e46:	8f 93       	push	r24
    1e48:	8a e6       	ldi	r24, 0x6A	; 106
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	9f 93       	push	r25
    1e4e:	8f 93       	push	r24
    1e50:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
        nrk_kprintf (PSTR ("): "));
    1e54:	8c ed       	ldi	r24, 0xDC	; 220
    1e56:	93 e0       	ldi	r25, 0x03	; 3
    1e58:	0e 94 59 08 	call	0x10b2	; 0x10b2 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	80 91 c3 04 	lds	r24, 0x04C3
    1e68:	88 31       	cpi	r24, 0x18	; 24
    1e6a:	10 f0       	brcs	.+4      	; 0x1e70 <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1e6c:	10 92 c3 04 	sts	0x04C3, r1
        switch (error_num)
    1e70:	80 91 c3 04 	lds	r24, 0x04C3
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	31 97       	sbiw	r30, 0x01	; 1
    1e7a:	e6 31       	cpi	r30, 0x16	; 22
    1e7c:	f1 05       	cpc	r31, r1
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <nrk_error_print+0x60>
    1e80:	46 c0       	rjmp	.+140    	; 0x1f0e <nrk_error_print+0xec>
    1e82:	ec 53       	subi	r30, 0x3C	; 60
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	0c 94 85 24 	jmp	0x490a	; 0x490a <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1e8a:	80 ea       	ldi	r24, 0xA0	; 160
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	41 c0       	rjmp	.+130    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1e90:	89 e7       	ldi	r24, 0x79	; 121
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	3e c0       	rjmp	.+124    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1e96:	85 e6       	ldi	r24, 0x65	; 101
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	3b c0       	rjmp	.+118    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1e9c:	8f e4       	ldi	r24, 0x4F	; 79
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	38 c0       	rjmp	.+112    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1ea2:	84 e3       	ldi	r24, 0x34	; 52
    1ea4:	93 e0       	ldi	r25, 0x03	; 3
    1ea6:	35 c0       	rjmp	.+106    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1ea8:	8e e1       	ldi	r24, 0x1E	; 30
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	32 c0       	rjmp	.+100    	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1eae:	86 e0       	ldi	r24, 0x06	; 6
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	2f c0       	rjmp	.+94     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1eb4:	83 ef       	ldi	r24, 0xF3	; 243
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	2c c0       	rjmp	.+88     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1eba:	80 ee       	ldi	r24, 0xE0	; 224
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	29 c0       	rjmp	.+82     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1ec0:	82 ec       	ldi	r24, 0xC2	; 194
    1ec2:	92 e0       	ldi	r25, 0x02	; 2
    1ec4:	26 c0       	rjmp	.+76     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1ec6:	8d e9       	ldi	r24, 0x9D	; 157
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	23 c0       	rjmp	.+70     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1ecc:	81 e9       	ldi	r24, 0x91	; 145
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	20 c0       	rjmp	.+64     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1ed2:	86 e7       	ldi	r24, 0x76	; 118
    1ed4:	92 e0       	ldi	r25, 0x02	; 2
    1ed6:	1d c0       	rjmp	.+58     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1ed8:	87 e6       	ldi	r24, 0x67	; 103
    1eda:	92 e0       	ldi	r25, 0x02	; 2
    1edc:	1a c0       	rjmp	.+52     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1ede:	83 e5       	ldi	r24, 0x53	; 83
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	17 c0       	rjmp	.+46     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1ee4:	82 e4       	ldi	r24, 0x42	; 66
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1eea:	8e e2       	ldi	r24, 0x2E	; 46
    1eec:	92 e0       	ldi	r25, 0x02	; 2
    1eee:	11 c0       	rjmp	.+34     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1ef0:	8e e0       	ldi	r24, 0x0E	; 14
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	0e c0       	rjmp	.+28     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1ef6:	86 ef       	ldi	r24, 0xF6	; 246
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    1efc:	8b ed       	ldi	r24, 0xDB	; 219
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    1f02:	8a ec       	ldi	r24, 0xCA	; 202
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <nrk_error_print+0xf0>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    1f08:	8b eb       	ldi	r24, 0xBB	; 187
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <nrk_error_print+0xf0>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    1f0e:	84 eb       	ldi	r24, 0xB4	; 180
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 59 08 	call	0x10b2	; 0x10b2 <nrk_kprintf>
        }
        putchar ('\r');
    1f16:	60 91 7a 06 	lds	r22, 0x067A
    1f1a:	70 91 7b 06 	lds	r23, 0x067B
    1f1e:	8d e0       	ldi	r24, 0x0D	; 13
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
        putchar ('\n');
    1f26:	60 91 7a 06 	lds	r22, 0x067A
    1f2a:	70 91 7b 06 	lds	r23, 0x067B
    1f2e:	8a e0       	ldi	r24, 0x0A	; 10
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1f36:	c0 e0       	ldi	r28, 0x00	; 0
    1f38:	c4 31       	cpi	r28, 0x14	; 20
    1f3a:	04 f5       	brge	.+64     	; 0x1f7c <nrk_error_print+0x15a>
        {
            nrk_led_set (2);
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
            nrk_led_clr (3);
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    1f4c:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f4e:	88 ee       	ldi	r24, 0xE8	; 232
    1f50:	93 e0       	ldi	r25, 0x03	; 3
    1f52:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nrk_spin_wait_us>
    1f56:	d1 50       	subi	r29, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1f58:	d1 f7       	brne	.-12     	; 0x1f4e <nrk_error_print+0x12c>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
            nrk_led_clr (2);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    1f6a:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f6c:	88 ee       	ldi	r24, 0xE8	; 232
    1f6e:	93 e0       	ldi	r25, 0x03	; 3
    1f70:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nrk_spin_wait_us>
    1f74:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1f76:	d1 f7       	brne	.-12     	; 0x1f6c <nrk_error_print+0x14a>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1f78:	cf 5f       	subi	r28, 0xFF	; 255
    1f7a:	de cf       	rjmp	.-68     	; 0x1f38 <nrk_error_print+0x116>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
        nrk_led_clr (2);
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
        blink_morse_code_error( error_task );
    1f8c:	80 91 ba 03 	lds	r24, 0x03BA
    1f90:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <blink_morse_code_error>
        pause();
    1f94:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
        nrk_led_set(2);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
        pause();
    1fa0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
        nrk_led_clr(2);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
        pause();
    1fac:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <pause>
        blink_morse_code_error( error_num);
    1fb0:	80 91 c3 04 	lds	r24, 0x04C3
    1fb4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1fb8:	c0 e0       	ldi	r28, 0x00	; 0
        nrk_led_set(2);
        pause();
        nrk_led_clr(2);
        pause();
        blink_morse_code_error( error_num);
    }
    1fba:	c0 cf       	rjmp	.-128    	; 0x1f3c <nrk_error_print+0x11a>

#endif  /*  */
    error_num = 0;
    return t;
}
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    1fc4:	80 93 c3 04 	sts	0x04C3, r24
    error_task = nrk_cur_task_TCB->task_ID;
    1fc8:	e0 91 5b 06 	lds	r30, 0x065B
    1fcc:	f0 91 5c 06 	lds	r31, 0x065C
    1fd0:	80 85       	ldd	r24, Z+8	; 0x08
    1fd2:	80 93 ba 03 	sts	0x03BA, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1fd6:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <nrk_error_print>

00001fda <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    1fda:	18 2f       	mov	r17, r24
    1fdc:	06 2f       	mov	r16, r22
    error_num = n;
    1fde:	80 93 c3 04 	sts	0x04C3, r24
    error_task = task;
    1fe2:	60 93 ba 03 	sts	0x03BA, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1fe6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1fea:	c0 e0       	ldi	r28, 0x00	; 0
    1fec:	c4 31       	cpi	r28, 0x14	; 20
    1fee:	00 f5       	brcc	.+64     	; 0x2030 <nrk_kernel_error_add+0x56>
        {
            nrk_led_set (2);
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
            nrk_led_clr (3);
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    2000:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2002:	88 ee       	ldi	r24, 0xE8	; 232
    2004:	93 e0       	ldi	r25, 0x03	; 3
    2006:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nrk_spin_wait_us>
    200a:	d1 50       	subi	r29, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    200c:	d1 f7       	brne	.-12     	; 0x2002 <nrk_kernel_error_add+0x28>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 4e 0b 	call	0x169c	; 0x169c <nrk_led_set>
            nrk_led_clr (2);
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    201e:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2020:	88 ee       	ldi	r24, 0xE8	; 232
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <nrk_spin_wait_us>
    2028:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    202a:	d1 f7       	brne	.-12     	; 0x2020 <nrk_kernel_error_add+0x46>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    202c:	cf 5f       	subi	r28, 0xFF	; 255
    202e:	de cf       	rjmp	.-68     	; 0x1fec <nrk_kernel_error_add+0x12>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2030:	83 e0       	ldi	r24, 0x03	; 3
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
        nrk_led_clr (2);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
        blink_morse_code_error( task );
    2040:	80 2f       	mov	r24, r16
    2042:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <blink_morse_code_error>
        blink_morse_code_error( n );
    2046:	81 2f       	mov	r24, r17
    2048:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    204c:	c0 e0       	ldi	r28, 0x00	; 0
        }
        nrk_led_clr (3);
        nrk_led_clr (2);
        blink_morse_code_error( task );
        blink_morse_code_error( n );
    }
    204e:	d0 cf       	rjmp	.-96     	; 0x1ff0 <nrk_kernel_error_add+0x16>

00002050 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2050:	6f 92       	push	r6
    2052:	7f 92       	push	r7
    2054:	8f 92       	push	r8
    2056:	9f 92       	push	r9
    2058:	af 92       	push	r10
    205a:	bf 92       	push	r11
    205c:	cf 92       	push	r12
    205e:	df 92       	push	r13
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    206c:	8c ee       	ldi	r24, 0xEC	; 236
    206e:	93 e0       	ldi	r25, 0x03	; 3
    2070:	0e 94 59 08 	call	0x10b2	; 0x10b2 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2074:	e0 91 5b 06 	lds	r30, 0x065B
    2078:	f0 91 5c 06 	lds	r31, 0x065C
    207c:	20 85       	ldd	r18, Z+8	; 0x08
    207e:	82 2f       	mov	r24, r18
    2080:	99 27       	eor	r25, r25
    2082:	87 fd       	sbrc	r24, 7
    2084:	90 95       	com	r25
    2086:	9f 93       	push	r25
    2088:	2f 93       	push	r18
    208a:	8d e6       	ldi	r24, 0x6D	; 109
    208c:	93 e0       	ldi	r25, 0x03	; 3
    208e:	9f 93       	push	r25
    2090:	8f 93       	push	r24
    2092:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2096:	e0 91 5b 06 	lds	r30, 0x065B
    209a:	f0 91 5c 06 	lds	r31, 0x065C
    209e:	c2 81       	ldd	r28, Z+2	; 0x02
    20a0:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	81 ea       	ldi	r24, 0xA1	; 161
    20a8:	93 e0       	ldi	r25, 0x03	; 3
    20aa:	9f 93       	push	r25
    20ac:	8f 93       	push	r24
    20ae:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    printf( "canary = %x ",*stkc );
    20b2:	88 81       	ld	r24, Y
    20b4:	1f 92       	push	r1
    20b6:	8f 93       	push	r24
    20b8:	86 e7       	ldi	r24, 0x76	; 118
    20ba:	93 e0       	ldi	r25, 0x03	; 3
    20bc:	9f 93       	push	r25
    20be:	8f 93       	push	r24
    20c0:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    20c4:	e0 91 5b 06 	lds	r30, 0x065B
    20c8:	f0 91 5c 06 	lds	r31, 0x065C
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    20cc:	81 81       	ldd	r24, Z+1	; 0x01
    20ce:	8f 93       	push	r24
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 93       	push	r24
    20d4:	83 e8       	ldi	r24, 0x83	; 131
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	9f 93       	push	r25
    20da:	8f 93       	push	r24
    20dc:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    20e0:	80 91 5c 06 	lds	r24, 0x065C
    20e4:	8f 93       	push	r24
    20e6:	80 91 5b 06 	lds	r24, 0x065B
    20ea:	8f 93       	push	r24
    20ec:	8d e8       	ldi	r24, 0x8D	; 141
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	9f 93       	push	r25
    20f2:	8f 93       	push	r24
    20f4:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    20f8:	c9 e9       	ldi	r28, 0x99	; 153
    20fa:	d5 e0       	ldi	r29, 0x05	; 5
    20fc:	ed b7       	in	r30, 0x3d	; 61
    20fe:	fe b7       	in	r31, 0x3e	; 62
    2100:	74 96       	adiw	r30, 0x14	; 20
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	fe bf       	out	0x3e, r31	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	ed bf       	out	0x3d, r30	; 61
    210c:	00 e0       	ldi	r16, 0x00	; 0
    210e:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2110:	8d e9       	ldi	r24, 0x9D	; 157
    2112:	68 2e       	mov	r6, r24
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2118:	96 e7       	ldi	r25, 0x76	; 118
    211a:	89 2e       	mov	r8, r25
    211c:	93 e0       	ldi	r25, 0x03	; 3
    211e:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2120:	23 e8       	ldi	r18, 0x83	; 131
    2122:	a2 2e       	mov	r10, r18
    2124:	23 e0       	ldi	r18, 0x03	; 3
    2126:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2128:	3d e8       	ldi	r19, 0x8D	; 141
    212a:	c3 2e       	mov	r12, r19
    212c:	33 e0       	ldi	r19, 0x03	; 3
    212e:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2130:	ea 80       	ldd	r14, Y+2	; 0x02
    2132:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2134:	ff 92       	push	r15
    2136:	ef 92       	push	r14
    2138:	1f 93       	push	r17
    213a:	0f 93       	push	r16
    213c:	7f 92       	push	r7
    213e:	6f 92       	push	r6
    2140:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
        printf( "canary = %x ",*stkc );
    2144:	f7 01       	movw	r30, r14
    2146:	80 81       	ld	r24, Z
    2148:	1f 92       	push	r1
    214a:	8f 93       	push	r24
    214c:	9f 92       	push	r9
    214e:	8f 92       	push	r8
    2150:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	8f 93       	push	r24
    2158:	88 81       	ld	r24, Y
    215a:	8f 93       	push	r24
    215c:	bf 92       	push	r11
    215e:	af 92       	push	r10
    2160:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	df 92       	push	r13
    216a:	cf 92       	push	r12
    216c:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    2170:	0f 5f       	subi	r16, 0xFF	; 255
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2176:	ed b7       	in	r30, 0x3d	; 61
    2178:	fe b7       	in	r31, 0x3e	; 62
    217a:	72 96       	adiw	r30, 0x12	; 18
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	fe bf       	out	0x3e, r31	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	ed bf       	out	0x3d, r30	; 61
    2186:	04 30       	cpi	r16, 0x04	; 4
    2188:	11 05       	cpc	r17, r1
    218a:	91 f6       	brne	.-92     	; 0x2130 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	08 95       	ret

000021aa <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    21ae:	e0 91 5b 06 	lds	r30, 0x065B
    21b2:	f0 91 5c 06 	lds	r31, 0x065C
    21b6:	c2 81       	ldd	r28, Z+2	; 0x02
    21b8:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    21ba:	88 81       	ld	r24, Y
    21bc:	85 35       	cpi	r24, 0x55	; 85
    21be:	39 f0       	breq	.+14     	; 0x21ce <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    21c0:	0e 94 28 10 	call	0x2050	; 0x2050 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    21ca:	85 e5       	ldi	r24, 0x55	; 85
    21cc:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    21ce:	e0 91 5b 06 	lds	r30, 0x065B
    21d2:	f0 91 5c 06 	lds	r31, 0x065C
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	81 15       	cp	r24, r1
    21dc:	92 44       	sbci	r25, 0x42	; 66
    21de:	38 f0       	brcs	.+14     	; 0x21ee <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    21e0:	0e 94 28 10 	call	0x2050	; 0x2050 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    21e4:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    21ea:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <nrk_error_add>




#endif
}
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    21f4:	2b e2       	ldi	r18, 0x2B	; 43
    21f6:	82 02       	muls	r24, r18
    21f8:	f0 01       	movw	r30, r0
    21fa:	11 24       	eor	r1, r1
    21fc:	e7 56       	subi	r30, 0x67	; 103
    21fe:	fa 4f       	sbci	r31, 0xFA	; 250
    2200:	a2 81       	ldd	r26, Z+2	; 0x02
    2202:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2204:	8c 91       	ld	r24, X
    2206:	85 35       	cpi	r24, 0x55	; 85
    2208:	19 f0       	breq	.+6      	; 0x2210 <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    220a:	85 e5       	ldi	r24, 0x55	; 85
    220c:	8c 93       	st	X, r24
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	81 15       	cp	r24, r1
    2216:	92 44       	sbci	r25, 0x42	; 66
    2218:	28 f0       	brcs	.+10     	; 0x2224 <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    221a:	82 e1       	ldi	r24, 0x12	; 18
    221c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <nrk_error_add>
        return NRK_ERROR;
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	08 95       	ret
    }
#endif
    return NRK_OK;
    2224:	81 e0       	ldi	r24, 0x01	; 1
}
    2226:	08 95       	ret

00002228 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    222c:	00 91 cc 03 	lds	r16, 0x03CC
    2230:	10 91 cd 03 	lds	r17, 0x03CD
    2234:	20 91 ce 03 	lds	r18, 0x03CE
    2238:	30 91 cf 03 	lds	r19, 0x03CF
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	b9 01       	movw	r22, r18
    2242:	a8 01       	movw	r20, r16
    2244:	08 2e       	mov	r0, r24
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <nrk_signal_create+0x28>
    2248:	76 95       	lsr	r23
    224a:	67 95       	ror	r22
    224c:	57 95       	ror	r21
    224e:	47 95       	ror	r20
    2250:	0a 94       	dec	r0
    2252:	d2 f7       	brpl	.-12     	; 0x2248 <nrk_signal_create+0x20>
    2254:	40 fd       	sbrc	r20, 0
    2256:	19 c0       	rjmp	.+50     	; 0x228a <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	08 2e       	mov	r0, r24
    2262:	04 c0       	rjmp	.+8      	; 0x226c <nrk_signal_create+0x44>
    2264:	44 0f       	add	r20, r20
    2266:	55 1f       	adc	r21, r21
    2268:	66 1f       	adc	r22, r22
    226a:	77 1f       	adc	r23, r23
    226c:	0a 94       	dec	r0
    226e:	d2 f7       	brpl	.-12     	; 0x2264 <nrk_signal_create+0x3c>
    2270:	40 2b       	or	r20, r16
    2272:	51 2b       	or	r21, r17
    2274:	62 2b       	or	r22, r18
    2276:	73 2b       	or	r23, r19
    2278:	40 93 cc 03 	sts	0x03CC, r20
    227c:	50 93 cd 03 	sts	0x03CD, r21
    2280:	60 93 ce 03 	sts	0x03CE, r22
    2284:	70 93 cf 03 	sts	0x03CF, r23
			return i;
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <nrk_signal_create+0x6c>
    228a:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	91 05       	cpc	r25, r1
    2290:	b9 f6       	brne	.-82     	; 0x2240 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2292:	8f ef       	ldi	r24, 0xFF	; 255


}
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    229a:	e0 91 5b 06 	lds	r30, 0x065B
    229e:	f0 91 5c 06 	lds	r31, 0x065C
    22a2:	65 85       	ldd	r22, Z+13	; 0x0d
    22a4:	76 85       	ldd	r23, Z+14	; 0x0e
    22a6:	87 85       	ldd	r24, Z+15	; 0x0f
    22a8:	90 89       	ldd	r25, Z+16	; 0x10
}
    22aa:	08 95       	ret

000022ac <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    22ac:	cf 92       	push	r12
    22ae:	df 92       	push	r13
    22b0:	ef 92       	push	r14
    22b2:	ff 92       	push	r15
    22b4:	0f 93       	push	r16
    22b6:	1f 93       	push	r17
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	1f 92       	push	r1
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    22c2:	c1 2c       	mov	r12, r1
    22c4:	d1 2c       	mov	r13, r1
    22c6:	76 01       	movw	r14, r12
    22c8:	c3 94       	inc	r12
    22ca:	08 2e       	mov	r0, r24
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <nrk_signal_delete+0x2a>
    22ce:	cc 0c       	add	r12, r12
    22d0:	dd 1c       	adc	r13, r13
    22d2:	ee 1c       	adc	r14, r14
    22d4:	ff 1c       	adc	r15, r15
    22d6:	0a 94       	dec	r0
    22d8:	d2 f7       	brpl	.-12     	; 0x22ce <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    22da:	40 91 cc 03 	lds	r20, 0x03CC
    22de:	50 91 cd 03 	lds	r21, 0x03CD
    22e2:	60 91 ce 03 	lds	r22, 0x03CE
    22e6:	70 91 cf 03 	lds	r23, 0x03CF
    22ea:	4c 21       	and	r20, r12
    22ec:	5d 21       	and	r21, r13
    22ee:	6e 21       	and	r22, r14
    22f0:	7f 21       	and	r23, r15
    22f2:	45 2b       	or	r20, r21
    22f4:	46 2b       	or	r20, r22
    22f6:	47 2b       	or	r20, r23
    22f8:	09 f4       	brne	.+2      	; 0x22fc <nrk_signal_delete+0x50>
    22fa:	63 c0       	rjmp	.+198    	; 0x23c2 <nrk_signal_delete+0x116>

	nrk_int_disable();
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    2302:	e2 ea       	ldi	r30, 0xA2	; 162
    2304:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2306:	97 01       	movw	r18, r14
    2308:	86 01       	movw	r16, r12
    230a:	00 95       	com	r16
    230c:	10 95       	com	r17
    230e:	20 95       	com	r18
    2310:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2312:	93 e0       	ldi	r25, 0x03	; 3
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	df 01       	movw	r26, r30
    2318:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    231a:	4c 91       	ld	r20, X
    231c:	4f 3f       	cpi	r20, 0xFF	; 255
    231e:	49 f1       	breq	.+82     	; 0x2372 <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2320:	44 81       	ldd	r20, Z+4	; 0x04
    2322:	55 81       	ldd	r21, Z+5	; 0x05
    2324:	66 81       	ldd	r22, Z+6	; 0x06
    2326:	77 81       	ldd	r23, Z+7	; 0x07
    2328:	4c 15       	cp	r20, r12
    232a:	5d 05       	cpc	r21, r13
    232c:	6e 05       	cpc	r22, r14
    232e:	7f 05       	cpc	r23, r15
    2330:	41 f4       	brne	.+16     	; 0x2342 <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2332:	10 86       	std	Z+8, r1	; 0x08
    2334:	11 86       	std	Z+9, r1	; 0x09
    2336:	12 86       	std	Z+10, r1	; 0x0a
    2338:	13 86       	std	Z+11, r1	; 0x0b
    233a:	df 01       	movw	r26, r30
    233c:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    233e:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2340:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2342:	44 81       	ldd	r20, Z+4	; 0x04
    2344:	55 81       	ldd	r21, Z+5	; 0x05
    2346:	66 81       	ldd	r22, Z+6	; 0x06
    2348:	77 81       	ldd	r23, Z+7	; 0x07
    234a:	40 23       	and	r20, r16
    234c:	51 23       	and	r21, r17
    234e:	62 23       	and	r22, r18
    2350:	73 23       	and	r23, r19
    2352:	44 83       	std	Z+4, r20	; 0x04
    2354:	55 83       	std	Z+5, r21	; 0x05
    2356:	66 83       	std	Z+6, r22	; 0x06
    2358:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    235a:	40 85       	ldd	r20, Z+8	; 0x08
    235c:	51 85       	ldd	r21, Z+9	; 0x09
    235e:	62 85       	ldd	r22, Z+10	; 0x0a
    2360:	73 85       	ldd	r23, Z+11	; 0x0b
    2362:	40 23       	and	r20, r16
    2364:	51 23       	and	r21, r17
    2366:	62 23       	and	r22, r18
    2368:	73 23       	and	r23, r19
    236a:	40 87       	std	Z+8, r20	; 0x08
    236c:	51 87       	std	Z+9, r21	; 0x09
    236e:	62 87       	std	Z+10, r22	; 0x0a
    2370:	73 87       	std	Z+11, r23	; 0x0b
    2372:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2374:	46 e0       	ldi	r20, 0x06	; 6
    2376:	ee 34       	cpi	r30, 0x4E	; 78
    2378:	f4 07       	cpc	r31, r20
    237a:	69 f6       	brne	.-102    	; 0x2316 <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    237c:	4e ef       	ldi	r20, 0xFE	; 254
    237e:	5f ef       	ldi	r21, 0xFF	; 255
    2380:	6f ef       	ldi	r22, 0xFF	; 255
    2382:	7f ef       	ldi	r23, 0xFF	; 255
    2384:	04 c0       	rjmp	.+8      	; 0x238e <nrk_signal_delete+0xe2>
    2386:	44 0f       	add	r20, r20
    2388:	55 1f       	adc	r21, r21
    238a:	66 1f       	adc	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	8a 95       	dec	r24
    2390:	d2 f7       	brpl	.-12     	; 0x2386 <nrk_signal_delete+0xda>
    2392:	80 91 cc 03 	lds	r24, 0x03CC
    2396:	90 91 cd 03 	lds	r25, 0x03CD
    239a:	a0 91 ce 03 	lds	r26, 0x03CE
    239e:	b0 91 cf 03 	lds	r27, 0x03CF
    23a2:	84 23       	and	r24, r20
    23a4:	95 23       	and	r25, r21
    23a6:	a6 23       	and	r26, r22
    23a8:	b7 23       	and	r27, r23
    23aa:	80 93 cc 03 	sts	0x03CC, r24
    23ae:	90 93 cd 03 	sts	0x03CD, r25
    23b2:	a0 93 ce 03 	sts	0x03CE, r26
    23b6:	b0 93 cf 03 	sts	0x03CF, r27
	nrk_int_enable();
    23ba:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>

	return NRK_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    23c4:	0f 90       	pop	r0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	08 95       	ret

000023d8 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <nrk_signal_unregister+0x16>
    23e6:	44 0f       	add	r20, r20
    23e8:	55 1f       	adc	r21, r21
    23ea:	66 1f       	adc	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	8a 95       	dec	r24
    23f0:	d2 f7       	brpl	.-12     	; 0x23e6 <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    23f2:	e0 91 5b 06 	lds	r30, 0x065B
    23f6:	f0 91 5c 06 	lds	r31, 0x065C
    23fa:	85 85       	ldd	r24, Z+13	; 0x0d
    23fc:	96 85       	ldd	r25, Z+14	; 0x0e
    23fe:	a7 85       	ldd	r26, Z+15	; 0x0f
    2400:	b0 89       	ldd	r27, Z+16	; 0x10
    2402:	8a 01       	movw	r16, r20
    2404:	9b 01       	movw	r18, r22
    2406:	08 23       	and	r16, r24
    2408:	19 23       	and	r17, r25
    240a:	2a 23       	and	r18, r26
    240c:	3b 23       	and	r19, r27
    240e:	01 2b       	or	r16, r17
    2410:	02 2b       	or	r16, r18
    2412:	03 2b       	or	r16, r19
    2414:	d1 f0       	breq	.+52     	; 0x244a <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2416:	40 95       	com	r20
    2418:	50 95       	com	r21
    241a:	60 95       	com	r22
    241c:	70 95       	com	r23
    241e:	84 23       	and	r24, r20
    2420:	95 23       	and	r25, r21
    2422:	a6 23       	and	r26, r22
    2424:	b7 23       	and	r27, r23
    2426:	85 87       	std	Z+13, r24	; 0x0d
    2428:	96 87       	std	Z+14, r25	; 0x0e
    242a:	a7 87       	std	Z+15, r26	; 0x0f
    242c:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    242e:	81 89       	ldd	r24, Z+17	; 0x11
    2430:	92 89       	ldd	r25, Z+18	; 0x12
    2432:	a3 89       	ldd	r26, Z+19	; 0x13
    2434:	b4 89       	ldd	r27, Z+20	; 0x14
    2436:	84 23       	and	r24, r20
    2438:	95 23       	and	r25, r21
    243a:	a6 23       	and	r26, r22
    243c:	b7 23       	and	r27, r23
    243e:	81 8b       	std	Z+17, r24	; 0x11
    2440:	92 8b       	std	Z+18, r25	; 0x12
    2442:	a3 8b       	std	Z+19, r26	; 0x13
    2444:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	01 c0       	rjmp	.+2      	; 0x244c <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    244a:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2452:	40 91 cc 03 	lds	r20, 0x03CC
    2456:	50 91 cd 03 	lds	r21, 0x03CD
    245a:	60 91 ce 03 	lds	r22, 0x03CE
    245e:	70 91 cf 03 	lds	r23, 0x03CF
    2462:	08 2e       	mov	r0, r24
    2464:	04 c0       	rjmp	.+8      	; 0x246e <nrk_signal_register+0x1c>
    2466:	76 95       	lsr	r23
    2468:	67 95       	ror	r22
    246a:	57 95       	ror	r21
    246c:	47 95       	ror	r20
    246e:	0a 94       	dec	r0
    2470:	d2 f7       	brpl	.-12     	; 0x2466 <nrk_signal_register+0x14>
    2472:	40 ff       	sbrs	r20, 0
    2474:	1d c0       	rjmp	.+58     	; 0x24b0 <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2476:	e0 91 5b 06 	lds	r30, 0x065B
    247a:	f0 91 5c 06 	lds	r31, 0x065C
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <nrk_signal_register+0x3e>
    2488:	44 0f       	add	r20, r20
    248a:	55 1f       	adc	r21, r21
    248c:	66 1f       	adc	r22, r22
    248e:	77 1f       	adc	r23, r23
    2490:	8a 95       	dec	r24
    2492:	d2 f7       	brpl	.-12     	; 0x2488 <nrk_signal_register+0x36>
    2494:	85 85       	ldd	r24, Z+13	; 0x0d
    2496:	96 85       	ldd	r25, Z+14	; 0x0e
    2498:	a7 85       	ldd	r26, Z+15	; 0x0f
    249a:	b0 89       	ldd	r27, Z+16	; 0x10
    249c:	84 2b       	or	r24, r20
    249e:	95 2b       	or	r25, r21
    24a0:	a6 2b       	or	r26, r22
    24a2:	b7 2b       	or	r27, r23
    24a4:	85 87       	std	Z+13, r24	; 0x0d
    24a6:	96 87       	std	Z+14, r25	; 0x0e
    24a8:	a7 87       	std	Z+15, r26	; 0x0f
    24aa:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	08 95       	ret
	}
            
	return NRK_ERROR;
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
}
    24b2:	08 95       	ret

000024b4 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    24b4:	cf 92       	push	r12
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    24c2:	c1 2c       	mov	r12, r1
    24c4:	d1 2c       	mov	r13, r1
    24c6:	76 01       	movw	r14, r12
    24c8:	c3 94       	inc	r12
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <nrk_event_signal+0x20>
    24cc:	cc 0c       	add	r12, r12
    24ce:	dd 1c       	adc	r13, r13
    24d0:	ee 1c       	adc	r14, r14
    24d2:	ff 1c       	adc	r15, r15
    24d4:	8a 95       	dec	r24
    24d6:	d2 f7       	brpl	.-12     	; 0x24cc <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    24d8:	80 91 cc 03 	lds	r24, 0x03CC
    24dc:	90 91 cd 03 	lds	r25, 0x03CD
    24e0:	a0 91 ce 03 	lds	r26, 0x03CE
    24e4:	b0 91 cf 03 	lds	r27, 0x03CF
    24e8:	8c 21       	and	r24, r12
    24ea:	9d 21       	and	r25, r13
    24ec:	ae 21       	and	r26, r14
    24ee:	bf 21       	and	r27, r15
    24f0:	89 2b       	or	r24, r25
    24f2:	8a 2b       	or	r24, r26
    24f4:	8b 2b       	or	r24, r27
    24f6:	11 f4       	brne	.+4      	; 0x24fc <nrk_event_signal+0x48>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	44 c0       	rjmp	.+136    	; 0x2584 <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    24fc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    2500:	e0 ea       	ldi	r30, 0xA0	; 160
    2502:	f5 e0       	ldi	r31, 0x05	; 5
    2504:	c2 ea       	ldi	r28, 0xA2	; 162
    2506:	d5 e0       	ldi	r29, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    2508:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    250a:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    250c:	80 81       	ld	r24, Z
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	b9 f4       	brne	.+46     	; 0x2540 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2512:	82 85       	ldd	r24, Z+10	; 0x0a
    2514:	93 85       	ldd	r25, Z+11	; 0x0b
    2516:	a4 85       	ldd	r26, Z+12	; 0x0c
    2518:	b5 85       	ldd	r27, Z+13	; 0x0d
    251a:	8c 21       	and	r24, r12
    251c:	9d 21       	and	r25, r13
    251e:	ae 21       	and	r26, r14
    2520:	bf 21       	and	r27, r15
    2522:	89 2b       	or	r24, r25
    2524:	8a 2b       	or	r24, r26
    2526:	8b 2b       	or	r24, r27
    2528:	59 f0       	breq	.+22     	; 0x2540 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    252a:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    252c:	16 86       	std	Z+14, r1	; 0x0e
    252e:	17 86       	std	Z+15, r1	; 0x0f
    2530:	10 8a       	std	Z+16, r1	; 0x10
    2532:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2534:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2536:	c2 86       	std	Z+10, r12	; 0x0a
    2538:	d3 86       	std	Z+11, r13	; 0x0b
    253a:	e4 86       	std	Z+12, r14	; 0x0c
    253c:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    253e:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2540:	80 81       	ld	r24, Z
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	a1 f4       	brne	.+40     	; 0x256e <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2546:	82 85       	ldd	r24, Z+10	; 0x0a
    2548:	93 85       	ldd	r25, Z+11	; 0x0b
    254a:	a4 85       	ldd	r26, Z+12	; 0x0c
    254c:	b5 85       	ldd	r27, Z+13	; 0x0d
    254e:	8c 15       	cp	r24, r12
    2550:	9d 05       	cpc	r25, r13
    2552:	ae 05       	cpc	r26, r14
    2554:	bf 05       	cpc	r27, r15
    2556:	59 f4       	brne	.+22     	; 0x256e <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2558:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    255a:	16 86       	std	Z+14, r1	; 0x0e
    255c:	17 86       	std	Z+15, r1	; 0x0f
    255e:	10 8a       	std	Z+16, r1	; 0x10
    2560:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2562:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2564:	12 86       	std	Z+10, r1	; 0x0a
    2566:	13 86       	std	Z+11, r1	; 0x0b
    2568:	14 86       	std	Z+12, r1	; 0x0c
    256a:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    256c:	11 e0       	ldi	r17, 0x01	; 1
    256e:	bb 96       	adiw	r30, 0x2b	; 43
    2570:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2572:	86 e0       	ldi	r24, 0x06	; 6
    2574:	ec 34       	cpi	r30, 0x4C	; 76
    2576:	f8 07       	cpc	r31, r24
    2578:	49 f6       	brne	.-110    	; 0x250c <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    257a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
	if(event_occured)
    257e:	11 11       	cpse	r17, r1
    2580:	05 c0       	rjmp	.+10     	; 0x258c <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_nrk_errno_set>
	return NRK_ERROR;
    2588:	8f ef       	ldi	r24, 0xFF	; 255
    258a:	01 c0       	rjmp	.+2      	; 0x258e <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    258c:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	08 95       	ret

0000259e <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    25a2:	e0 91 5b 06 	lds	r30, 0x065B
    25a6:	f0 91 5c 06 	lds	r31, 0x065C
    25aa:	05 85       	ldd	r16, Z+13	; 0x0d
    25ac:	16 85       	ldd	r17, Z+14	; 0x0e
    25ae:	27 85       	ldd	r18, Z+15	; 0x0f
    25b0:	30 89       	ldd	r19, Z+16	; 0x10
    25b2:	06 23       	and	r16, r22
    25b4:	17 23       	and	r17, r23
    25b6:	28 23       	and	r18, r24
    25b8:	39 23       	and	r19, r25
    25ba:	01 2b       	or	r16, r17
    25bc:	02 2b       	or	r16, r18
    25be:	03 2b       	or	r16, r19
    25c0:	19 f1       	breq	.+70     	; 0x2608 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    25c2:	61 8b       	std	Z+17, r22	; 0x11
    25c4:	72 8b       	std	Z+18, r23	; 0x12
    25c6:	83 8b       	std	Z+19, r24	; 0x13
    25c8:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	00 90 4b 06 	lds	r0, 0x064B
    25d6:	04 c0       	rjmp	.+8      	; 0x25e0 <nrk_event_wait+0x42>
    25d8:	b6 95       	lsr	r27
    25da:	a7 95       	ror	r26
    25dc:	97 95       	ror	r25
    25de:	87 95       	ror	r24
    25e0:	0a 94       	dec	r0
    25e2:	d2 f7       	brpl	.-12     	; 0x25d8 <nrk_event_wait+0x3a>
    25e4:	80 ff       	sbrs	r24, 0
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    25e8:	0e 94 92 16 	call	0x2d24	; 0x2d24 <nrk_wait_until_nw>
    25ec:	04 c0       	rjmp	.+8      	; 0x25f6 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    25f6:	e0 91 5b 06 	lds	r30, 0x065B
    25fa:	f0 91 5c 06 	lds	r31, 0x065C
    25fe:	61 89       	ldd	r22, Z+17	; 0x11
    2600:	72 89       	ldd	r23, Z+18	; 0x12
    2602:	83 89       	ldd	r24, Z+19	; 0x13
    2604:	94 89       	ldd	r25, Z+20	; 0x14
    2606:	03 c0       	rjmp	.+6      	; 0x260e <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	08 95       	ret

00002614 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	08 95       	ret

0000261a <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    261a:	21 e0       	ldi	r18, 0x01	; 1
    261c:	87 54       	subi	r24, 0x47	; 71
    261e:	96 40       	sbci	r25, 0x06	; 6
    2620:	09 f4       	brne	.+2      	; 0x2624 <nrk_get_resource_index+0xa>
    2622:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    2624:	82 2f       	mov	r24, r18
    2626:	81 95       	neg	r24
    2628:	08 95       	ret

0000262a <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    262a:	0e 94 0d 13 	call	0x261a	; 0x261a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    262e:	8f 3f       	cpi	r24, 0xFF	; 255
    2630:	11 f4       	brne	.+4      	; 0x2636 <nrk_sem_query+0xc>
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	03 c0       	rjmp	.+6      	; 0x263c <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	29 f4       	brne	.+10     	; 0x2644 <nrk_sem_query+0x1a>
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_nrk_errno_set>
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2644:	99 27       	eor	r25, r25
    2646:	87 fd       	sbrc	r24, 7
    2648:	90 95       	com	r25
    264a:	fc 01       	movw	r30, r24
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	e8 0f       	add	r30, r24
    2652:	f9 1f       	adc	r31, r25
    2654:	e7 5b       	subi	r30, 0xB7	; 183
    2656:	f9 4f       	sbci	r31, 0xF9	; 249
    2658:	80 81       	ld	r24, Z
}
    265a:	08 95       	ret

0000265c <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	1f 92       	push	r1
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    266e:	0e 94 0d 13 	call	0x261a	; 0x261a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2672:	8f 3f       	cpi	r24, 0xFF	; 255
    2674:	11 f4       	brne	.+4      	; 0x267a <nrk_sem_pend+0x1e>
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	29 f4       	brne	.+10     	; 0x2688 <nrk_sem_pend+0x2c>
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_nrk_errno_set>
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	e8 2e       	mov	r14, r24
    2692:	ff 24       	eor	r15, r15
    2694:	e7 fc       	sbrc	r14, 7
    2696:	f0 94       	com	r15
    2698:	87 01       	movw	r16, r14
    269a:	00 0f       	add	r16, r16
    269c:	11 1f       	adc	r17, r17
    269e:	f8 01       	movw	r30, r16
    26a0:	ee 0d       	add	r30, r14
    26a2:	ff 1d       	adc	r31, r15
    26a4:	e7 5b       	subi	r30, 0xB7	; 183
    26a6:	f9 4f       	sbci	r31, 0xF9	; 249
    26a8:	90 81       	ld	r25, Z
    26aa:	91 11       	cpse	r25, r1
    26ac:	16 c0       	rjmp	.+44     	; 0x26da <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    26ae:	e0 91 5b 06 	lds	r30, 0x065B
    26b2:	f0 91 5c 06 	lds	r31, 0x065C
    26b6:	97 81       	ldd	r25, Z+7	; 0x07
    26b8:	92 60       	ori	r25, 0x02	; 2
    26ba:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    26bc:	99 27       	eor	r25, r25
    26be:	87 fd       	sbrc	r24, 7
    26c0:	90 95       	com	r25
    26c2:	a9 2f       	mov	r26, r25
    26c4:	b9 2f       	mov	r27, r25
    26c6:	81 8b       	std	Z+17, r24	; 0x11
    26c8:	92 8b       	std	Z+18, r25	; 0x12
    26ca:	a3 8b       	std	Z+19, r26	; 0x13
    26cc:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    26ce:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
		nrk_wait_until_ticks(0);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    26da:	0e 0d       	add	r16, r14
    26dc:	1f 1d       	adc	r17, r15
    26de:	f8 01       	movw	r30, r16
    26e0:	e7 5b       	subi	r30, 0xB7	; 183
    26e2:	f9 4f       	sbci	r31, 0xF9	; 249
    26e4:	80 81       	ld	r24, Z
    26e6:	81 50       	subi	r24, 0x01	; 1
    26e8:	80 83       	st	Z, r24
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    26ea:	e0 91 5b 06 	lds	r30, 0x065B
    26ee:	f0 91 5c 06 	lds	r31, 0x065C
    26f2:	d8 01       	movw	r26, r16
    26f4:	a8 5b       	subi	r26, 0xB8	; 184
    26f6:	b9 4f       	sbci	r27, 0xF9	; 249
    26f8:	8c 91       	ld	r24, X
    26fa:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2700:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>

	return NRK_OK;
    2704:	81 e0       	ldi	r24, 0x01	; 1
}
    2706:	0f 90       	pop	r0
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	08 95       	ret

00002716 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	1f 92       	push	r1
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    272c:	0e 94 0d 13 	call	0x261a	; 0x261a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2730:	8f 3f       	cpi	r24, 0xFF	; 255
    2732:	11 f4       	brne	.+4      	; 0x2738 <nrk_sem_post+0x22>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	03 c0       	rjmp	.+6      	; 0x273e <nrk_sem_post+0x28>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	29 f4       	brne	.+10     	; 0x2746 <nrk_sem_post+0x30>
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_nrk_errno_set>
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	4d c0       	rjmp	.+154    	; 0x27e0 <nrk_sem_post+0xca>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2746:	48 2f       	mov	r20, r24
    2748:	55 27       	eor	r21, r21
    274a:	47 fd       	sbrc	r20, 7
    274c:	50 95       	com	r21
    274e:	9a 01       	movw	r18, r20
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	24 0f       	add	r18, r20
    2756:	35 1f       	adc	r19, r21
    2758:	89 01       	movw	r16, r18
    275a:	07 5b       	subi	r16, 0xB7	; 183
    275c:	19 4f       	sbci	r17, 0xF9	; 249
    275e:	f9 01       	movw	r30, r18
    2760:	e9 5b       	subi	r30, 0xB9	; 185
    2762:	f9 4f       	sbci	r31, 0xF9	; 249
    2764:	d8 01       	movw	r26, r16
    2766:	4c 91       	ld	r20, X
    2768:	90 81       	ld	r25, Z
    276a:	49 17       	cp	r20, r25
    276c:	c4 f5       	brge	.+112    	; 0x27de <nrk_sem_post+0xc8>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>

		nrk_sem_list[id].value++;
    2774:	f8 01       	movw	r30, r16
    2776:	90 81       	ld	r25, Z
    2778:	9f 5f       	subi	r25, 0xFF	; 255
    277a:	90 83       	st	Z, r25
		nrk_cur_task_TCB->elevated_prio_flag=0;
    277c:	e0 91 5b 06 	lds	r30, 0x065B
    2780:	f0 91 5c 06 	lds	r31, 0x065C
    2784:	14 82       	std	Z+4, r1	; 0x04
    2786:	e0 ea       	ldi	r30, 0xA0	; 160
    2788:	f5 e0       	ldi	r31, 0x05	; 5
    278a:	02 ea       	ldi	r16, 0xA2	; 162
    278c:	15 e0       	ldi	r17, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	c8 2e       	mov	r12, r24
    2792:	dd 24       	eor	r13, r13
    2794:	c7 fc       	sbrc	r12, 7
    2796:	d0 94       	com	r13
    2798:	ed 2c       	mov	r14, r13
    279a:	fd 2c       	mov	r15, r13
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    279c:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    279e:	30 81       	ld	r19, Z
    27a0:	32 30       	cpi	r19, 0x02	; 2
    27a2:	a1 f4       	brne	.+40     	; 0x27cc <nrk_sem_post+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    27a4:	42 85       	ldd	r20, Z+10	; 0x0a
    27a6:	53 85       	ldd	r21, Z+11	; 0x0b
    27a8:	64 85       	ldd	r22, Z+12	; 0x0c
    27aa:	75 85       	ldd	r23, Z+13	; 0x0d
    27ac:	4c 15       	cp	r20, r12
    27ae:	5d 05       	cpc	r21, r13
    27b0:	6e 05       	cpc	r22, r14
    27b2:	7f 05       	cpc	r23, r15
    27b4:	59 f4       	brne	.+22     	; 0x27cc <nrk_sem_post+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    27b6:	d8 01       	movw	r26, r16
    27b8:	2c 93       	st	X, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    27ba:	16 86       	std	Z+14, r1	; 0x0e
    27bc:	17 86       	std	Z+15, r1	; 0x0f
    27be:	10 8a       	std	Z+16, r1	; 0x10
    27c0:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    27c2:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    27c4:	12 86       	std	Z+10, r1	; 0x0a
    27c6:	13 86       	std	Z+11, r1	; 0x0b
    27c8:	14 86       	std	Z+12, r1	; 0x0c
    27ca:	15 86       	std	Z+13, r1	; 0x0d
    27cc:	bb 96       	adiw	r30, 0x2b	; 43
    27ce:	05 5d       	subi	r16, 0xD5	; 213
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    27d2:	b6 e0       	ldi	r27, 0x06	; 6
    27d4:	ec 34       	cpi	r30, 0x4C	; 76
    27d6:	fb 07       	cpc	r31, r27
    27d8:	11 f7       	brne	.-60     	; 0x279e <nrk_sem_post+0x88>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    27da:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
	}
		
return NRK_OK;
    27de:	81 e0       	ldi	r24, 0x01	; 1
}
    27e0:	0f 90       	pop	r0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
    27f2:	08 95       	ret

000027f4 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    27f4:	0e 94 0d 13 	call	0x261a	; 0x261a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    27f8:	8f 3f       	cpi	r24, 0xFF	; 255
    27fa:	11 f4       	brne	.+4      	; 0x2800 <nrk_sem_delete+0xc>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	29 f4       	brne	.+10     	; 0x280e <nrk_sem_delete+0x1a>
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_nrk_errno_set>
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	08 95       	ret

	nrk_sem_list[id].count=-1;
    280e:	99 27       	eor	r25, r25
    2810:	87 fd       	sbrc	r24, 7
    2812:	90 95       	com	r25
    2814:	9c 01       	movw	r18, r24
    2816:	22 0f       	add	r18, r18
    2818:	33 1f       	adc	r19, r19
    281a:	28 0f       	add	r18, r24
    281c:	39 1f       	adc	r19, r25
    281e:	f9 01       	movw	r30, r18
    2820:	e9 5b       	subi	r30, 0xB9	; 185
    2822:	f9 4f       	sbci	r31, 0xF9	; 249
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2828:	f9 01       	movw	r30, r18
    282a:	e7 5b       	subi	r30, 0xB7	; 183
    282c:	f9 4f       	sbci	r31, 0xF9	; 249
    282e:	80 83       	st	Z, r24
	nrk_sem_list[id].resource_ceiling=-1;
    2830:	f9 01       	movw	r30, r18
    2832:	e8 5b       	subi	r30, 0xB8	; 184
    2834:	f9 4f       	sbci	r31, 0xF9	; 249
    2836:	80 83       	st	Z, r24
	_nrk_resource_cnt--;
    2838:	80 91 5a 06 	lds	r24, 0x065A
    283c:	81 50       	subi	r24, 0x01	; 1
    283e:	80 93 5a 06 	sts	0x065A, r24
return NRK_OK;
    2842:	81 e0       	ldi	r24, 0x01	; 1
}
    2844:	08 95       	ret

00002846 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2846:	e0 91 50 06 	lds	r30, 0x0650
    284a:	f0 91 51 06 	lds	r31, 0x0651
}
    284e:	80 81       	ld	r24, Z
    2850:	08 95       	ret

00002852 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2852:	e0 91 50 06 	lds	r30, 0x0650
    2856:	f0 91 51 06 	lds	r31, 0x0651
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    285a:	30 97       	sbiw	r30, 0x00	; 0
    285c:	21 f0       	breq	.+8      	; 0x2866 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    285e:	03 80       	ldd	r0, Z+3	; 0x03
    2860:	f4 81       	ldd	r31, Z+4	; 0x04
    2862:	e0 2d       	mov	r30, r0
    2864:	fa cf       	rjmp	.-12     	; 0x285a <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2866:	08 95       	ret

00002868 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2878:	e0 91 97 05 	lds	r30, 0x0597
    287c:	f0 91 98 05 	lds	r31, 0x0598
    2880:	30 97       	sbiw	r30, 0x00	; 0
    2882:	09 f4       	brne	.+2      	; 0x2886 <nrk_add_to_readyQ+0x1e>
    2884:	8a c0       	rjmp	.+276    	; 0x299a <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    2886:	40 91 50 06 	lds	r20, 0x0650
    288a:	50 91 51 06 	lds	r21, 0x0651
    CurNode = _free_node;

    if (_head_node != NULL)
    288e:	41 15       	cp	r20, r1
    2890:	51 05       	cpc	r21, r1
    2892:	09 f4       	brne	.+2      	; 0x2896 <nrk_add_to_readyQ+0x2e>
    2894:	46 c0       	rjmp	.+140    	; 0x2922 <nrk_add_to_readyQ+0xba>
    2896:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2898:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    289a:	69 2f       	mov	r22, r25
    289c:	78 2f       	mov	r23, r24
    289e:	76 03       	mulsu	r23, r22
    28a0:	90 01       	movw	r18, r0
    28a2:	11 24       	eor	r1, r1
    28a4:	27 56       	subi	r18, 0x67	; 103
    28a6:	3a 4f       	sbci	r19, 0xFA	; 250
    28a8:	89 01       	movw	r16, r18
    28aa:	06 5f       	subi	r16, 0xF6	; 246
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    28ae:	79 01       	movw	r14, r18
    28b0:	c4 e0       	ldi	r28, 0x04	; 4
    28b2:	ec 0e       	add	r14, r28
    28b4:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    28b6:	25 5f       	subi	r18, 0xF5	; 245
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    28ba:	6c 91       	ld	r22, X
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	96 9f       	mul	r25, r22
    28c0:	e0 01       	movw	r28, r0
    28c2:	97 9f       	mul	r25, r23
    28c4:	d0 0d       	add	r29, r0
    28c6:	11 24       	eor	r1, r1
    28c8:	c7 56       	subi	r28, 0x67	; 103
    28ca:	da 4f       	sbci	r29, 0xFA	; 250
    28cc:	dc 80       	ldd	r13, Y+4	; 0x04
    28ce:	dd 20       	and	r13, r13
    28d0:	29 f0       	breq	.+10     	; 0x28dc <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    28d2:	db 84       	ldd	r13, Y+11	; 0x0b
    28d4:	e8 01       	movw	r28, r16
    28d6:	c8 80       	ld	r12, Y
    28d8:	dc 14       	cp	r13, r12
    28da:	28 f1       	brcs	.+74     	; 0x2926 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    28dc:	e7 01       	movw	r28, r14
    28de:	d8 80       	ld	r13, Y
    28e0:	dd 20       	and	r13, r13
    28e2:	61 f0       	breq	.+24     	; 0x28fc <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    28e4:	96 9f       	mul	r25, r22
    28e6:	e0 01       	movw	r28, r0
    28e8:	97 9f       	mul	r25, r23
    28ea:	d0 0d       	add	r29, r0
    28ec:	11 24       	eor	r1, r1
    28ee:	c7 56       	subi	r28, 0x67	; 103
    28f0:	da 4f       	sbci	r29, 0xFA	; 250
    28f2:	da 84       	ldd	r13, Y+10	; 0x0a
    28f4:	e9 01       	movw	r28, r18
    28f6:	c8 80       	ld	r12, Y
    28f8:	dc 14       	cp	r13, r12
    28fa:	a8 f0       	brcs	.+42     	; 0x2926 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    28fc:	96 9f       	mul	r25, r22
    28fe:	e0 01       	movw	r28, r0
    2900:	97 9f       	mul	r25, r23
    2902:	d0 0d       	add	r29, r0
    2904:	11 24       	eor	r1, r1
    2906:	c7 56       	subi	r28, 0x67	; 103
    2908:	da 4f       	sbci	r29, 0xFA	; 250
    290a:	7a 85       	ldd	r23, Y+10	; 0x0a
    290c:	e8 01       	movw	r28, r16
    290e:	68 81       	ld	r22, Y
    2910:	76 17       	cp	r23, r22
    2912:	48 f0       	brcs	.+18     	; 0x2926 <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2914:	13 96       	adiw	r26, 0x03	; 3
    2916:	0d 90       	ld	r0, X+
    2918:	bc 91       	ld	r27, X
    291a:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    291c:	10 97       	sbiw	r26, 0x00	; 0
    291e:	69 f6       	brne	.-102    	; 0x28ba <nrk_add_to_readyQ+0x52>
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <nrk_add_to_readyQ+0xbe>
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2926:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2928:	c3 81       	ldd	r28, Z+3	; 0x03
    292a:	d4 81       	ldd	r29, Z+4	; 0x04
    292c:	d0 93 98 05 	sts	0x0598, r29
    2930:	c0 93 97 05 	sts	0x0597, r28

    if (NextNode == _head_node)
    2934:	a4 17       	cp	r26, r20
    2936:	b5 07       	cpc	r27, r21
    2938:	b1 f4       	brne	.+44     	; 0x2966 <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    293a:	10 97       	sbiw	r26, 0x00	; 0
    293c:	49 f0       	breq	.+18     	; 0x2950 <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    293e:	b4 83       	std	Z+4, r27	; 0x04
    2940:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2942:	12 82       	std	Z+2, r1	; 0x02
    2944:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2946:	12 96       	adiw	r26, 0x02	; 2
    2948:	fc 93       	st	X, r31
    294a:	ee 93       	st	-X, r30
    294c:	11 97       	sbiw	r26, 0x01	; 1
    294e:	06 c0       	rjmp	.+12     	; 0x295c <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    2950:	14 82       	std	Z+4, r1	; 0x04
    2952:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2954:	12 82       	std	Z+2, r1	; 0x02
    2956:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2958:	fa 83       	std	Y+2, r31	; 0x02
    295a:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    295c:	f0 93 51 06 	sts	0x0651, r31
    2960:	e0 93 50 06 	sts	0x0650, r30
    2964:	1a c0       	rjmp	.+52     	; 0x299a <nrk_add_to_readyQ+0x132>
    2966:	11 96       	adiw	r26, 0x01	; 1
    2968:	8d 91       	ld	r24, X+
    296a:	9c 91       	ld	r25, X
    296c:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    296e:	ac 17       	cp	r26, r28
    2970:	bd 07       	cpc	r27, r29
    2972:	59 f0       	breq	.+22     	; 0x298a <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2974:	92 83       	std	Z+2, r25	; 0x02
    2976:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2978:	b4 83       	std	Z+4, r27	; 0x04
    297a:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    297c:	11 96       	adiw	r26, 0x01	; 1
    297e:	cd 91       	ld	r28, X+
    2980:	dc 91       	ld	r29, X
    2982:	12 97       	sbiw	r26, 0x02	; 2
    2984:	fc 83       	std	Y+4, r31	; 0x04
    2986:	eb 83       	std	Y+3, r30	; 0x03
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    298a:	14 82       	std	Z+4, r1	; 0x04
    298c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    298e:	92 83       	std	Z+2, r25	; 0x02
    2990:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2992:	12 96       	adiw	r26, 0x02	; 2
    2994:	fc 93       	st	X, r31
    2996:	ee 93       	st	-X, r30
    2998:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	df 90       	pop	r13
    29a8:	cf 90       	pop	r12
    29aa:	08 95       	ret

000029ac <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    29b0:	e0 91 50 06 	lds	r30, 0x0650
    29b4:	f0 91 51 06 	lds	r31, 0x0651
    29b8:	30 97       	sbiw	r30, 0x00	; 0
    29ba:	09 f4       	brne	.+2      	; 0x29be <nrk_rem_from_readyQ+0x12>
    29bc:	44 c0       	rjmp	.+136    	; 0x2a46 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    29be:	99 27       	eor	r25, r25
    29c0:	87 fd       	sbrc	r24, 7
    29c2:	90 95       	com	r25
    29c4:	20 81       	ld	r18, Z
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	28 17       	cp	r18, r24
    29ca:	39 07       	cpc	r19, r25
    29cc:	81 f4       	brne	.+32     	; 0x29ee <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    29ce:	a3 81       	ldd	r26, Z+3	; 0x03
    29d0:	b4 81       	ldd	r27, Z+4	; 0x04
    29d2:	b0 93 51 06 	sts	0x0651, r27
    29d6:	a0 93 50 06 	sts	0x0650, r26
        _head_node->Prev = NULL;
    29da:	12 96       	adiw	r26, 0x02	; 2
    29dc:	1c 92       	st	X, r1
    29de:	1e 92       	st	-X, r1
    29e0:	11 97       	sbiw	r26, 0x01	; 1
    29e2:	18 c0       	rjmp	.+48     	; 0x2a14 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    29e4:	03 80       	ldd	r0, Z+3	; 0x03
    29e6:	f4 81       	ldd	r31, Z+4	; 0x04
    29e8:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    29ea:	30 97       	sbiw	r30, 0x00	; 0
    29ec:	61 f1       	breq	.+88     	; 0x2a46 <nrk_rem_from_readyQ+0x9a>
    29ee:	20 81       	ld	r18, Z
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	28 17       	cp	r18, r24
    29f4:	39 07       	cpc	r19, r25
    29f6:	b1 f7       	brne	.-20     	; 0x29e4 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    29f8:	c1 81       	ldd	r28, Z+1	; 0x01
    29fa:	d2 81       	ldd	r29, Z+2	; 0x02
    29fc:	83 81       	ldd	r24, Z+3	; 0x03
    29fe:	94 81       	ldd	r25, Z+4	; 0x04
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2a04:	a3 81       	ldd	r26, Z+3	; 0x03
    2a06:	b4 81       	ldd	r27, Z+4	; 0x04
    2a08:	10 97       	sbiw	r26, 0x00	; 0
    2a0a:	21 f0       	breq	.+8      	; 0x2a14 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2a0c:	12 96       	adiw	r26, 0x02	; 2
    2a0e:	dc 93       	st	X, r29
    2a10:	ce 93       	st	-X, r28
    2a12:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2a14:	a0 91 97 05 	lds	r26, 0x0597
    2a18:	b0 91 98 05 	lds	r27, 0x0598
    2a1c:	10 97       	sbiw	r26, 0x00	; 0
    2a1e:	39 f4       	brne	.+14     	; 0x2a2e <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2a20:	f0 93 98 05 	sts	0x0598, r31
    2a24:	e0 93 97 05 	sts	0x0597, r30
        _free_node->Next = NULL;
    2a28:	14 82       	std	Z+4, r1	; 0x04
    2a2a:	13 82       	std	Z+3, r1	; 0x03
    2a2c:	0a c0       	rjmp	.+20     	; 0x2a42 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2a2e:	b4 83       	std	Z+4, r27	; 0x04
    2a30:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2a32:	12 96       	adiw	r26, 0x02	; 2
    2a34:	fc 93       	st	X, r31
    2a36:	ee 93       	st	-X, r30
    2a38:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2a3a:	f0 93 98 05 	sts	0x0598, r31
    2a3e:	e0 93 97 05 	sts	0x0597, r30
    }
    _free_node->Prev = NULL;
    2a42:	12 82       	std	Z+2, r1	; 0x02
    2a44:	11 82       	std	Z+1, r1	; 0x01
}
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	08 95       	ret

00002a4c <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2a4c:	ef 92       	push	r14
    2a4e:	ff 92       	push	r15
    2a50:	0f 93       	push	r16
    2a52:	1f 93       	push	r17
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2a5a:	4b 81       	ldd	r20, Y+3	; 0x03
    2a5c:	5c 81       	ldd	r21, Y+4	; 0x04
    2a5e:	69 81       	ldd	r22, Y+1	; 0x01
    2a60:	7a 81       	ldd	r23, Y+2	; 0x02
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	0e 94 b8 21 	call	0x4370	; 0x4370 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2a6a:	2f 81       	ldd	r18, Y+7	; 0x07
    2a6c:	22 23       	and	r18, r18
    2a6e:	71 f0       	breq	.+28     	; 0x2a8c <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2a70:	4b 81       	ldd	r20, Y+3	; 0x03
    2a72:	5c 81       	ldd	r21, Y+4	; 0x04
    2a74:	e1 2c       	mov	r14, r1
    2a76:	f1 2c       	mov	r15, r1
    2a78:	00 e0       	ldi	r16, 0x00	; 0
    2a7a:	10 e0       	ldi	r17, 0x00	; 0
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	bc 01       	movw	r22, r24
    2a82:	ce 01       	movw	r24, r28
    2a84:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2a88:	1f 82       	std	Y+7, r1	; 0x07
    2a8a:	0c c0       	rjmp	.+24     	; 0x2aa4 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2a8c:	e8 81       	ld	r30, Y
    2a8e:	2b e2       	ldi	r18, 0x2B	; 43
    2a90:	e2 02       	muls	r30, r18
    2a92:	f0 01       	movw	r30, r0
    2a94:	11 24       	eor	r1, r1
    2a96:	e7 56       	subi	r30, 0x67	; 103
    2a98:	fa 4f       	sbci	r31, 0xFA	; 250
    2a9a:	21 85       	ldd	r18, Z+9	; 0x09
    2a9c:	23 30       	cpi	r18, 0x03	; 3
    2a9e:	b9 f4       	brne	.+46     	; 0x2ace <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2aa4:	e8 81       	ld	r30, Y
    2aa6:	8b e2       	ldi	r24, 0x2B	; 43
    2aa8:	e8 02       	muls	r30, r24
    2aaa:	f0 01       	movw	r30, r0
    2aac:	11 24       	eor	r1, r1
    2aae:	e7 56       	subi	r30, 0x67	; 103
    2ab0:	fa 4f       	sbci	r31, 0xFA	; 250
    2ab2:	45 89       	ldd	r20, Z+21	; 0x15
    2ab4:	56 89       	ldd	r21, Z+22	; 0x16
    2ab6:	67 89       	ldd	r22, Z+23	; 0x17
    2ab8:	70 8d       	ldd	r23, Z+24	; 0x18
    2aba:	45 2b       	or	r20, r21
    2abc:	46 2b       	or	r20, r22
    2abe:	47 2b       	or	r20, r23
    2ac0:	41 f4       	brne	.+16     	; 0x2ad2 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2ac6:	88 81       	ld	r24, Y
    2ac8:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_add_to_readyQ>
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2ace:	8f ef       	ldi	r24, 0xFF	; 255
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
}
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ff 90       	pop	r15
    2ade:	ef 90       	pop	r14
    2ae0:	08 95       	ret

00002ae2 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	28 97       	sbiw	r28, 0x08	; 8
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	29 83       	std	Y+1, r18	; 0x01
    2afa:	3a 83       	std	Y+2, r19	; 0x02
    2afc:	4b 83       	std	Y+3, r20	; 0x03
    2afe:	5c 83       	std	Y+4, r21	; 0x04
    2b00:	6d 83       	std	Y+5, r22	; 0x05
    2b02:	7e 83       	std	Y+6, r23	; 0x06
    2b04:	8f 83       	std	Y+7, r24	; 0x07
    2b06:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2b08:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2b0c:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2b10:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2b1a:	63 30       	cpi	r22, 0x03	; 3
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	98 f0       	brcs	.+38     	; 0x2b46 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2b20:	e0 91 5b 06 	lds	r30, 0x065B
    2b24:	f0 91 5c 06 	lds	r31, 0x065C
    2b28:	21 2f       	mov	r18, r17
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	26 0f       	add	r18, r22
    2b2e:	37 1f       	adc	r19, r23
    2b30:	c9 01       	movw	r24, r18
    2b32:	a0 e0       	ldi	r26, 0x00	; 0
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	85 8b       	std	Z+21, r24	; 0x15
    2b38:	96 8b       	std	Z+22, r25	; 0x16
    2b3a:	a7 8b       	std	Z+23, r26	; 0x17
    2b3c:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2b3e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>

    return NRK_OK;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2b48:	28 96       	adiw	r28, 0x08	; 8
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	08 95       	ret

00002b5c <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2b5c:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2b60:	e0 91 5b 06 	lds	r30, 0x065B
    2b64:	f0 91 5c 06 	lds	r31, 0x065C
    2b68:	85 81       	ldd	r24, Z+5	; 0x05
    2b6a:	81 11       	cpse	r24, r1
    2b6c:	f7 cf       	rjmp	.-18     	; 0x2b5c <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2b6e:	08 95       	ret

00002b70 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2b70:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2b72:	0e 94 d5 10 	call	0x21aa	; 0x21aa <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2b76:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2b7a:	e0 91 5b 06 	lds	r30, 0x065B
    2b7e:	f0 91 5c 06 	lds	r31, 0x065C
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	92 a7       	std	Z+42, r25	; 0x2a
    2b88:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2b8e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2b92:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2b94:	88 3f       	cpi	r24, 0xF8	; 248
    2b96:	88 f4       	brcc	.+34     	; 0x2bba <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2b98:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2b9c:	2c 2f       	mov	r18, r28
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	2f 5f       	subi	r18, 0xFF	; 255
    2ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba4:	48 2f       	mov	r20, r24
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	24 17       	cp	r18, r20
    2baa:	35 07       	cpc	r19, r21
    2bac:	34 f4       	brge	.+12     	; 0x2bba <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2bb2:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2bb6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2bba:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2bbe:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2bc8:	e0 91 5b 06 	lds	r30, 0x065B
    2bcc:	f0 91 5c 06 	lds	r31, 0x065C
    2bd0:	80 85       	ldd	r24, Z+8	; 0x08
    2bd2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2bd6:	e0 91 5b 06 	lds	r30, 0x065B
    2bda:	f0 91 5c 06 	lds	r31, 0x065C
    2bde:	84 e0       	ldi	r24, 0x04	; 4
    2be0:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2be2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	08 95       	ret

00002bea <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2bf0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <nrk_stack_check>

    if (p == 0)
    2bf4:	20 97       	sbiw	r28, 0x00	; 0
    2bf6:	11 f4       	brne	.+4      	; 0x2bfc <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2bf8:	c1 e0       	ldi	r28, 0x01	; 1
    2bfa:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2bfc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c00:	e0 91 5b 06 	lds	r30, 0x065B
    2c04:	f0 91 5c 06 	lds	r31, 0x065C
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2c0c:	d2 a7       	std	Z+42, r29	; 0x2a
    2c0e:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2c10:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2c14:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2c16:	88 3f       	cpi	r24, 0xF8	; 248
    2c18:	88 f4       	brcc	.+34     	; 0x2c3c <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c1a:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2c1e:	2c 2f       	mov	r18, r28
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	2f 5f       	subi	r18, 0xFF	; 255
    2c24:	3f 4f       	sbci	r19, 0xFF	; 255
    2c26:	48 2f       	mov	r20, r24
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	24 17       	cp	r18, r20
    2c2c:	35 07       	cpc	r19, r21
    2c2e:	34 f4       	brge	.+12     	; 0x2c3c <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2c34:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2c38:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2c3c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2c40:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2c58:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c5c:	e0 91 5b 06 	lds	r30, 0x065B
    2c60:	f0 91 5c 06 	lds	r31, 0x065C
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2c68:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2c6c:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2c6e:	e0 91 5b 06 	lds	r30, 0x065B
    2c72:	f0 91 5c 06 	lds	r31, 0x065C
    2c76:	c8 2f       	mov	r28, r24
    2c78:	d0 e0       	ldi	r29, 0x00	; 0
    2c7a:	ae 01       	movw	r20, r28
    2c7c:	40 0f       	add	r20, r16
    2c7e:	51 1f       	adc	r21, r17
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	45 8b       	std	Z+21, r20	; 0x15
    2c86:	56 8b       	std	Z+22, r21	; 0x16
    2c88:	67 8b       	std	Z+23, r22	; 0x17
    2c8a:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2c8c:	87 ef       	ldi	r24, 0xF7	; 247
    2c8e:	8f 15       	cp	r24, r15
    2c90:	70 f0       	brcs	.+28     	; 0x2cae <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c92:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2c96:	21 96       	adiw	r28, 0x01	; 1
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	c2 17       	cp	r28, r18
    2c9e:	d3 07       	cpc	r29, r19
    2ca0:	34 f4       	brge	.+12     	; 0x2cae <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    2ca6:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);
    2caa:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2cae:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2cb2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	ff 90       	pop	r15
    2cc2:	08 95       	ret

00002cc4 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2cca:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2cce:	e0 91 5b 06 	lds	r30, 0x065B
    2cd2:	f0 91 5c 06 	lds	r31, 0x065C
    2cd6:	21 e0       	ldi	r18, 0x01	; 1
    2cd8:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2cda:	ce 01       	movw	r24, r28
    2cdc:	a0 e0       	ldi	r26, 0x00	; 0
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	85 8b       	std	Z+21, r24	; 0x15
    2ce2:	96 8b       	std	Z+22, r25	; 0x16
    2ce4:	a7 8b       	std	Z+23, r26	; 0x17
    2ce6:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2ce8:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2cec:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2cee:	88 3f       	cpi	r24, 0xF8	; 248
    2cf0:	88 f4       	brcc	.+34     	; 0x2d14 <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cf2:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2cf6:	2c 2f       	mov	r18, r28
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	2f 5f       	subi	r18, 0xFF	; 255
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	48 2f       	mov	r20, r24
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	24 17       	cp	r18, r20
    2d04:	35 07       	cpc	r19, r21
    2d06:	34 f4       	brge	.+12     	; 0x2d14 <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d0c:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);
    2d10:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2d14:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2d18:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	08 95       	ret

00002d24 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2d24:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2d26:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d2a:	e0 91 5b 06 	lds	r30, 0x065B
    2d2e:	f0 91 5c 06 	lds	r31, 0x065C
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2d36:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2d38:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2d3c:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2d3e:	88 3f       	cpi	r24, 0xF8	; 248
    2d40:	88 f4       	brcc	.+34     	; 0x2d64 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d42:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2d46:	2c 2f       	mov	r18, r28
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	2f 5f       	subi	r18, 0xFF	; 255
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	48 2f       	mov	r20, r24
    2d50:	50 e0       	ldi	r21, 0x00	; 0
    2d52:	24 17       	cp	r18, r20
    2d54:	35 07       	cpc	r19, r21
    2d56:	34 f4       	brge	.+12     	; 0x2d64 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d5c:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);
    2d60:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2d64:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2d68:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	28 97       	sbiw	r28, 0x08	; 8
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	29 83       	std	Y+1, r18	; 0x01
    2d8a:	3a 83       	std	Y+2, r19	; 0x02
    2d8c:	4b 83       	std	Y+3, r20	; 0x03
    2d8e:	5c 83       	std	Y+4, r21	; 0x04
    2d90:	6d 83       	std	Y+5, r22	; 0x05
    2d92:	7e 83       	std	Y+6, r23	; 0x06
    2d94:	8f 83       	std	Y+7, r24	; 0x07
    2d96:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2d98:	0e 94 d5 10 	call	0x21aa	; 0x21aa <nrk_stack_check>

    nrk_int_disable ();
    2d9c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2da0:	e0 91 5b 06 	lds	r30, 0x065B
    2da4:	f0 91 5c 06 	lds	r31, 0x065C
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	92 a7       	std	Z+42, r25	; 0x2a
    2db2:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2db4:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2db8:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2dc2:	e0 91 5b 06 	lds	r30, 0x065B
    2dc6:	f0 91 5c 06 	lds	r31, 0x065C
    2dca:	61 0f       	add	r22, r17
    2dcc:	71 1d       	adc	r23, r1
    2dce:	81 1d       	adc	r24, r1
    2dd0:	91 1d       	adc	r25, r1
    2dd2:	65 8b       	std	Z+21, r22	; 0x15
    2dd4:	76 8b       	std	Z+22, r23	; 0x16
    2dd6:	87 8b       	std	Z+23, r24	; 0x17
    2dd8:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2dda:	18 3f       	cpi	r17, 0xF8	; 248
    2ddc:	88 f4       	brcc	.+34     	; 0x2e00 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2dde:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    2de2:	21 2f       	mov	r18, r17
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	2f 5f       	subi	r18, 0xFF	; 255
    2de8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dea:	48 2f       	mov	r20, r24
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	24 17       	cp	r18, r20
    2df0:	35 07       	cpc	r19, r21
    2df2:	34 f4       	brge	.+12     	; 0x2e00 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2df8:	80 93 c2 04 	sts	0x04C2, r24
            _nrk_set_next_wakeup (timer);
    2dfc:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2e00:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2e04:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	28 96       	adiw	r28, 0x08	; 8
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	1f 91       	pop	r17
    2e1c:	08 95       	ret

00002e1e <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2e1e:	8f 92       	push	r8
    2e20:	9f 92       	push	r9
    2e22:	af 92       	push	r10
    2e24:	bf 92       	push	r11
    2e26:	cf 92       	push	r12
    2e28:	df 92       	push	r13
    2e2a:	ef 92       	push	r14
    2e2c:	ff 92       	push	r15
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	60 97       	sbiw	r28, 0x10	; 16
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	29 87       	std	Y+9, r18	; 0x09
    2e48:	3a 87       	std	Y+10, r19	; 0x0a
    2e4a:	4b 87       	std	Y+11, r20	; 0x0b
    2e4c:	5c 87       	std	Y+12, r21	; 0x0c
    2e4e:	6d 87       	std	Y+13, r22	; 0x0d
    2e50:	7e 87       	std	Y+14, r23	; 0x0e
    2e52:	8f 87       	std	Y+15, r24	; 0x0f
    2e54:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2e56:	ce 01       	movw	r24, r28
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2e5e:	89 80       	ldd	r8, Y+1	; 0x01
    2e60:	9a 80       	ldd	r9, Y+2	; 0x02
    2e62:	ab 80       	ldd	r10, Y+3	; 0x03
    2e64:	bc 80       	ldd	r11, Y+4	; 0x04
    2e66:	cd 80       	ldd	r12, Y+5	; 0x05
    2e68:	de 80       	ldd	r13, Y+6	; 0x06
    2e6a:	ef 80       	ldd	r14, Y+7	; 0x07
    2e6c:	f8 84       	ldd	r15, Y+8	; 0x08
    2e6e:	09 85       	ldd	r16, Y+9	; 0x09
    2e70:	1a 85       	ldd	r17, Y+10	; 0x0a
    2e72:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e74:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e76:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e78:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e7c:	78 89       	ldd	r23, Y+16	; 0x10
    2e7e:	ce 01       	movw	r24, r28
    2e80:	09 96       	adiw	r24, 0x09	; 9
    2e82:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2e86:	8f 3f       	cpi	r24, 0xFF	; 255
    2e88:	61 f0       	breq	.+24     	; 0x2ea2 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2e8a:	29 85       	ldd	r18, Y+9	; 0x09
    2e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e90:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e92:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e94:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e98:	98 89       	ldd	r25, Y+16	; 0x10
    2e9a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <nrk_wait>

    return NRK_OK;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2ea4:	60 96       	adiw	r28, 0x10	; 16
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	df 90       	pop	r13
    2ebe:	cf 90       	pop	r12
    2ec0:	bf 90       	pop	r11
    2ec2:	af 90       	pop	r10
    2ec4:	9f 90       	pop	r9
    2ec6:	8f 90       	pop	r8
    2ec8:	08 95       	ret

00002eca <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2eca:	e0 91 5b 06 	lds	r30, 0x065B
    2ece:	f0 91 5c 06 	lds	r31, 0x065C
}
    2ed2:	80 85       	ldd	r24, Z+8	; 0x08
    2ed4:	08 95       	ret

00002ed6 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2ee4:	1c 82       	std	Y+4, r1	; 0x04
    2ee6:	1d 82       	std	Y+5, r1	; 0x05
    2ee8:	1e 82       	std	Y+6, r1	; 0x06
    2eea:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2eec:	40 91 52 06 	lds	r20, 0x0652
    2ef0:	50 91 53 06 	lds	r21, 0x0653
    2ef4:	60 91 54 06 	lds	r22, 0x0654
    2ef8:	70 91 55 06 	lds	r23, 0x0655
    2efc:	48 83       	st	Y, r20
    2efe:	59 83       	std	Y+1, r21	; 0x01
    2f00:	6a 83       	std	Y+2, r22	; 0x02
    2f02:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2f04:	c0 90 56 06 	lds	r12, 0x0656
    2f08:	d0 90 57 06 	lds	r13, 0x0657
    2f0c:	e0 90 58 06 	lds	r14, 0x0658
    2f10:	f0 90 59 06 	lds	r15, 0x0659
    2f14:	cc 82       	std	Y+4, r12	; 0x04
    2f16:	dd 82       	std	Y+5, r13	; 0x05
    2f18:	ee 82       	std	Y+6, r14	; 0x06
    2f1a:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2f1c:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    2f20:	a8 2f       	mov	r26, r24
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	23 eb       	ldi	r18, 0xB3	; 179
    2f26:	36 ee       	ldi	r19, 0xE6	; 230
    2f28:	4e e0       	ldi	r20, 0x0E	; 14
    2f2a:	50 e0       	ldi	r21, 0x00	; 0
    2f2c:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__muluhisi3>
    2f30:	6c 0d       	add	r22, r12
    2f32:	7d 1d       	adc	r23, r13
    2f34:	8e 1d       	adc	r24, r14
    2f36:	9f 1d       	adc	r25, r15
    2f38:	6c 83       	std	Y+4, r22	; 0x04
    2f3a:	7d 83       	std	Y+5, r23	; 0x05
    2f3c:	8e 83       	std	Y+6, r24	; 0x06
    2f3e:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2f40:	4c 81       	ldd	r20, Y+4	; 0x04
    2f42:	5d 81       	ldd	r21, Y+5	; 0x05
    2f44:	6e 81       	ldd	r22, Y+6	; 0x06
    2f46:	7f 81       	ldd	r23, Y+7	; 0x07
    2f48:	41 15       	cp	r20, r1
    2f4a:	8a ec       	ldi	r24, 0xCA	; 202
    2f4c:	58 07       	cpc	r21, r24
    2f4e:	8a e9       	ldi	r24, 0x9A	; 154
    2f50:	68 07       	cpc	r22, r24
    2f52:	8b e3       	ldi	r24, 0x3B	; 59
    2f54:	78 07       	cpc	r23, r24
    2f56:	a0 f0       	brcs	.+40     	; 0x2f80 <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    2f58:	5a 5c       	subi	r21, 0xCA	; 202
    2f5a:	6a 49       	sbci	r22, 0x9A	; 154
    2f5c:	7b 43       	sbci	r23, 0x3B	; 59
    2f5e:	4c 83       	std	Y+4, r20	; 0x04
    2f60:	5d 83       	std	Y+5, r21	; 0x05
    2f62:	6e 83       	std	Y+6, r22	; 0x06
    2f64:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    2f66:	48 81       	ld	r20, Y
    2f68:	59 81       	ldd	r21, Y+1	; 0x01
    2f6a:	6a 81       	ldd	r22, Y+2	; 0x02
    2f6c:	7b 81       	ldd	r23, Y+3	; 0x03
    2f6e:	4f 5f       	subi	r20, 0xFF	; 255
    2f70:	5f 4f       	sbci	r21, 0xFF	; 255
    2f72:	6f 4f       	sbci	r22, 0xFF	; 255
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	48 83       	st	Y, r20
    2f78:	59 83       	std	Y+1, r21	; 0x01
    2f7a:	6a 83       	std	Y+2, r22	; 0x02
    2f7c:	7b 83       	std	Y+3, r23	; 0x03
    2f7e:	e0 cf       	rjmp	.-64     	; 0x2f40 <nrk_time_get+0x6a>
    }

}
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	08 95       	ret

00002f8e <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    2f8e:	8f 92       	push	r8
    2f90:	9f 92       	push	r9
    2f92:	af 92       	push	r10
    2f94:	bf 92       	push	r11
    2f96:	cf 92       	push	r12
    2f98:	df 92       	push	r13
    2f9a:	ef 92       	push	r14
    2f9c:	ff 92       	push	r15
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	60 97       	sbiw	r28, 0x10	; 16
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	09 83       	std	Y+1, r16	; 0x01
    2fba:	1a 83       	std	Y+2, r17	; 0x02
    2fbc:	2b 83       	std	Y+3, r18	; 0x03
    2fbe:	3c 83       	std	Y+4, r19	; 0x04
    2fc0:	4d 83       	std	Y+5, r20	; 0x05
    2fc2:	5e 83       	std	Y+6, r21	; 0x06
    2fc4:	6f 83       	std	Y+7, r22	; 0x07
    2fc6:	78 87       	std	Y+8, r23	; 0x08
    2fc8:	89 86       	std	Y+9, r8	; 0x09
    2fca:	9a 86       	std	Y+10, r9	; 0x0a
    2fcc:	ab 86       	std	Y+11, r10	; 0x0b
    2fce:	bc 86       	std	Y+12, r11	; 0x0c
    2fd0:	cd 86       	std	Y+13, r12	; 0x0d
    2fd2:	de 86       	std	Y+14, r13	; 0x0e
    2fd4:	ef 86       	std	Y+15, r14	; 0x0f
    2fd6:	f8 8a       	std	Y+16, r15	; 0x10
    2fd8:	89 80       	ldd	r8, Y+1	; 0x01
    2fda:	9a 80       	ldd	r9, Y+2	; 0x02
    2fdc:	ab 80       	ldd	r10, Y+3	; 0x03
    2fde:	bc 80       	ldd	r11, Y+4	; 0x04
    2fe0:	0d 81       	ldd	r16, Y+5	; 0x05
    2fe2:	1e 81       	ldd	r17, Y+6	; 0x06
    2fe4:	2f 81       	ldd	r18, Y+7	; 0x07
    2fe6:	38 85       	ldd	r19, Y+8	; 0x08
    2fe8:	c9 84       	ldd	r12, Y+9	; 0x09
    2fea:	da 84       	ldd	r13, Y+10	; 0x0a
    2fec:	eb 84       	ldd	r14, Y+11	; 0x0b
    2fee:	fc 84       	ldd	r15, Y+12	; 0x0c
    2ff0:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ff2:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ff4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ff6:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    2ff8:	8c 14       	cp	r8, r12
    2ffa:	9d 04       	cpc	r9, r13
    2ffc:	ae 04       	cpc	r10, r14
    2ffe:	bf 04       	cpc	r11, r15
    3000:	08 f4       	brcc	.+2      	; 0x3004 <nrk_time_sub+0x76>
    3002:	3f c0       	rjmp	.+126    	; 0x3082 <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    3004:	c8 14       	cp	r12, r8
    3006:	d9 04       	cpc	r13, r9
    3008:	ea 04       	cpc	r14, r10
    300a:	fb 04       	cpc	r15, r11
    300c:	91 f4       	brne	.+36     	; 0x3032 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    300e:	04 17       	cp	r16, r20
    3010:	15 07       	cpc	r17, r21
    3012:	26 07       	cpc	r18, r22
    3014:	37 07       	cpc	r19, r23
    3016:	a8 f1       	brcs	.+106    	; 0x3082 <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3018:	04 1b       	sub	r16, r20
    301a:	15 0b       	sbc	r17, r21
    301c:	26 0b       	sbc	r18, r22
    301e:	37 0b       	sbc	r19, r23
    3020:	04 83       	std	Z+4, r16	; 0x04
    3022:	15 83       	std	Z+5, r17	; 0x05
    3024:	26 83       	std	Z+6, r18	; 0x06
    3026:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    3028:	10 82       	st	Z, r1
    302a:	11 82       	std	Z+1, r1	; 0x01
    302c:	12 82       	std	Z+2, r1	; 0x02
    302e:	13 82       	std	Z+3, r1	; 0x03
    3030:	26 c0       	rjmp	.+76     	; 0x307e <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3032:	04 17       	cp	r16, r20
    3034:	15 07       	cpc	r17, r21
    3036:	26 07       	cpc	r18, r22
    3038:	37 07       	cpc	r19, r23
    303a:	88 f4       	brcc	.+34     	; 0x305e <nrk_time_sub+0xd0>
{
	high.secs--;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	88 1a       	sub	r8, r24
    3040:	91 08       	sbc	r9, r1
    3042:	a1 08       	sbc	r10, r1
    3044:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3046:	8c 18       	sub	r8, r12
    3048:	9d 08       	sbc	r9, r13
    304a:	ae 08       	sbc	r10, r14
    304c:	bf 08       	sbc	r11, r15
    304e:	80 82       	st	Z, r8
    3050:	91 82       	std	Z+1, r9	; 0x01
    3052:	a2 82       	std	Z+2, r10	; 0x02
    3054:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3056:	16 53       	subi	r17, 0x36	; 54
    3058:	25 46       	sbci	r18, 0x65	; 101
    305a:	34 4c       	sbci	r19, 0xC4	; 196
    305c:	08 c0       	rjmp	.+16     	; 0x306e <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    305e:	8c 18       	sub	r8, r12
    3060:	9d 08       	sbc	r9, r13
    3062:	ae 08       	sbc	r10, r14
    3064:	bf 08       	sbc	r11, r15
    3066:	80 82       	st	Z, r8
    3068:	91 82       	std	Z+1, r9	; 0x01
    306a:	a2 82       	std	Z+2, r10	; 0x02
    306c:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    306e:	04 1b       	sub	r16, r20
    3070:	15 0b       	sbc	r17, r21
    3072:	26 0b       	sbc	r18, r22
    3074:	37 0b       	sbc	r19, r23
    3076:	04 83       	std	Z+4, r16	; 0x04
    3078:	15 83       	std	Z+5, r17	; 0x05
    307a:	26 83       	std	Z+6, r18	; 0x06
    307c:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	01 c0       	rjmp	.+2      	; 0x3084 <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3082:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3084:	60 96       	adiw	r28, 0x10	; 16
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	ff 90       	pop	r15
    309a:	ef 90       	pop	r14
    309c:	df 90       	pop	r13
    309e:	cf 90       	pop	r12
    30a0:	bf 90       	pop	r11
    30a2:	af 90       	pop	r10
    30a4:	9f 90       	pop	r9
    30a6:	8f 90       	pop	r8
    30a8:	08 95       	ret

000030aa <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    30aa:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    30ac:	44 81       	ldd	r20, Z+4	; 0x04
    30ae:	55 81       	ldd	r21, Z+5	; 0x05
    30b0:	66 81       	ldd	r22, Z+6	; 0x06
    30b2:	77 81       	ldd	r23, Z+7	; 0x07
    30b4:	41 15       	cp	r20, r1
    30b6:	8a ec       	ldi	r24, 0xCA	; 202
    30b8:	58 07       	cpc	r21, r24
    30ba:	8a e9       	ldi	r24, 0x9A	; 154
    30bc:	68 07       	cpc	r22, r24
    30be:	8b e3       	ldi	r24, 0x3B	; 59
    30c0:	78 07       	cpc	r23, r24
    30c2:	a0 f0       	brcs	.+40     	; 0x30ec <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    30c4:	5a 5c       	subi	r21, 0xCA	; 202
    30c6:	6a 49       	sbci	r22, 0x9A	; 154
    30c8:	7b 43       	sbci	r23, 0x3B	; 59
    30ca:	44 83       	std	Z+4, r20	; 0x04
    30cc:	55 83       	std	Z+5, r21	; 0x05
    30ce:	66 83       	std	Z+6, r22	; 0x06
    30d0:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    30d2:	40 81       	ld	r20, Z
    30d4:	51 81       	ldd	r21, Z+1	; 0x01
    30d6:	62 81       	ldd	r22, Z+2	; 0x02
    30d8:	73 81       	ldd	r23, Z+3	; 0x03
    30da:	4f 5f       	subi	r20, 0xFF	; 255
    30dc:	5f 4f       	sbci	r21, 0xFF	; 255
    30de:	6f 4f       	sbci	r22, 0xFF	; 255
    30e0:	7f 4f       	sbci	r23, 0xFF	; 255
    30e2:	40 83       	st	Z, r20
    30e4:	51 83       	std	Z+1, r21	; 0x01
    30e6:	62 83       	std	Z+2, r22	; 0x02
    30e8:	73 83       	std	Z+3, r23	; 0x03
    30ea:	e0 cf       	rjmp	.-64     	; 0x30ac <nrk_time_compact_nanos+0x2>
    }
}
    30ec:	08 95       	ret

000030ee <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    30ee:	8f 92       	push	r8
    30f0:	9f 92       	push	r9
    30f2:	af 92       	push	r10
    30f4:	bf 92       	push	r11
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	60 97       	sbiw	r28, 0x10	; 16
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	09 83       	std	Y+1, r16	; 0x01
    3118:	1a 83       	std	Y+2, r17	; 0x02
    311a:	2b 83       	std	Y+3, r18	; 0x03
    311c:	3c 83       	std	Y+4, r19	; 0x04
    311e:	4d 83       	std	Y+5, r20	; 0x05
    3120:	5e 83       	std	Y+6, r21	; 0x06
    3122:	6f 83       	std	Y+7, r22	; 0x07
    3124:	78 87       	std	Y+8, r23	; 0x08
    3126:	89 86       	std	Y+9, r8	; 0x09
    3128:	9a 86       	std	Y+10, r9	; 0x0a
    312a:	ab 86       	std	Y+11, r10	; 0x0b
    312c:	bc 86       	std	Y+12, r11	; 0x0c
    312e:	cd 86       	std	Y+13, r12	; 0x0d
    3130:	de 86       	std	Y+14, r13	; 0x0e
    3132:	ef 86       	std	Y+15, r14	; 0x0f
    3134:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3136:	49 85       	ldd	r20, Y+9	; 0x09
    3138:	5a 85       	ldd	r21, Y+10	; 0x0a
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	09 81       	ldd	r16, Y+1	; 0x01
    3140:	1a 81       	ldd	r17, Y+2	; 0x02
    3142:	2b 81       	ldd	r18, Y+3	; 0x03
    3144:	3c 81       	ldd	r19, Y+4	; 0x04
    3146:	40 0f       	add	r20, r16
    3148:	51 1f       	adc	r21, r17
    314a:	62 1f       	adc	r22, r18
    314c:	73 1f       	adc	r23, r19
    314e:	fc 01       	movw	r30, r24
    3150:	40 83       	st	Z, r20
    3152:	51 83       	std	Z+1, r21	; 0x01
    3154:	62 83       	std	Z+2, r22	; 0x02
    3156:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3158:	4d 85       	ldd	r20, Y+13	; 0x0d
    315a:	5e 85       	ldd	r21, Y+14	; 0x0e
    315c:	6f 85       	ldd	r22, Y+15	; 0x0f
    315e:	78 89       	ldd	r23, Y+16	; 0x10
    3160:	0d 81       	ldd	r16, Y+5	; 0x05
    3162:	1e 81       	ldd	r17, Y+6	; 0x06
    3164:	2f 81       	ldd	r18, Y+7	; 0x07
    3166:	38 85       	ldd	r19, Y+8	; 0x08
    3168:	40 0f       	add	r20, r16
    316a:	51 1f       	adc	r21, r17
    316c:	62 1f       	adc	r22, r18
    316e:	73 1f       	adc	r23, r19
    3170:	44 83       	std	Z+4, r20	; 0x04
    3172:	55 83       	std	Z+5, r21	; 0x05
    3174:	66 83       	std	Z+6, r22	; 0x06
    3176:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3178:	0e 94 55 18 	call	0x30aa	; 0x30aa <nrk_time_compact_nanos>
return NRK_OK;
}
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	60 96       	adiw	r28, 0x10	; 16
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	ff 90       	pop	r15
    3194:	ef 90       	pop	r14
    3196:	df 90       	pop	r13
    3198:	cf 90       	pop	r12
    319a:	bf 90       	pop	r11
    319c:	af 90       	pop	r10
    319e:	9f 90       	pop	r9
    31a0:	8f 90       	pop	r8
    31a2:	08 95       	ret

000031a4 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    31a4:	60 93 52 06 	sts	0x0652, r22
    31a8:	70 93 53 06 	sts	0x0653, r23
    31ac:	80 93 54 06 	sts	0x0654, r24
    31b0:	90 93 55 06 	sts	0x0655, r25
  nrk_system_time.nano_secs=nano_secs;
    31b4:	20 93 56 06 	sts	0x0656, r18
    31b8:	30 93 57 06 	sts	0x0657, r19
    31bc:	40 93 58 06 	sts	0x0658, r20
    31c0:	50 93 59 06 	sts	0x0659, r21
    31c4:	08 95       	ret

000031c6 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    31c6:	2f 92       	push	r2
    31c8:	3f 92       	push	r3
    31ca:	4f 92       	push	r4
    31cc:	5f 92       	push	r5
    31ce:	6f 92       	push	r6
    31d0:	7f 92       	push	r7
    31d2:	8f 92       	push	r8
    31d4:	9f 92       	push	r9
    31d6:	af 92       	push	r10
    31d8:	bf 92       	push	r11
    31da:	cf 92       	push	r12
    31dc:	df 92       	push	r13
    31de:	ef 92       	push	r14
    31e0:	ff 92       	push	r15
    31e2:	0f 93       	push	r16
    31e4:	1f 93       	push	r17
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	62 97       	sbiw	r28, 0x12	; 18
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    31fa:	dc 01       	movw	r26, r24
    31fc:	4d 90       	ld	r4, X+
    31fe:	5d 90       	ld	r5, X+
    3200:	6d 90       	ld	r6, X+
    3202:	7c 90       	ld	r7, X
    3204:	13 97       	sbiw	r26, 0x03	; 3
    3206:	14 96       	adiw	r26, 0x04	; 4
    3208:	6d 91       	ld	r22, X+
    320a:	7d 91       	ld	r23, X+
    320c:	8d 91       	ld	r24, X+
    320e:	9c 91       	ld	r25, X
    3210:	17 97       	sbiw	r26, 0x07	; 7
    3212:	41 14       	cp	r4, r1
    3214:	51 04       	cpc	r5, r1
    3216:	61 04       	cpc	r6, r1
    3218:	71 04       	cpc	r7, r1
    321a:	09 f4       	brne	.+2      	; 0x321e <_nrk_time_to_ticks+0x58>
    321c:	6c c0       	rjmp	.+216    	; 0x32f6 <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    321e:	b2 e4       	ldi	r27, 0x42	; 66
    3220:	4b 16       	cp	r4, r27
    3222:	51 04       	cpc	r5, r1
    3224:	61 04       	cpc	r6, r1
    3226:	71 04       	cpc	r7, r1
    3228:	08 f0       	brcs	.+2      	; 0x322c <_nrk_time_to_ticks+0x66>
    322a:	6d c0       	rjmp	.+218    	; 0x3306 <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    322c:	7b 01       	movw	r14, r22
    322e:	8c 01       	movw	r16, r24
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	a9 01       	movw	r20, r18
    3236:	69 83       	std	Y+1, r22	; 0x01
    3238:	fa 82       	std	Y+2, r15	; 0x02
    323a:	0b 83       	std	Y+3, r16	; 0x03
    323c:	1c 83       	std	Y+4, r17	; 0x04
    323e:	2d 83       	std	Y+5, r18	; 0x05
    3240:	3e 83       	std	Y+6, r19	; 0x06
    3242:	4f 83       	std	Y+7, r20	; 0x07
    3244:	58 87       	std	Y+8, r21	; 0x08
    3246:	a0 e0       	ldi	r26, 0x00	; 0
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	19 8a       	std	Y+17, r1	; 0x11
    324c:	1a 8a       	std	Y+18, r1	; 0x12
    324e:	31 2c       	mov	r3, r1
    3250:	81 2c       	mov	r8, r1
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	e0 e0       	ldi	r30, 0x00	; 0
    3256:	91 2c       	mov	r9, r1
    3258:	9d 01       	movw	r18, r26
    325a:	49 89       	ldd	r20, Y+17	; 0x11
    325c:	5a 89       	ldd	r21, Y+18	; 0x12
    325e:	63 2d       	mov	r22, r3
    3260:	78 2d       	mov	r23, r8
    3262:	8f 2f       	mov	r24, r31
    3264:	9e 2f       	mov	r25, r30
    3266:	a9 80       	ldd	r10, Y+1	; 0x01
    3268:	ba 80       	ldd	r11, Y+2	; 0x02
    326a:	cb 80       	ldd	r12, Y+3	; 0x03
    326c:	dc 80       	ldd	r13, Y+4	; 0x04
    326e:	ed 80       	ldd	r14, Y+5	; 0x05
    3270:	fe 80       	ldd	r15, Y+6	; 0x06
    3272:	0f 81       	ldd	r16, Y+7	; 0x07
    3274:	18 85       	ldd	r17, Y+8	; 0x08
    3276:	0e 94 8b 24 	call	0x4916	; 0x4916 <__adddi3>
    327a:	22 2e       	mov	r2, r18
    327c:	39 87       	std	Y+9, r19	; 0x09
    327e:	4a 87       	std	Y+10, r20	; 0x0a
    3280:	5b 87       	std	Y+11, r21	; 0x0b
    3282:	6c 87       	std	Y+12, r22	; 0x0c
    3284:	7d 87       	std	Y+13, r23	; 0x0d
    3286:	8e 87       	std	Y+14, r24	; 0x0e
    3288:	9f 87       	std	Y+15, r25	; 0x0f
    328a:	9d 01       	movw	r18, r26
    328c:	49 89       	ldd	r20, Y+17	; 0x11
    328e:	5a 89       	ldd	r21, Y+18	; 0x12
    3290:	63 2d       	mov	r22, r3
    3292:	78 2d       	mov	r23, r8
    3294:	8f 2f       	mov	r24, r31
    3296:	9e 2f       	mov	r25, r30
    3298:	36 53       	subi	r19, 0x36	; 54
    329a:	45 46       	sbci	r20, 0x65	; 101
    329c:	54 4c       	sbci	r21, 0xC4	; 196
    329e:	6f 4f       	sbci	r22, 0xFF	; 255
    32a0:	7f 4f       	sbci	r23, 0xFF	; 255
    32a2:	8f 4f       	sbci	r24, 0xFF	; 255
    32a4:	9f 4f       	sbci	r25, 0xFF	; 255
    32a6:	d9 01       	movw	r26, r18
    32a8:	49 8b       	std	Y+17, r20	; 0x11
    32aa:	5a 8b       	std	Y+18, r21	; 0x12
    32ac:	36 2e       	mov	r3, r22
    32ae:	87 2e       	mov	r8, r23
    32b0:	f8 2f       	mov	r31, r24
    32b2:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    32b4:	49 2d       	mov	r20, r9
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	44 15       	cp	r20, r4
    32be:	55 05       	cpc	r21, r5
    32c0:	66 05       	cpc	r22, r6
    32c2:	77 05       	cpc	r23, r7
    32c4:	10 f4       	brcc	.+4      	; 0x32ca <_nrk_time_to_ticks+0x104>
    32c6:	93 94       	inc	r9
    32c8:	c7 cf       	rjmp	.-114    	; 0x3258 <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    32ca:	83 eb       	ldi	r24, 0xB3	; 179
    32cc:	a8 2e       	mov	r10, r24
    32ce:	96 ee       	ldi	r25, 0xE6	; 230
    32d0:	b9 2e       	mov	r11, r25
    32d2:	2e e0       	ldi	r18, 0x0E	; 14
    32d4:	c2 2e       	mov	r12, r18
    32d6:	d1 2c       	mov	r13, r1
    32d8:	e1 2c       	mov	r14, r1
    32da:	f1 2c       	mov	r15, r1
    32dc:	00 e0       	ldi	r16, 0x00	; 0
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	22 2d       	mov	r18, r2
    32e2:	39 85       	ldd	r19, Y+9	; 0x09
    32e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    32e6:	5b 85       	ldd	r21, Y+11	; 0x0b
    32e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    32ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    32ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    32ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f0:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivdi3>
    32f4:	06 c0       	rjmp	.+12     	; 0x3302 <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    32f6:	23 eb       	ldi	r18, 0xB3	; 179
    32f8:	36 ee       	ldi	r19, 0xE6	; 230
    32fa:	4e e0       	ldi	r20, 0x0E	; 14
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodsi4>
    3302:	c9 01       	movw	r24, r18
    3304:	02 c0       	rjmp	.+4      	; 0x330a <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    330a:	62 96       	adiw	r28, 0x12	; 18
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	bf 90       	pop	r11
    3328:	af 90       	pop	r10
    332a:	9f 90       	pop	r9
    332c:	8f 90       	pop	r8
    332e:	7f 90       	pop	r7
    3330:	6f 90       	pop	r6
    3332:	5f 90       	pop	r5
    3334:	4f 90       	pop	r4
    3336:	3f 90       	pop	r3
    3338:	2f 90       	pop	r2
    333a:	08 95       	ret

0000333c <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	28 97       	sbiw	r28, 0x08	; 8
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3358:	6b 01       	movw	r12, r22
    335a:	7c 01       	movw	r14, r24
    335c:	3a e0       	ldi	r19, 0x0A	; 10
    335e:	f6 94       	lsr	r15
    3360:	e7 94       	ror	r14
    3362:	d7 94       	ror	r13
    3364:	c7 94       	ror	r12
    3366:	3a 95       	dec	r19
    3368:	d1 f7       	brne	.-12     	; 0x335e <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    336a:	c9 82       	std	Y+1, r12	; 0x01
    336c:	da 82       	std	Y+2, r13	; 0x02
    336e:	eb 82       	std	Y+3, r14	; 0x03
    3370:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3372:	9b 01       	movw	r18, r22
    3374:	ac 01       	movw	r20, r24
    3376:	33 70       	andi	r19, 0x03	; 3
    3378:	44 27       	eor	r20, r20
    337a:	55 27       	eor	r21, r21
    337c:	63 eb       	ldi	r22, 0xB3	; 179
    337e:	76 ee       	ldi	r23, 0xE6	; 230
    3380:	8e e0       	ldi	r24, 0x0E	; 14
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__mulsi3>

return t;
    3388:	6d 83       	std	Y+5, r22	; 0x05
    338a:	7e 83       	std	Y+6, r23	; 0x06
    338c:	8f 83       	std	Y+7, r24	; 0x07
    338e:	98 87       	std	Y+8, r25	; 0x08
    3390:	2c 2d       	mov	r18, r12
    3392:	3a 81       	ldd	r19, Y+2	; 0x02
    3394:	4b 81       	ldd	r20, Y+3	; 0x03
    3396:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3398:	28 96       	adiw	r28, 0x08	; 8
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	ff 90       	pop	r15
    33aa:	ef 90       	pop	r14
    33ac:	df 90       	pop	r13
    33ae:	cf 90       	pop	r12
    33b0:	08 95       	ret

000033b2 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    33b2:	2f 92       	push	r2
    33b4:	3f 92       	push	r3
    33b6:	4f 92       	push	r4
    33b8:	5f 92       	push	r5
    33ba:	6f 92       	push	r6
    33bc:	7f 92       	push	r7
    33be:	8f 92       	push	r8
    33c0:	9f 92       	push	r9
    33c2:	af 92       	push	r10
    33c4:	bf 92       	push	r11
    33c6:	cf 92       	push	r12
    33c8:	df 92       	push	r13
    33ca:	ef 92       	push	r14
    33cc:	ff 92       	push	r15
    33ce:	0f 93       	push	r16
    33d0:	1f 93       	push	r17
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	62 97       	sbiw	r28, 0x12	; 18
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    33e6:	dc 01       	movw	r26, r24
    33e8:	4d 90       	ld	r4, X+
    33ea:	5d 90       	ld	r5, X+
    33ec:	6d 90       	ld	r6, X+
    33ee:	7c 90       	ld	r7, X
    33f0:	13 97       	sbiw	r26, 0x03	; 3
    33f2:	14 96       	adiw	r26, 0x04	; 4
    33f4:	6d 91       	ld	r22, X+
    33f6:	7d 91       	ld	r23, X+
    33f8:	8d 91       	ld	r24, X+
    33fa:	9c 91       	ld	r25, X
    33fc:	17 97       	sbiw	r26, 0x07	; 7
    33fe:	41 14       	cp	r4, r1
    3400:	51 04       	cpc	r5, r1
    3402:	61 04       	cpc	r6, r1
    3404:	71 04       	cpc	r7, r1
    3406:	09 f4       	brne	.+2      	; 0x340a <_nrk_time_to_ticks_long+0x58>
    3408:	66 c0       	rjmp	.+204    	; 0x34d6 <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    340a:	7b 01       	movw	r14, r22
    340c:	8c 01       	movw	r16, r24
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	a9 01       	movw	r20, r18
    3414:	69 83       	std	Y+1, r22	; 0x01
    3416:	fa 82       	std	Y+2, r15	; 0x02
    3418:	0b 83       	std	Y+3, r16	; 0x03
    341a:	1c 83       	std	Y+4, r17	; 0x04
    341c:	2d 83       	std	Y+5, r18	; 0x05
    341e:	3e 83       	std	Y+6, r19	; 0x06
    3420:	4f 83       	std	Y+7, r20	; 0x07
    3422:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3424:	a0 e0       	ldi	r26, 0x00	; 0
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	19 8a       	std	Y+17, r1	; 0x11
    342a:	1a 8a       	std	Y+18, r1	; 0x12
    342c:	31 2c       	mov	r3, r1
    342e:	81 2c       	mov	r8, r1
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	e0 e0       	ldi	r30, 0x00	; 0
    3434:	91 2c       	mov	r9, r1
    3436:	9d 01       	movw	r18, r26
    3438:	49 89       	ldd	r20, Y+17	; 0x11
    343a:	5a 89       	ldd	r21, Y+18	; 0x12
    343c:	63 2d       	mov	r22, r3
    343e:	78 2d       	mov	r23, r8
    3440:	8f 2f       	mov	r24, r31
    3442:	9e 2f       	mov	r25, r30
    3444:	a9 80       	ldd	r10, Y+1	; 0x01
    3446:	ba 80       	ldd	r11, Y+2	; 0x02
    3448:	cb 80       	ldd	r12, Y+3	; 0x03
    344a:	dc 80       	ldd	r13, Y+4	; 0x04
    344c:	ed 80       	ldd	r14, Y+5	; 0x05
    344e:	fe 80       	ldd	r15, Y+6	; 0x06
    3450:	0f 81       	ldd	r16, Y+7	; 0x07
    3452:	18 85       	ldd	r17, Y+8	; 0x08
    3454:	0e 94 8b 24 	call	0x4916	; 0x4916 <__adddi3>
    3458:	22 2e       	mov	r2, r18
    345a:	39 87       	std	Y+9, r19	; 0x09
    345c:	4a 87       	std	Y+10, r20	; 0x0a
    345e:	5b 87       	std	Y+11, r21	; 0x0b
    3460:	6c 87       	std	Y+12, r22	; 0x0c
    3462:	7d 87       	std	Y+13, r23	; 0x0d
    3464:	8e 87       	std	Y+14, r24	; 0x0e
    3466:	9f 87       	std	Y+15, r25	; 0x0f
    3468:	9d 01       	movw	r18, r26
    346a:	49 89       	ldd	r20, Y+17	; 0x11
    346c:	5a 89       	ldd	r21, Y+18	; 0x12
    346e:	63 2d       	mov	r22, r3
    3470:	78 2d       	mov	r23, r8
    3472:	8f 2f       	mov	r24, r31
    3474:	9e 2f       	mov	r25, r30
    3476:	36 53       	subi	r19, 0x36	; 54
    3478:	45 46       	sbci	r20, 0x65	; 101
    347a:	54 4c       	sbci	r21, 0xC4	; 196
    347c:	6f 4f       	sbci	r22, 0xFF	; 255
    347e:	7f 4f       	sbci	r23, 0xFF	; 255
    3480:	8f 4f       	sbci	r24, 0xFF	; 255
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	d9 01       	movw	r26, r18
    3486:	49 8b       	std	Y+17, r20	; 0x11
    3488:	5a 8b       	std	Y+18, r21	; 0x12
    348a:	36 2e       	mov	r3, r22
    348c:	87 2e       	mov	r8, r23
    348e:	f8 2f       	mov	r31, r24
    3490:	e9 2f       	mov	r30, r25
    3492:	49 2d       	mov	r20, r9
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	44 15       	cp	r20, r4
    349c:	55 05       	cpc	r21, r5
    349e:	66 05       	cpc	r22, r6
    34a0:	77 05       	cpc	r23, r7
    34a2:	10 f4       	brcc	.+4      	; 0x34a8 <_nrk_time_to_ticks_long+0xf6>
    34a4:	93 94       	inc	r9
    34a6:	c7 cf       	rjmp	.-114    	; 0x3436 <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    34a8:	43 eb       	ldi	r20, 0xB3	; 179
    34aa:	a4 2e       	mov	r10, r20
    34ac:	56 ee       	ldi	r21, 0xE6	; 230
    34ae:	b5 2e       	mov	r11, r21
    34b0:	6e e0       	ldi	r22, 0x0E	; 14
    34b2:	c6 2e       	mov	r12, r22
    34b4:	d1 2c       	mov	r13, r1
    34b6:	e1 2c       	mov	r14, r1
    34b8:	f1 2c       	mov	r15, r1
    34ba:	00 e0       	ldi	r16, 0x00	; 0
    34bc:	10 e0       	ldi	r17, 0x00	; 0
    34be:	22 2d       	mov	r18, r2
    34c0:	39 85       	ldd	r19, Y+9	; 0x09
    34c2:	4a 85       	ldd	r20, Y+10	; 0x0a
    34c4:	5b 85       	ldd	r21, Y+11	; 0x0b
    34c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    34c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    34ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    34cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    34ce:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivdi3>
    34d2:	ca 01       	movw	r24, r20
    34d4:	07 c0       	rjmp	.+14     	; 0x34e4 <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    34d6:	23 eb       	ldi	r18, 0xB3	; 179
    34d8:	36 ee       	ldi	r19, 0xE6	; 230
    34da:	4e e0       	ldi	r20, 0x0E	; 14
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodsi4>
    34e2:	ca 01       	movw	r24, r20
}
return ticks;
}
    34e4:	b9 01       	movw	r22, r18
    34e6:	62 96       	adiw	r28, 0x12	; 18
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	cf 90       	pop	r12
    3502:	bf 90       	pop	r11
    3504:	af 90       	pop	r10
    3506:	9f 90       	pop	r9
    3508:	8f 90       	pop	r8
    350a:	7f 90       	pop	r7
    350c:	6f 90       	pop	r6
    350e:	5f 90       	pop	r5
    3510:	4f 90       	pop	r4
    3512:	3f 90       	pop	r3
    3514:	2f 90       	pop	r2
    3516:	08 95       	ret

00003518 <nrk_idle_task>:

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3518:	c1 e0       	ldi	r28, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    351a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    351e:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <_nrk_get_next_wakeup>
    3522:	84 30       	cpi	r24, 0x04	; 4
    3524:	10 f4       	brcc	.+4      	; 0x352a <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3526:	c0 93 4f 06 	sts	0x064F, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    352a:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    352e:	80 91 c4 04 	lds	r24, 0x04C4
    3532:	85 35       	cpi	r24, 0x55	; 85
    3534:	19 f0       	breq	.+6      	; 0x353c <nrk_idle_task+0x24>
    3536:	88 e0       	ldi	r24, 0x08	; 8
    3538:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    353c:	80 91 7e 41 	lds	r24, 0x417E
    3540:	85 35       	cpi	r24, 0x55	; 85
    3542:	59 f3       	breq	.-42     	; 0x351a <nrk_idle_task+0x2>
    3544:	88 e0       	ldi	r24, 0x08	; 8
    3546:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <nrk_error_add>
    354a:	e7 cf       	rjmp	.-50     	; 0x351a <nrk_idle_task+0x2>

0000354c <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    354c:	2f 92       	push	r2
    354e:	3f 92       	push	r3
    3550:	4f 92       	push	r4
    3552:	5f 92       	push	r5
    3554:	6f 92       	push	r6
    3556:	7f 92       	push	r7
    3558:	8f 92       	push	r8
    355a:	9f 92       	push	r9
    355c:	af 92       	push	r10
    355e:	bf 92       	push	r11
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	29 97       	sbiw	r28, 0x09	; 9
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    3580:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    3584:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    3588:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    358c:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <_nrk_high_speed_timer_get>
    3590:	9f 83       	std	Y+7, r25	; 0x07
    3592:	8e 83       	std	Y+6, r24	; 0x06
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3594:	8a ef       	ldi	r24, 0xFA	; 250
    3596:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    359a:	a0 91 c2 04 	lds	r26, 0x04C2
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	23 eb       	ldi	r18, 0xB3	; 179
    35a2:	36 ee       	ldi	r19, 0xE6	; 230
    35a4:	4e e0       	ldi	r20, 0x0E	; 14
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__muluhisi3>
    35ac:	6b 01       	movw	r12, r22
    35ae:	7c 01       	movw	r14, r24
    35b0:	80 91 56 06 	lds	r24, 0x0656
    35b4:	90 91 57 06 	lds	r25, 0x0657
    35b8:	a0 91 58 06 	lds	r26, 0x0658
    35bc:	b0 91 59 06 	lds	r27, 0x0659
    35c0:	c8 0e       	add	r12, r24
    35c2:	d9 1e       	adc	r13, r25
    35c4:	ea 1e       	adc	r14, r26
    35c6:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35c8:	c7 01       	movw	r24, r14
    35ca:	b6 01       	movw	r22, r12
    35cc:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodsi4>
    35d0:	00 91 52 06 	lds	r16, 0x0652
    35d4:	10 91 53 06 	lds	r17, 0x0653
    35d8:	20 91 54 06 	lds	r18, 0x0654
    35dc:	30 91 55 06 	lds	r19, 0x0655
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    35e0:	c6 1a       	sub	r12, r22
    35e2:	d7 0a       	sbc	r13, r23
    35e4:	e8 0a       	sbc	r14, r24
    35e6:	f9 0a       	sbc	r15, r25
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35e8:	63 eb       	ldi	r22, 0xB3	; 179
    35ea:	46 2e       	mov	r4, r22
    35ec:	66 ee       	ldi	r22, 0xE6	; 230
    35ee:	56 2e       	mov	r5, r22
    35f0:	6e e0       	ldi	r22, 0x0E	; 14
    35f2:	66 2e       	mov	r6, r22
    35f4:	71 2c       	mov	r7, r1
    35f6:	48 01       	movw	r8, r16
    35f8:	59 01       	movw	r10, r18
    35fa:	9f ef       	ldi	r25, 0xFF	; 255
    35fc:	89 1a       	sub	r8, r25
    35fe:	99 0a       	sbc	r9, r25
    3600:	a9 0a       	sbc	r10, r25
    3602:	b9 0a       	sbc	r11, r25
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3604:	c1 14       	cp	r12, r1
    3606:	aa ec       	ldi	r26, 0xCA	; 202
    3608:	da 06       	cpc	r13, r26
    360a:	aa e9       	ldi	r26, 0x9A	; 154
    360c:	ea 06       	cpc	r14, r26
    360e:	ab e3       	ldi	r26, 0x3B	; 59
    3610:	fa 06       	cpc	r15, r26
    3612:	98 f0       	brcs	.+38     	; 0x363a <_nrk_scheduler+0xee>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3614:	8a ec       	ldi	r24, 0xCA	; 202
    3616:	d8 1a       	sub	r13, r24
    3618:	8a e9       	ldi	r24, 0x9A	; 154
    361a:	e8 0a       	sbc	r14, r24
    361c:	8b e3       	ldi	r24, 0x3B	; 59
    361e:	f8 0a       	sbc	r15, r24
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3620:	c7 01       	movw	r24, r14
    3622:	b6 01       	movw	r22, r12
    3624:	a3 01       	movw	r20, r6
    3626:	92 01       	movw	r18, r4
    3628:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodsi4>
    362c:	c6 1a       	sub	r12, r22
    362e:	d7 0a       	sbc	r13, r23
    3630:	e8 0a       	sbc	r14, r24
    3632:	f9 0a       	sbc	r15, r25
    3634:	95 01       	movw	r18, r10
    3636:	84 01       	movw	r16, r8
    3638:	de cf       	rjmp	.-68     	; 0x35f6 <_nrk_scheduler+0xaa>
    363a:	00 93 52 06 	sts	0x0652, r16
    363e:	10 93 53 06 	sts	0x0653, r17
    3642:	20 93 54 06 	sts	0x0654, r18
    3646:	30 93 55 06 	sts	0x0655, r19
    364a:	c0 92 56 06 	sts	0x0656, r12
    364e:	d0 92 57 06 	sts	0x0657, r13
    3652:	e0 92 58 06 	sts	0x0658, r14
    3656:	f0 92 59 06 	sts	0x0659, r15
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    365a:	e0 91 5b 06 	lds	r30, 0x065B
    365e:	f0 91 5c 06 	lds	r31, 0x065C
    3662:	85 81       	ldd	r24, Z+5	; 0x05
    3664:	88 23       	and	r24, r24
    3666:	39 f1       	breq	.+78     	; 0x36b6 <_nrk_scheduler+0x16a>
    3668:	81 85       	ldd	r24, Z+9	; 0x09
    366a:	84 30       	cpi	r24, 0x04	; 4
    366c:	21 f1       	breq	.+72     	; 0x36b6 <_nrk_scheduler+0x16a>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    366e:	87 81       	ldd	r24, Z+7	; 0x07
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	29 f0       	breq	.+10     	; 0x367e <_nrk_scheduler+0x132>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3674:	88 23       	and	r24, r24
    3676:	41 f0       	breq	.+16     	; 0x3688 <_nrk_scheduler+0x13c>
    3678:	86 81       	ldd	r24, Z+6	; 0x06
    367a:	81 11       	cpse	r24, r1
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <_nrk_scheduler+0x136>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    367e:	85 e0       	ldi	r24, 0x05	; 5
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <_nrk_scheduler+0x138>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	81 87       	std	Z+9, r24	; 0x09
    3686:	14 c0       	rjmp	.+40     	; 0x36b0 <_nrk_scheduler+0x164>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    368c:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    368e:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3690:	85 89       	ldd	r24, Z+21	; 0x15
    3692:	96 89       	ldd	r25, Z+22	; 0x16
    3694:	a7 89       	ldd	r26, Z+23	; 0x17
    3696:	b0 8d       	ldd	r27, Z+24	; 0x18
    3698:	89 2b       	or	r24, r25
    369a:	8a 2b       	or	r24, r26
    369c:	8b 2b       	or	r24, r27
    369e:	41 f4       	brne	.+16     	; 0x36b0 <_nrk_scheduler+0x164>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    36a0:	81 8d       	ldd	r24, Z+25	; 0x19
    36a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    36a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    36a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    36a8:	85 8b       	std	Z+21, r24	; 0x15
    36aa:	96 8b       	std	Z+22, r25	; 0x16
    36ac:	a7 8b       	std	Z+23, r26	; 0x17
    36ae:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    36b0:	80 85       	ldd	r24, Z+8	; 0x08
    36b2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    36b6:	e0 91 5b 06 	lds	r30, 0x065B
    36ba:	f0 91 5c 06 	lds	r31, 0x065C
    36be:	85 a1       	ldd	r24, Z+37	; 0x25
    36c0:	96 a1       	ldd	r25, Z+38	; 0x26
    36c2:	a7 a1       	ldd	r26, Z+39	; 0x27
    36c4:	b0 a5       	ldd	r27, Z+40	; 0x28
    36c6:	89 2b       	or	r24, r25
    36c8:	8a 2b       	or	r24, r26
    36ca:	8b 2b       	or	r24, r27
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <_nrk_scheduler+0x184>
    36ce:	44 c0       	rjmp	.+136    	; 0x3758 <_nrk_scheduler+0x20c>
    36d0:	20 85       	ldd	r18, Z+8	; 0x08
    36d2:	22 23       	and	r18, r18
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <_nrk_scheduler+0x18c>
    36d6:	40 c0       	rjmp	.+128    	; 0x3758 <_nrk_scheduler+0x20c>
    36d8:	81 85       	ldd	r24, Z+9	; 0x09
    36da:	84 30       	cpi	r24, 0x04	; 4
    36dc:	e9 f1       	breq	.+122    	; 0x3758 <_nrk_scheduler+0x20c>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    36de:	45 8d       	ldd	r20, Z+29	; 0x1d
    36e0:	56 8d       	ldd	r21, Z+30	; 0x1e
    36e2:	67 8d       	ldd	r22, Z+31	; 0x1f
    36e4:	70 a1       	ldd	r23, Z+32	; 0x20
    36e6:	80 91 c2 04 	lds	r24, 0x04C2
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a0 e0       	ldi	r26, 0x00	; 0
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	48 17       	cp	r20, r24
    36f2:	59 07       	cpc	r21, r25
    36f4:	6a 07       	cpc	r22, r26
    36f6:	7b 07       	cpc	r23, r27
    36f8:	68 f4       	brcc	.+26     	; 0x3714 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    36fa:	62 2f       	mov	r22, r18
    36fc:	82 e0       	ldi	r24, 0x02	; 2
    36fe:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3702:	e0 91 5b 06 	lds	r30, 0x065B
    3706:	f0 91 5c 06 	lds	r31, 0x065C
    370a:	15 8e       	std	Z+29, r1	; 0x1d
    370c:	16 8e       	std	Z+30, r1	; 0x1e
    370e:	17 8e       	std	Z+31, r1	; 0x1f
    3710:	10 a2       	std	Z+32, r1	; 0x20
    3712:	08 c0       	rjmp	.+16     	; 0x3724 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3714:	48 1b       	sub	r20, r24
    3716:	59 0b       	sbc	r21, r25
    3718:	6a 0b       	sbc	r22, r26
    371a:	7b 0b       	sbc	r23, r27
    371c:	45 8f       	std	Z+29, r20	; 0x1d
    371e:	56 8f       	std	Z+30, r21	; 0x1e
    3720:	67 8f       	std	Z+31, r22	; 0x1f
    3722:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    3724:	e0 91 5b 06 	lds	r30, 0x065B
    3728:	f0 91 5c 06 	lds	r31, 0x065C
    372c:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    372e:	45 8d       	ldd	r20, Z+29	; 0x1d
    3730:	56 8d       	ldd	r21, Z+30	; 0x1e
    3732:	67 8d       	ldd	r22, Z+31	; 0x1f
    3734:	70 a1       	ldd	r23, Z+32	; 0x20
    3736:	45 2b       	or	r20, r21
    3738:	46 2b       	or	r20, r22
    373a:	47 2b       	or	r20, r23
    373c:	69 f4       	brne	.+26     	; 0x3758 <_nrk_scheduler+0x20c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    373e:	61 2f       	mov	r22, r17
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3746:	e0 91 5b 06 	lds	r30, 0x065B
    374a:	f0 91 5c 06 	lds	r31, 0x065C
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3752:	81 2f       	mov	r24, r17
    3754:	0e 94 d6 14 	call	0x29ac	; 0x29ac <nrk_rem_from_readyQ>
    3758:	e1 ea       	ldi	r30, 0xA1	; 161
    375a:	f5 e0       	ldi	r31, 0x05	; 5
    375c:	f9 87       	std	Y+9, r31	; 0x09
    375e:	e8 87       	std	Y+8, r30	; 0x08
    3760:	32 ea       	ldi	r19, 0xA2	; 162
    3762:	23 2e       	mov	r2, r19
    3764:	35 e0       	ldi	r19, 0x05	; 5
    3766:	33 2e       	mov	r3, r19
    3768:	4e ea       	ldi	r20, 0xAE	; 174
    376a:	a4 2e       	mov	r10, r20
    376c:	45 e0       	ldi	r20, 0x05	; 5
    376e:	b4 2e       	mov	r11, r20
    3770:	80 ea       	ldi	r24, 0xA0	; 160
    3772:	95 e0       	ldi	r25, 0x05	; 5
    3774:	9c 83       	std	Y+4, r25	; 0x04
    3776:	8b 83       	std	Y+3, r24	; 0x03
    3778:	af e9       	ldi	r26, 0x9F	; 159
    377a:	b5 e0       	ldi	r27, 0x05	; 5
    377c:	ba 83       	std	Y+2, r27	; 0x02
    377e:	a9 83       	std	Y+1, r26	; 0x01
    3780:	5e e9       	ldi	r21, 0x9E	; 158
    3782:	85 2e       	mov	r8, r21
    3784:	55 e0       	ldi	r21, 0x05	; 5
    3786:	95 2e       	mov	r9, r21
    3788:	00 e6       	ldi	r16, 0x60	; 96
    378a:	1a ee       	ldi	r17, 0xEA	; 234
    378c:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    378e:	e8 85       	ldd	r30, Y+8	; 0x08
    3790:	f9 85       	ldd	r31, Y+9	; 0x09
    3792:	80 81       	ld	r24, Z
    3794:	8f 3f       	cpi	r24, 0xFF	; 255
    3796:	09 f4       	brne	.+2      	; 0x379a <_nrk_scheduler+0x24e>
    3798:	33 c1       	rjmp	.+614    	; 0x3a00 <_nrk_scheduler+0x4b4>
        nrk_task_TCB[task_ID].suspend_flag=0;
    379a:	d4 01       	movw	r26, r8
    379c:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    379e:	80 81       	ld	r24, Z
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <_nrk_scheduler+0x25a>
    37a4:	6a c0       	rjmp	.+212    	; 0x387a <_nrk_scheduler+0x32e>
    37a6:	f1 01       	movw	r30, r2
    37a8:	80 81       	ld	r24, Z
    37aa:	84 30       	cpi	r24, 0x04	; 4
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <_nrk_scheduler+0x264>
    37ae:	65 c0       	rjmp	.+202    	; 0x387a <_nrk_scheduler+0x32e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    37b0:	d5 01       	movw	r26, r10
    37b2:	cd 90       	ld	r12, X+
    37b4:	dd 90       	ld	r13, X+
    37b6:	ed 90       	ld	r14, X+
    37b8:	fc 90       	ld	r15, X
    37ba:	60 91 c2 04 	lds	r22, 0x04C2
    37be:	70 e0       	ldi	r23, 0x00	; 0
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	c6 16       	cp	r12, r22
    37c6:	d7 06       	cpc	r13, r23
    37c8:	e8 06       	cpc	r14, r24
    37ca:	f9 06       	cpc	r15, r25
    37cc:	50 f0       	brcs	.+20     	; 0x37e2 <_nrk_scheduler+0x296>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    37ce:	c6 1a       	sub	r12, r22
    37d0:	d7 0a       	sbc	r13, r23
    37d2:	e8 0a       	sbc	r14, r24
    37d4:	f9 0a       	sbc	r15, r25
    37d6:	f5 01       	movw	r30, r10
    37d8:	c0 82       	st	Z, r12
    37da:	d1 82       	std	Z+1, r13	; 0x01
    37dc:	e2 82       	std	Z+2, r14	; 0x02
    37de:	f3 82       	std	Z+3, r15	; 0x03
    37e0:	06 c0       	rjmp	.+12     	; 0x37ee <_nrk_scheduler+0x2a2>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    37e2:	d5 01       	movw	r26, r10
    37e4:	1d 92       	st	X+, r1
    37e6:	1d 92       	st	X+, r1
    37e8:	1d 92       	st	X+, r1
    37ea:	1c 92       	st	X, r1
    37ec:	13 97       	sbiw	r26, 0x03	; 3
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    37ee:	e8 85       	ldd	r30, Y+8	; 0x08
    37f0:	f9 85       	ldd	r31, Y+9	; 0x09
    37f2:	c1 88       	ldd	r12, Z+17	; 0x11
    37f4:	d2 88       	ldd	r13, Z+18	; 0x12
    37f6:	e3 88       	ldd	r14, Z+19	; 0x13
    37f8:	f4 88       	ldd	r15, Z+20	; 0x14
    37fa:	c6 16       	cp	r12, r22
    37fc:	d7 06       	cpc	r13, r23
    37fe:	e8 06       	cpc	r14, r24
    3800:	f9 06       	cpc	r15, r25
    3802:	48 f0       	brcs	.+18     	; 0x3816 <_nrk_scheduler+0x2ca>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3804:	c6 1a       	sub	r12, r22
    3806:	d7 0a       	sbc	r13, r23
    3808:	e8 0a       	sbc	r14, r24
    380a:	f9 0a       	sbc	r15, r25
    380c:	c1 8a       	std	Z+17, r12	; 0x11
    380e:	d2 8a       	std	Z+18, r13	; 0x12
    3810:	e3 8a       	std	Z+19, r14	; 0x13
    3812:	f4 8a       	std	Z+20, r15	; 0x14
    3814:	20 c0       	rjmp	.+64     	; 0x3856 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3816:	e8 85       	ldd	r30, Y+8	; 0x08
    3818:	f9 85       	ldd	r31, Y+9	; 0x09
    381a:	21 8d       	ldd	r18, Z+25	; 0x19
    381c:	32 8d       	ldd	r19, Z+26	; 0x1a
    381e:	43 8d       	ldd	r20, Z+27	; 0x1b
    3820:	54 8d       	ldd	r21, Z+28	; 0x1c
    3822:	62 17       	cp	r22, r18
    3824:	73 07       	cpc	r23, r19
    3826:	84 07       	cpc	r24, r20
    3828:	95 07       	cpc	r25, r21
    382a:	58 f4       	brcc	.+22     	; 0x3842 <_nrk_scheduler+0x2f6>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    382c:	69 01       	movw	r12, r18
    382e:	7a 01       	movw	r14, r20
    3830:	c6 1a       	sub	r12, r22
    3832:	d7 0a       	sbc	r13, r23
    3834:	e8 0a       	sbc	r14, r24
    3836:	f9 0a       	sbc	r15, r25
    3838:	c1 8a       	std	Z+17, r12	; 0x11
    383a:	d2 8a       	std	Z+18, r13	; 0x12
    383c:	e3 8a       	std	Z+19, r14	; 0x13
    383e:	f4 8a       	std	Z+20, r15	; 0x14
    3840:	0a c0       	rjmp	.+20     	; 0x3856 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3842:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodsi4>
    3846:	a8 85       	ldd	r26, Y+8	; 0x08
    3848:	b9 85       	ldd	r27, Y+9	; 0x09
    384a:	51 96       	adiw	r26, 0x11	; 17
    384c:	6d 93       	st	X+, r22
    384e:	7d 93       	st	X+, r23
    3850:	8d 93       	st	X+, r24
    3852:	9c 93       	st	X, r25
    3854:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3856:	e8 85       	ldd	r30, Y+8	; 0x08
    3858:	f9 85       	ldd	r31, Y+9	; 0x09
    385a:	81 89       	ldd	r24, Z+17	; 0x11
    385c:	92 89       	ldd	r25, Z+18	; 0x12
    385e:	a3 89       	ldd	r26, Z+19	; 0x13
    3860:	b4 89       	ldd	r27, Z+20	; 0x14
    3862:	89 2b       	or	r24, r25
    3864:	8a 2b       	or	r24, r26
    3866:	8b 2b       	or	r24, r27
    3868:	41 f4       	brne	.+16     	; 0x387a <_nrk_scheduler+0x32e>
    386a:	81 8d       	ldd	r24, Z+25	; 0x19
    386c:	92 8d       	ldd	r25, Z+26	; 0x1a
    386e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3870:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3872:	81 8b       	std	Z+17, r24	; 0x11
    3874:	92 8b       	std	Z+18, r25	; 0x12
    3876:	a3 8b       	std	Z+19, r26	; 0x13
    3878:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    387a:	d1 01       	movw	r26, r2
    387c:	8c 91       	ld	r24, X
    387e:	83 30       	cpi	r24, 0x03	; 3
    3880:	09 f0       	breq	.+2      	; 0x3884 <_nrk_scheduler+0x338>
    3882:	be c0       	rjmp	.+380    	; 0x3a00 <_nrk_scheduler+0x4b4>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3884:	f5 01       	movw	r30, r10
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	a2 81       	ldd	r26, Z+2	; 0x02
    388c:	b3 81       	ldd	r27, Z+3	; 0x03
    388e:	89 2b       	or	r24, r25
    3890:	8a 2b       	or	r24, r26
    3892:	8b 2b       	or	r24, r27
    3894:	09 f0       	breq	.+2      	; 0x3898 <_nrk_scheduler+0x34c>
    3896:	a2 c0       	rjmp	.+324    	; 0x39dc <_nrk_scheduler+0x490>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3898:	ab 81       	ldd	r26, Y+3	; 0x03
    389a:	bc 81       	ldd	r27, Y+4	; 0x04
    389c:	8c 91       	ld	r24, X
    389e:	88 23       	and	r24, r24
    38a0:	c1 f0       	breq	.+48     	; 0x38d2 <_nrk_scheduler+0x386>
    38a2:	e9 81       	ldd	r30, Y+1	; 0x01
    38a4:	fa 81       	ldd	r31, Y+2	; 0x02
    38a6:	80 81       	ld	r24, Z
    38a8:	88 23       	and	r24, r24
    38aa:	99 f0       	breq	.+38     	; 0x38d2 <_nrk_scheduler+0x386>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a0 e0       	ldi	r26, 0x00	; 0
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	00 90 4b 06 	lds	r0, 0x064B
    38b8:	04 c0       	rjmp	.+8      	; 0x38c2 <_nrk_scheduler+0x376>
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	aa 1f       	adc	r26, r26
    38c0:	bb 1f       	adc	r27, r27
    38c2:	0a 94       	dec	r0
    38c4:	d2 f7       	brpl	.-12     	; 0x38ba <_nrk_scheduler+0x36e>
    38c6:	e8 85       	ldd	r30, Y+8	; 0x08
    38c8:	f9 85       	ldd	r31, Y+9	; 0x09
    38ca:	81 87       	std	Z+9, r24	; 0x09
    38cc:	92 87       	std	Z+10, r25	; 0x0a
    38ce:	a3 87       	std	Z+11, r26	; 0x0b
    38d0:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    38d2:	ab 81       	ldd	r26, Y+3	; 0x03
    38d4:	bc 81       	ldd	r27, Y+4	; 0x04
    38d6:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    38d8:	e9 81       	ldd	r30, Y+1	; 0x01
    38da:	fa 81       	ldd	r31, Y+2	; 0x02
    38dc:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    38de:	d4 01       	movw	r26, r8
    38e0:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    38e2:	f5 01       	movw	r30, r10
    38e4:	84 89       	ldd	r24, Z+20	; 0x14
    38e6:	95 89       	ldd	r25, Z+21	; 0x15
    38e8:	a8 85       	ldd	r26, Y+8	; 0x08
    38ea:	b9 85       	ldd	r27, Y+9	; 0x09
    38ec:	5d 96       	adiw	r26, 0x1d	; 29
    38ee:	4d 91       	ld	r20, X+
    38f0:	5d 91       	ld	r21, X+
    38f2:	6d 91       	ld	r22, X+
    38f4:	7c 91       	ld	r23, X
    38f6:	90 97       	sbiw	r26, 0x20	; 32
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	61 f5       	brne	.+88     	; 0x3954 <_nrk_scheduler+0x408>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38fc:	fd 01       	movw	r30, r26
    38fe:	45 8b       	std	Z+21, r20	; 0x15
    3900:	56 8b       	std	Z+22, r21	; 0x16
    3902:	67 8b       	std	Z+23, r22	; 0x17
    3904:	70 8f       	std	Z+24, r23	; 0x18
                    nrk_task_TCB[task_ID].task_state = READY;
    3906:	e2 e0       	ldi	r30, 0x02	; 2
    3908:	d1 01       	movw	r26, r2
    390a:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    390c:	e8 85       	ldd	r30, Y+8	; 0x08
    390e:	f9 85       	ldd	r31, Y+9	; 0x09
    3910:	81 89       	ldd	r24, Z+17	; 0x11
    3912:	92 89       	ldd	r25, Z+18	; 0x12
    3914:	a3 89       	ldd	r26, Z+19	; 0x13
    3916:	b4 89       	ldd	r27, Z+20	; 0x14
    3918:	f5 01       	movw	r30, r10
    391a:	80 83       	st	Z, r24
    391c:	91 83       	std	Z+1, r25	; 0x01
    391e:	a2 83       	std	Z+2, r26	; 0x02
    3920:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3922:	e8 85       	ldd	r30, Y+8	; 0x08
    3924:	f9 85       	ldd	r31, Y+9	; 0x09
    3926:	81 8d       	ldd	r24, Z+25	; 0x19
    3928:	92 8d       	ldd	r25, Z+26	; 0x1a
    392a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    392c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    392e:	89 2b       	or	r24, r25
    3930:	8a 2b       	or	r24, r26
    3932:	8b 2b       	or	r24, r27
    3934:	59 f4       	brne	.+22     	; 0x394c <_nrk_scheduler+0x400>
    3936:	2a ef       	ldi	r18, 0xFA	; 250
    3938:	c2 2e       	mov	r12, r18
    393a:	d1 2c       	mov	r13, r1
    393c:	e1 2c       	mov	r14, r1
    393e:	f1 2c       	mov	r15, r1
    3940:	d5 01       	movw	r26, r10
    3942:	cd 92       	st	X+, r12
    3944:	dd 92       	st	X+, r13
    3946:	ed 92       	st	X+, r14
    3948:	fc 92       	st	X, r15
    394a:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    394c:	8d 81       	ldd	r24, Y+5	; 0x05
    394e:	0e 94 34 14 	call	0x2868	; 0x2868 <nrk_add_to_readyQ>
    3952:	44 c0       	rjmp	.+136    	; 0x39dc <_nrk_scheduler+0x490>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3954:	e8 85       	ldd	r30, Y+8	; 0x08
    3956:	f9 85       	ldd	r31, Y+9	; 0x09
    3958:	45 8b       	std	Z+21, r20	; 0x15
    395a:	56 8b       	std	Z+22, r21	; 0x16
    395c:	67 8b       	std	Z+23, r22	; 0x17
    395e:	70 8f       	std	Z+24, r23	; 0x18
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3960:	d5 01       	movw	r26, r10
    3962:	54 96       	adiw	r26, 0x14	; 20
    3964:	4d 90       	ld	r4, X+
    3966:	5c 90       	ld	r5, X
    3968:	55 97       	sbiw	r26, 0x15	; 21
    396a:	b1 e0       	ldi	r27, 0x01	; 1
    396c:	4b 1a       	sub	r4, r27
    396e:	51 08       	sbc	r5, r1
    3970:	61 2c       	mov	r6, r1
    3972:	71 2c       	mov	r7, r1
    3974:	61 8d       	ldd	r22, Z+25	; 0x19
    3976:	72 8d       	ldd	r23, Z+26	; 0x1a
    3978:	83 8d       	ldd	r24, Z+27	; 0x1b
    397a:	94 8d       	ldd	r25, Z+28	; 0x1c
    397c:	a3 01       	movw	r20, r6
    397e:	92 01       	movw	r18, r4
    3980:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__mulsi3>
    3984:	f5 01       	movw	r30, r10
    3986:	60 83       	st	Z, r22
    3988:	71 83       	std	Z+1, r23	; 0x01
    398a:	82 83       	std	Z+2, r24	; 0x02
    398c:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    398e:	a8 85       	ldd	r26, Y+8	; 0x08
    3990:	b9 85       	ldd	r27, Y+9	; 0x09
    3992:	59 96       	adiw	r26, 0x19	; 25
    3994:	cd 90       	ld	r12, X+
    3996:	dd 90       	ld	r13, X+
    3998:	ed 90       	ld	r14, X+
    399a:	fc 90       	ld	r15, X
    399c:	5c 97       	sbiw	r26, 0x1c	; 28
    399e:	c7 01       	movw	r24, r14
    39a0:	b6 01       	movw	r22, r12
    39a2:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <__mulsi3>
    39a6:	e8 85       	ldd	r30, Y+8	; 0x08
    39a8:	f9 85       	ldd	r31, Y+9	; 0x09
    39aa:	61 8b       	std	Z+17, r22	; 0x11
    39ac:	72 8b       	std	Z+18, r23	; 0x12
    39ae:	83 8b       	std	Z+19, r24	; 0x13
    39b0:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    39b2:	cd 28       	or	r12, r13
    39b4:	ce 28       	or	r12, r14
    39b6:	cf 28       	or	r12, r15
    39b8:	59 f4       	brne	.+22     	; 0x39d0 <_nrk_scheduler+0x484>
    39ba:	9a ef       	ldi	r25, 0xFA	; 250
    39bc:	c9 2e       	mov	r12, r25
    39be:	d1 2c       	mov	r13, r1
    39c0:	e1 2c       	mov	r14, r1
    39c2:	f1 2c       	mov	r15, r1
    39c4:	d5 01       	movw	r26, r10
    39c6:	cd 92       	st	X+, r12
    39c8:	dd 92       	st	X+, r13
    39ca:	ed 92       	st	X+, r14
    39cc:	fc 92       	st	X, r15
    39ce:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    39d0:	cc 24       	eor	r12, r12
    39d2:	c3 94       	inc	r12
    39d4:	d1 2c       	mov	r13, r1
    39d6:	f5 01       	movw	r30, r10
    39d8:	d5 8a       	std	Z+21, r13	; 0x15
    39da:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    39dc:	f5 01       	movw	r30, r10
    39de:	80 81       	ld	r24, Z
    39e0:	91 81       	ldd	r25, Z+1	; 0x01
    39e2:	a2 81       	ldd	r26, Z+2	; 0x02
    39e4:	b3 81       	ldd	r27, Z+3	; 0x03
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	a1 05       	cpc	r26, r1
    39ea:	b1 05       	cpc	r27, r1
    39ec:	49 f0       	breq	.+18     	; 0x3a00 <_nrk_scheduler+0x4b4>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    39ee:	a8 01       	movw	r20, r16
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    39f4:	84 17       	cp	r24, r20
    39f6:	95 07       	cpc	r25, r21
    39f8:	a6 07       	cpc	r26, r22
    39fa:	b7 07       	cpc	r27, r23
    39fc:	08 f4       	brcc	.+2      	; 0x3a00 <_nrk_scheduler+0x4b4>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    39fe:	8c 01       	movw	r16, r24
    3a00:	fd 81       	ldd	r31, Y+5	; 0x05
    3a02:	ff 5f       	subi	r31, 0xFF	; 255
    3a04:	fd 83       	std	Y+5, r31	; 0x05
    3a06:	88 85       	ldd	r24, Y+8	; 0x08
    3a08:	99 85       	ldd	r25, Y+9	; 0x09
    3a0a:	8b 96       	adiw	r24, 0x2b	; 43
    3a0c:	99 87       	std	Y+9, r25	; 0x09
    3a0e:	88 87       	std	Y+8, r24	; 0x08
    3a10:	9b e2       	ldi	r25, 0x2B	; 43
    3a12:	29 0e       	add	r2, r25
    3a14:	31 1c       	adc	r3, r1
    3a16:	ab e2       	ldi	r26, 0x2B	; 43
    3a18:	aa 0e       	add	r10, r26
    3a1a:	b1 1c       	adc	r11, r1
    3a1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a20:	bb 96       	adiw	r30, 0x2b	; 43
    3a22:	fc 83       	std	Y+4, r31	; 0x04
    3a24:	eb 83       	std	Y+3, r30	; 0x03
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2a:	8b 96       	adiw	r24, 0x2b	; 43
    3a2c:	9a 83       	std	Y+2, r25	; 0x02
    3a2e:	89 83       	std	Y+1, r24	; 0x01
    3a30:	9b e2       	ldi	r25, 0x2B	; 43
    3a32:	89 0e       	add	r8, r25
    3a34:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3a36:	ad 81       	ldd	r26, Y+5	; 0x05
    3a38:	a4 30       	cpi	r26, 0x04	; 4
    3a3a:	09 f0       	breq	.+2      	; 0x3a3e <_nrk_scheduler+0x4f2>
    3a3c:	a8 ce       	rjmp	.-688    	; 0x378e <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3a3e:	0e 94 23 14 	call	0x2846	; 0x2846 <nrk_get_high_ready_task_ID>
    3a42:	b8 2e       	mov	r11, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3a44:	bb e2       	ldi	r27, 0x2B	; 43
    3a46:	8b 02       	muls	r24, r27
    3a48:	f0 01       	movw	r30, r0
    3a4a:	11 24       	eor	r1, r1
    3a4c:	e7 56       	subi	r30, 0x67	; 103
    3a4e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a50:	82 85       	ldd	r24, Z+10	; 0x0a
    3a52:	80 93 5d 06 	sts	0x065D, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3a56:	f0 93 4d 06 	sts	0x064D, r31
    3a5a:	e0 93 4c 06 	sts	0x064C, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3a5e:	bb 20       	and	r11, r11
    3a60:	d9 f0       	breq	.+54     	; 0x3a98 <_nrk_scheduler+0x54c>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3a62:	45 a1       	ldd	r20, Z+37	; 0x25
    3a64:	56 a1       	ldd	r21, Z+38	; 0x26
    3a66:	67 a1       	ldd	r22, Z+39	; 0x27
    3a68:	70 a5       	ldd	r23, Z+40	; 0x28
    3a6a:	45 2b       	or	r20, r21
    3a6c:	46 2b       	or	r20, r22
    3a6e:	47 2b       	or	r20, r23
    3a70:	99 f0       	breq	.+38     	; 0x3a98 <_nrk_scheduler+0x54c>
    3a72:	45 8d       	ldd	r20, Z+29	; 0x1d
    3a74:	56 8d       	ldd	r21, Z+30	; 0x1e
    3a76:	67 8d       	ldd	r22, Z+31	; 0x1f
    3a78:	70 a1       	ldd	r23, Z+32	; 0x20
    3a7a:	4a 3f       	cpi	r20, 0xFA	; 250
    3a7c:	51 05       	cpc	r21, r1
    3a7e:	61 05       	cpc	r22, r1
    3a80:	71 05       	cpc	r23, r1
    3a82:	50 f4       	brcc	.+20     	; 0x3a98 <_nrk_scheduler+0x54c>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    3a84:	68 01       	movw	r12, r16
    3a86:	e1 2c       	mov	r14, r1
    3a88:	f1 2c       	mov	r15, r1
    3a8a:	4c 15       	cp	r20, r12
    3a8c:	5d 05       	cpc	r21, r13
    3a8e:	6e 05       	cpc	r22, r14
    3a90:	7f 05       	cpc	r23, r15
    3a92:	10 f4       	brcc	.+4      	; 0x3a98 <_nrk_scheduler+0x54c>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    3a94:	8a 01       	movw	r16, r20
    3a96:	05 c0       	rjmp	.+10     	; 0x3aa2 <_nrk_scheduler+0x556>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    3a98:	0b 3f       	cpi	r16, 0xFB	; 251
    3a9a:	11 05       	cpc	r17, r1
    3a9c:	10 f0       	brcs	.+4      	; 0x3aa2 <_nrk_scheduler+0x556>
    3a9e:	0a ef       	ldi	r16, 0xFA	; 250
    3aa0:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3aa2:	80 93 4e 06 	sts	0x064E, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3aa6:	f0 93 5c 06 	sts	0x065C, r31
    3aaa:	e0 93 5b 06 	sts	0x065B, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3aae:	00 93 c2 04 	sts	0x04C2, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3ab2:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	2f 5f       	subi	r18, 0xFF	; 255
    3abc:	3f 4f       	sbci	r19, 0xFF	; 255
    3abe:	20 17       	cp	r18, r16
    3ac0:	31 07       	cpc	r19, r17
    3ac2:	40 f0       	brcs	.+16     	; 0x3ad4 <_nrk_scheduler+0x588>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3ac4:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_os_timer_get>
    3ac8:	08 2f       	mov	r16, r24
    3aca:	10 e0       	ldi	r17, 0x00	; 0
    3acc:	0e 5f       	subi	r16, 0xFE	; 254
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3ad0:	00 93 c2 04 	sts	0x04C2, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3ad4:	b1 10       	cpse	r11, r1
    3ad6:	10 92 4f 06 	sts	0x064F, r1

    _nrk_set_next_wakeup(next_wake);
    3ada:	80 2f       	mov	r24, r16
    3adc:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3ae0:	6c ed       	ldi	r22, 0xDC	; 220
    3ae2:	75 e0       	ldi	r23, 0x05	; 5
    3ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ae8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3aec:	0e 94 16 22 	call	0x442c	; 0x442c <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3af0:	29 96       	adiw	r28, 0x09	; 9
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	ff 90       	pop	r15
    3b06:	ef 90       	pop	r14
    3b08:	df 90       	pop	r13
    3b0a:	cf 90       	pop	r12
    3b0c:	bf 90       	pop	r11
    3b0e:	af 90       	pop	r10
    3b10:	9f 90       	pop	r9
    3b12:	8f 90       	pop	r8
    3b14:	7f 90       	pop	r7
    3b16:	6f 90       	pop	r6
    3b18:	5f 90       	pop	r5
    3b1a:	4f 90       	pop	r4
    3b1c:	3f 90       	pop	r3
    3b1e:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3b20:	0c 94 21 22 	jmp	0x4442	; 0x4442 <nrk_start_high_ready_task>

00003b24 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	89 f7       	brne	.-30     	; 0x3b24 <nrk_spin_wait_us>

}
    3b42:	08 95       	ret

00003b44 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3b44:	10 92 21 01 	sts	0x0121, r1
    3b48:	08 95       	ret

00003b4a <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3b4a:	89 e0       	ldi	r24, 0x09	; 9
    3b4c:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3b50:	8d e8       	ldi	r24, 0x8D	; 141
    3b52:	9c e3       	ldi	r25, 0x3C	; 60
    3b54:	90 93 29 01 	sts	0x0129, r25
    3b58:	80 93 28 01 	sts	0x0128, r24
    3b5c:	08 95       	ret

00003b5e <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3b5e:	10 92 25 01 	sts	0x0125, r1
    3b62:	10 92 24 01 	sts	0x0124, r1
    3b66:	08 95       	ret

00003b68 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <_nrk_precision_os_timer_get+0x6>
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3b72:	80 91 24 01 	lds	r24, 0x0124
    3b76:	90 91 25 01 	lds	r25, 0x0125
    3b7a:	9a 83       	std	Y+2, r25	; 0x02
    3b7c:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	08 95       	ret

00003b8c <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3b8c:	10 92 81 00 	sts	0x0081, r1
    3b90:	08 95       	ret

00003b92 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	80 93 81 00 	sts	0x0081, r24
    3b98:	08 95       	ret

00003b9a <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3b9a:	83 b5       	in	r24, 0x23	; 35
    3b9c:	81 60       	ori	r24, 0x01	; 1
    3b9e:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3ba0:	10 92 85 00 	sts	0x0085, r1
    3ba4:	10 92 84 00 	sts	0x0084, r1
    3ba8:	08 95       	ret

00003baa <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <_nrk_high_speed_timer_get+0x6>
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3bb4:	80 91 84 00 	lds	r24, 0x0084
    3bb8:	90 91 85 00 	lds	r25, 0x0085
    3bbc:	9a 83       	std	Y+2, r25	; 0x02
    3bbe:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	08 95       	ret

00003bce <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3bce:	cf 92       	push	r12
    3bd0:	df 92       	push	r13
    3bd2:	ef 92       	push	r14
    3bd4:	ff 92       	push	r15
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3bda:	ec 01       	movw	r28, r24
    3bdc:	cc 0f       	add	r28, r28
    3bde:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3be0:	c9 37       	cpi	r28, 0x79	; 121
    3be2:	8f ef       	ldi	r24, 0xFF	; 255
    3be4:	d8 07       	cpc	r29, r24
    3be6:	10 f0       	brcs	.+4      	; 0x3bec <nrk_high_speed_timer_wait+0x1e>
    3be8:	c0 e0       	ldi	r28, 0x00	; 0
    3bea:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3bec:	6b 01       	movw	r12, r22
    3bee:	e1 2c       	mov	r14, r1
    3bf0:	f1 2c       	mov	r15, r1
    3bf2:	cc 0e       	add	r12, r28
    3bf4:	dd 1e       	adc	r13, r29
    3bf6:	e1 1c       	adc	r14, r1
    3bf8:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	c8 16       	cp	r12, r24
    3bfe:	d1 04       	cpc	r13, r1
    3c00:	e8 06       	cpc	r14, r24
    3c02:	f1 04       	cpc	r15, r1
    3c04:	40 f0       	brcs	.+16     	; 0x3c16 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	e8 1a       	sub	r14, r24
    3c0a:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3c0c:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <_nrk_high_speed_timer_get>
    3c10:	c8 17       	cp	r28, r24
    3c12:	d9 07       	cpc	r29, r25
    3c14:	d8 f3       	brcs	.-10     	; 0x3c0c <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3c16:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <_nrk_high_speed_timer_get>
    3c1a:	8c 15       	cp	r24, r12
    3c1c:	9d 05       	cpc	r25, r13
    3c1e:	d8 f3       	brcs	.-10     	; 0x3c16 <nrk_high_speed_timer_wait+0x48>
}
    3c20:	df 91       	pop	r29
    3c22:	cf 91       	pop	r28
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	df 90       	pop	r13
    3c2a:	cf 90       	pop	r12
    3c2c:	08 95       	ret

00003c2e <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3c2e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3c32:	e0 e7       	ldi	r30, 0x70	; 112
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	80 81       	ld	r24, Z
    3c38:	8d 7f       	andi	r24, 0xFD	; 253
    3c3a:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3c3c:	80 81       	ld	r24, Z
    3c3e:	8e 7f       	andi	r24, 0xFE	; 254
    3c40:	80 83       	st	Z, r24
    3c42:	08 95       	ret

00003c44 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3c44:	80 93 b2 00 	sts	0x00B2, r24
    3c48:	08 95       	ret

00003c4a <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3c4a:	e0 e7       	ldi	r30, 0x70	; 112
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	83 60       	ori	r24, 0x03	; 3
    3c52:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	80 93 b1 00 	sts	0x00B1, r24
    3c5a:	08 95       	ret

00003c5c <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3c5c:	83 b5       	in	r24, 0x23	; 35
    3c5e:	82 60       	ori	r24, 0x02	; 2
    3c60:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3c62:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3c66:	10 92 bb 03 	sts	0x03BB, r1
    _nrk_prev_timer_val=0;
    3c6a:	10 92 c2 04 	sts	0x04C2, r1
    3c6e:	08 95       	ret

00003c70 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3c74:	8e ef       	ldi	r24, 0xFE	; 254
    3c76:	80 93 c2 04 	sts	0x04C2, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3c7a:	80 e2       	ldi	r24, 0x20	; 32
    3c7c:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3c80:	80 91 c2 04 	lds	r24, 0x04C2
    3c84:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3c88:	83 e0       	ldi	r24, 0x03	; 3
    3c8a:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3c8c:	92 e0       	ldi	r25, 0x02	; 2
    3c8e:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3c92:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3c96:	93 b5       	in	r25, 0x23	; 35
    3c98:	92 60       	ori	r25, 0x02	; 2
    3c9a:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3c9c:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3c9e:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ca0:	83 b5       	in	r24, 0x23	; 35
    3ca2:	82 60       	ori	r24, 0x02	; 2
    3ca4:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3ca6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3cb0:	10 92 85 00 	sts	0x0085, r1
    3cb4:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3cb8:	83 b5       	in	r24, 0x23	; 35
    3cba:	82 60       	ori	r24, 0x02	; 2
    3cbc:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3cbe:	83 b5       	in	r24, 0x23	; 35
    3cc0:	81 60       	ori	r24, 0x01	; 1
    3cc2:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3cc4:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3cc8:	c4 e2       	ldi	r28, 0x24	; 36
    3cca:	d1 e0       	ldi	r29, 0x01	; 1
    3ccc:	19 82       	std	Y+1, r1	; 0x01
    3cce:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3cd0:	83 b5       	in	r24, 0x23	; 35
    3cd2:	82 60       	ori	r24, 0x02	; 2
    3cd4:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3cd6:	83 b5       	in	r24, 0x23	; 35
    3cd8:	81 60       	ori	r24, 0x01	; 1
    3cda:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3cdc:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3ce0:	19 82       	std	Y+1, r1	; 0x01
    3ce2:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3ce4:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3ce8:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3cec:	10 92 bb 03 	sts	0x03BB, r1
}
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret

00003cf6 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3cf6:	80 91 b3 00 	lds	r24, 0x00B3
}
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	08 95       	ret

00003cfe <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3cfe:	81 50       	subi	r24, 0x01	; 1
    3d00:	80 93 b3 00 	sts	0x00B3, r24
    3d04:	08 95       	ret

00003d06 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3d06:	81 11       	cpse	r24, r1
    3d08:	02 c0       	rjmp	.+4      	; 0x3d0e <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3d0a:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3d0e:	8f ef       	ldi	r24, 0xFF	; 255
    3d10:	08 95       	ret

00003d12 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3d12:	81 11       	cpse	r24, r1
    3d14:	06 c0       	rjmp	.+12     	; 0x3d22 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3d16:	10 92 95 00 	sts	0x0095, r1
    3d1a:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	08 95       	ret
	}
return NRK_ERROR;
    3d22:	8f ef       	ldi	r24, 0xFF	; 255
}
    3d24:	08 95       	ret

00003d26 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3d26:	81 11       	cpse	r24, r1
    3d28:	05 c0       	rjmp	.+10     	; 0x3d34 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3d2a:	80 91 94 00 	lds	r24, 0x0094
    3d2e:	90 91 95 00 	lds	r25, 0x0095
    3d32:	08 95       	ret
	}
return 0;
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0

}
    3d38:	08 95       	ret

00003d3a <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	05 c0       	rjmp	.+10     	; 0x3d48 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	08 95       	ret
	}
return NRK_ERROR;
    3d48:	8f ef       	ldi	r24, 0xFF	; 255
}
    3d4a:	08 95       	ret

00003d4c <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3d4c:	81 11       	cpse	r24, r1
    3d4e:	35 c0       	rjmp	.+106    	; 0x3dba <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3d50:	cb 01       	movw	r24, r22
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	05 97       	sbiw	r24, 0x05	; 5
    3d56:	10 f4       	brcc	.+4      	; 0x3d5c <nrk_timer_int_configure+0x10>
    3d58:	60 93 c1 04 	sts	0x04C1, r22
	TCCR3A = 0;  
    3d5c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3d60:	88 e0       	ldi	r24, 0x08	; 8
    3d62:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3d66:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3d6a:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3d6e:	30 93 b5 03 	sts	0x03B5, r19
    3d72:	20 93 b4 03 	sts	0x03B4, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3d76:	80 91 c1 04 	lds	r24, 0x04C1
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	21 f4       	brne	.+8      	; 0x3d86 <nrk_timer_int_configure+0x3a>
    3d7e:	80 91 91 00 	lds	r24, 0x0091
    3d82:	81 60       	ori	r24, 0x01	; 1
    3d84:	11 c0       	rjmp	.+34     	; 0x3da8 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3d86:	82 30       	cpi	r24, 0x02	; 2
    3d88:	21 f4       	brne	.+8      	; 0x3d92 <nrk_timer_int_configure+0x46>
    3d8a:	80 91 91 00 	lds	r24, 0x0091
    3d8e:	82 60       	ori	r24, 0x02	; 2
    3d90:	0b c0       	rjmp	.+22     	; 0x3da8 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3d92:	83 30       	cpi	r24, 0x03	; 3
    3d94:	21 f4       	brne	.+8      	; 0x3d9e <nrk_timer_int_configure+0x52>
    3d96:	80 91 91 00 	lds	r24, 0x0091
    3d9a:	83 60       	ori	r24, 0x03	; 3
    3d9c:	05 c0       	rjmp	.+10     	; 0x3da8 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3d9e:	84 30       	cpi	r24, 0x04	; 4
    3da0:	31 f4       	brne	.+12     	; 0x3dae <nrk_timer_int_configure+0x62>
    3da2:	80 91 91 00 	lds	r24, 0x0091
    3da6:	84 60       	ori	r24, 0x04	; 4
    3da8:	80 93 91 00 	sts	0x0091, r24
    3dac:	08 c0       	rjmp	.+16     	; 0x3dbe <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3dae:	85 30       	cpi	r24, 0x05	; 5
    3db0:	31 f4       	brne	.+12     	; 0x3dbe <nrk_timer_int_configure+0x72>
    3db2:	80 91 91 00 	lds	r24, 0x0091
    3db6:	85 60       	ori	r24, 0x05	; 5
    3db8:	f7 cf       	rjmp	.-18     	; 0x3da8 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3dba:	8f ef       	ldi	r24, 0xFF	; 255
    3dbc:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3dc0:	08 95       	ret

00003dc2 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3dc2:	80 91 b2 00 	lds	r24, 0x00B2
}
    3dc6:	08 95       	ret

00003dc8 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3dc8:	1f 92       	push	r1
    3dca:	0f 92       	push	r0
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	0f 92       	push	r0
    3dd0:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	8a e0       	ldi	r24, 0x0A	; 10
    3dd6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__vector_default+0x12>

00003ddc <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    3ddc:	0f 92       	push	r0
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	0f 92       	push	r0
    3de2:	1f 92       	push	r1
    3de4:	2f 92       	push	r2
    3de6:	3f 92       	push	r3
    3de8:	4f 92       	push	r4
    3dea:	5f 92       	push	r5
    3dec:	6f 92       	push	r6
    3dee:	7f 92       	push	r7
    3df0:	8f 92       	push	r8
    3df2:	9f 92       	push	r9
    3df4:	af 92       	push	r10
    3df6:	bf 92       	push	r11
    3df8:	cf 92       	push	r12
    3dfa:	df 92       	push	r13
    3dfc:	ef 92       	push	r14
    3dfe:	ff 92       	push	r15
    3e00:	0f 93       	push	r16
    3e02:	1f 93       	push	r17
    3e04:	2f 93       	push	r18
    3e06:	3f 93       	push	r19
    3e08:	4f 93       	push	r20
    3e0a:	5f 93       	push	r21
    3e0c:	6f 93       	push	r22
    3e0e:	7f 93       	push	r23
    3e10:	8f 93       	push	r24
    3e12:	9f 93       	push	r25
    3e14:	af 93       	push	r26
    3e16:	bf 93       	push	r27
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	ef 93       	push	r30
    3e1e:	ff 93       	push	r31
    3e20:	a0 91 5b 06 	lds	r26, 0x065B
    3e24:	b0 91 5c 06 	lds	r27, 0x065C
    3e28:	0d b6       	in	r0, 0x3d	; 61
    3e2a:	0d 92       	st	X+, r0
    3e2c:	0e b6       	in	r0, 0x3e	; 62
    3e2e:	0d 92       	st	X+, r0
    3e30:	1f 92       	push	r1
    3e32:	a0 91 44 04 	lds	r26, 0x0444
    3e36:	b0 91 45 04 	lds	r27, 0x0445
    3e3a:	1e 90       	ld	r1, -X
    3e3c:	be bf       	out	0x3e, r27	; 62
    3e3e:	ad bf       	out	0x3d, r26	; 61
    3e40:	08 95       	ret

00003e42 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    3e42:	1f 92       	push	r1
    3e44:	0f 92       	push	r0
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	0f 92       	push	r0
    3e4a:	11 24       	eor	r1, r1
    3e4c:	0b b6       	in	r0, 0x3b	; 59
    3e4e:	0f 92       	push	r0
    3e50:	2f 93       	push	r18
    3e52:	3f 93       	push	r19
    3e54:	4f 93       	push	r20
    3e56:	5f 93       	push	r21
    3e58:	6f 93       	push	r22
    3e5a:	7f 93       	push	r23
    3e5c:	8f 93       	push	r24
    3e5e:	9f 93       	push	r25
    3e60:	af 93       	push	r26
    3e62:	bf 93       	push	r27
    3e64:	ef 93       	push	r30
    3e66:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    3e68:	e0 91 b4 03 	lds	r30, 0x03B4
    3e6c:	f0 91 b5 03 	lds	r31, 0x03B5
    3e70:	30 97       	sbiw	r30, 0x00	; 0
    3e72:	11 f0       	breq	.+4      	; 0x3e78 <__vector_32+0x36>
    3e74:	09 95       	icall
    3e76:	04 c0       	rjmp	.+8      	; 0x3e80 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3e78:	60 e0       	ldi	r22, 0x00	; 0
    3e7a:	8a e0       	ldi	r24, 0x0A	; 10
    3e7c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
	return;  	
}
    3e80:	ff 91       	pop	r31
    3e82:	ef 91       	pop	r30
    3e84:	bf 91       	pop	r27
    3e86:	af 91       	pop	r26
    3e88:	9f 91       	pop	r25
    3e8a:	8f 91       	pop	r24
    3e8c:	7f 91       	pop	r23
    3e8e:	6f 91       	pop	r22
    3e90:	5f 91       	pop	r21
    3e92:	4f 91       	pop	r20
    3e94:	3f 91       	pop	r19
    3e96:	2f 91       	pop	r18
    3e98:	0f 90       	pop	r0
    3e9a:	0b be       	out	0x3b, r0	; 59
    3e9c:	0f 90       	pop	r0
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	0f 90       	pop	r0
    3ea2:	1f 90       	pop	r1
    3ea4:	18 95       	reti

00003ea6 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    3ea6:	1f 92       	push	r1
    3ea8:	0f 92       	push	r0
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	0f 92       	push	r0
    3eae:	11 24       	eor	r1, r1

	return;  	
} 
    3eb0:	0f 90       	pop	r0
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	0f 90       	pop	r0
    3eb6:	1f 90       	pop	r1
    3eb8:	18 95       	reti

00003eba <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    3eba:	04 b6       	in	r0, 0x34	; 52
    3ebc:	03 fc       	sbrc	r0, 3
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    3ec4:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    3ec6:	04 b6       	in	r0, 0x34	; 52
    3ec8:	02 fe       	sbrs	r0, 2
    3eca:	06 c0       	rjmp	.+12     	; 0x3ed8 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    3ecc:	94 b7       	in	r25, 0x34	; 52
    3ece:	9b 7f       	andi	r25, 0xFB	; 251
    3ed0:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    3ed2:	04 b6       	in	r0, 0x34	; 52
    3ed4:	00 fe       	sbrs	r0, 0
		error|=0x04;
    3ed6:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    3ed8:	04 b6       	in	r0, 0x34	; 52
    3eda:	01 fe       	sbrs	r0, 1
    3edc:	05 c0       	rjmp	.+10     	; 0x3ee8 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    3ede:	94 b7       	in	r25, 0x34	; 52
    3ee0:	9d 7f       	andi	r25, 0xFD	; 253
    3ee2:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    3ee4:	82 60       	ori	r24, 0x02	; 2
    3ee6:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    3ee8:	81 11       	cpse	r24, r1
    3eea:	0c c0       	rjmp	.+24     	; 0x3f04 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    3eec:	04 b6       	in	r0, 0x34	; 52
    3eee:	00 fe       	sbrs	r0, 0
    3ef0:	04 c0       	rjmp	.+8      	; 0x3efa <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    3ef2:	94 b7       	in	r25, 0x34	; 52
    3ef4:	9e 7f       	andi	r25, 0xFE	; 254
    3ef6:	94 bf       	out	0x34, r25	; 52
    3ef8:	01 c0       	rjmp	.+2      	; 0x3efc <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    3efa:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    3efc:	90 91 b0 00 	lds	r25, 0x00B0
    3f00:	91 11       	cpse	r25, r1
    3f02:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    3f04:	08 95       	ret

00003f06 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    3f06:	81 11       	cpse	r24, r1
    3f08:	02 c0       	rjmp	.+4      	; 0x3f0e <nrk_ext_int_enable+0x8>
    3f0a:	e8 9a       	sbi	0x1d, 0	; 29
    3f0c:	39 c0       	rjmp	.+114    	; 0x3f80 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    3f0e:	81 30       	cpi	r24, 0x01	; 1
    3f10:	11 f4       	brne	.+4      	; 0x3f16 <nrk_ext_int_enable+0x10>
    3f12:	e9 9a       	sbi	0x1d, 1	; 29
    3f14:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    3f16:	82 30       	cpi	r24, 0x02	; 2
    3f18:	11 f4       	brne	.+4      	; 0x3f1e <nrk_ext_int_enable+0x18>
    3f1a:	ea 9a       	sbi	0x1d, 2	; 29
    3f1c:	31 c0       	rjmp	.+98     	; 0x3f80 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    3f1e:	83 30       	cpi	r24, 0x03	; 3
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <nrk_ext_int_enable+0x24>
    3f22:	80 91 6b 00 	lds	r24, 0x006B
    3f26:	81 60       	ori	r24, 0x01	; 1
    3f28:	29 c0       	rjmp	.+82     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    3f2a:	84 30       	cpi	r24, 0x04	; 4
    3f2c:	21 f4       	brne	.+8      	; 0x3f36 <nrk_ext_int_enable+0x30>
    3f2e:	80 91 6b 00 	lds	r24, 0x006B
    3f32:	82 60       	ori	r24, 0x02	; 2
    3f34:	23 c0       	rjmp	.+70     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    3f36:	85 30       	cpi	r24, 0x05	; 5
    3f38:	21 f4       	brne	.+8      	; 0x3f42 <nrk_ext_int_enable+0x3c>
    3f3a:	80 91 6b 00 	lds	r24, 0x006B
    3f3e:	84 60       	ori	r24, 0x04	; 4
    3f40:	1d c0       	rjmp	.+58     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    3f42:	86 30       	cpi	r24, 0x06	; 6
    3f44:	21 f4       	brne	.+8      	; 0x3f4e <nrk_ext_int_enable+0x48>
    3f46:	80 91 6b 00 	lds	r24, 0x006B
    3f4a:	88 60       	ori	r24, 0x08	; 8
    3f4c:	17 c0       	rjmp	.+46     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    3f4e:	87 30       	cpi	r24, 0x07	; 7
    3f50:	21 f4       	brne	.+8      	; 0x3f5a <nrk_ext_int_enable+0x54>
    3f52:	80 91 6b 00 	lds	r24, 0x006B
    3f56:	80 61       	ori	r24, 0x10	; 16
    3f58:	11 c0       	rjmp	.+34     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    3f5a:	88 30       	cpi	r24, 0x08	; 8
    3f5c:	21 f4       	brne	.+8      	; 0x3f66 <nrk_ext_int_enable+0x60>
    3f5e:	80 91 6b 00 	lds	r24, 0x006B
    3f62:	80 62       	ori	r24, 0x20	; 32
    3f64:	0b c0       	rjmp	.+22     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    3f66:	89 30       	cpi	r24, 0x09	; 9
    3f68:	21 f4       	brne	.+8      	; 0x3f72 <nrk_ext_int_enable+0x6c>
    3f6a:	80 91 6b 00 	lds	r24, 0x006B
    3f6e:	80 64       	ori	r24, 0x40	; 64
    3f70:	05 c0       	rjmp	.+10     	; 0x3f7c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    3f72:	8a 30       	cpi	r24, 0x0A	; 10
    3f74:	39 f4       	brne	.+14     	; 0x3f84 <nrk_ext_int_enable+0x7e>
    3f76:	80 91 6b 00 	lds	r24, 0x006B
    3f7a:	80 68       	ori	r24, 0x80	; 128
    3f7c:	80 93 6b 00 	sts	0x006B, r24
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	08 95       	ret
return NRK_ERROR;
    3f84:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f86:	08 95       	ret

00003f88 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    3f88:	81 11       	cpse	r24, r1
    3f8a:	02 c0       	rjmp	.+4      	; 0x3f90 <nrk_ext_int_disable+0x8>
    3f8c:	e8 98       	cbi	0x1d, 0	; 29
    3f8e:	39 c0       	rjmp	.+114    	; 0x4002 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	11 f4       	brne	.+4      	; 0x3f98 <nrk_ext_int_disable+0x10>
    3f94:	e9 98       	cbi	0x1d, 1	; 29
    3f96:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3f98:	82 30       	cpi	r24, 0x02	; 2
    3f9a:	11 f4       	brne	.+4      	; 0x3fa0 <nrk_ext_int_disable+0x18>
    3f9c:	e9 98       	cbi	0x1d, 1	; 29
    3f9e:	31 c0       	rjmp	.+98     	; 0x4002 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    3fa0:	83 30       	cpi	r24, 0x03	; 3
    3fa2:	21 f4       	brne	.+8      	; 0x3fac <nrk_ext_int_disable+0x24>
    3fa4:	80 91 6b 00 	lds	r24, 0x006B
    3fa8:	8e 7f       	andi	r24, 0xFE	; 254
    3faa:	29 c0       	rjmp	.+82     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    3fac:	84 30       	cpi	r24, 0x04	; 4
    3fae:	21 f4       	brne	.+8      	; 0x3fb8 <nrk_ext_int_disable+0x30>
    3fb0:	80 91 6b 00 	lds	r24, 0x006B
    3fb4:	8d 7f       	andi	r24, 0xFD	; 253
    3fb6:	23 c0       	rjmp	.+70     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    3fb8:	85 30       	cpi	r24, 0x05	; 5
    3fba:	21 f4       	brne	.+8      	; 0x3fc4 <nrk_ext_int_disable+0x3c>
    3fbc:	80 91 6b 00 	lds	r24, 0x006B
    3fc0:	8b 7f       	andi	r24, 0xFB	; 251
    3fc2:	1d c0       	rjmp	.+58     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    3fc4:	86 30       	cpi	r24, 0x06	; 6
    3fc6:	21 f4       	brne	.+8      	; 0x3fd0 <nrk_ext_int_disable+0x48>
    3fc8:	80 91 6b 00 	lds	r24, 0x006B
    3fcc:	87 7f       	andi	r24, 0xF7	; 247
    3fce:	17 c0       	rjmp	.+46     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    3fd0:	87 30       	cpi	r24, 0x07	; 7
    3fd2:	21 f4       	brne	.+8      	; 0x3fdc <nrk_ext_int_disable+0x54>
    3fd4:	80 91 6b 00 	lds	r24, 0x006B
    3fd8:	8f 7e       	andi	r24, 0xEF	; 239
    3fda:	11 c0       	rjmp	.+34     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    3fdc:	88 30       	cpi	r24, 0x08	; 8
    3fde:	21 f4       	brne	.+8      	; 0x3fe8 <nrk_ext_int_disable+0x60>
    3fe0:	80 91 6b 00 	lds	r24, 0x006B
    3fe4:	8f 7d       	andi	r24, 0xDF	; 223
    3fe6:	0b c0       	rjmp	.+22     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    3fe8:	89 30       	cpi	r24, 0x09	; 9
    3fea:	21 f4       	brne	.+8      	; 0x3ff4 <nrk_ext_int_disable+0x6c>
    3fec:	80 91 6b 00 	lds	r24, 0x006B
    3ff0:	8f 7b       	andi	r24, 0xBF	; 191
    3ff2:	05 c0       	rjmp	.+10     	; 0x3ffe <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    3ff4:	8a 30       	cpi	r24, 0x0A	; 10
    3ff6:	39 f4       	brne	.+14     	; 0x4006 <nrk_ext_int_disable+0x7e>
    3ff8:	80 91 6b 00 	lds	r24, 0x006B
    3ffc:	8f 77       	andi	r24, 0x7F	; 127
    3ffe:	80 93 6b 00 	sts	0x006B, r24
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	08 95       	ret
return NRK_ERROR;
    4006:	8f ef       	ldi	r24, 0xFF	; 255
}
    4008:	08 95       	ret

0000400a <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    400a:	81 11       	cpse	r24, r1
    400c:	26 c0       	rjmp	.+76     	; 0x405a <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    400e:	50 93 b9 03 	sts	0x03B9, r21
    4012:	40 93 b8 03 	sts	0x03B8, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4016:	61 11       	cpse	r22, r1
    4018:	04 c0       	rjmp	.+8      	; 0x4022 <nrk_ext_int_configure+0x18>
    401a:	80 91 69 00 	lds	r24, 0x0069
    401e:	8c 7f       	andi	r24, 0xFC	; 252
    4020:	3d c0       	rjmp	.+122    	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4022:	61 30       	cpi	r22, 0x01	; 1
    4024:	49 f4       	brne	.+18     	; 0x4038 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4026:	80 91 69 00 	lds	r24, 0x0069
    402a:	8d 7f       	andi	r24, 0xFD	; 253
    402c:	80 93 69 00 	sts	0x0069, r24
    4030:	80 91 69 00 	lds	r24, 0x0069
    4034:	81 60       	ori	r24, 0x01	; 1
    4036:	32 c0       	rjmp	.+100    	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4038:	62 30       	cpi	r22, 0x02	; 2
    403a:	49 f4       	brne	.+18     	; 0x404e <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    403c:	80 91 69 00 	lds	r24, 0x0069
    4040:	82 60       	ori	r24, 0x02	; 2
    4042:	80 93 69 00 	sts	0x0069, r24
    4046:	80 91 69 00 	lds	r24, 0x0069
    404a:	8e 7f       	andi	r24, 0xFE	; 254
    404c:	27 c0       	rjmp	.+78     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    404e:	63 30       	cpi	r22, 0x03	; 3
    4050:	39 f5       	brne	.+78     	; 0x40a0 <nrk_ext_int_configure+0x96>
    4052:	80 91 69 00 	lds	r24, 0x0069
    4056:	83 60       	ori	r24, 0x03	; 3
    4058:	21 c0       	rjmp	.+66     	; 0x409c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    405a:	81 30       	cpi	r24, 0x01	; 1
    405c:	49 f5       	brne	.+82     	; 0x40b0 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    405e:	50 93 b7 03 	sts	0x03B7, r21
    4062:	40 93 b6 03 	sts	0x03B6, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4066:	61 11       	cpse	r22, r1
    4068:	04 c0       	rjmp	.+8      	; 0x4072 <nrk_ext_int_configure+0x68>
    406a:	80 91 69 00 	lds	r24, 0x0069
    406e:	83 7f       	andi	r24, 0xF3	; 243
    4070:	15 c0       	rjmp	.+42     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4072:	61 30       	cpi	r22, 0x01	; 1
    4074:	49 f4       	brne	.+18     	; 0x4088 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4076:	80 91 69 00 	lds	r24, 0x0069
    407a:	87 7f       	andi	r24, 0xF7	; 247
    407c:	80 93 69 00 	sts	0x0069, r24
    4080:	80 91 69 00 	lds	r24, 0x0069
    4084:	84 60       	ori	r24, 0x04	; 4
    4086:	0a c0       	rjmp	.+20     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4088:	62 30       	cpi	r22, 0x02	; 2
    408a:	61 f4       	brne	.+24     	; 0x40a4 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    408c:	80 91 69 00 	lds	r24, 0x0069
    4090:	88 60       	ori	r24, 0x08	; 8
    4092:	80 93 69 00 	sts	0x0069, r24
    4096:	80 91 69 00 	lds	r24, 0x0069
    409a:	8b 7f       	andi	r24, 0xFB	; 251
    409c:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    40a4:	63 30       	cpi	r22, 0x03	; 3
    40a6:	e1 f7       	brne	.-8      	; 0x40a0 <nrk_ext_int_configure+0x96>
    40a8:	80 91 69 00 	lds	r24, 0x0069
    40ac:	8c 60       	ori	r24, 0x0C	; 12
    40ae:	f6 cf       	rjmp	.-20     	; 0x409c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    40b0:	82 30       	cpi	r24, 0x02	; 2
    40b2:	31 f5       	brne	.+76     	; 0x4100 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    40b4:	50 93 c9 03 	sts	0x03C9, r21
    40b8:	40 93 c8 03 	sts	0x03C8, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    40bc:	61 11       	cpse	r22, r1
    40be:	04 c0       	rjmp	.+8      	; 0x40c8 <nrk_ext_int_configure+0xbe>
    40c0:	80 91 69 00 	lds	r24, 0x0069
    40c4:	8f 7c       	andi	r24, 0xCF	; 207
    40c6:	ea cf       	rjmp	.-44     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    40c8:	61 30       	cpi	r22, 0x01	; 1
    40ca:	49 f4       	brne	.+18     	; 0x40de <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    40cc:	80 91 69 00 	lds	r24, 0x0069
    40d0:	8f 7d       	andi	r24, 0xDF	; 223
    40d2:	80 93 69 00 	sts	0x0069, r24
    40d6:	80 91 69 00 	lds	r24, 0x0069
    40da:	80 61       	ori	r24, 0x10	; 16
    40dc:	df cf       	rjmp	.-66     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    40de:	62 30       	cpi	r22, 0x02	; 2
    40e0:	49 f4       	brne	.+18     	; 0x40f4 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    40e2:	80 91 69 00 	lds	r24, 0x0069
    40e6:	80 62       	ori	r24, 0x20	; 32
    40e8:	80 93 69 00 	sts	0x0069, r24
    40ec:	80 91 69 00 	lds	r24, 0x0069
    40f0:	8f 7e       	andi	r24, 0xEF	; 239
    40f2:	d4 cf       	rjmp	.-88     	; 0x409c <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    40f4:	63 30       	cpi	r22, 0x03	; 3
    40f6:	a1 f6       	brne	.-88     	; 0x40a0 <nrk_ext_int_configure+0x96>
    40f8:	80 91 69 00 	lds	r24, 0x0069
    40fc:	80 63       	ori	r24, 0x30	; 48
    40fe:	ce cf       	rjmp	.-100    	; 0x409c <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4100:	83 50       	subi	r24, 0x03	; 3
    4102:	88 30       	cpi	r24, 0x08	; 8
    4104:	50 f4       	brcc	.+20     	; 0x411a <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4106:	80 91 68 00 	lds	r24, 0x0068
    410a:	81 60       	ori	r24, 0x01	; 1
    410c:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4110:	50 93 cb 03 	sts	0x03CB, r21
    4114:	40 93 ca 03 	sts	0x03CA, r20
    4118:	c3 cf       	rjmp	.-122    	; 0x40a0 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    411a:	8f ef       	ldi	r24, 0xFF	; 255
}
    411c:	08 95       	ret

0000411e <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    411e:	1f 92       	push	r1
    4120:	0f 92       	push	r0
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	0f 92       	push	r0
    4126:	11 24       	eor	r1, r1
    4128:	0b b6       	in	r0, 0x3b	; 59
    412a:	0f 92       	push	r0
    412c:	2f 93       	push	r18
    412e:	3f 93       	push	r19
    4130:	4f 93       	push	r20
    4132:	5f 93       	push	r21
    4134:	6f 93       	push	r22
    4136:	7f 93       	push	r23
    4138:	8f 93       	push	r24
    413a:	9f 93       	push	r25
    413c:	af 93       	push	r26
    413e:	bf 93       	push	r27
    4140:	ef 93       	push	r30
    4142:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4144:	e0 91 ca 03 	lds	r30, 0x03CA
    4148:	f0 91 cb 03 	lds	r31, 0x03CB
    414c:	30 97       	sbiw	r30, 0x00	; 0
    414e:	11 f0       	breq	.+4      	; 0x4154 <__vector_9+0x36>
    4150:	09 95       	icall
    4152:	04 c0       	rjmp	.+8      	; 0x415c <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	8a e0       	ldi	r24, 0x0A	; 10
    4158:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
	return;  	
}
    415c:	ff 91       	pop	r31
    415e:	ef 91       	pop	r30
    4160:	bf 91       	pop	r27
    4162:	af 91       	pop	r26
    4164:	9f 91       	pop	r25
    4166:	8f 91       	pop	r24
    4168:	7f 91       	pop	r23
    416a:	6f 91       	pop	r22
    416c:	5f 91       	pop	r21
    416e:	4f 91       	pop	r20
    4170:	3f 91       	pop	r19
    4172:	2f 91       	pop	r18
    4174:	0f 90       	pop	r0
    4176:	0b be       	out	0x3b, r0	; 59
    4178:	0f 90       	pop	r0
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	0f 90       	pop	r0
    417e:	1f 90       	pop	r1
    4180:	18 95       	reti

00004182 <__vector_1>:


SIGNAL(INT0_vect) {
    4182:	1f 92       	push	r1
    4184:	0f 92       	push	r0
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	0f 92       	push	r0
    418a:	11 24       	eor	r1, r1
    418c:	0b b6       	in	r0, 0x3b	; 59
    418e:	0f 92       	push	r0
    4190:	2f 93       	push	r18
    4192:	3f 93       	push	r19
    4194:	4f 93       	push	r20
    4196:	5f 93       	push	r21
    4198:	6f 93       	push	r22
    419a:	7f 93       	push	r23
    419c:	8f 93       	push	r24
    419e:	9f 93       	push	r25
    41a0:	af 93       	push	r26
    41a2:	bf 93       	push	r27
    41a4:	ef 93       	push	r30
    41a6:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    41a8:	e0 91 b8 03 	lds	r30, 0x03B8
    41ac:	f0 91 b9 03 	lds	r31, 0x03B9
    41b0:	30 97       	sbiw	r30, 0x00	; 0
    41b2:	11 f0       	breq	.+4      	; 0x41b8 <__vector_1+0x36>
    41b4:	09 95       	icall
    41b6:	04 c0       	rjmp	.+8      	; 0x41c0 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	8a e0       	ldi	r24, 0x0A	; 10
    41bc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
	return;  	
}
    41c0:	ff 91       	pop	r31
    41c2:	ef 91       	pop	r30
    41c4:	bf 91       	pop	r27
    41c6:	af 91       	pop	r26
    41c8:	9f 91       	pop	r25
    41ca:	8f 91       	pop	r24
    41cc:	7f 91       	pop	r23
    41ce:	6f 91       	pop	r22
    41d0:	5f 91       	pop	r21
    41d2:	4f 91       	pop	r20
    41d4:	3f 91       	pop	r19
    41d6:	2f 91       	pop	r18
    41d8:	0f 90       	pop	r0
    41da:	0b be       	out	0x3b, r0	; 59
    41dc:	0f 90       	pop	r0
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	0f 90       	pop	r0
    41e2:	1f 90       	pop	r1
    41e4:	18 95       	reti

000041e6 <__vector_2>:

SIGNAL(INT1_vect) {
    41e6:	1f 92       	push	r1
    41e8:	0f 92       	push	r0
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	0f 92       	push	r0
    41ee:	11 24       	eor	r1, r1
    41f0:	0b b6       	in	r0, 0x3b	; 59
    41f2:	0f 92       	push	r0
    41f4:	2f 93       	push	r18
    41f6:	3f 93       	push	r19
    41f8:	4f 93       	push	r20
    41fa:	5f 93       	push	r21
    41fc:	6f 93       	push	r22
    41fe:	7f 93       	push	r23
    4200:	8f 93       	push	r24
    4202:	9f 93       	push	r25
    4204:	af 93       	push	r26
    4206:	bf 93       	push	r27
    4208:	ef 93       	push	r30
    420a:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    420c:	e0 91 b6 03 	lds	r30, 0x03B6
    4210:	f0 91 b7 03 	lds	r31, 0x03B7
    4214:	30 97       	sbiw	r30, 0x00	; 0
    4216:	11 f0       	breq	.+4      	; 0x421c <__stack+0x1d>
    4218:	09 95       	icall
    421a:	04 c0       	rjmp	.+8      	; 0x4224 <__stack+0x25>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	8a e0       	ldi	r24, 0x0A	; 10
    4220:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
	return;  	
}
    4224:	ff 91       	pop	r31
    4226:	ef 91       	pop	r30
    4228:	bf 91       	pop	r27
    422a:	af 91       	pop	r26
    422c:	9f 91       	pop	r25
    422e:	8f 91       	pop	r24
    4230:	7f 91       	pop	r23
    4232:	6f 91       	pop	r22
    4234:	5f 91       	pop	r21
    4236:	4f 91       	pop	r20
    4238:	3f 91       	pop	r19
    423a:	2f 91       	pop	r18
    423c:	0f 90       	pop	r0
    423e:	0b be       	out	0x3b, r0	; 59
    4240:	0f 90       	pop	r0
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	0f 90       	pop	r0
    4246:	1f 90       	pop	r1
    4248:	18 95       	reti

0000424a <__vector_3>:

SIGNAL(INT2_vect) {
    424a:	1f 92       	push	r1
    424c:	0f 92       	push	r0
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	0f 92       	push	r0
    4252:	11 24       	eor	r1, r1
    4254:	0b b6       	in	r0, 0x3b	; 59
    4256:	0f 92       	push	r0
    4258:	2f 93       	push	r18
    425a:	3f 93       	push	r19
    425c:	4f 93       	push	r20
    425e:	5f 93       	push	r21
    4260:	6f 93       	push	r22
    4262:	7f 93       	push	r23
    4264:	8f 93       	push	r24
    4266:	9f 93       	push	r25
    4268:	af 93       	push	r26
    426a:	bf 93       	push	r27
    426c:	ef 93       	push	r30
    426e:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4270:	e0 91 c8 03 	lds	r30, 0x03C8
    4274:	f0 91 c9 03 	lds	r31, 0x03C9
    4278:	30 97       	sbiw	r30, 0x00	; 0
    427a:	11 f0       	breq	.+4      	; 0x4280 <__vector_3+0x36>
    427c:	09 95       	icall
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	8a e0       	ldi	r24, 0x0A	; 10
    4284:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nrk_kernel_error_add>
	return;  	
}
    4288:	ff 91       	pop	r31
    428a:	ef 91       	pop	r30
    428c:	bf 91       	pop	r27
    428e:	af 91       	pop	r26
    4290:	9f 91       	pop	r25
    4292:	8f 91       	pop	r24
    4294:	7f 91       	pop	r23
    4296:	6f 91       	pop	r22
    4298:	5f 91       	pop	r21
    429a:	4f 91       	pop	r20
    429c:	3f 91       	pop	r19
    429e:	2f 91       	pop	r18
    42a0:	0f 90       	pop	r0
    42a2:	0b be       	out	0x3b, r0	; 59
    42a4:	0f 90       	pop	r0
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	0f 90       	pop	r0
    42aa:	1f 90       	pop	r1
    42ac:	18 95       	reti

000042ae <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    42ae:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    42b2:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    42b4:	84 b7       	in	r24, 0x34	; 52
    42b6:	87 7f       	andi	r24, 0xF7	; 247
    42b8:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    42ba:	e0 e6       	ldi	r30, 0x60	; 96
    42bc:	f0 e0       	ldi	r31, 0x00	; 0
    42be:	80 81       	ld	r24, Z
    42c0:	88 61       	ori	r24, 0x18	; 24
    42c2:	80 83       	st	Z, r24
WDTCSR = 0;
    42c4:	10 82       	st	Z, r1
nrk_int_enable();
    42c6:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <nrk_int_enable>

000042ca <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    42ca:	0e 94 65 0c 	call	0x18ca	; 0x18ca <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    42ce:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    42d0:	84 b7       	in	r24, 0x34	; 52
    42d2:	87 7f       	andi	r24, 0xF7	; 247
    42d4:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    42d6:	e0 e6       	ldi	r30, 0x60	; 96
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	80 81       	ld	r24, Z
    42dc:	88 61       	ori	r24, 0x18	; 24
    42de:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    42e0:	8d e0       	ldi	r24, 0x0D	; 13
    42e2:	80 83       	st	Z, r24
nrk_int_enable();
    42e4:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <nrk_int_enable>

000042e8 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    42e8:	04 b6       	in	r0, 0x34	; 52
    42ea:	03 fc       	sbrc	r0, 3
    42ec:	02 c0       	rjmp	.+4      	; 0x42f2 <nrk_watchdog_check+0xa>
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	08 95       	ret
return NRK_ERROR;
    42f2:	8f ef       	ldi	r24, 0xFF	; 255
}
    42f4:	08 95       	ret

000042f6 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    42f6:	a8 95       	wdr
    42f8:	08 95       	ret

000042fa <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    42fa:	08 95       	ret

000042fc <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    42fc:	83 b7       	in	r24, 0x33	; 51
    42fe:	81 7f       	andi	r24, 0xF1	; 241
    4300:	86 60       	ori	r24, 0x06	; 6
    4302:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4304:	83 b7       	in	r24, 0x33	; 51
    4306:	81 60       	ori	r24, 0x01	; 1
    4308:	83 bf       	out	0x33, r24	; 51
    430a:	88 95       	sleep
    430c:	83 b7       	in	r24, 0x33	; 51
    430e:	8e 7f       	andi	r24, 0xFE	; 254
    4310:	83 bf       	out	0x33, r24	; 51
    4312:	08 95       	ret

00004314 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4314:	83 b7       	in	r24, 0x33	; 51
    4316:	81 7f       	andi	r24, 0xF1	; 241
    4318:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    431a:	83 b7       	in	r24, 0x33	; 51
    431c:	81 60       	ori	r24, 0x01	; 1
    431e:	83 bf       	out	0x33, r24	; 51
    4320:	88 95       	sleep
    4322:	83 b7       	in	r24, 0x33	; 51
    4324:	8e 7f       	andi	r24, 0xFE	; 254
    4326:	83 bf       	out	0x33, r24	; 51
    4328:	08 95       	ret

0000432a <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    432a:	fc 01       	movw	r30, r24
    432c:	76 83       	std	Z+6, r23	; 0x06
    432e:	65 83       	std	Z+5, r22	; 0x05
    4330:	08 95       	ret

00004332 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ec 01       	movw	r28, r24
    4340:	8b 01       	movw	r16, r22
    4342:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4344:	40 32       	cpi	r20, 0x20	; 32
    4346:	51 05       	cpc	r21, r1
    4348:	18 f4       	brcc	.+6      	; 0x4350 <nrk_task_set_stk+0x1e>
    434a:	81 e1       	ldi	r24, 0x11	; 17
    434c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4350:	a7 01       	movw	r20, r14
    4352:	41 50       	subi	r20, 0x01	; 1
    4354:	51 09       	sbc	r21, r1
    4356:	40 0f       	add	r20, r16
    4358:	51 1f       	adc	r21, r17
    435a:	5a 83       	std	Y+2, r21	; 0x02
    435c:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    435e:	1c 83       	std	Y+4, r17	; 0x04
    4360:	0b 83       	std	Y+3, r16	; 0x03

}
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	ff 90       	pop	r15
    436c:	ef 90       	pop	r14
    436e:	08 95       	ret

00004370 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4370:	25 e5       	ldi	r18, 0x55	; 85
    4372:	fa 01       	movw	r30, r20
    4374:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4376:	fb 01       	movw	r30, r22
    4378:	32 97       	sbiw	r30, 0x02	; 2
    437a:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    437c:	fb 01       	movw	r30, r22
    437e:	31 97       	sbiw	r30, 0x01	; 1
    4380:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4382:	fb 01       	movw	r30, r22
    4384:	34 97       	sbiw	r30, 0x04	; 4
    4386:	11 82       	std	Z+1, r1	; 0x01
    4388:	10 82       	st	Z, r1
    *(--stk) = 0;       
    438a:	fb 01       	movw	r30, r22
    438c:	36 97       	sbiw	r30, 0x06	; 6
    438e:	11 82       	std	Z+1, r1	; 0x01
    4390:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4392:	fb 01       	movw	r30, r22
    4394:	38 97       	sbiw	r30, 0x08	; 8
    4396:	11 82       	std	Z+1, r1	; 0x01
    4398:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    439a:	fb 01       	movw	r30, r22
    439c:	3a 97       	sbiw	r30, 0x0a	; 10
    439e:	11 82       	std	Z+1, r1	; 0x01
    43a0:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    43a2:	fb 01       	movw	r30, r22
    43a4:	3c 97       	sbiw	r30, 0x0c	; 12
    43a6:	11 82       	std	Z+1, r1	; 0x01
    43a8:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    43aa:	fb 01       	movw	r30, r22
    43ac:	3e 97       	sbiw	r30, 0x0e	; 14
    43ae:	11 82       	std	Z+1, r1	; 0x01
    43b0:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    43b2:	fb 01       	movw	r30, r22
    43b4:	70 97       	sbiw	r30, 0x10	; 16
    43b6:	11 82       	std	Z+1, r1	; 0x01
    43b8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43ba:	fb 01       	movw	r30, r22
    43bc:	72 97       	sbiw	r30, 0x12	; 18
    43be:	11 82       	std	Z+1, r1	; 0x01
    43c0:	10 82       	st	Z, r1

    *(--stk) = 0; 
    43c2:	fb 01       	movw	r30, r22
    43c4:	74 97       	sbiw	r30, 0x14	; 20
    43c6:	11 82       	std	Z+1, r1	; 0x01
    43c8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43ca:	fb 01       	movw	r30, r22
    43cc:	76 97       	sbiw	r30, 0x16	; 22
    43ce:	11 82       	std	Z+1, r1	; 0x01
    43d0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43d2:	fb 01       	movw	r30, r22
    43d4:	78 97       	sbiw	r30, 0x18	; 24
    43d6:	11 82       	std	Z+1, r1	; 0x01
    43d8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43da:	fb 01       	movw	r30, r22
    43dc:	7a 97       	sbiw	r30, 0x1a	; 26
    43de:	11 82       	std	Z+1, r1	; 0x01
    43e0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43e2:	fb 01       	movw	r30, r22
    43e4:	7c 97       	sbiw	r30, 0x1c	; 28
    43e6:	11 82       	std	Z+1, r1	; 0x01
    43e8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43ea:	fb 01       	movw	r30, r22
    43ec:	7e 97       	sbiw	r30, 0x1e	; 30
    43ee:	11 82       	std	Z+1, r1	; 0x01
    43f0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43f2:	fb 01       	movw	r30, r22
    43f4:	b0 97       	sbiw	r30, 0x20	; 32
    43f6:	11 82       	std	Z+1, r1	; 0x01
    43f8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    43fa:	fb 01       	movw	r30, r22
    43fc:	b2 97       	sbiw	r30, 0x22	; 34
    43fe:	11 82       	std	Z+1, r1	; 0x01
    4400:	10 82       	st	Z, r1
    *(--stk) = 0;
    4402:	cb 01       	movw	r24, r22
    4404:	84 97       	sbiw	r24, 0x24	; 36
    4406:	fc 01       	movw	r30, r24
    4408:	11 82       	std	Z+1, r1	; 0x01
    440a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    440c:	08 95       	ret

0000440e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    440e:	85 e5       	ldi	r24, 0x55	; 85
    4410:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4414:	ee ef       	ldi	r30, 0xFE	; 254
    4416:	f1 e4       	ldi	r31, 0x41	; 65
    4418:	f0 93 45 04 	sts	0x0445, r31
    441c:	e0 93 44 04 	sts	0x0444, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4420:	82 e3       	ldi	r24, 0x32	; 50
    4422:	9e e0       	ldi	r25, 0x0E	; 14
    4424:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4426:	80 93 ff 41 	sts	0x41FF, r24
    442a:	08 95       	ret

0000442c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    442c:	82 e3       	ldi	r24, 0x32	; 50
    442e:	9e e0       	ldi	r25, 0x0E	; 14
    4430:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4434:	80 93 ff 41 	sts	0x41FF, r24
    4438:	08 95       	ret

0000443a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    443a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <_nrk_setup_timer>
  nrk_int_enable();  
    443e:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <nrk_int_enable>

00004442 <nrk_start_high_ready_task>:
    4442:	a0 91 4c 06 	lds	r26, 0x064C
    4446:	b0 91 4d 06 	lds	r27, 0x064D
    444a:	cd 91       	ld	r28, X+
    444c:	cd bf       	out	0x3d, r28	; 61
    444e:	dd 91       	ld	r29, X+
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	ff 91       	pop	r31
    4454:	ef 91       	pop	r30
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	bf 91       	pop	r27
    445c:	af 91       	pop	r26
    445e:	9f 91       	pop	r25
    4460:	8f 91       	pop	r24
    4462:	7f 91       	pop	r23
    4464:	6f 91       	pop	r22
    4466:	5f 91       	pop	r21
    4468:	4f 91       	pop	r20
    446a:	3f 91       	pop	r19
    446c:	2f 91       	pop	r18
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	ff 90       	pop	r15
    4474:	ef 90       	pop	r14
    4476:	df 90       	pop	r13
    4478:	cf 90       	pop	r12
    447a:	bf 90       	pop	r11
    447c:	af 90       	pop	r10
    447e:	9f 90       	pop	r9
    4480:	8f 90       	pop	r8
    4482:	7f 90       	pop	r7
    4484:	6f 90       	pop	r6
    4486:	5f 90       	pop	r5
    4488:	4f 90       	pop	r4
    448a:	3f 90       	pop	r3
    448c:	2f 90       	pop	r2
    448e:	1f 90       	pop	r1
    4490:	0f 90       	pop	r0
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	0f 90       	pop	r0
    4496:	18 95       	reti

00004498 <main>:
    4498:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrk_setup_ports>
    449c:	80 e1       	ldi	r24, 0x10	; 16
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <nrk_setup_uart>
    44a4:	8f e7       	ldi	r24, 0x7F	; 127
    44a6:	92 e0       	ldi	r25, 0x02	; 2
    44a8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    44bc:	82 e0       	ldi	r24, 0x02	; 2
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    44c4:	83 e0       	ldi	r24, 0x03	; 3
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 37 0b 	call	0x166e	; 0x166e <nrk_led_clr>
    44cc:	80 ed       	ldi	r24, 0xD0	; 208
    44ce:	93 e0       	ldi	r25, 0x03	; 3
    44d0:	90 93 c2 03 	sts	0x03C2, r25
    44d4:	80 93 c1 03 	sts	0x03C1, r24
    44d8:	84 e7       	ldi	r24, 0x74	; 116
    44da:	80 93 c0 03 	sts	0x03C0, r24
    44de:	10 92 c3 03 	sts	0x03C3, r1
    44e2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <nrk_int_enable>
    44e6:	25 e1       	ldi	r18, 0x15	; 21
    44e8:	32 e1       	ldi	r19, 0x12	; 18
    44ea:	40 e2       	ldi	r20, 0x20	; 32
    44ec:	54 e2       	ldi	r21, 0x24	; 36
    44ee:	6d e0       	ldi	r22, 0x0D	; 13
    44f0:	8c eb       	ldi	r24, 0xBC	; 188
    44f2:	93 e0       	ldi	r25, 0x03	; 3
    44f4:	0e 94 4d 03 	call	0x69a	; 0x69a <rf_init>
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	80 91 4c 02 	lds	r24, 0x024C
    44fe:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <nrk_gpio_direction>
    4502:	4a e2       	ldi	r20, 0x2A	; 42
    4504:	52 e0       	ldi	r21, 0x02	; 2
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	82 e0       	ldi	r24, 0x02	; 2
    450a:	0e 94 05 20 	call	0x400a	; 0x400a <nrk_ext_int_configure>
    450e:	c8 2f       	mov	r28, r24
    4510:	82 e0       	ldi	r24, 0x02	; 2
    4512:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <nrk_ext_int_enable>
    4516:	1f 92       	push	r1
    4518:	cf 93       	push	r28
    451a:	8c e8       	ldi	r24, 0x8C	; 140
    451c:	92 e0       	ldi	r25, 0x02	; 2
    451e:	9f 93       	push	r25
    4520:	8f 93       	push	r24
    4522:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <printf>
    4526:	82 ea       	ldi	r24, 0xA2	; 162
    4528:	92 e0       	ldi	r25, 0x02	; 2
    452a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	0f 90       	pop	r0
    4536:	ff cf       	rjmp	.-2      	; 0x4536 <main+0x9e>

00004538 <vfprintf>:
    4538:	6f 92       	push	r6
    453a:	7f 92       	push	r7
    453c:	9f 92       	push	r9
    453e:	af 92       	push	r10
    4540:	bf 92       	push	r11
    4542:	cf 92       	push	r12
    4544:	df 92       	push	r13
    4546:	ef 92       	push	r14
    4548:	ff 92       	push	r15
    454a:	0f 93       	push	r16
    454c:	1f 93       	push	r17
    454e:	cf 93       	push	r28
    4550:	df 93       	push	r29
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62
    4556:	2c 97       	sbiw	r28, 0x0c	; 12
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	8c 01       	movw	r16, r24
    4564:	7b 01       	movw	r14, r22
    4566:	3a 01       	movw	r6, r20
    4568:	fc 01       	movw	r30, r24
    456a:	17 82       	std	Z+7, r1	; 0x07
    456c:	16 82       	std	Z+6, r1	; 0x06
    456e:	83 81       	ldd	r24, Z+3	; 0x03
    4570:	81 ff       	sbrs	r24, 1
    4572:	19 c1       	rjmp	.+562    	; 0x47a6 <vfprintf+0x26e>
    4574:	ce 01       	movw	r24, r28
    4576:	01 96       	adiw	r24, 0x01	; 1
    4578:	5c 01       	movw	r10, r24
    457a:	f8 01       	movw	r30, r16
    457c:	d3 80       	ldd	r13, Z+3	; 0x03
    457e:	f7 01       	movw	r30, r14
    4580:	d3 fc       	sbrc	r13, 3
    4582:	25 91       	lpm	r18, Z+
    4584:	d3 fe       	sbrs	r13, 3
    4586:	21 91       	ld	r18, Z+
    4588:	7f 01       	movw	r14, r30
    458a:	22 23       	and	r18, r18
    458c:	09 f4       	brne	.+2      	; 0x4590 <vfprintf+0x58>
    458e:	07 c1       	rjmp	.+526    	; 0x479e <vfprintf+0x266>
    4590:	25 32       	cpi	r18, 0x25	; 37
    4592:	49 f4       	brne	.+18     	; 0x45a6 <vfprintf+0x6e>
    4594:	d3 fc       	sbrc	r13, 3
    4596:	25 91       	lpm	r18, Z+
    4598:	d3 fe       	sbrs	r13, 3
    459a:	21 91       	ld	r18, Z+
    459c:	7f 01       	movw	r14, r30
    459e:	25 32       	cpi	r18, 0x25	; 37
    45a0:	11 f0       	breq	.+4      	; 0x45a6 <vfprintf+0x6e>
    45a2:	91 2c       	mov	r9, r1
    45a4:	1b c0       	rjmp	.+54     	; 0x45dc <vfprintf+0xa4>
    45a6:	b8 01       	movw	r22, r16
    45a8:	82 2f       	mov	r24, r18
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    45b0:	63 01       	movw	r12, r6
    45b2:	36 01       	movw	r6, r12
    45b4:	e2 cf       	rjmp	.-60     	; 0x457a <vfprintf+0x42>
    45b6:	22 23       	and	r18, r18
    45b8:	09 f4       	brne	.+2      	; 0x45bc <vfprintf+0x84>
    45ba:	f1 c0       	rjmp	.+482    	; 0x479e <vfprintf+0x266>
    45bc:	62 2f       	mov	r22, r18
    45be:	70 e0       	ldi	r23, 0x00	; 0
    45c0:	82 e0       	ldi	r24, 0x02	; 2
    45c2:	94 e0       	ldi	r25, 0x04	; 4
    45c4:	2c 87       	std	Y+12, r18	; 0x0c
    45c6:	0e 94 a3 24 	call	0x4946	; 0x4946 <strchr_P>
    45ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    45cc:	89 2b       	or	r24, r25
    45ce:	49 f0       	breq	.+18     	; 0x45e2 <vfprintf+0xaa>
    45d0:	f7 01       	movw	r30, r14
    45d2:	d3 fc       	sbrc	r13, 3
    45d4:	25 91       	lpm	r18, Z+
    45d6:	d3 fe       	sbrs	r13, 3
    45d8:	21 91       	ld	r18, Z+
    45da:	7f 01       	movw	r14, r30
    45dc:	97 fe       	sbrs	r9, 7
    45de:	eb cf       	rjmp	.-42     	; 0x45b6 <vfprintf+0x7e>
    45e0:	0c c0       	rjmp	.+24     	; 0x45fa <vfprintf+0xc2>
    45e2:	23 32       	cpi	r18, 0x23	; 35
    45e4:	21 f4       	brne	.+8      	; 0x45ee <vfprintf+0xb6>
    45e6:	f9 2d       	mov	r31, r9
    45e8:	f0 61       	ori	r31, 0x10	; 16
    45ea:	9f 2e       	mov	r9, r31
    45ec:	f1 cf       	rjmp	.-30     	; 0x45d0 <vfprintf+0x98>
    45ee:	2c 36       	cpi	r18, 0x6C	; 108
    45f0:	39 f4       	brne	.+14     	; 0x4600 <vfprintf+0xc8>
    45f2:	29 2d       	mov	r18, r9
    45f4:	20 68       	ori	r18, 0x80	; 128
    45f6:	92 2e       	mov	r9, r18
    45f8:	eb cf       	rjmp	.-42     	; 0x45d0 <vfprintf+0x98>
    45fa:	22 23       	and	r18, r18
    45fc:	09 f4       	brne	.+2      	; 0x4600 <vfprintf+0xc8>
    45fe:	cf c0       	rjmp	.+414    	; 0x479e <vfprintf+0x266>
    4600:	62 2f       	mov	r22, r18
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	8b ef       	ldi	r24, 0xFB	; 251
    4606:	93 e0       	ldi	r25, 0x03	; 3
    4608:	2c 87       	std	Y+12, r18	; 0x0c
    460a:	0e 94 a3 24 	call	0x4946	; 0x4946 <strchr_P>
    460e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4610:	89 2b       	or	r24, r25
    4612:	41 f0       	breq	.+16     	; 0x4624 <vfprintf+0xec>
    4614:	63 01       	movw	r12, r6
    4616:	f4 e0       	ldi	r31, 0x04	; 4
    4618:	cf 0e       	add	r12, r31
    461a:	d1 1c       	adc	r13, r1
    461c:	b8 01       	movw	r22, r16
    461e:	8f e3       	ldi	r24, 0x3F	; 63
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	12 c0       	rjmp	.+36     	; 0x4648 <vfprintf+0x110>
    4624:	23 36       	cpi	r18, 0x63	; 99
    4626:	41 f0       	breq	.+16     	; 0x4638 <vfprintf+0x100>
    4628:	23 37       	cpi	r18, 0x73	; 115
    462a:	89 f0       	breq	.+34     	; 0x464e <vfprintf+0x116>
    462c:	23 35       	cpi	r18, 0x53	; 83
    462e:	21 f5       	brne	.+72     	; 0x4678 <vfprintf+0x140>
    4630:	f9 2d       	mov	r31, r9
    4632:	f1 60       	ori	r31, 0x01	; 1
    4634:	9f 2e       	mov	r9, r31
    4636:	0b c0       	rjmp	.+22     	; 0x464e <vfprintf+0x116>
    4638:	63 01       	movw	r12, r6
    463a:	22 e0       	ldi	r18, 0x02	; 2
    463c:	c2 0e       	add	r12, r18
    463e:	d1 1c       	adc	r13, r1
    4640:	b8 01       	movw	r22, r16
    4642:	f3 01       	movw	r30, r6
    4644:	80 81       	ld	r24, Z
    4646:	91 81       	ldd	r25, Z+1	; 0x01
    4648:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    464c:	b2 cf       	rjmp	.-156    	; 0x45b2 <vfprintf+0x7a>
    464e:	63 01       	movw	r12, r6
    4650:	22 e0       	ldi	r18, 0x02	; 2
    4652:	c2 0e       	add	r12, r18
    4654:	d1 1c       	adc	r13, r1
    4656:	f3 01       	movw	r30, r6
    4658:	60 80       	ld	r6, Z
    465a:	71 80       	ldd	r7, Z+1	; 0x01
    465c:	f3 01       	movw	r30, r6
    465e:	90 fc       	sbrc	r9, 0
    4660:	85 91       	lpm	r24, Z+
    4662:	90 fe       	sbrs	r9, 0
    4664:	81 91       	ld	r24, Z+
    4666:	3f 01       	movw	r6, r30
    4668:	88 23       	and	r24, r24
    466a:	09 f4       	brne	.+2      	; 0x466e <vfprintf+0x136>
    466c:	a2 cf       	rjmp	.-188    	; 0x45b2 <vfprintf+0x7a>
    466e:	b8 01       	movw	r22, r16
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    4676:	f2 cf       	rjmp	.-28     	; 0x465c <vfprintf+0x124>
    4678:	24 36       	cpi	r18, 0x64	; 100
    467a:	11 f0       	breq	.+4      	; 0x4680 <vfprintf+0x148>
    467c:	29 36       	cpi	r18, 0x69	; 105
    467e:	39 f5       	brne	.+78     	; 0x46ce <vfprintf+0x196>
    4680:	63 01       	movw	r12, r6
    4682:	97 fe       	sbrs	r9, 7
    4684:	09 c0       	rjmp	.+18     	; 0x4698 <vfprintf+0x160>
    4686:	f4 e0       	ldi	r31, 0x04	; 4
    4688:	cf 0e       	add	r12, r31
    468a:	d1 1c       	adc	r13, r1
    468c:	f3 01       	movw	r30, r6
    468e:	60 81       	ld	r22, Z
    4690:	71 81       	ldd	r23, Z+1	; 0x01
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	93 81       	ldd	r25, Z+3	; 0x03
    4696:	0a c0       	rjmp	.+20     	; 0x46ac <vfprintf+0x174>
    4698:	f2 e0       	ldi	r31, 0x02	; 2
    469a:	cf 0e       	add	r12, r31
    469c:	d1 1c       	adc	r13, r1
    469e:	f3 01       	movw	r30, r6
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	88 27       	eor	r24, r24
    46a6:	77 fd       	sbrc	r23, 7
    46a8:	80 95       	com	r24
    46aa:	98 2f       	mov	r25, r24
    46ac:	f9 2d       	mov	r31, r9
    46ae:	ff 7e       	andi	r31, 0xEF	; 239
    46b0:	9f 2e       	mov	r9, r31
    46b2:	97 ff       	sbrs	r25, 7
    46b4:	09 c0       	rjmp	.+18     	; 0x46c8 <vfprintf+0x190>
    46b6:	90 95       	com	r25
    46b8:	80 95       	com	r24
    46ba:	70 95       	com	r23
    46bc:	61 95       	neg	r22
    46be:	7f 4f       	sbci	r23, 0xFF	; 255
    46c0:	8f 4f       	sbci	r24, 0xFF	; 255
    46c2:	9f 4f       	sbci	r25, 0xFF	; 255
    46c4:	f0 64       	ori	r31, 0x40	; 64
    46c6:	9f 2e       	mov	r9, r31
    46c8:	2a e0       	ldi	r18, 0x0A	; 10
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	38 c0       	rjmp	.+112    	; 0x473e <vfprintf+0x206>
    46ce:	20 37       	cpi	r18, 0x70	; 112
    46d0:	a1 f0       	breq	.+40     	; 0x46fa <vfprintf+0x1c2>
    46d2:	40 f4       	brcc	.+16     	; 0x46e4 <vfprintf+0x1ac>
    46d4:	28 35       	cpi	r18, 0x58	; 88
    46d6:	d1 f0       	breq	.+52     	; 0x470c <vfprintf+0x1d4>
    46d8:	2f 36       	cpi	r18, 0x6F	; 111
    46da:	09 f0       	breq	.+2      	; 0x46de <vfprintf+0x1a6>
    46dc:	60 c0       	rjmp	.+192    	; 0x479e <vfprintf+0x266>
    46de:	28 e0       	ldi	r18, 0x08	; 8
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	19 c0       	rjmp	.+50     	; 0x4716 <vfprintf+0x1de>
    46e4:	25 37       	cpi	r18, 0x75	; 117
    46e6:	19 f0       	breq	.+6      	; 0x46ee <vfprintf+0x1b6>
    46e8:	28 37       	cpi	r18, 0x78	; 120
    46ea:	51 f0       	breq	.+20     	; 0x4700 <vfprintf+0x1c8>
    46ec:	58 c0       	rjmp	.+176    	; 0x479e <vfprintf+0x266>
    46ee:	29 2d       	mov	r18, r9
    46f0:	2f 7e       	andi	r18, 0xEF	; 239
    46f2:	92 2e       	mov	r9, r18
    46f4:	2a e0       	ldi	r18, 0x0A	; 10
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	0e c0       	rjmp	.+28     	; 0x4716 <vfprintf+0x1de>
    46fa:	89 2d       	mov	r24, r9
    46fc:	80 61       	ori	r24, 0x10	; 16
    46fe:	98 2e       	mov	r9, r24
    4700:	99 2d       	mov	r25, r9
    4702:	94 62       	ori	r25, 0x24	; 36
    4704:	99 2e       	mov	r9, r25
    4706:	20 e1       	ldi	r18, 0x10	; 16
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	05 c0       	rjmp	.+10     	; 0x4716 <vfprintf+0x1de>
    470c:	e9 2d       	mov	r30, r9
    470e:	e4 60       	ori	r30, 0x04	; 4
    4710:	9e 2e       	mov	r9, r30
    4712:	20 e1       	ldi	r18, 0x10	; 16
    4714:	32 e0       	ldi	r19, 0x02	; 2
    4716:	63 01       	movw	r12, r6
    4718:	97 fe       	sbrs	r9, 7
    471a:	09 c0       	rjmp	.+18     	; 0x472e <vfprintf+0x1f6>
    471c:	f4 e0       	ldi	r31, 0x04	; 4
    471e:	cf 0e       	add	r12, r31
    4720:	d1 1c       	adc	r13, r1
    4722:	f3 01       	movw	r30, r6
    4724:	60 81       	ld	r22, Z
    4726:	71 81       	ldd	r23, Z+1	; 0x01
    4728:	82 81       	ldd	r24, Z+2	; 0x02
    472a:	93 81       	ldd	r25, Z+3	; 0x03
    472c:	08 c0       	rjmp	.+16     	; 0x473e <vfprintf+0x206>
    472e:	f2 e0       	ldi	r31, 0x02	; 2
    4730:	cf 0e       	add	r12, r31
    4732:	d1 1c       	adc	r13, r1
    4734:	f3 01       	movw	r30, r6
    4736:	60 81       	ld	r22, Z
    4738:	71 81       	ldd	r23, Z+1	; 0x01
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	a5 01       	movw	r20, r10
    4740:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__ultoa_invert>
    4744:	78 2e       	mov	r7, r24
    4746:	7a 18       	sub	r7, r10
    4748:	96 fe       	sbrs	r9, 6
    474a:	05 c0       	rjmp	.+10     	; 0x4756 <vfprintf+0x21e>
    474c:	b8 01       	movw	r22, r16
    474e:	8d e2       	ldi	r24, 0x2D	; 45
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    4756:	94 fe       	sbrs	r9, 4
    4758:	16 c0       	rjmp	.+44     	; 0x4786 <vfprintf+0x24e>
    475a:	fe 01       	movw	r30, r28
    475c:	e7 0d       	add	r30, r7
    475e:	f1 1d       	adc	r31, r1
    4760:	80 81       	ld	r24, Z
    4762:	80 33       	cpi	r24, 0x30	; 48
    4764:	81 f0       	breq	.+32     	; 0x4786 <vfprintf+0x24e>
    4766:	b8 01       	movw	r22, r16
    4768:	80 e3       	ldi	r24, 0x30	; 48
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    4770:	92 fe       	sbrs	r9, 2
    4772:	09 c0       	rjmp	.+18     	; 0x4786 <vfprintf+0x24e>
    4774:	29 2d       	mov	r18, r9
    4776:	20 72       	andi	r18, 0x20	; 32
    4778:	82 2f       	mov	r24, r18
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	b8 01       	movw	r22, r16
    477e:	88 5a       	subi	r24, 0xA8	; 168
    4780:	9f 4f       	sbci	r25, 0xFF	; 255
    4782:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    4786:	7a 94       	dec	r7
    4788:	f5 01       	movw	r30, r10
    478a:	e7 0d       	add	r30, r7
    478c:	f1 1d       	adc	r31, r1
    478e:	80 81       	ld	r24, Z
    4790:	b8 01       	movw	r22, r16
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	0e 94 09 25 	call	0x4a12	; 0x4a12 <fputc>
    4798:	71 10       	cpse	r7, r1
    479a:	f5 cf       	rjmp	.-22     	; 0x4786 <vfprintf+0x24e>
    479c:	0a cf       	rjmp	.-492    	; 0x45b2 <vfprintf+0x7a>
    479e:	f8 01       	movw	r30, r16
    47a0:	86 81       	ldd	r24, Z+6	; 0x06
    47a2:	97 81       	ldd	r25, Z+7	; 0x07
    47a4:	02 c0       	rjmp	.+4      	; 0x47aa <vfprintf+0x272>
    47a6:	8f ef       	ldi	r24, 0xFF	; 255
    47a8:	9f ef       	ldi	r25, 0xFF	; 255
    47aa:	2c 96       	adiw	r28, 0x0c	; 12
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	f8 94       	cli
    47b0:	de bf       	out	0x3e, r29	; 62
    47b2:	0f be       	out	0x3f, r0	; 63
    47b4:	cd bf       	out	0x3d, r28	; 61
    47b6:	df 91       	pop	r29
    47b8:	cf 91       	pop	r28
    47ba:	1f 91       	pop	r17
    47bc:	0f 91       	pop	r16
    47be:	ff 90       	pop	r15
    47c0:	ef 90       	pop	r14
    47c2:	df 90       	pop	r13
    47c4:	cf 90       	pop	r12
    47c6:	bf 90       	pop	r11
    47c8:	af 90       	pop	r10
    47ca:	9f 90       	pop	r9
    47cc:	7f 90       	pop	r7
    47ce:	6f 90       	pop	r6
    47d0:	08 95       	ret

000047d2 <__muluhisi3>:
    47d2:	0e 94 94 24 	call	0x4928	; 0x4928 <__umulhisi3>
    47d6:	a5 9f       	mul	r26, r21
    47d8:	90 0d       	add	r25, r0
    47da:	b4 9f       	mul	r27, r20
    47dc:	90 0d       	add	r25, r0
    47de:	a4 9f       	mul	r26, r20
    47e0:	80 0d       	add	r24, r0
    47e2:	91 1d       	adc	r25, r1
    47e4:	11 24       	eor	r1, r1
    47e6:	08 95       	ret

000047e8 <__mulsi3>:
    47e8:	db 01       	movw	r26, r22
    47ea:	8f 93       	push	r24
    47ec:	9f 93       	push	r25
    47ee:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <__muluhisi3>
    47f2:	bf 91       	pop	r27
    47f4:	af 91       	pop	r26
    47f6:	a2 9f       	mul	r26, r18
    47f8:	80 0d       	add	r24, r0
    47fa:	91 1d       	adc	r25, r1
    47fc:	a3 9f       	mul	r26, r19
    47fe:	90 0d       	add	r25, r0
    4800:	b2 9f       	mul	r27, r18
    4802:	90 0d       	add	r25, r0
    4804:	11 24       	eor	r1, r1
    4806:	08 95       	ret

00004808 <__udivmodsi4>:
    4808:	a1 e2       	ldi	r26, 0x21	; 33
    480a:	1a 2e       	mov	r1, r26
    480c:	aa 1b       	sub	r26, r26
    480e:	bb 1b       	sub	r27, r27
    4810:	fd 01       	movw	r30, r26
    4812:	0d c0       	rjmp	.+26     	; 0x482e <__udivmodsi4_ep>

00004814 <__udivmodsi4_loop>:
    4814:	aa 1f       	adc	r26, r26
    4816:	bb 1f       	adc	r27, r27
    4818:	ee 1f       	adc	r30, r30
    481a:	ff 1f       	adc	r31, r31
    481c:	a2 17       	cp	r26, r18
    481e:	b3 07       	cpc	r27, r19
    4820:	e4 07       	cpc	r30, r20
    4822:	f5 07       	cpc	r31, r21
    4824:	20 f0       	brcs	.+8      	; 0x482e <__udivmodsi4_ep>
    4826:	a2 1b       	sub	r26, r18
    4828:	b3 0b       	sbc	r27, r19
    482a:	e4 0b       	sbc	r30, r20
    482c:	f5 0b       	sbc	r31, r21

0000482e <__udivmodsi4_ep>:
    482e:	66 1f       	adc	r22, r22
    4830:	77 1f       	adc	r23, r23
    4832:	88 1f       	adc	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	1a 94       	dec	r1
    4838:	69 f7       	brne	.-38     	; 0x4814 <__udivmodsi4_loop>
    483a:	60 95       	com	r22
    483c:	70 95       	com	r23
    483e:	80 95       	com	r24
    4840:	90 95       	com	r25
    4842:	9b 01       	movw	r18, r22
    4844:	ac 01       	movw	r20, r24
    4846:	bd 01       	movw	r22, r26
    4848:	cf 01       	movw	r24, r30
    484a:	08 95       	ret

0000484c <__umoddi3>:
    484c:	68 94       	set
    484e:	01 c0       	rjmp	.+2      	; 0x4852 <__udivdi3_umoddi3>

00004850 <__udivdi3>:
    4850:	e8 94       	clt

00004852 <__udivdi3_umoddi3>:
    4852:	8f 92       	push	r8
    4854:	9f 92       	push	r9
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmod64>
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	9f 90       	pop	r9
    4864:	8f 90       	pop	r8
    4866:	08 95       	ret

00004868 <__udivmod64>:
    4868:	88 24       	eor	r8, r8
    486a:	99 24       	eor	r9, r9
    486c:	f4 01       	movw	r30, r8
    486e:	e4 01       	movw	r28, r8
    4870:	b0 e4       	ldi	r27, 0x40	; 64
    4872:	9f 93       	push	r25
    4874:	aa 27       	eor	r26, r26
    4876:	9a 15       	cp	r25, r10
    4878:	8b 04       	cpc	r8, r11
    487a:	9c 04       	cpc	r9, r12
    487c:	ed 05       	cpc	r30, r13
    487e:	fe 05       	cpc	r31, r14
    4880:	cf 05       	cpc	r28, r15
    4882:	d0 07       	cpc	r29, r16
    4884:	a1 07       	cpc	r26, r17
    4886:	98 f4       	brcc	.+38     	; 0x48ae <__udivmod64+0x46>
    4888:	ad 2f       	mov	r26, r29
    488a:	dc 2f       	mov	r29, r28
    488c:	cf 2f       	mov	r28, r31
    488e:	fe 2f       	mov	r31, r30
    4890:	e9 2d       	mov	r30, r9
    4892:	98 2c       	mov	r9, r8
    4894:	89 2e       	mov	r8, r25
    4896:	98 2f       	mov	r25, r24
    4898:	87 2f       	mov	r24, r23
    489a:	76 2f       	mov	r23, r22
    489c:	65 2f       	mov	r22, r21
    489e:	54 2f       	mov	r21, r20
    48a0:	43 2f       	mov	r20, r19
    48a2:	32 2f       	mov	r19, r18
    48a4:	22 27       	eor	r18, r18
    48a6:	b8 50       	subi	r27, 0x08	; 8
    48a8:	31 f7       	brne	.-52     	; 0x4876 <__udivmod64+0xe>
    48aa:	bf 91       	pop	r27
    48ac:	27 c0       	rjmp	.+78     	; 0x48fc <__udivmod64+0x94>
    48ae:	1b 2e       	mov	r1, r27
    48b0:	bf 91       	pop	r27
    48b2:	bb 27       	eor	r27, r27
    48b4:	22 0f       	add	r18, r18
    48b6:	33 1f       	adc	r19, r19
    48b8:	44 1f       	adc	r20, r20
    48ba:	55 1f       	adc	r21, r21
    48bc:	66 1f       	adc	r22, r22
    48be:	77 1f       	adc	r23, r23
    48c0:	88 1f       	adc	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	88 1c       	adc	r8, r8
    48c6:	99 1c       	adc	r9, r9
    48c8:	ee 1f       	adc	r30, r30
    48ca:	ff 1f       	adc	r31, r31
    48cc:	cc 1f       	adc	r28, r28
    48ce:	dd 1f       	adc	r29, r29
    48d0:	aa 1f       	adc	r26, r26
    48d2:	bb 1f       	adc	r27, r27
    48d4:	8a 14       	cp	r8, r10
    48d6:	9b 04       	cpc	r9, r11
    48d8:	ec 05       	cpc	r30, r12
    48da:	fd 05       	cpc	r31, r13
    48dc:	ce 05       	cpc	r28, r14
    48de:	df 05       	cpc	r29, r15
    48e0:	a0 07       	cpc	r26, r16
    48e2:	b1 07       	cpc	r27, r17
    48e4:	48 f0       	brcs	.+18     	; 0x48f8 <__udivmod64+0x90>
    48e6:	8a 18       	sub	r8, r10
    48e8:	9b 08       	sbc	r9, r11
    48ea:	ec 09       	sbc	r30, r12
    48ec:	fd 09       	sbc	r31, r13
    48ee:	ce 09       	sbc	r28, r14
    48f0:	df 09       	sbc	r29, r15
    48f2:	a0 0b       	sbc	r26, r16
    48f4:	b1 0b       	sbc	r27, r17
    48f6:	21 60       	ori	r18, 0x01	; 1
    48f8:	1a 94       	dec	r1
    48fa:	e1 f6       	brne	.-72     	; 0x48b4 <__udivmod64+0x4c>
    48fc:	2e f4       	brtc	.+10     	; 0x4908 <__udivmod64+0xa0>
    48fe:	94 01       	movw	r18, r8
    4900:	af 01       	movw	r20, r30
    4902:	be 01       	movw	r22, r28
    4904:	cd 01       	movw	r24, r26
    4906:	00 0c       	add	r0, r0
    4908:	08 95       	ret

0000490a <__tablejump2__>:
    490a:	ee 0f       	add	r30, r30
    490c:	ff 1f       	adc	r31, r31

0000490e <__tablejump__>:
    490e:	05 90       	lpm	r0, Z+
    4910:	f4 91       	lpm	r31, Z
    4912:	e0 2d       	mov	r30, r0
    4914:	09 94       	ijmp

00004916 <__adddi3>:
    4916:	2a 0d       	add	r18, r10
    4918:	3b 1d       	adc	r19, r11
    491a:	4c 1d       	adc	r20, r12
    491c:	5d 1d       	adc	r21, r13
    491e:	6e 1d       	adc	r22, r14
    4920:	7f 1d       	adc	r23, r15
    4922:	80 1f       	adc	r24, r16
    4924:	91 1f       	adc	r25, r17
    4926:	08 95       	ret

00004928 <__umulhisi3>:
    4928:	a2 9f       	mul	r26, r18
    492a:	b0 01       	movw	r22, r0
    492c:	b3 9f       	mul	r27, r19
    492e:	c0 01       	movw	r24, r0
    4930:	a3 9f       	mul	r26, r19
    4932:	70 0d       	add	r23, r0
    4934:	81 1d       	adc	r24, r1
    4936:	11 24       	eor	r1, r1
    4938:	91 1d       	adc	r25, r1
    493a:	b2 9f       	mul	r27, r18
    493c:	70 0d       	add	r23, r0
    493e:	81 1d       	adc	r24, r1
    4940:	11 24       	eor	r1, r1
    4942:	91 1d       	adc	r25, r1
    4944:	08 95       	ret

00004946 <strchr_P>:
    4946:	fc 01       	movw	r30, r24
    4948:	05 90       	lpm	r0, Z+
    494a:	06 16       	cp	r0, r22
    494c:	21 f0       	breq	.+8      	; 0x4956 <strchr_P+0x10>
    494e:	00 20       	and	r0, r0
    4950:	d9 f7       	brne	.-10     	; 0x4948 <strchr_P+0x2>
    4952:	c0 01       	movw	r24, r0
    4954:	08 95       	ret
    4956:	31 97       	sbiw	r30, 0x01	; 1
    4958:	cf 01       	movw	r24, r30
    495a:	08 95       	ret

0000495c <memcpy>:
    495c:	fb 01       	movw	r30, r22
    495e:	dc 01       	movw	r26, r24
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <memcpy+0xa>
    4962:	01 90       	ld	r0, Z+
    4964:	0d 92       	st	X+, r0
    4966:	41 50       	subi	r20, 0x01	; 1
    4968:	50 40       	sbci	r21, 0x00	; 0
    496a:	d8 f7       	brcc	.-10     	; 0x4962 <memcpy+0x6>
    496c:	08 95       	ret

0000496e <strcpy>:
    496e:	fb 01       	movw	r30, r22
    4970:	dc 01       	movw	r26, r24
    4972:	01 90       	ld	r0, Z+
    4974:	0d 92       	st	X+, r0
    4976:	00 20       	and	r0, r0
    4978:	e1 f7       	brne	.-8      	; 0x4972 <strcpy+0x4>
    497a:	08 95       	ret

0000497c <fdevopen>:
    497c:	0f 93       	push	r16
    497e:	1f 93       	push	r17
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	ec 01       	movw	r28, r24
    4986:	8b 01       	movw	r16, r22
    4988:	00 97       	sbiw	r24, 0x00	; 0
    498a:	31 f4       	brne	.+12     	; 0x4998 <fdevopen+0x1c>
    498c:	61 15       	cp	r22, r1
    498e:	71 05       	cpc	r23, r1
    4990:	19 f4       	brne	.+6      	; 0x4998 <fdevopen+0x1c>
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	38 c0       	rjmp	.+112    	; 0x4a08 <fdevopen+0x8c>
    4998:	6e e0       	ldi	r22, 0x0E	; 14
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 23 26 	call	0x4c46	; 0x4c46 <calloc>
    49a4:	fc 01       	movw	r30, r24
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	a1 f3       	breq	.-24     	; 0x4992 <fdevopen+0x16>
    49aa:	80 e8       	ldi	r24, 0x80	; 128
    49ac:	83 83       	std	Z+3, r24	; 0x03
    49ae:	01 15       	cp	r16, r1
    49b0:	11 05       	cpc	r17, r1
    49b2:	71 f0       	breq	.+28     	; 0x49d0 <fdevopen+0x54>
    49b4:	13 87       	std	Z+11, r17	; 0x0b
    49b6:	02 87       	std	Z+10, r16	; 0x0a
    49b8:	81 e8       	ldi	r24, 0x81	; 129
    49ba:	83 83       	std	Z+3, r24	; 0x03
    49bc:	80 91 78 06 	lds	r24, 0x0678
    49c0:	90 91 79 06 	lds	r25, 0x0679
    49c4:	89 2b       	or	r24, r25
    49c6:	21 f4       	brne	.+8      	; 0x49d0 <fdevopen+0x54>
    49c8:	f0 93 79 06 	sts	0x0679, r31
    49cc:	e0 93 78 06 	sts	0x0678, r30
    49d0:	20 97       	sbiw	r28, 0x00	; 0
    49d2:	c9 f0       	breq	.+50     	; 0x4a06 <fdevopen+0x8a>
    49d4:	d1 87       	std	Z+9, r29	; 0x09
    49d6:	c0 87       	std	Z+8, r28	; 0x08
    49d8:	83 81       	ldd	r24, Z+3	; 0x03
    49da:	82 60       	ori	r24, 0x02	; 2
    49dc:	83 83       	std	Z+3, r24	; 0x03
    49de:	80 91 7a 06 	lds	r24, 0x067A
    49e2:	90 91 7b 06 	lds	r25, 0x067B
    49e6:	89 2b       	or	r24, r25
    49e8:	71 f4       	brne	.+28     	; 0x4a06 <fdevopen+0x8a>
    49ea:	f0 93 7b 06 	sts	0x067B, r31
    49ee:	e0 93 7a 06 	sts	0x067A, r30
    49f2:	80 91 7c 06 	lds	r24, 0x067C
    49f6:	90 91 7d 06 	lds	r25, 0x067D
    49fa:	89 2b       	or	r24, r25
    49fc:	21 f4       	brne	.+8      	; 0x4a06 <fdevopen+0x8a>
    49fe:	f0 93 7d 06 	sts	0x067D, r31
    4a02:	e0 93 7c 06 	sts	0x067C, r30
    4a06:	cf 01       	movw	r24, r30
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	1f 91       	pop	r17
    4a0e:	0f 91       	pop	r16
    4a10:	08 95       	ret

00004a12 <fputc>:
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	cf 93       	push	r28
    4a18:	df 93       	push	r29
    4a1a:	18 2f       	mov	r17, r24
    4a1c:	09 2f       	mov	r16, r25
    4a1e:	eb 01       	movw	r28, r22
    4a20:	8b 81       	ldd	r24, Y+3	; 0x03
    4a22:	81 fd       	sbrc	r24, 1
    4a24:	03 c0       	rjmp	.+6      	; 0x4a2c <fputc+0x1a>
    4a26:	8f ef       	ldi	r24, 0xFF	; 255
    4a28:	9f ef       	ldi	r25, 0xFF	; 255
    4a2a:	20 c0       	rjmp	.+64     	; 0x4a6c <fputc+0x5a>
    4a2c:	82 ff       	sbrs	r24, 2
    4a2e:	10 c0       	rjmp	.+32     	; 0x4a50 <fputc+0x3e>
    4a30:	4e 81       	ldd	r20, Y+6	; 0x06
    4a32:	5f 81       	ldd	r21, Y+7	; 0x07
    4a34:	2c 81       	ldd	r18, Y+4	; 0x04
    4a36:	3d 81       	ldd	r19, Y+5	; 0x05
    4a38:	42 17       	cp	r20, r18
    4a3a:	53 07       	cpc	r21, r19
    4a3c:	7c f4       	brge	.+30     	; 0x4a5c <fputc+0x4a>
    4a3e:	e8 81       	ld	r30, Y
    4a40:	f9 81       	ldd	r31, Y+1	; 0x01
    4a42:	9f 01       	movw	r18, r30
    4a44:	2f 5f       	subi	r18, 0xFF	; 255
    4a46:	3f 4f       	sbci	r19, 0xFF	; 255
    4a48:	39 83       	std	Y+1, r19	; 0x01
    4a4a:	28 83       	st	Y, r18
    4a4c:	10 83       	st	Z, r17
    4a4e:	06 c0       	rjmp	.+12     	; 0x4a5c <fputc+0x4a>
    4a50:	e8 85       	ldd	r30, Y+8	; 0x08
    4a52:	f9 85       	ldd	r31, Y+9	; 0x09
    4a54:	81 2f       	mov	r24, r17
    4a56:	09 95       	icall
    4a58:	89 2b       	or	r24, r25
    4a5a:	29 f7       	brne	.-54     	; 0x4a26 <fputc+0x14>
    4a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    4a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    4a60:	2f 5f       	subi	r18, 0xFF	; 255
    4a62:	3f 4f       	sbci	r19, 0xFF	; 255
    4a64:	3f 83       	std	Y+7, r19	; 0x07
    4a66:	2e 83       	std	Y+6, r18	; 0x06
    4a68:	81 2f       	mov	r24, r17
    4a6a:	90 2f       	mov	r25, r16
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	1f 91       	pop	r17
    4a72:	0f 91       	pop	r16
    4a74:	08 95       	ret

00004a76 <printf>:
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	fe 01       	movw	r30, r28
    4a80:	35 96       	adiw	r30, 0x05	; 5
    4a82:	61 91       	ld	r22, Z+
    4a84:	71 91       	ld	r23, Z+
    4a86:	af 01       	movw	r20, r30
    4a88:	80 91 7a 06 	lds	r24, 0x067A
    4a8c:	90 91 7b 06 	lds	r25, 0x067B
    4a90:	0e 94 9c 22 	call	0x4538	; 0x4538 <vfprintf>
    4a94:	df 91       	pop	r29
    4a96:	cf 91       	pop	r28
    4a98:	08 95       	ret

00004a9a <putchar>:
    4a9a:	60 91 7a 06 	lds	r22, 0x067A
    4a9e:	70 91 7b 06 	lds	r23, 0x067B
    4aa2:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <fputc>

00004aa6 <puts>:
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	e0 91 7a 06 	lds	r30, 0x067A
    4ab2:	f0 91 7b 06 	lds	r31, 0x067B
    4ab6:	23 81       	ldd	r18, Z+3	; 0x03
    4ab8:	21 ff       	sbrs	r18, 1
    4aba:	1b c0       	rjmp	.+54     	; 0x4af2 <puts+0x4c>
    4abc:	ec 01       	movw	r28, r24
    4abe:	00 e0       	ldi	r16, 0x00	; 0
    4ac0:	10 e0       	ldi	r17, 0x00	; 0
    4ac2:	89 91       	ld	r24, Y+
    4ac4:	60 91 7a 06 	lds	r22, 0x067A
    4ac8:	70 91 7b 06 	lds	r23, 0x067B
    4acc:	db 01       	movw	r26, r22
    4ace:	18 96       	adiw	r26, 0x08	; 8
    4ad0:	ed 91       	ld	r30, X+
    4ad2:	fc 91       	ld	r31, X
    4ad4:	19 97       	sbiw	r26, 0x09	; 9
    4ad6:	88 23       	and	r24, r24
    4ad8:	31 f0       	breq	.+12     	; 0x4ae6 <puts+0x40>
    4ada:	09 95       	icall
    4adc:	89 2b       	or	r24, r25
    4ade:	89 f3       	breq	.-30     	; 0x4ac2 <puts+0x1c>
    4ae0:	0f ef       	ldi	r16, 0xFF	; 255
    4ae2:	1f ef       	ldi	r17, 0xFF	; 255
    4ae4:	ee cf       	rjmp	.-36     	; 0x4ac2 <puts+0x1c>
    4ae6:	8a e0       	ldi	r24, 0x0A	; 10
    4ae8:	09 95       	icall
    4aea:	89 2b       	or	r24, r25
    4aec:	11 f4       	brne	.+4      	; 0x4af2 <puts+0x4c>
    4aee:	c8 01       	movw	r24, r16
    4af0:	02 c0       	rjmp	.+4      	; 0x4af6 <puts+0x50>
    4af2:	8f ef       	ldi	r24, 0xFF	; 255
    4af4:	9f ef       	ldi	r25, 0xFF	; 255
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	08 95       	ret

00004b00 <sprintf>:
    4b00:	0f 93       	push	r16
    4b02:	1f 93       	push	r17
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	2e 97       	sbiw	r28, 0x0e	; 14
    4b0e:	0f b6       	in	r0, 0x3f	; 63
    4b10:	f8 94       	cli
    4b12:	de bf       	out	0x3e, r29	; 62
    4b14:	0f be       	out	0x3f, r0	; 63
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	0d 89       	ldd	r16, Y+21	; 0x15
    4b1a:	1e 89       	ldd	r17, Y+22	; 0x16
    4b1c:	86 e0       	ldi	r24, 0x06	; 6
    4b1e:	8c 83       	std	Y+4, r24	; 0x04
    4b20:	1a 83       	std	Y+2, r17	; 0x02
    4b22:	09 83       	std	Y+1, r16	; 0x01
    4b24:	8f ef       	ldi	r24, 0xFF	; 255
    4b26:	9f e7       	ldi	r25, 0x7F	; 127
    4b28:	9e 83       	std	Y+6, r25	; 0x06
    4b2a:	8d 83       	std	Y+5, r24	; 0x05
    4b2c:	ae 01       	movw	r20, r28
    4b2e:	47 5e       	subi	r20, 0xE7	; 231
    4b30:	5f 4f       	sbci	r21, 0xFF	; 255
    4b32:	6f 89       	ldd	r22, Y+23	; 0x17
    4b34:	78 8d       	ldd	r23, Y+24	; 0x18
    4b36:	ce 01       	movw	r24, r28
    4b38:	01 96       	adiw	r24, 0x01	; 1
    4b3a:	0e 94 9c 22 	call	0x4538	; 0x4538 <vfprintf>
    4b3e:	ef 81       	ldd	r30, Y+7	; 0x07
    4b40:	f8 85       	ldd	r31, Y+8	; 0x08
    4b42:	e0 0f       	add	r30, r16
    4b44:	f1 1f       	adc	r31, r17
    4b46:	10 82       	st	Z, r1
    4b48:	2e 96       	adiw	r28, 0x0e	; 14
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <__ultoa_invert>:
    4b5e:	fa 01       	movw	r30, r20
    4b60:	aa 27       	eor	r26, r26
    4b62:	28 30       	cpi	r18, 0x08	; 8
    4b64:	51 f1       	breq	.+84     	; 0x4bba <__ultoa_invert+0x5c>
    4b66:	20 31       	cpi	r18, 0x10	; 16
    4b68:	81 f1       	breq	.+96     	; 0x4bca <__ultoa_invert+0x6c>
    4b6a:	e8 94       	clt
    4b6c:	6f 93       	push	r22
    4b6e:	6e 7f       	andi	r22, 0xFE	; 254
    4b70:	6e 5f       	subi	r22, 0xFE	; 254
    4b72:	7f 4f       	sbci	r23, 0xFF	; 255
    4b74:	8f 4f       	sbci	r24, 0xFF	; 255
    4b76:	9f 4f       	sbci	r25, 0xFF	; 255
    4b78:	af 4f       	sbci	r26, 0xFF	; 255
    4b7a:	b1 e0       	ldi	r27, 0x01	; 1
    4b7c:	3e d0       	rcall	.+124    	; 0x4bfa <__ultoa_invert+0x9c>
    4b7e:	b4 e0       	ldi	r27, 0x04	; 4
    4b80:	3c d0       	rcall	.+120    	; 0x4bfa <__ultoa_invert+0x9c>
    4b82:	67 0f       	add	r22, r23
    4b84:	78 1f       	adc	r23, r24
    4b86:	89 1f       	adc	r24, r25
    4b88:	9a 1f       	adc	r25, r26
    4b8a:	a1 1d       	adc	r26, r1
    4b8c:	68 0f       	add	r22, r24
    4b8e:	79 1f       	adc	r23, r25
    4b90:	8a 1f       	adc	r24, r26
    4b92:	91 1d       	adc	r25, r1
    4b94:	a1 1d       	adc	r26, r1
    4b96:	6a 0f       	add	r22, r26
    4b98:	71 1d       	adc	r23, r1
    4b9a:	81 1d       	adc	r24, r1
    4b9c:	91 1d       	adc	r25, r1
    4b9e:	a1 1d       	adc	r26, r1
    4ba0:	20 d0       	rcall	.+64     	; 0x4be2 <__ultoa_invert+0x84>
    4ba2:	09 f4       	brne	.+2      	; 0x4ba6 <__ultoa_invert+0x48>
    4ba4:	68 94       	set
    4ba6:	3f 91       	pop	r19
    4ba8:	2a e0       	ldi	r18, 0x0A	; 10
    4baa:	26 9f       	mul	r18, r22
    4bac:	11 24       	eor	r1, r1
    4bae:	30 19       	sub	r19, r0
    4bb0:	30 5d       	subi	r19, 0xD0	; 208
    4bb2:	31 93       	st	Z+, r19
    4bb4:	de f6       	brtc	.-74     	; 0x4b6c <__ultoa_invert+0xe>
    4bb6:	cf 01       	movw	r24, r30
    4bb8:	08 95       	ret
    4bba:	46 2f       	mov	r20, r22
    4bbc:	47 70       	andi	r20, 0x07	; 7
    4bbe:	40 5d       	subi	r20, 0xD0	; 208
    4bc0:	41 93       	st	Z+, r20
    4bc2:	b3 e0       	ldi	r27, 0x03	; 3
    4bc4:	0f d0       	rcall	.+30     	; 0x4be4 <__ultoa_invert+0x86>
    4bc6:	c9 f7       	brne	.-14     	; 0x4bba <__ultoa_invert+0x5c>
    4bc8:	f6 cf       	rjmp	.-20     	; 0x4bb6 <__ultoa_invert+0x58>
    4bca:	46 2f       	mov	r20, r22
    4bcc:	4f 70       	andi	r20, 0x0F	; 15
    4bce:	40 5d       	subi	r20, 0xD0	; 208
    4bd0:	4a 33       	cpi	r20, 0x3A	; 58
    4bd2:	18 f0       	brcs	.+6      	; 0x4bda <__ultoa_invert+0x7c>
    4bd4:	49 5d       	subi	r20, 0xD9	; 217
    4bd6:	31 fd       	sbrc	r19, 1
    4bd8:	40 52       	subi	r20, 0x20	; 32
    4bda:	41 93       	st	Z+, r20
    4bdc:	02 d0       	rcall	.+4      	; 0x4be2 <__ultoa_invert+0x84>
    4bde:	a9 f7       	brne	.-22     	; 0x4bca <__ultoa_invert+0x6c>
    4be0:	ea cf       	rjmp	.-44     	; 0x4bb6 <__ultoa_invert+0x58>
    4be2:	b4 e0       	ldi	r27, 0x04	; 4
    4be4:	a6 95       	lsr	r26
    4be6:	97 95       	ror	r25
    4be8:	87 95       	ror	r24
    4bea:	77 95       	ror	r23
    4bec:	67 95       	ror	r22
    4bee:	ba 95       	dec	r27
    4bf0:	c9 f7       	brne	.-14     	; 0x4be4 <__ultoa_invert+0x86>
    4bf2:	00 97       	sbiw	r24, 0x00	; 0
    4bf4:	61 05       	cpc	r22, r1
    4bf6:	71 05       	cpc	r23, r1
    4bf8:	08 95       	ret
    4bfa:	9b 01       	movw	r18, r22
    4bfc:	ac 01       	movw	r20, r24
    4bfe:	0a 2e       	mov	r0, r26
    4c00:	06 94       	lsr	r0
    4c02:	57 95       	ror	r21
    4c04:	47 95       	ror	r20
    4c06:	37 95       	ror	r19
    4c08:	27 95       	ror	r18
    4c0a:	ba 95       	dec	r27
    4c0c:	c9 f7       	brne	.-14     	; 0x4c00 <__ultoa_invert+0xa2>
    4c0e:	62 0f       	add	r22, r18
    4c10:	73 1f       	adc	r23, r19
    4c12:	84 1f       	adc	r24, r20
    4c14:	95 1f       	adc	r25, r21
    4c16:	a0 1d       	adc	r26, r0
    4c18:	08 95       	ret

00004c1a <__eerd_byte_m128rfa1>:
    4c1a:	f9 99       	sbic	0x1f, 1	; 31
    4c1c:	fe cf       	rjmp	.-4      	; 0x4c1a <__eerd_byte_m128rfa1>
    4c1e:	92 bd       	out	0x22, r25	; 34
    4c20:	81 bd       	out	0x21, r24	; 33
    4c22:	f8 9a       	sbi	0x1f, 0	; 31
    4c24:	99 27       	eor	r25, r25
    4c26:	80 b5       	in	r24, 0x20	; 32
    4c28:	08 95       	ret

00004c2a <__eewr_byte_m128rfa1>:
    4c2a:	26 2f       	mov	r18, r22

00004c2c <__eewr_r18_m128rfa1>:
    4c2c:	f9 99       	sbic	0x1f, 1	; 31
    4c2e:	fe cf       	rjmp	.-4      	; 0x4c2c <__eewr_r18_m128rfa1>
    4c30:	1f ba       	out	0x1f, r1	; 31
    4c32:	92 bd       	out	0x22, r25	; 34
    4c34:	81 bd       	out	0x21, r24	; 33
    4c36:	20 bd       	out	0x20, r18	; 32
    4c38:	0f b6       	in	r0, 0x3f	; 63
    4c3a:	f8 94       	cli
    4c3c:	fa 9a       	sbi	0x1f, 2	; 31
    4c3e:	f9 9a       	sbi	0x1f, 1	; 31
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	01 96       	adiw	r24, 0x01	; 1
    4c44:	08 95       	ret

00004c46 <calloc>:
    4c46:	0f 93       	push	r16
    4c48:	1f 93       	push	r17
    4c4a:	cf 93       	push	r28
    4c4c:	df 93       	push	r29
    4c4e:	86 9f       	mul	r24, r22
    4c50:	80 01       	movw	r16, r0
    4c52:	87 9f       	mul	r24, r23
    4c54:	10 0d       	add	r17, r0
    4c56:	96 9f       	mul	r25, r22
    4c58:	10 0d       	add	r17, r0
    4c5a:	11 24       	eor	r1, r1
    4c5c:	c8 01       	movw	r24, r16
    4c5e:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <malloc>
    4c62:	ec 01       	movw	r28, r24
    4c64:	00 97       	sbiw	r24, 0x00	; 0
    4c66:	29 f0       	breq	.+10     	; 0x4c72 <calloc+0x2c>
    4c68:	a8 01       	movw	r20, r16
    4c6a:	60 e0       	ldi	r22, 0x00	; 0
    4c6c:	70 e0       	ldi	r23, 0x00	; 0
    4c6e:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <memset>
    4c72:	ce 01       	movw	r24, r28
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	1f 91       	pop	r17
    4c7a:	0f 91       	pop	r16
    4c7c:	08 95       	ret

00004c7e <malloc>:
    4c7e:	cf 93       	push	r28
    4c80:	df 93       	push	r29
    4c82:	82 30       	cpi	r24, 0x02	; 2
    4c84:	91 05       	cpc	r25, r1
    4c86:	10 f4       	brcc	.+4      	; 0x4c8c <malloc+0xe>
    4c88:	82 e0       	ldi	r24, 0x02	; 2
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	e0 91 80 06 	lds	r30, 0x0680
    4c90:	f0 91 81 06 	lds	r31, 0x0681
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	a0 e0       	ldi	r26, 0x00	; 0
    4c9a:	b0 e0       	ldi	r27, 0x00	; 0
    4c9c:	30 97       	sbiw	r30, 0x00	; 0
    4c9e:	39 f1       	breq	.+78     	; 0x4cee <malloc+0x70>
    4ca0:	40 81       	ld	r20, Z
    4ca2:	51 81       	ldd	r21, Z+1	; 0x01
    4ca4:	48 17       	cp	r20, r24
    4ca6:	59 07       	cpc	r21, r25
    4ca8:	b8 f0       	brcs	.+46     	; 0x4cd8 <malloc+0x5a>
    4caa:	48 17       	cp	r20, r24
    4cac:	59 07       	cpc	r21, r25
    4cae:	71 f4       	brne	.+28     	; 0x4ccc <malloc+0x4e>
    4cb0:	82 81       	ldd	r24, Z+2	; 0x02
    4cb2:	93 81       	ldd	r25, Z+3	; 0x03
    4cb4:	10 97       	sbiw	r26, 0x00	; 0
    4cb6:	29 f0       	breq	.+10     	; 0x4cc2 <malloc+0x44>
    4cb8:	13 96       	adiw	r26, 0x03	; 3
    4cba:	9c 93       	st	X, r25
    4cbc:	8e 93       	st	-X, r24
    4cbe:	12 97       	sbiw	r26, 0x02	; 2
    4cc0:	2c c0       	rjmp	.+88     	; 0x4d1a <malloc+0x9c>
    4cc2:	90 93 81 06 	sts	0x0681, r25
    4cc6:	80 93 80 06 	sts	0x0680, r24
    4cca:	27 c0       	rjmp	.+78     	; 0x4d1a <malloc+0x9c>
    4ccc:	21 15       	cp	r18, r1
    4cce:	31 05       	cpc	r19, r1
    4cd0:	31 f0       	breq	.+12     	; 0x4cde <malloc+0x60>
    4cd2:	42 17       	cp	r20, r18
    4cd4:	53 07       	cpc	r21, r19
    4cd6:	18 f0       	brcs	.+6      	; 0x4cde <malloc+0x60>
    4cd8:	a9 01       	movw	r20, r18
    4cda:	db 01       	movw	r26, r22
    4cdc:	01 c0       	rjmp	.+2      	; 0x4ce0 <malloc+0x62>
    4cde:	ef 01       	movw	r28, r30
    4ce0:	9a 01       	movw	r18, r20
    4ce2:	bd 01       	movw	r22, r26
    4ce4:	df 01       	movw	r26, r30
    4ce6:	02 80       	ldd	r0, Z+2	; 0x02
    4ce8:	f3 81       	ldd	r31, Z+3	; 0x03
    4cea:	e0 2d       	mov	r30, r0
    4cec:	d7 cf       	rjmp	.-82     	; 0x4c9c <malloc+0x1e>
    4cee:	21 15       	cp	r18, r1
    4cf0:	31 05       	cpc	r19, r1
    4cf2:	f9 f0       	breq	.+62     	; 0x4d32 <malloc+0xb4>
    4cf4:	28 1b       	sub	r18, r24
    4cf6:	39 0b       	sbc	r19, r25
    4cf8:	24 30       	cpi	r18, 0x04	; 4
    4cfa:	31 05       	cpc	r19, r1
    4cfc:	80 f4       	brcc	.+32     	; 0x4d1e <malloc+0xa0>
    4cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4d00:	9b 81       	ldd	r25, Y+3	; 0x03
    4d02:	61 15       	cp	r22, r1
    4d04:	71 05       	cpc	r23, r1
    4d06:	21 f0       	breq	.+8      	; 0x4d10 <malloc+0x92>
    4d08:	fb 01       	movw	r30, r22
    4d0a:	93 83       	std	Z+3, r25	; 0x03
    4d0c:	82 83       	std	Z+2, r24	; 0x02
    4d0e:	04 c0       	rjmp	.+8      	; 0x4d18 <malloc+0x9a>
    4d10:	90 93 81 06 	sts	0x0681, r25
    4d14:	80 93 80 06 	sts	0x0680, r24
    4d18:	fe 01       	movw	r30, r28
    4d1a:	32 96       	adiw	r30, 0x02	; 2
    4d1c:	44 c0       	rjmp	.+136    	; 0x4da6 <malloc+0x128>
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e2 0f       	add	r30, r18
    4d22:	f3 1f       	adc	r31, r19
    4d24:	81 93       	st	Z+, r24
    4d26:	91 93       	st	Z+, r25
    4d28:	22 50       	subi	r18, 0x02	; 2
    4d2a:	31 09       	sbc	r19, r1
    4d2c:	39 83       	std	Y+1, r19	; 0x01
    4d2e:	28 83       	st	Y, r18
    4d30:	3a c0       	rjmp	.+116    	; 0x4da6 <malloc+0x128>
    4d32:	20 91 7e 06 	lds	r18, 0x067E
    4d36:	30 91 7f 06 	lds	r19, 0x067F
    4d3a:	23 2b       	or	r18, r19
    4d3c:	41 f4       	brne	.+16     	; 0x4d4e <malloc+0xd0>
    4d3e:	20 91 02 02 	lds	r18, 0x0202
    4d42:	30 91 03 02 	lds	r19, 0x0203
    4d46:	30 93 7f 06 	sts	0x067F, r19
    4d4a:	20 93 7e 06 	sts	0x067E, r18
    4d4e:	20 91 00 02 	lds	r18, 0x0200
    4d52:	30 91 01 02 	lds	r19, 0x0201
    4d56:	21 15       	cp	r18, r1
    4d58:	31 05       	cpc	r19, r1
    4d5a:	41 f4       	brne	.+16     	; 0x4d6c <malloc+0xee>
    4d5c:	2d b7       	in	r18, 0x3d	; 61
    4d5e:	3e b7       	in	r19, 0x3e	; 62
    4d60:	40 91 04 02 	lds	r20, 0x0204
    4d64:	50 91 05 02 	lds	r21, 0x0205
    4d68:	24 1b       	sub	r18, r20
    4d6a:	35 0b       	sbc	r19, r21
    4d6c:	e0 91 7e 06 	lds	r30, 0x067E
    4d70:	f0 91 7f 06 	lds	r31, 0x067F
    4d74:	e2 17       	cp	r30, r18
    4d76:	f3 07       	cpc	r31, r19
    4d78:	a0 f4       	brcc	.+40     	; 0x4da2 <malloc+0x124>
    4d7a:	2e 1b       	sub	r18, r30
    4d7c:	3f 0b       	sbc	r19, r31
    4d7e:	28 17       	cp	r18, r24
    4d80:	39 07       	cpc	r19, r25
    4d82:	78 f0       	brcs	.+30     	; 0x4da2 <malloc+0x124>
    4d84:	ac 01       	movw	r20, r24
    4d86:	4e 5f       	subi	r20, 0xFE	; 254
    4d88:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8a:	24 17       	cp	r18, r20
    4d8c:	35 07       	cpc	r19, r21
    4d8e:	48 f0       	brcs	.+18     	; 0x4da2 <malloc+0x124>
    4d90:	4e 0f       	add	r20, r30
    4d92:	5f 1f       	adc	r21, r31
    4d94:	50 93 7f 06 	sts	0x067F, r21
    4d98:	40 93 7e 06 	sts	0x067E, r20
    4d9c:	81 93       	st	Z+, r24
    4d9e:	91 93       	st	Z+, r25
    4da0:	02 c0       	rjmp	.+4      	; 0x4da6 <malloc+0x128>
    4da2:	e0 e0       	ldi	r30, 0x00	; 0
    4da4:	f0 e0       	ldi	r31, 0x00	; 0
    4da6:	cf 01       	movw	r24, r30
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	08 95       	ret

00004dae <free>:
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <free+0xa>
    4db6:	87 c0       	rjmp	.+270    	; 0x4ec6 <free+0x118>
    4db8:	fc 01       	movw	r30, r24
    4dba:	32 97       	sbiw	r30, 0x02	; 2
    4dbc:	13 82       	std	Z+3, r1	; 0x03
    4dbe:	12 82       	std	Z+2, r1	; 0x02
    4dc0:	c0 91 80 06 	lds	r28, 0x0680
    4dc4:	d0 91 81 06 	lds	r29, 0x0681
    4dc8:	20 97       	sbiw	r28, 0x00	; 0
    4dca:	81 f4       	brne	.+32     	; 0x4dec <free+0x3e>
    4dcc:	20 81       	ld	r18, Z
    4dce:	31 81       	ldd	r19, Z+1	; 0x01
    4dd0:	28 0f       	add	r18, r24
    4dd2:	39 1f       	adc	r19, r25
    4dd4:	80 91 7e 06 	lds	r24, 0x067E
    4dd8:	90 91 7f 06 	lds	r25, 0x067F
    4ddc:	82 17       	cp	r24, r18
    4dde:	93 07       	cpc	r25, r19
    4de0:	79 f5       	brne	.+94     	; 0x4e40 <free+0x92>
    4de2:	f0 93 7f 06 	sts	0x067F, r31
    4de6:	e0 93 7e 06 	sts	0x067E, r30
    4dea:	6d c0       	rjmp	.+218    	; 0x4ec6 <free+0x118>
    4dec:	de 01       	movw	r26, r28
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	ae 17       	cp	r26, r30
    4df4:	bf 07       	cpc	r27, r31
    4df6:	50 f4       	brcc	.+20     	; 0x4e0c <free+0x5e>
    4df8:	12 96       	adiw	r26, 0x02	; 2
    4dfa:	4d 91       	ld	r20, X+
    4dfc:	5c 91       	ld	r21, X
    4dfe:	13 97       	sbiw	r26, 0x03	; 3
    4e00:	9d 01       	movw	r18, r26
    4e02:	41 15       	cp	r20, r1
    4e04:	51 05       	cpc	r21, r1
    4e06:	09 f1       	breq	.+66     	; 0x4e4a <free+0x9c>
    4e08:	da 01       	movw	r26, r20
    4e0a:	f3 cf       	rjmp	.-26     	; 0x4df2 <free+0x44>
    4e0c:	b3 83       	std	Z+3, r27	; 0x03
    4e0e:	a2 83       	std	Z+2, r26	; 0x02
    4e10:	40 81       	ld	r20, Z
    4e12:	51 81       	ldd	r21, Z+1	; 0x01
    4e14:	84 0f       	add	r24, r20
    4e16:	95 1f       	adc	r25, r21
    4e18:	8a 17       	cp	r24, r26
    4e1a:	9b 07       	cpc	r25, r27
    4e1c:	71 f4       	brne	.+28     	; 0x4e3a <free+0x8c>
    4e1e:	8d 91       	ld	r24, X+
    4e20:	9c 91       	ld	r25, X
    4e22:	11 97       	sbiw	r26, 0x01	; 1
    4e24:	84 0f       	add	r24, r20
    4e26:	95 1f       	adc	r25, r21
    4e28:	02 96       	adiw	r24, 0x02	; 2
    4e2a:	91 83       	std	Z+1, r25	; 0x01
    4e2c:	80 83       	st	Z, r24
    4e2e:	12 96       	adiw	r26, 0x02	; 2
    4e30:	8d 91       	ld	r24, X+
    4e32:	9c 91       	ld	r25, X
    4e34:	13 97       	sbiw	r26, 0x03	; 3
    4e36:	93 83       	std	Z+3, r25	; 0x03
    4e38:	82 83       	std	Z+2, r24	; 0x02
    4e3a:	21 15       	cp	r18, r1
    4e3c:	31 05       	cpc	r19, r1
    4e3e:	29 f4       	brne	.+10     	; 0x4e4a <free+0x9c>
    4e40:	f0 93 81 06 	sts	0x0681, r31
    4e44:	e0 93 80 06 	sts	0x0680, r30
    4e48:	3e c0       	rjmp	.+124    	; 0x4ec6 <free+0x118>
    4e4a:	d9 01       	movw	r26, r18
    4e4c:	13 96       	adiw	r26, 0x03	; 3
    4e4e:	fc 93       	st	X, r31
    4e50:	ee 93       	st	-X, r30
    4e52:	12 97       	sbiw	r26, 0x02	; 2
    4e54:	4d 91       	ld	r20, X+
    4e56:	5d 91       	ld	r21, X+
    4e58:	a4 0f       	add	r26, r20
    4e5a:	b5 1f       	adc	r27, r21
    4e5c:	ea 17       	cp	r30, r26
    4e5e:	fb 07       	cpc	r31, r27
    4e60:	79 f4       	brne	.+30     	; 0x4e80 <free+0xd2>
    4e62:	80 81       	ld	r24, Z
    4e64:	91 81       	ldd	r25, Z+1	; 0x01
    4e66:	84 0f       	add	r24, r20
    4e68:	95 1f       	adc	r25, r21
    4e6a:	02 96       	adiw	r24, 0x02	; 2
    4e6c:	d9 01       	movw	r26, r18
    4e6e:	11 96       	adiw	r26, 0x01	; 1
    4e70:	9c 93       	st	X, r25
    4e72:	8e 93       	st	-X, r24
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	93 81       	ldd	r25, Z+3	; 0x03
    4e78:	13 96       	adiw	r26, 0x03	; 3
    4e7a:	9c 93       	st	X, r25
    4e7c:	8e 93       	st	-X, r24
    4e7e:	12 97       	sbiw	r26, 0x02	; 2
    4e80:	e0 e0       	ldi	r30, 0x00	; 0
    4e82:	f0 e0       	ldi	r31, 0x00	; 0
    4e84:	8a 81       	ldd	r24, Y+2	; 0x02
    4e86:	9b 81       	ldd	r25, Y+3	; 0x03
    4e88:	00 97       	sbiw	r24, 0x00	; 0
    4e8a:	19 f0       	breq	.+6      	; 0x4e92 <free+0xe4>
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	ec 01       	movw	r28, r24
    4e90:	f9 cf       	rjmp	.-14     	; 0x4e84 <free+0xd6>
    4e92:	ce 01       	movw	r24, r28
    4e94:	02 96       	adiw	r24, 0x02	; 2
    4e96:	28 81       	ld	r18, Y
    4e98:	39 81       	ldd	r19, Y+1	; 0x01
    4e9a:	82 0f       	add	r24, r18
    4e9c:	93 1f       	adc	r25, r19
    4e9e:	20 91 7e 06 	lds	r18, 0x067E
    4ea2:	30 91 7f 06 	lds	r19, 0x067F
    4ea6:	28 17       	cp	r18, r24
    4ea8:	39 07       	cpc	r19, r25
    4eaa:	69 f4       	brne	.+26     	; 0x4ec6 <free+0x118>
    4eac:	30 97       	sbiw	r30, 0x00	; 0
    4eae:	29 f4       	brne	.+10     	; 0x4eba <free+0x10c>
    4eb0:	10 92 81 06 	sts	0x0681, r1
    4eb4:	10 92 80 06 	sts	0x0680, r1
    4eb8:	02 c0       	rjmp	.+4      	; 0x4ebe <free+0x110>
    4eba:	13 82       	std	Z+3, r1	; 0x03
    4ebc:	12 82       	std	Z+2, r1	; 0x02
    4ebe:	d0 93 7f 06 	sts	0x067F, r29
    4ec2:	c0 93 7e 06 	sts	0x067E, r28
    4ec6:	df 91       	pop	r29
    4ec8:	cf 91       	pop	r28
    4eca:	08 95       	ret

00004ecc <memset>:
    4ecc:	dc 01       	movw	r26, r24
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <memset+0x6>
    4ed0:	6d 93       	st	X+, r22
    4ed2:	41 50       	subi	r20, 0x01	; 1
    4ed4:	50 40       	sbci	r21, 0x00	; 0
    4ed6:	e0 f7       	brcc	.-8      	; 0x4ed0 <memset+0x4>
    4ed8:	08 95       	ret

00004eda <_exit>:
    4eda:	f8 94       	cli

00004edc <__stop_program>:
    4edc:	ff cf       	rjmp	.-2      	; 0x4edc <__stop_program>
