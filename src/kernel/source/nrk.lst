   1               		.file	"nrk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 313               	.global	nrk_int_disable
 315               	nrk_int_disable:
 316               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk.c **** *
   6:../../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk.c **** *
  10:../../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk.c **** *
  14:../../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk.c **** *
  19:../../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk.c **** *
  22:../../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../../src/kernel/source/nrk.c **** 
  28:../../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../../src/kernel/source/nrk.c **** 
  47:../../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 318               	.LM0:
 319               	.LFBB1:
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
  48:../../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 325               	.LM1:
 326               	/* #APP */
 327               	 ;  48 "../../../src/kernel/source/nrk.c" 1
 328 0000 F894      		cli
 329               		
 330               	 ;  0 "" 2
 331               	/* #NOAPP */
 332 0002 0895      		ret
 334               	.Lscope1:
 336               		.stabd	78,0,0
 338               	.global	nrk_int_enable
 340               	nrk_int_enable:
 341               		.stabd	46,0,0
  49:../../../src/kernel/source/nrk.c **** };
  50:../../../src/kernel/source/nrk.c **** 
  51:../../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 343               	.LM2:
 344               	.LFBB2:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
  52:../../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 350               	.LM3:
 351               	/* #APP */
 352               	 ;  52 "../../../src/kernel/source/nrk.c" 1
 353 0004 7894      		sei
 354               		
 355               	 ;  0 "" 2
 356               	/* #NOAPP */
 357 0006 0895      		ret
 359               	.Lscope2:
 361               		.stabd	78,0,0
 363               	.global	nrk_halt
 365               	nrk_halt:
 366               		.stabd	46,0,0
  53:../../../src/kernel/source/nrk.c **** };
  54:../../../src/kernel/source/nrk.c **** 
  55:../../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../../src/kernel/source/nrk.c **** 
  57:../../../src/kernel/source/nrk.c **** 
  58:../../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../../src/kernel/source/nrk.c **** {
 368               	.LM4:
 369               	.LFBB3:
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
  60:../../../src/kernel/source/nrk.c **** nrk_int_disable();
 375               	.LM5:
 376 0008 0E94 0000 		call nrk_int_disable
 377               	.L4:
 378 000c 00C0      		rjmp .L4
 380               	.Lscope3:
 382               		.stabd	78,0,0
 384               	.global	nrk_init
 386               	nrk_init:
 387               		.stabd	46,0,0
  61:../../../src/kernel/source/nrk.c **** while(1);
  62:../../../src/kernel/source/nrk.c **** }
  63:../../../src/kernel/source/nrk.c **** 
  64:../../../src/kernel/source/nrk.c **** /**
  65:../../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../../src/kernel/source/nrk.c ****  */
  71:../../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../../src/kernel/source/nrk.c **** {
 389               	.LM6:
 390               	.LFBB4:
 391 000e CF93      		push r28
 392 0010 DF93      		push r29
 393 0012 CDB7      		in r28,__SP_L__
 394 0014 DEB7      		in r29,__SP_H__
 395 0016 A397      		sbiw r28,35
 396 0018 0FB6      		in __tmp_reg__,__SREG__
 397 001a F894      		cli
 398 001c DEBF      		out __SP_H__,r29
 399 001e 0FBE      		out __SREG__,__tmp_reg__
 400 0020 CDBF      		out __SP_L__,r28
 401               	/* prologue: function */
 402               	/* frame size = 35 */
 403               	/* stack size = 37 */
 404               	.L__stack_usage = 37
  73:../../../src/kernel/source/nrk.c **** 	
  74:../../../src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../../src/kernel/source/nrk.c **** 	
  77:../../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
 406               	.LM7:
 407 0022 0E94 0000 		call nrk_signal_create
 408 0026 8093 0000 		sts nrk_wakeup_signal,r24
  79:../../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
 410               	.LM8:
 411 002a 8F3F      		cpi r24,lo8(-1)
 412 002c 01F4      		brne .L7
 414               	.LM9:
 415 002e 60E0      		ldi r22,0
 416 0030 8EE0      		ldi r24,lo8(14)
 417 0032 0E94 0000 		call nrk_kernel_error_add
 418               	.L7:
  80:../../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
 420               	.LM10:
 421 0036 0E94 0000 		call _nrk_startup_error
  83:../../../src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
 423               	.LM11:
 424 003a 80FF      		sbrs r24,0
 425 003c 00C0      		rjmp .L8
 427               	.LM12:
 428 003e 60E0      		ldi r22,0
 429 0040 86E0      		ldi r24,lo8(6)
 430 0042 0E94 0000 		call nrk_kernel_error_add
 431               	.L8:
  84:../../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../../src/kernel/source/nrk.c **** #endif
  87:../../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../../src/kernel/source/nrk.c **** #endif
  90:../../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../../src/kernel/source/nrk.c **** 
  92:../../../src/kernel/source/nrk.c **** 
  93:../../../src/kernel/source/nrk.c ****  
  94:../../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  95:../../../src/kernel/source/nrk.c **** #endif
  96:../../../src/kernel/source/nrk.c **** 
  97:../../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  98:../../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  99:../../../src/kernel/source/nrk.c ****    #endif
 100:../../../src/kernel/source/nrk.c **** 
 101:../../../src/kernel/source/nrk.c **** 
 102:../../../src/kernel/source/nrk.c **** 
 103:../../../src/kernel/source/nrk.c **** 
 104:../../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 105:../../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 106:../../../src/kernel/source/nrk.c ****    while(1)
 107:../../../src/kernel/source/nrk.c **** 	   {
 108:../../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 109:../../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 110:../../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 111:../../../src/kernel/source/nrk.c **** 	   }
 112:../../../src/kernel/source/nrk.c ****    #endif
 113:../../../src/kernel/source/nrk.c ****    #endif
 114:../../../src/kernel/source/nrk.c **** 
 115:../../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 116:../../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 117:../../../src/kernel/source/nrk.c **** 	{
 118:../../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 119:../../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 120:../../../src/kernel/source/nrk.c **** 	}
 121:../../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 122:../../../src/kernel/source/nrk.c ****     #endif
 123:../../../src/kernel/source/nrk.c ****   
 124:../../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 125:../../../src/kernel/source/nrk.c **** /* 
 126:../../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 127:../../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 129:../../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 130:../../../src/kernel/source/nrk.c ****     #else
 131:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 132:../../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 133:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 134:../../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 135:../../../src/kernel/source/nrk.c ****     #endif
 136:../../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 137:../../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 138:../../../src/kernel/source/nrk.c **** */	
 139:../../../src/kernel/source/nrk.c ****  
 140:../../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 141:../../../src/kernel/source/nrk.c **** 
 142:../../../src/kernel/source/nrk.c ****     
 143:../../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 433               	.LM13:
 434 0046 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 144:../../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 436               	.LM14:
 437 004a 1092 0000 		sts nrk_cur_task_TCB+1,__zero_reg__
 438 004e 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 145:../../../src/kernel/source/nrk.c ****     
 146:../../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 440               	.LM15:
 441 0052 1092 0000 		sts nrk_high_ready_TCB+1,__zero_reg__
 442 0056 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 147:../../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 444               	.LM16:
 445 005a 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 148:../../../src/kernel/source/nrk.c **** 
 149:../../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 150:../../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 151:../../../src/kernel/source/nrk.c ****    #endif
 152:../../../src/kernel/source/nrk.c **** 
 153:../../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 154:../../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 155:../../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 156:../../../src/kernel/source/nrk.c ****     #endif
 157:../../../src/kernel/source/nrk.c **** 
 158:../../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 447               	.LM17:
 448 005e 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 159:../../../src/kernel/source/nrk.c **** 
 160:../../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 161:../../../src/kernel/source/nrk.c **** {
 162:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 450               	.LM18:
 451 0062 8FEF      		ldi r24,lo8(-1)
 452 0064 8093 0000 		sts nrk_sem_list,r24
 163:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 454               	.LM19:
 455 0068 8093 0000 		sts nrk_sem_list+2,r24
 164:../../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 457               	.LM20:
 458 006c 8093 0000 		sts nrk_sem_list+1,r24
 165:../../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 166:../../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 167:../../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 168:../../../src/kernel/source/nrk.c ****     
 169:../../../src/kernel/source/nrk.c **** }        
 170:../../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 171:../../../src/kernel/source/nrk.c **** 	{
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 460               	.LM21:
 461 0070 93E6      		ldi r25,lo8(99)
 462 0072 9093 0000 		sts nrk_task_TCB+10,r25
 173:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 464               	.LM22:
 465 0076 8093 0000 		sts nrk_task_TCB+8,r24
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 467               	.LM23:
 468 007a 9093 0000 		sts nrk_task_TCB+53,r25
 470               	.LM24:
 471 007e 8093 0000 		sts nrk_task_TCB+51,r24
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 473               	.LM25:
 474 0082 9093 0000 		sts nrk_task_TCB+96,r25
 476               	.LM26:
 477 0086 8093 0000 		sts nrk_task_TCB+94,r24
 172:../../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 479               	.LM27:
 480 008a 9093 0000 		sts nrk_task_TCB+139,r25
 482               	.LM28:
 483 008e 8093 0000 		sts nrk_task_TCB+137,r24
 174:../../../src/kernel/source/nrk.c ****         }
 175:../../../src/kernel/source/nrk.c ****   
 176:../../../src/kernel/source/nrk.c ****        
 177:../../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 178:../../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 179:../../../src/kernel/source/nrk.c **** 	{
 180:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 485               	.LM29:
 486 0092 20E0      		ldi r18,lo8(_nrk_readyQ+5)
 487 0094 30E0      		ldi r19,hi8(_nrk_readyQ+5)
 488 0096 3093 0000 		sts _nrk_readyQ+3+1,r19
 489 009a 2093 0000 		sts _nrk_readyQ+3,r18
 181:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 491               	.LM30:
 492 009e 80E0      		ldi r24,lo8(_nrk_readyQ)
 493 00a0 90E0      		ldi r25,hi8(_nrk_readyQ)
 494 00a2 9093 0000 		sts _nrk_readyQ+6+1,r25
 495 00a6 8093 0000 		sts _nrk_readyQ+6,r24
 180:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 497               	.LM31:
 498 00aa 40E0      		ldi r20,lo8(_nrk_readyQ+10)
 499 00ac 50E0      		ldi r21,hi8(_nrk_readyQ+10)
 500 00ae 5093 0000 		sts _nrk_readyQ+8+1,r21
 501 00b2 4093 0000 		sts _nrk_readyQ+8,r20
 503               	.LM32:
 504 00b6 3093 0000 		sts _nrk_readyQ+11+1,r19
 505 00ba 2093 0000 		sts _nrk_readyQ+11,r18
 180:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 507               	.LM33:
 508 00be 20E0      		ldi r18,lo8(_nrk_readyQ+15)
 509 00c0 30E0      		ldi r19,hi8(_nrk_readyQ+15)
 510 00c2 3093 0000 		sts _nrk_readyQ+13+1,r19
 511 00c6 2093 0000 		sts _nrk_readyQ+13,r18
 513               	.LM34:
 514 00ca 5093 0000 		sts _nrk_readyQ+16+1,r21
 515 00ce 4093 0000 		sts _nrk_readyQ+16,r20
 180:../../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 517               	.LM35:
 518 00d2 40E0      		ldi r20,lo8(_nrk_readyQ+20)
 519 00d4 50E0      		ldi r21,hi8(_nrk_readyQ+20)
 520 00d6 5093 0000 		sts _nrk_readyQ+18+1,r21
 521 00da 4093 0000 		sts _nrk_readyQ+18,r20
 523               	.LM36:
 524 00de 3093 0000 		sts _nrk_readyQ+21+1,r19
 525 00e2 2093 0000 		sts _nrk_readyQ+21,r18
 182:../../../src/kernel/source/nrk.c **** 	}
 183:../../../src/kernel/source/nrk.c **** 	
 184:../../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 527               	.LM37:
 528 00e6 1092 0000 		sts _nrk_readyQ+1+1,__zero_reg__
 529 00ea 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 185:../../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 531               	.LM38:
 532 00ee 1092 0000 		sts _nrk_readyQ+23+1,__zero_reg__
 533 00f2 1092 0000 		sts _nrk_readyQ+23,__zero_reg__
 186:../../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 535               	.LM39:
 536 00f6 1092 0000 		sts _head_node+1,__zero_reg__
 537 00fa 1092 0000 		sts _head_node,__zero_reg__
 187:../../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 539               	.LM40:
 540 00fe 9093 0000 		sts _free_node+1,r25
 541 0102 8093 0000 		sts _free_node,r24
 188:../../../src/kernel/source/nrk.c **** 	
 189:../../../src/kernel/source/nrk.c **** 	
 190:../../../src/kernel/source/nrk.c **** 	
 191:../../../src/kernel/source/nrk.c **** 
 192:../../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 543               	.LM41:
 544 0106 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 545 0108 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 546 010a CE01      		movw r24,r28
 547 010c 0196      		adiw r24,1
 548 010e 0E94 0000 		call nrk_task_set_entry_function
 193:../../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 550               	.LM42:
 551 0112 40E8      		ldi r20,lo8(-128)
 552 0114 50E0      		ldi r21,0
 553 0116 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 554 0118 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 555 011a CE01      		movw r24,r28
 556 011c 0196      		adiw r24,1
 557 011e 0E94 0000 		call nrk_task_set_stk
 194:../../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 559               	.LM43:
 560 0122 85E5      		ldi r24,lo8(85)
 561 0124 8093 0000 		sts nrk_idle_task_stk,r24
 195:../../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 196:../../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 563               	.LM44:
 564 0128 1986      		std Y+9,__zero_reg__
 197:../../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 566               	.LM45:
 567 012a 1C86      		std Y+12,__zero_reg__
 568 012c 1D86      		std Y+13,__zero_reg__
 569 012e 1E86      		std Y+14,__zero_reg__
 570 0130 1F86      		std Y+15,__zero_reg__
 198:../../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 572               	.LM46:
 573 0132 188A      		std Y+16,__zero_reg__
 574 0134 198A      		std Y+17,__zero_reg__
 575 0136 1A8A      		std Y+18,__zero_reg__
 576 0138 1B8A      		std Y+19,__zero_reg__
 199:../../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 578               	.LM47:
 579 013a 1C8A      		std Y+20,__zero_reg__
 580 013c 1D8A      		std Y+21,__zero_reg__
 581 013e 1E8A      		std Y+22,__zero_reg__
 582 0140 1F8A      		std Y+23,__zero_reg__
 200:../../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 584               	.LM48:
 585 0142 188E      		std Y+24,__zero_reg__
 586 0144 198E      		std Y+25,__zero_reg__
 587 0146 1A8E      		std Y+26,__zero_reg__
 588 0148 1B8E      		std Y+27,__zero_reg__
 201:../../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 590               	.LM49:
 591 014a 1C8E      		std Y+28,__zero_reg__
 592 014c 1D8E      		std Y+29,__zero_reg__
 593 014e 1E8E      		std Y+30,__zero_reg__
 594 0150 1F8E      		std Y+31,__zero_reg__
 202:../../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 596               	.LM50:
 597 0152 18A2      		std Y+32,__zero_reg__
 598 0154 19A2      		std Y+33,__zero_reg__
 599 0156 1AA2      		std Y+34,__zero_reg__
 600 0158 1BA2      		std Y+35,__zero_reg__
 203:../../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 602               	.LM51:
 603 015a 81E0      		ldi r24,lo8(1)
 604 015c 8887      		std Y+8,r24
 204:../../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 606               	.LM52:
 607 015e 92E0      		ldi r25,lo8(2)
 608 0160 9A87      		std Y+10,r25
 205:../../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 610               	.LM53:
 611 0162 8B87      		std Y+11,r24
 206:../../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 613               	.LM54:
 614 0164 CE01      		movw r24,r28
 615 0166 0196      		adiw r24,1
 616 0168 0E94 0000 		call nrk_activate_task
 617               	/* epilogue start */
 207:../../../src/kernel/source/nrk.c **** 	
 208:../../../src/kernel/source/nrk.c **** }
 619               	.LM55:
 620 016c A396      		adiw r28,35
 621 016e 0FB6      		in __tmp_reg__,__SREG__
 622 0170 F894      		cli
 623 0172 DEBF      		out __SP_H__,r29
 624 0174 0FBE      		out __SREG__,__tmp_reg__
 625 0176 CDBF      		out __SP_L__,r28
 626 0178 DF91      		pop r29
 627 017a CF91      		pop r28
 628 017c 0895      		ret
 633               	.Lscope4:
 635               		.stabd	78,0,0
 637               	.global	nrk_start
 639               	nrk_start:
 640               		.stabd	46,0,0
 209:../../../src/kernel/source/nrk.c **** 
 210:../../../src/kernel/source/nrk.c **** 
 211:../../../src/kernel/source/nrk.c **** 
 212:../../../src/kernel/source/nrk.c **** 
 213:../../../src/kernel/source/nrk.c **** 
 214:../../../src/kernel/source/nrk.c **** 
 215:../../../src/kernel/source/nrk.c **** 
 216:../../../src/kernel/source/nrk.c **** 
 217:../../../src/kernel/source/nrk.c **** void nrk_start (void)
 218:../../../src/kernel/source/nrk.c **** {
 642               	.LM56:
 643               	.LFBB5:
 644               	/* prologue: function */
 645               	/* frame size = 0 */
 646               	/* stack size = 0 */
 647               	.L__stack_usage = 0
 649               	.LM57:
 650 017e C0E0      		ldi r28,lo8(nrk_task_TCB+8)
 651 0180 D0E0      		ldi r29,hi8(nrk_task_TCB+8)
 219:../../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 220:../../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 221:../../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 222:../../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 223:../../../src/kernel/source/nrk.c **** 
 224:../../../src/kernel/source/nrk.c **** 	/*
 225:../../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 226:../../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 227:../../../src/kernel/source/nrk.c **** 	*/
 228:../../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 229:../../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 653               	.LM58:
 654 0182 F12C      		mov r15,__zero_reg__
 655               	.L19:
 230:../../../src/kernel/source/nrk.c ****     {
 231:../../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 657               	.LM59:
 658 0184 D880      		ld r13,Y
 232:../../../src/kernel/source/nrk.c **** 	// only check activated tasks
 233:../../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 660               	.LM60:
 661 0186 8FEF      		ldi r24,lo8(-1)
 662 0188 D812      		cpse r13,r24
 663 018a 00C0      		rjmp .L13
 664               	.L17:
 229:../../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 666               	.LM61:
 667 018c F394      		inc r15
 668 018e AB96      		adiw r28,43
 669 0190 94E0      		ldi r25,lo8(4)
 670 0192 F912      		cpse r15,r25
 671 0194 00C0      		rjmp .L19
 234:../../../src/kernel/source/nrk.c **** 	{
 235:../../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 236:../../../src/kernel/source/nrk.c **** 		{
 237:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 238:../../../src/kernel/source/nrk.c **** 			{
 239:../../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 240:../../../src/kernel/source/nrk.c **** 
 241:../../../src/kernel/source/nrk.c **** 			}
 242:../../../src/kernel/source/nrk.c **** 		}
 243:../../../src/kernel/source/nrk.c **** 	}
 244:../../../src/kernel/source/nrk.c **** 
 245:../../../src/kernel/source/nrk.c ****     }
 246:../../../src/kernel/source/nrk.c **** 
 247:../../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 673               	.LM62:
 674 0196 0E94 0000 		call nrk_get_high_ready_task_ID
 248:../../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 676               	.LM63:
 677 019a 9BE2      		ldi r25,lo8(43)
 678 019c 8902      		muls r24,r25
 679 019e F001      		movw r30,r0
 680 01a0 1124      		clr __zero_reg__
 681 01a2 E050      		subi r30,lo8(-(nrk_task_TCB))
 682 01a4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 683 01a6 8285      		ldd r24,Z+10
 684 01a8 8093 0000 		sts nrk_high_ready_prio,r24
 249:../../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 686               	.LM64:
 687 01ac F093 0000 		sts nrk_cur_task_TCB+1,r31
 688 01b0 E093 0000 		sts nrk_cur_task_TCB,r30
 689 01b4 F093 0000 		sts nrk_high_ready_TCB+1,r31
 690 01b8 E093 0000 		sts nrk_high_ready_TCB,r30
 250:../../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 692               	.LM65:
 693 01bc 8093 0000 		sts nrk_cur_task_prio,r24
 251:../../../src/kernel/source/nrk.c **** 		
 252:../../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 253:../../../src/kernel/source/nrk.c **** 
 254:../../../src/kernel/source/nrk.c ****     /*
 255:../../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 256:../../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 257:../../../src/kernel/source/nrk.c ****     #else
 258:../../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 259:../../../src/kernel/source/nrk.c ****     #endif
 260:../../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 261:../../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 262:../../../src/kernel/source/nrk.c ****     
 263:../../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 264:../../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 265:../../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 266:../../../src/kernel/source/nrk.c **** */
 267:../../../src/kernel/source/nrk.c ****     nrk_target_start();
 695               	.LM66:
 696 01c0 0E94 0000 		call nrk_target_start
 268:../../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 698               	.LM67:
 699 01c4 0E94 0000 		call nrk_stack_pointer_init
 269:../../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 701               	.LM68:
 702 01c8 0E94 0000 		call nrk_start_high_ready_task
 703 01cc 00C0      		rjmp .L20
 704               	.L13:
 233:../../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 706               	.LM69:
 707 01ce 00E0      		ldi r16,lo8(nrk_task_TCB+8)
 708 01d0 10E0      		ldi r17,hi8(nrk_task_TCB+8)
 709 01d2 E12C      		mov r14,__zero_reg__
 710               	.L18:
 237:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 712               	.LM70:
 713 01d4 FE14      		cp r15,r14
 714 01d6 01F0      		breq .L16
 237:../../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 716               	.LM71:
 717 01d8 F801      		movw r30,r16
 718 01da 8081      		ld r24,Z
 719 01dc D812      		cpse r13,r24
 720 01de 00C0      		rjmp .L16
 239:../../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 722               	.LM72:
 723 01e0 6D2D      		mov r22,r13
 724 01e2 85E0      		ldi r24,lo8(5)
 725 01e4 0E94 0000 		call nrk_kernel_error_add
 726               	.L16:
 235:../../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 728               	.LM73:
 729 01e8 E394      		inc r14
 730 01ea 055D      		subi r16,-43
 731 01ec 1F4F      		sbci r17,-1
 732 01ee F4E0      		ldi r31,lo8(4)
 733 01f0 EF12      		cpse r14,r31
 734 01f2 00C0      		rjmp .L18
 735 01f4 00C0      		rjmp .L17
 736               	.L20:
 737 01f6 00C0      		rjmp .L20
 743               	.Lscope5:
 745               		.stabd	78,0,0
 753               	.global	nrk_TCB_init
 755               	nrk_TCB_init:
 756               		.stabd	46,0,0
 270:../../../src/kernel/source/nrk.c **** 
 271:../../../src/kernel/source/nrk.c ****     // you should never get here    
 272:../../../src/kernel/source/nrk.c ****     while(1);
 273:../../../src/kernel/source/nrk.c **** }
 274:../../../src/kernel/source/nrk.c **** 
 275:../../../src/kernel/source/nrk.c **** 
 276:../../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 277:../../../src/kernel/source/nrk.c **** {
 758               	.LM74:
 759               	.LFBB6:
 760 01f8 AF92      		push r10
 761 01fa BF92      		push r11
 762 01fc CF92      		push r12
 763 01fe DF92      		push r13
 764 0200 EF92      		push r14
 765 0202 FF92      		push r15
 766 0204 0F93      		push r16
 767 0206 1F93      		push r17
 768 0208 CF93      		push r28
 769 020a DF93      		push r29
 770 020c 1F92      		push __zero_reg__
 771 020e CDB7      		in r28,__SP_L__
 772 0210 DEB7      		in r29,__SP_H__
 773               	/* prologue: function */
 774               	/* frame size = 1 */
 775               	/* stack size = 11 */
 776               	.L__stack_usage = 11
 777 0212 5C01      		movw r10,r24
 778 0214 6B01      		movw r12,r22
 779 0216 7A01      		movw r14,r20
 278:../../../src/kernel/source/nrk.c **** 	
 279:../../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 280:../../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 781               	.LM75:
 782 0218 DC01      		movw r26,r24
 783 021a 1996      		adiw r26,9
 784 021c 8C91      		ld r24,X
 785 021e 1997      		sbiw r26,9
 786 0220 8230      		cpi r24,lo8(2)
 787 0222 01F0      		breq .L26
 281:../../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 789               	.LM76:
 790 0224 8091 0000 		lds r24,nrk_task_init_cnt
 791 0228 8C93      		st X,r24
 792 022a 00C0      		rjmp .L27
 793               	.L26:
 282:../../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 795               	.LM77:
 796 022c F501      		movw r30,r10
 797 022e 1082      		st Z,__zero_reg__
 798               	.L27:
 283:../../../src/kernel/source/nrk.c **** 
 284:../../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 800               	.LM78:
 801 0230 8091 0000 		lds r24,nrk_task_init_cnt
 802 0234 8430      		cpi r24,lo8(4)
 803 0236 00F0      		brlo .L28
 805               	.LM79:
 806 0238 60E0      		ldi r22,0
 807 023a 87E0      		ldi r24,lo8(7)
 808 023c 0E94 0000 		call nrk_kernel_error_add
 809               	.L28:
 285:../../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 811               	.LM80:
 812 0240 D501      		movw r26,r10
 813 0242 1996      		adiw r26,9
 814 0244 8C91      		ld r24,X
 815 0246 8230      		cpi r24,lo8(2)
 816 0248 01F0      		breq .L29
 818               	.LM81:
 819 024a 8091 0000 		lds r24,nrk_task_init_cnt
 820 024e 8F5F      		subi r24,lo8(-(1))
 821 0250 8093 0000 		sts nrk_task_init_cnt,r24
 822               	.L29:
 286:../../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 824               	.LM82:
 825 0254 8091 0000 		lds r24,nrk_task_init_cnt
 826 0258 8111      		cpse r24,__zero_reg__
 827 025a 00C0      		rjmp .L30
 829               	.LM83:
 830 025c 81E0      		ldi r24,lo8(1)
 831 025e 8093 0000 		sts nrk_task_init_cnt,r24
 832               	.L30:
 287:../../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 288:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 834               	.LM84:
 835 0262 F501      		movw r30,r10
 836 0264 3081      		ld r19,Z
 837 0266 2BE2      		ldi r18,lo8(43)
 838 0268 3203      		mulsu r19,r18
 839 026a F001      		movw r30,r0
 840 026c 1124      		clr __zero_reg__
 841 026e E050      		subi r30,lo8(-(nrk_task_TCB))
 842 0270 F040      		sbci r31,hi8(-(nrk_task_TCB))
 843 0272 D182      		std Z+1,r13
 844 0274 C082      		st Z,r12
 289:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 846               	.LM85:
 847 0276 D501      		movw r26,r10
 848 0278 1896      		adiw r26,8
 849 027a 8C91      		ld r24,X
 850 027c 1897      		sbiw r26,8
 851 027e 8287      		std Z+10,r24
 290:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 853               	.LM86:
 854 0280 3C91      		ld r19,X
 855 0282 3203      		mulsu r19,r18
 856 0284 F001      		movw r30,r0
 857 0286 1124      		clr __zero_reg__
 858 0288 E050      		subi r30,lo8(-(nrk_task_TCB))
 859 028a F040      		sbci r31,hi8(-(nrk_task_TCB))
 860 028c 83E0      		ldi r24,lo8(3)
 861 028e 8187      		std Z+9,r24
 291:../../../src/kernel/source/nrk.c ****     
 292:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 863               	.LM87:
 864 0290 3C91      		ld r19,X
 865 0292 3203      		mulsu r19,r18
 866 0294 F001      		movw r30,r0
 867 0296 1124      		clr __zero_reg__
 868 0298 E050      		subi r30,lo8(-(nrk_task_TCB))
 869 029a F040      		sbci r31,hi8(-(nrk_task_TCB))
 870 029c 3087      		std Z+8,r19
 293:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 872               	.LM88:
 873 029e 0C91      		ld r16,X
 874 02a0 0203      		mulsu r16,r18
 875 02a2 8001      		movw r16,r0
 876 02a4 1124      		clr __zero_reg__
 877 02a6 0050      		subi r16,lo8(-(nrk_task_TCB))
 878 02a8 1040      		sbci r17,hi8(-(nrk_task_TCB))
 879 02aa F801      		movw r30,r16
 880 02ac 1582      		std Z+5,__zero_reg__
 294:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
 882               	.LM89:
 883 02ae C501      		movw r24,r10
 884 02b0 0B96      		adiw r24,11
 885 02b2 0E94 0000 		call _nrk_time_to_ticks_long
 886 02b6 D801      		movw r26,r16
 887 02b8 9196      		adiw r26,33
 888 02ba 6D93      		st X+,r22
 889 02bc 7D93      		st X+,r23
 890 02be 8D93      		st X+,r24
 891 02c0 9C93      		st X,r25
 892 02c2 9497      		sbiw r26,33+3
 295:../../../src/kernel/source/nrk.c ****     if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
 894               	.LM90:
 895 02c4 F501      		movw r30,r10
 896 02c6 8385      		ldd r24,Z+11
 897 02c8 9485      		ldd r25,Z+12
 898 02ca A585      		ldd r26,Z+13
 899 02cc B685      		ldd r27,Z+14
 900 02ce 8833      		cpi r24,56
 901 02d0 9948      		sbci r25,-119
 902 02d2 A144      		sbci r26,65
 903 02d4 B105      		cpc r27,__zero_reg__
 904 02d6 00F0      		brlo .L31
 906               	.LM91:
 907 02d8 D501      		movw r26,r10
 908 02da 6C91      		ld r22,X
 909 02dc 86E1      		ldi r24,lo8(22)
 910 02de 0E94 0000 		call nrk_kernel_error_add
 911               	.L31:
 296:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
 913               	.LM92:
 914 02e2 F501      		movw r30,r10
 915 02e4 0081      		ld r16,Z
 916 02e6 1127      		clr r17
 917 02e8 07FD      		sbrc r16,7
 918 02ea 1095      		com r17
 919 02ec C501      		movw r24,r10
 920 02ee 4B96      		adiw r24,27
 921 02f0 0E94 0000 		call _nrk_time_to_ticks_long
 922 02f4 4BE2      		ldi r20,lo8(43)
 923 02f6 409F      		mul r20,r16
 924 02f8 F001      		movw r30,r0
 925 02fa 419F      		mul r20,r17
 926 02fc F00D      		add r31,r0
 927 02fe 1124      		clr __zero_reg__
 928 0300 E050      		subi r30,lo8(-(nrk_task_TCB))
 929 0302 F040      		sbci r31,hi8(-(nrk_task_TCB))
 930 0304 658B      		std Z+21,r22
 931 0306 768B      		std Z+22,r23
 932 0308 878B      		std Z+23,r24
 933 030a 908F      		std Z+24,r25
 297:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 935               	.LM93:
 936 030c D501      		movw r26,r10
 937 030e 2C91      		ld r18,X
 938 0310 2403      		mulsu r18,r20
 939 0312 6001      		movw r12,r0
 940 0314 1124      		clr __zero_reg__
 941 0316 F601      		movw r30,r12
 942 0318 E050      		subi r30,lo8(-(nrk_task_TCB))
 943 031a F040      		sbci r31,hi8(-(nrk_task_TCB))
 944 031c 6F01      		movw r12,r30
 945 031e 0589      		ldd r16,Z+21
 946 0320 1689      		ldd r17,Z+22
 947 0322 2789      		ldd r18,Z+23
 948 0324 308D      		ldd r19,Z+24
 949 0326 81A1      		ldd r24,Z+33
 950 0328 92A1      		ldd r25,Z+34
 951 032a A3A1      		ldd r26,Z+35
 952 032c B4A1      		ldd r27,Z+36
 953 032e 080F      		add r16,r24
 954 0330 191F      		adc r17,r25
 955 0332 2A1F      		adc r18,r26
 956 0334 3B1F      		adc r19,r27
 957 0336 018F      		std Z+25,r16
 958 0338 128F      		std Z+26,r17
 959 033a 238F      		std Z+27,r18
 960 033c 348F      		std Z+28,r19
 298:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
 962               	.LM94:
 963 033e C501      		movw r24,r10
 964 0340 4396      		adiw r24,19
 965 0342 4983      		std Y+1,r20
 966 0344 0E94 0000 		call _nrk_time_to_ticks_long
 967 0348 F601      		movw r30,r12
 968 034a 65A3      		std Z+37,r22
 969 034c 76A3      		std Z+38,r23
 970 034e 87A3      		std Z+39,r24
 971 0350 90A7      		std Z+40,r25
 299:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 973               	.LM95:
 974 0352 D501      		movw r26,r10
 975 0354 2C91      		ld r18,X
 976 0356 4981      		ldd r20,Y+1
 977 0358 2403      		mulsu r18,r20
 978 035a F001      		movw r30,r0
 979 035c 1124      		clr __zero_reg__
 980 035e E050      		subi r30,lo8(-(nrk_task_TCB))
 981 0360 F040      		sbci r31,hi8(-(nrk_task_TCB))
 982 0362 85A1      		ldd r24,Z+37
 983 0364 96A1      		ldd r25,Z+38
 984 0366 A7A1      		ldd r26,Z+39
 985 0368 B0A5      		ldd r27,Z+40
 986 036a 858F      		std Z+29,r24
 987 036c 968F      		std Z+30,r25
 988 036e A78F      		std Z+31,r26
 989 0370 B0A3      		std Z+32,r27
 300:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 991               	.LM96:
 992 0372 81E0      		ldi r24,lo8(1)
 993 0374 90E0      		ldi r25,0
 994 0376 92A7      		std Z+42,r25
 995 0378 81A7      		std Z+41,r24
 301:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 997               	.LM97:
 998 037a F382      		std Z+3,r15
 999 037c E282      		std Z+2,r14
 302:../../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 1001               	.LM98:
 1002 037e 81E0      		ldi r24,lo8(1)
 1003 0380 8487      		std Z+12,r24
 1004               	/* epilogue start */
 303:../../../src/kernel/source/nrk.c ****  
 304:../../../src/kernel/source/nrk.c **** 	
 305:../../../src/kernel/source/nrk.c **** 	         
 306:../../../src/kernel/source/nrk.c **** 
 307:../../../src/kernel/source/nrk.c **** 			
 308:../../../src/kernel/source/nrk.c ****     return NRK_OK;
 309:../../../src/kernel/source/nrk.c **** 
 310:../../../src/kernel/source/nrk.c **** }
 1006               	.LM99:
 1007 0382 0F90      		pop __tmp_reg__
 1008 0384 DF91      		pop r29
 1009 0386 CF91      		pop r28
 1010 0388 1F91      		pop r17
 1011 038a 0F91      		pop r16
 1012 038c FF90      		pop r15
 1013 038e EF90      		pop r14
 1014 0390 DF90      		pop r13
 1015 0392 CF90      		pop r12
 1016 0394 BF90      		pop r11
 1017 0396 AF90      		pop r10
 1018 0398 0895      		ret
 1020               	.Lscope6:
 1022               		.stabd	78,0,0
 1024               	.global	_nrk_timer_tick
 1026               	_nrk_timer_tick:
 1027               		.stabd	46,0,0
 311:../../../src/kernel/source/nrk.c **** 
 312:../../../src/kernel/source/nrk.c **** 
 313:../../../src/kernel/source/nrk.c **** /*
 314:../../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 315:../../../src/kernel/source/nrk.c ****  *
 316:../../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 317:../../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 318:../../../src/kernel/source/nrk.c ****  */
 319:../../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 320:../../../src/kernel/source/nrk.c **** {
 1029               	.LM100:
 1030               	.LFBB7:
 1031               	/* prologue: function */
 1032               	/* frame size = 0 */
 1033               	/* stack size = 0 */
 1034               	.L__stack_usage = 0
 321:../../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 322:../../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 323:../../../src/kernel/source/nrk.c **** 
 324:../../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 1036               	.LM101:
 1037 039a 0C94 0000 		jmp _nrk_scheduler
 1039               	.Lscope7:
 1041               		.stabd	78,0,0
 1043               	.global	nrk_version
 1045               	nrk_version:
 1046               		.stabd	46,0,0
 325:../../../src/kernel/source/nrk.c **** 
 326:../../../src/kernel/source/nrk.c ****   	return;
 327:../../../src/kernel/source/nrk.c **** }
 328:../../../src/kernel/source/nrk.c **** 
 329:../../../src/kernel/source/nrk.c **** 
 330:../../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 331:../../../src/kernel/source/nrk.c **** {
 1048               	.LM102:
 1049               	.LFBB8:
 1050               	/* prologue: function */
 1051               	/* frame size = 0 */
 1052               	/* stack size = 0 */
 1053               	.L__stack_usage = 0
 332:../../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 333:../../../src/kernel/source/nrk.c **** }
 1055               	.LM103:
 1056 039e 85E6      		ldi r24,lo8(101)
 1057 03a0 90E0      		ldi r25,0
 1058 03a2 0895      		ret
 1060               	.Lscope8:
 1062               		.stabd	78,0,0
 1063               		.comm	nrk_task_init_cnt,1,1
 1064               		.comm	error_num,1,1
 1065               		.comm	error_task,1,1
 1066               		.comm	next_next_wakeup,2,1
 1067               		.comm	_nrk_cpu_state,1,1
 1068               		.comm	nrk_system_time,8,1
 1069               		.comm	nrk_sem_list,3,1
 1070               		.comm	_nrk_resource_cnt,1,1
 1071               		.comm	nrk_high_ready_TCB,2,1
 1072               		.comm	nrk_high_ready_prio,1,1
 1073               		.comm	nrk_cur_task_TCB,2,1
 1074               		.comm	nrk_cur_task_prio,1,1
 1075               		.comm	nrk_wakeup_signal,1,1
 1076               		.comm	_head_node,2,1
 1077               		.comm	_free_node,2,1
 1078               		.comm	_nrk_readyQ,25,1
 1079               		.comm	nrk_task_TCB,172,1
 1080               		.comm	nrk_kernel_stk_ptr,2,1
 1081               		.comm	nrk_idle_task_stk,128,1
 1082               		.comm	_nrk_signal_list,4,1
 1104               	.Letext0:
 1105               		.ident	"GCC: (GNU) 4.8.2"
 1106               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk.c
     /tmp/ccgzPKsh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgzPKsh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgzPKsh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgzPKsh.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccgzPKsh.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgzPKsh.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgzPKsh.s:315    .text:0000000000000000 nrk_int_disable
     /tmp/ccgzPKsh.s:340    .text:0000000000000004 nrk_int_enable
     /tmp/ccgzPKsh.s:365    .text:0000000000000008 nrk_halt
     /tmp/ccgzPKsh.s:386    .text:000000000000000e nrk_init
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:00000000000000ac nrk_task_TCB
                            *COM*:0000000000000019 _nrk_readyQ
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000080 nrk_idle_task_stk
     /tmp/ccgzPKsh.s:639    .text:000000000000017e nrk_start
     /tmp/ccgzPKsh.s:755    .text:00000000000001f8 nrk_TCB_init
                            *COM*:0000000000000001 nrk_task_init_cnt
     /tmp/ccgzPKsh.s:1026   .text:000000000000039a _nrk_timer_tick
     /tmp/ccgzPKsh.s:1045   .text:000000000000039e nrk_version
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_signal_create
nrk_kernel_error_add
_nrk_startup_error
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
_nrk_time_to_ticks_long
_nrk_scheduler
__do_clear_bss
