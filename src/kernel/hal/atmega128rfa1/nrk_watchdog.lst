   1               		.file	"nrk_watchdog.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 315               	.global	nrk_watchdog_disable
 317               	nrk_watchdog_disable:
 318               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
   6:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  10:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  14:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  19:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  22:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *******************************************************************************/
  25:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  26:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <include.h>
  27:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk_watchdog.h>
  28:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk_error.h>
  29:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk.h>
  30:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <avr/wdt.h>
  31:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  32:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** void nrk_watchdog_disable()
  33:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 320               	.LM0:
 321               	.LFBB1:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
  34:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
 327               	.LM1:
 328 0000 0E94 0000 		call nrk_int_disable
 329               	.LBB6:
 330               	.LBB7:
  35:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_watchdog_reset();
  36:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
  37:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
  38:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = 0;
  39:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
  40:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  41:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  42:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** void nrk_watchdog_enable()
  43:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  44:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** // Enable watchdog with 1024K cycle timeout
  45:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** // No Interrupt Trigger
  46:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
  47:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_watchdog_reset();
  48:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
  49:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
  50:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
  51:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
  52:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  53:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  54:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** int8_t nrk_watchdog_check()
  55:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  56:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  57:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** if((MCUSR & (1<<WDRF))==0) return NRK_OK;
  58:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** return NRK_ERROR;
  59:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  60:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  61:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** inline void nrk_watchdog_reset()
  62:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  63:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** wdt_reset();
 332               	.LM2:
 333               	/* #APP */
 334               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 335 0004 A895      		wdr
 336               	 ;  0 "" 2
 337               	/* #NOAPP */
 338               	.LBE7:
 339               	.LBE6:
  36:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
 341               	.LM3:
 342 0006 84B7      		in r24,0x34
 343 0008 877F      		andi r24,lo8(-9)
 344 000a 84BF      		out 0x34,r24
  37:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
 346               	.LM4:
 347 000c E0E6      		ldi r30,lo8(96)
 348 000e F0E0      		ldi r31,0
 349 0010 8081      		ld r24,Z
 350 0012 8861      		ori r24,lo8(24)
 351 0014 8083      		st Z,r24
  38:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = 0;
 353               	.LM5:
 354 0016 1082      		st Z,__zero_reg__
  39:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
 356               	.LM6:
 357 0018 0C94 0000 		jmp nrk_int_enable
 359               	.Lscope1:
 361               		.stabd	78,0,0
 363               	.global	nrk_watchdog_enable
 365               	nrk_watchdog_enable:
 366               		.stabd	46,0,0
  43:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 368               	.LM7:
 369               	.LFBB2:
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
  46:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
 375               	.LM8:
 376 001c 0E94 0000 		call nrk_int_disable
 377               	.LBB8:
 378               	.LBB9:
 380               	.LM9:
 381               	/* #APP */
 382               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 383 0020 A895      		wdr
 384               	 ;  0 "" 2
 385               	/* #NOAPP */
 386               	.LBE9:
 387               	.LBE8:
  48:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
 389               	.LM10:
 390 0022 84B7      		in r24,0x34
 391 0024 877F      		andi r24,lo8(-9)
 392 0026 84BF      		out 0x34,r24
  49:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
 394               	.LM11:
 395 0028 E0E6      		ldi r30,lo8(96)
 396 002a F0E0      		ldi r31,0
 397 002c 8081      		ld r24,Z
 398 002e 8861      		ori r24,lo8(24)
 399 0030 8083      		st Z,r24
  50:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
 401               	.LM12:
 402 0032 8DE0      		ldi r24,lo8(13)
 403 0034 8083      		st Z,r24
  51:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
 405               	.LM13:
 406 0036 0C94 0000 		jmp nrk_int_enable
 408               	.Lscope2:
 410               		.stabd	78,0,0
 412               	.global	nrk_watchdog_check
 414               	nrk_watchdog_check:
 415               		.stabd	46,0,0
  55:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 417               	.LM14:
 418               	.LFBB3:
 419               	/* prologue: function */
 420               	/* frame size = 0 */
 421               	/* stack size = 0 */
 422               	.L__stack_usage = 0
  57:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** if((MCUSR & (1<<WDRF))==0) return NRK_OK;
 424               	.LM15:
 425 003a 04B6      		in __tmp_reg__,0x34
 426 003c 03FC      		sbrc __tmp_reg__,3
 427 003e 00C0      		rjmp .L5
 428 0040 81E0      		ldi r24,lo8(1)
 429 0042 0895      		ret
 430               	.L5:
  58:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** return NRK_ERROR;
 432               	.LM16:
 433 0044 8FEF      		ldi r24,lo8(-1)
  59:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
 435               	.LM17:
 436 0046 0895      		ret
 438               	.Lscope3:
 440               		.stabd	78,0,0
 442               	.global	nrk_watchdog_reset
 444               	nrk_watchdog_reset:
 445               		.stabd	46,0,0
  62:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 447               	.LM18:
 448               	.LFBB4:
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 0 */
 452               	.L__stack_usage = 0
 454               	.LM19:
 455               	/* #APP */
 456               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 457 0048 A895      		wdr
 458               	 ;  0 "" 2
 459               	/* #NOAPP */
 460 004a 0895      		ret
 462               	.Lscope4:
 464               		.stabd	78,0,0
 465               		.comm	nrk_kernel_stk_ptr,2,1
 466               		.comm	nrk_idle_task_stk,128,1
 467               		.comm	error_num,1,1
 468               		.comm	error_task,1,1
 469               		.comm	_nrk_signal_list,4,1
 476               	.Letext0:
 477               		.ident	"GCC: (GNU) 4.8.2"
 478               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_watchdog.c
     /tmp/ccf2uPG0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccf2uPG0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccf2uPG0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccf2uPG0.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccf2uPG0.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccf2uPG0.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccf2uPG0.s:317    .text:0000000000000000 nrk_watchdog_disable
     /tmp/ccf2uPG0.s:365    .text:000000000000001c nrk_watchdog_enable
     /tmp/ccf2uPG0.s:414    .text:000000000000003a nrk_watchdog_check
     /tmp/ccf2uPG0.s:444    .text:0000000000000048 nrk_watchdog_reset
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_int_disable
nrk_int_enable
__do_clear_bss
