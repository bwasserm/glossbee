   1               		.file	"nrk_status.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 302               	.global	_nrk_startup_error
 304               	_nrk_startup_error:
 305               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *
   6:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *
  10:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *
  14:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *
  19:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *
  22:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** *******************************************************************************/
  25:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  26:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  27:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** #include <include.h>
  28:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** #include <nrk_status.h>
  29:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** #include <nrk_error.h>
  30:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  31:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** uint8_t _nrk_startup_error()
  32:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** {
 307               	.LM0:
 308               	.LFBB1:
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
  33:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** uint8_t error;
  34:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** error=0;
  35:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // Use the timer settings that are normally 0 on reset to detect
  36:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // if the OS has reboot by accident
  37:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  38:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  39:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // Check Watchdog timer
  40:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if( (MCUSR & (1<<WDRF)) != 0 )
 314               	.LM1:
 315 0000 04B6      		in __tmp_reg__,0x34
 316 0002 03FC      		sbrc __tmp_reg__,3
 317 0004 00C0      		rjmp .L7
  34:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** error=0;
 319               	.LM2:
 320 0006 80E0      		ldi r24,0
 321 0008 00C0      		rjmp .L2
 322               	.L7:
  41:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	{
  42:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	// don't clear wdt
  43:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	error|=0x10;
 324               	.LM3:
 325 000a 80E1      		ldi r24,lo8(16)
 326               	.L2:
  44:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	}
  45:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  46:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  47:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // Check Brown Out 
  48:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if( (MCUSR & (1<<BORF)) != 0 )
 328               	.LM4:
 329 000c 04B6      		in __tmp_reg__,0x34
 330 000e 02FE      		sbrs __tmp_reg__,2
 331 0010 00C0      		rjmp .L3
  49:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	{
  50:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	MCUSR &= ~(1<<BORF);	
 333               	.LM5:
 334 0012 94B7      		in r25,0x34
 335 0014 9B7F      		andi r25,lo8(-5)
 336 0016 94BF      		out 0x34,r25
  51:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	// Only add brownout if it isn't the first bootup
  52:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	if( (MCUSR & (1<<PORF)) == 0 )
 338               	.LM6:
 339 0018 04B6      		in __tmp_reg__,0x34
 340 001a 00FE      		sbrs __tmp_reg__,0
  53:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 		error|=0x04;
 342               	.LM7:
 343 001c 8460      		ori r24,lo8(4)
 344               	.L3:
  54:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	}
  55:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  56:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // Check External Reset 
  57:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if( (MCUSR & (1<<EXTRF)) != 0 )
 346               	.LM8:
 347 001e 04B6      		in __tmp_reg__,0x34
 348 0020 01FE      		sbrs __tmp_reg__,1
 349 0022 00C0      		rjmp .L4
  58:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	{
  59:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	MCUSR &= ~(1<<EXTRF);	
 351               	.LM9:
 352 0024 94B7      		in r25,0x34
 353 0026 9D7F      		andi r25,lo8(-3)
 354 0028 94BF      		out 0x34,r25
  60:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	error|=0x02;
 356               	.LM10:
 357 002a 8260      		ori r24,lo8(2)
 358 002c 0895      		ret
 359               	.L4:
  61:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	}
  62:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  63:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // If any of the above errors went off, then the next errors will
  64:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // incorrectly be set!  So make sure to bail early!
  65:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if(error!=0) return error;
 361               	.LM11:
 362 002e 8111      		cpse r24,__zero_reg__
 363 0030 00C0      		rjmp .L5
  66:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  67:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // Check if normal power up state is set and then clear it
  68:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if( (MCUSR & (1<<PORF)) != 0 )
 365               	.LM12:
 366 0032 04B6      		in __tmp_reg__,0x34
 367 0034 00FE      		sbrs __tmp_reg__,0
 368 0036 00C0      		rjmp .L8
  69:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	{
  70:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	MCUSR &= ~(1<<PORF);
 370               	.LM13:
 371 0038 94B7      		in r25,0x34
 372 003a 9E7F      		andi r25,lo8(-2)
 373 003c 94BF      		out 0x34,r25
 374 003e 00C0      		rjmp .L6
 375               	.L8:
  71:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	}
  72:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	else {
  73:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	error|=0x01;
 377               	.LM14:
 378 0040 81E0      		ldi r24,lo8(1)
 379               	.L6:
  74:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 	}
  75:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  76:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** // check uart state 
  77:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** if((volatile uint8_t)TCCR2A!=0) error|=0x01;
 381               	.LM15:
 382 0042 9091 B000 		lds r25,176
 383 0046 9111      		cpse r25,__zero_reg__
 384 0048 81E0      		ldi r24,lo8(1)
 385               	.L5:
  78:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** 
  79:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** return error;
  80:../../../src/kernel/hal/atmega128rfa1/nrk_status.c **** }
 387               	.LM16:
 388 004a 0895      		ret
 393               	.Lscope1:
 395               		.stabd	78,0,0
 396               		.comm	error_num,1,1
 397               		.comm	error_task,1,1
 398               		.comm	_nrk_signal_list,4,1
 403               	.Letext0:
 404               		.ident	"GCC: (GNU) 4.8.2"
 405               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_status.c
     /tmp/ccW6bjWK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccW6bjWK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccW6bjWK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccW6bjWK.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccW6bjWK.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccW6bjWK.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccW6bjWK.s:304    .text:0000000000000000 _nrk_startup_error
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
__do_clear_bss
